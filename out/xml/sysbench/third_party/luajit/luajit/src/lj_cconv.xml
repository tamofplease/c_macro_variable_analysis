<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_cconv.c"><comment type="block">/*
** C type conversions.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_cdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_cconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ccallback.h"</cpp:file></cpp:include>

<comment type="block">/* -- Conversion errors --------------------------------------------------- */</comment>

<comment type="block">/* Bad conversion. */</comment>
<function><type><name>LJ_NORET</name> <specifier>static</specifier> <name>void</name></type> <name>cconv_err_conv</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
				    <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><call><name>lj_ctype_repr</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>ctype_typeid</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_FROMTV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>lj_obj_typename</name><index>[<expr><literal type="number">1</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><call><name>ctype_isnum</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>LUA_TNUMBER</name></expr> </then><else>:
			     <expr><ternary><condition><expr><call><name>ctype_isarray</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>LUA_TSTRING</name></expr> </then><else>: <expr><name>LUA_TNIL</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>strdata</name><argument_list>(<argument><expr><call><name>lj_ctype_repr</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>ctype_typeid</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CCF_GETARG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_argv</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>CCF_GETARG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LJ_ERR_FFI_BADCONV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_callerv</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_FFI_BADCONV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Bad conversion from TValue. */</comment>
<function><type><name>LJ_NORET</name> <specifier>static</specifier> <name>void</name></type> <name>cconv_err_convtv</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
				      <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><call><name>lj_ctype_repr</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>ctype_typeid</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>lj_typename</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CCF_GETARG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_argv</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>CCF_GETARG</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LJ_ERR_FFI_BADCONV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_callerv</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_FFI_BADCONV</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Initializer overflow. */</comment>
<function><type><name>LJ_NORET</name> <specifier>static</specifier> <name>void</name></type> <name>cconv_err_initov</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><call><name>lj_ctype_repr</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>ctype_typeid</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_err_callerv</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_FFI_INITOV</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- C type compatibility checks ----------------------------------------- */</comment>

<comment type="block">/* Get raw type and qualifiers for a child type. Resolves enums, too. */</comment>
<function><type><specifier>static</specifier> <name>CType</name> <modifier>*</modifier></type><name>cconv_childqual</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name> <modifier>*</modifier></type><name>qual</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_attrib</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTA_QUAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>qual</name> <operator>|=</operator> <name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ctype_isenum</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>qual</name> <operator>|=</operator> <operator>(</operator><name><name>ct</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>CTF_QUAL</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>ct</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check for compatible types when converting to a pointer.
** Note: these checks are more relaxed than what C99 mandates.
*/</comment>
<function><type><name>int</name></type> <name>lj_cconv_compatptr</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator> <operator>||</operator> <name>d</name> <operator>==</operator> <name>s</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CTInfo</name></type> <name>dqual</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>squal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cconv_childqual</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>cconv_childqual</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>squal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_SAME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>dqual</name> <operator>!=</operator> <name>squal</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different qualifiers. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_IGNQUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dqual</name> <operator>&amp;</operator> <name>squal</name><operator>)</operator> <operator>!=</operator> <name>squal</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Discarded qualifiers. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isvoid</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isvoid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Converting to/from void * is always ok. */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_type</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ctype_type</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
	<name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different type or different size. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isnum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>info</name></name> <operator>^</operator> <name><name>s</name><operator>-&gt;</operator><name>info</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>CTF_BOOL</name><operator>|</operator><name>CTF_FP</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different numeric types. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_ispointer</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Check child types for compatibility. */</comment>
      <return>return <expr><call><name>lj_cconv_compatptr</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name><operator>|</operator><name>CCF_SAME</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Must be exact same type for struct/union. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isfunc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* NYI: structural equality of functions. */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Types are compatible. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- C type to C type conversion ----------------------------------------- */</comment>

<comment type="block">/* Convert C type to C type. Caveat: expects to get the raw CType!
**
** Note: This is only used by the interpreter and not optimized at all.
** The JIT compiler will do a much better job specializing for each case.
*/</comment>
<function><type><name>void</name></type> <name>lj_cconv_ct_ct</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
		    <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTSize</name></type> <name>dsize</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ssize</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTInfo</name></type> <name>dinfo</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>, <decl><type ref="prev"/><name>sinfo</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmpptr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isenum</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctype_isenum</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>ctype_type</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CT_MAYCONVERT</name> <operator>||</operator> <call><name>ctype_type</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>CT_MAYCONVERT</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Some basic sanity checks. */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isnum</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>dsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isnum</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ssize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isbool</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>dsize</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>dsize</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isbool</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ssize</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>ssize</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isinteger</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><literal type="number">1u</literal><operator>&lt;&lt;</operator><call><name>lj_fls</name><argument_list>(<argument><expr><name>dsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ctype_isinteger</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><literal type="number">1u</literal><operator>&lt;&lt;</operator><call><name>lj_fls</name><argument_list>(<argument><expr><name>ssize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><call><name>cconv_idx2</name><argument_list>(<argument><expr><name>dinfo</name></expr></argument>, <argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <comment type="block">/* Destination is a bool. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>:</case>
    <comment type="block">/* Source operand is already normalized. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ssize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>|=</operator> <name><name>sp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
    </block_content>}</block>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>sp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></else></if_stmt>  <comment type="block">/* NYI: long double. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
    </block_content>}</block>

  <comment type="block">/* Destination is an integer. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>:</case>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>:</case>
  <label><name>conv_I_I</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>&gt;</operator> <name>ssize</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Zero-extend or sign-extend LSB. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_LE</name></expr></cpp:if>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>fill</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>sinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sp</name><index>[<expr><name>ssize</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>ssize</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name>dsize</name><operator>-</operator><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>fill</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>sinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>sp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name>dsize</name><operator>-</operator><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <operator>(</operator><name>dsize</name><operator>-</operator><name>ssize</name><operator>)</operator></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Copy LSB. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_LE</name></expr></cpp:if>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name> <operator>+</operator> <operator>(</operator><name>ssize</name><operator>-</operator><name>dsize</name><operator>)</operator></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>n</name></decl>;</decl_stmt>  <comment type="block">/* Always convert via double. */</comment>
  <label><name>conv_I_F</name>:</label>
    <comment type="block">/* Convert source to double. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></else></if_stmt>  <comment type="block">/* NYI: long double. */</comment>
    <comment type="block">/* Then convert double to integer. */</comment>
    <comment type="block">/* The conversion must exactly match the semantics of JIT-compiled code! */</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>dsize</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>dinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dsize</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <call><name>lj_num2u64</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <goto>goto <name>err_conv</name>;</goto>  <comment type="block">/* NYI: conversion to &gt;64 bit integers. */</comment>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
    </block_content>}</block>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>:</case>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sinfo</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <goto>goto <name>conv_I_F</name>;</goto>  <comment type="block">/* Just convert re. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>sinfo</name> <operator>=</operator> <call><name>CTINFO</name><argument_list>(<argument><expr><name>CT_NUM</name></expr></argument>, <argument><expr><name>CTF_UNSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>conv_I_I</name>;</goto>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>sinfo</name> <operator>=</operator> <call><name>CTINFO</name><argument_list>(<argument><expr><name>CT_NUM</name></expr></argument>, <argument><expr><name>CTF_UNSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssize</name> <operator>=</operator> <name>CTSIZE_PTR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpptr</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tmpptr</name></expr>;</expr_stmt>
    <goto>goto <name>conv_I_I</name>;</goto>

  <comment type="block">/* Destination is a floating-point number. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>:</case>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>n</name></decl>;</decl_stmt>  <comment type="block">/* Always convert via double. */</comment>
  <label><name>conv_F_I</name>:</label>
    <comment type="block">/* First convert source to double. */</comment>
    <comment type="block">/* The conversion must exactly match the semantics of JIT-compiled code! */</comment>
    <if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>ssize</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>sinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>sinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ssize</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ssize</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <goto>goto <name>err_conv</name>;</goto>  <comment type="block">/* NYI: conversion from &gt;64 bit integers. */</comment>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Convert double to destination. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>dsize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></else></if_stmt>  <comment type="block">/* NYI: long double. */</comment>
    <break>break;</break>
    </block_content>}</block>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>n</name></decl>;</decl_stmt>  <comment type="block">/* Always convert via double. */</comment>
  <label><name>conv_F_F</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <name>dsize</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>copyval</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block">/* Convert source to double. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>ssize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></else></if_stmt>  <comment type="block">/* NYI: long double. */</comment>
    <comment type="block">/* Convert double to destination. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>dsize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></else></if_stmt>  <comment type="block">/* NYI: long double. */</comment>
    <break>break;</break>
    </block_content>}</block>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>:</case>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sinfo</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <goto>goto <name>conv_F_F</name>;</goto>  <comment type="block">/* Ignore im, and convert from re. */</comment>

  <comment type="block">/* Destination is a complex number. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>:</case>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dinfo</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dsize</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>dsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Clear im. */</comment>
    <goto>goto <name>conv_F_I</name>;</goto>  <comment type="block">/* Convert to re. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>:</case>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dinfo</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dsize</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>dsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Clear im. */</comment>
    <goto>goto <name>conv_F_F</name>;</goto>  <comment type="block">/* Convert to re. */</comment>

  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>!=</operator> <name>ssize</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Different types: convert re/im separately. */</comment>
      <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lj_cconv_ct_ct</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_cconv_ct_ct</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>dp</name> <operator>+</operator> <name><name>dc</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>sp</name> <operator>+</operator> <name><name>sc</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>copyval</name>;</goto>  <comment type="block">/* Otherwise this is easy. */</comment>

  <comment type="block">/* Destination is a vector. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>:</case>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>:</case>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTSize</name></type> <name>esize</name></decl>;</decl_stmt>
    <comment type="block">/* First convert the scalar to the first element. */</comment>
    <expr_stmt><expr><call><name>lj_cconv_ct_ct</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Then replicate it to the other elements (splat). */</comment>
    <for>for <control>(<init><expr><name>sp</name> <operator>=</operator> <name>dp</name></expr><operator>,</operator> <expr><name>esize</name> <operator>=</operator> <name><name>dc</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>dsize</name> <operator>&gt;</operator> <name>esize</name></expr>;</condition> <incr><expr><name>dsize</name> <operator>-=</operator> <name>esize</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>esize</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <break>break;</break>
    </block_content>}</block>

  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>:</case>
    <comment type="block">/* Copy same-sized vectors, even for different lengths/element-types. */</comment>
    <if_stmt><if>if <condition>(<expr><name>dsize</name> <operator>!=</operator> <name>ssize</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <goto>goto <name>copyval</name>;</goto>

  <comment type="block">/* Destination is a pointer. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>dinfo</name> <operator>=</operator> <call><name>CTINFO</name><argument_list>(<argument><expr><name>CT_NUM</name></expr></argument>, <argument><expr><name>CTF_UNSIGNED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>conv_I_I</name>;</goto>

  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>F</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_FROMTV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block">/* The signed conversion is cheaper. x64 really has 47 bit pointers. */</comment>
    <expr_stmt><expr><name>dinfo</name> <operator>=</operator> <call><name>CTINFO</name><argument_list>(<argument><expr><name>CT_NUM</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>LJ_64</name> <operator>&amp;&amp;</operator> <name>dsize</name> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>CTF_UNSIGNED</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>conv_I_F</name>;</goto>

  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lj_cconv_compatptr</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>cdata_setptr</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><call><name>cdata_getptr</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>

  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>:</case>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lj_cconv_compatptr</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>cdata_setptr</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>

  <comment type="block">/* Destination is an array. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>CTF_VLA</name><operator>)</operator> <operator>||</operator> <name>dsize</name> <operator>!=</operator> <name>ssize</name> <operator>||</operator>
	<name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>CTSIZE_INVALID</name> <operator>||</operator> <operator>!</operator><call><name>lj_cconv_compatptr</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
    <goto>goto <name>copyval</name>;</goto>

  <comment type="block">/* Destination is a struct/union. */</comment>
  <case>case <expr><call><name>CCX</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>:</case>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CCF_CAST</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>CTF_VLA</name><operator>)</operator> <operator>||</operator> <name>d</name> <operator>!=</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>  <comment type="block">/* Must be exact same type. */</comment>
<label><name>copyval</name>:</label>  <comment type="block">/* Copy value. */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>dsize</name> <operator>==</operator> <name>ssize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>

  <default>default:</default>
  <label><name>err_conv</name>:</label>
    <expr_stmt><expr><call><name>cconv_err_conv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* -- C type to TValue conversion ----------------------------------------- */</comment>

<comment type="block">/* Convert C type to TValue. Caveat: expects to get the raw CType! */</comment>
<function><type><name>int</name></type> <name>lj_cconv_tv_ct</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>sid</name></decl></parameter>,
		   <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTInfo</name></type> <name>sinfo</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ctype_isnum</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ctype_isbool</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isinteger</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>copyval</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>LJ_DUALNUM</name> <operator>&amp;&amp;</operator> <call><name>ctype_isinteger</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>lj_cconv_ct_ct</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>CTID_INT32</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>,
		       <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sinfo</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>lj_cconv_ct_ct</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>CTID_DOUBLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>,
		       <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Numbers are NOT canonicalized here! Beware of uninitialized data. */</comment>
	<expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>*</operator><name>sp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>sp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cts</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tmptv2</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Remember for trace recorder. */</comment>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isrefarray</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isstruct</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Create reference. */</comment>
    <expr_stmt><expr><call><name>setcdataV</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><call><name>lj_cdata_newref</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Need GC step. */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>GCcdata</name> <modifier>*</modifier></type><name>cd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTSize</name></type> <name>sz</name></decl>;</decl_stmt>
  <label><name>copyval</name>:</label>  <comment type="block">/* Copy value. */</comment>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>sz</name> <operator>!=</operator> <name>CTSIZE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Attributes are stripped, qualifiers are kept (but mostly ignored). */</comment>
    <expr_stmt><expr><name>cd</name> <operator>=</operator> <call><name>lj_cdata_new</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_typeid</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setcdataV</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>cdataptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Need GC step. */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert bitfield to TValue. */</comment>
<function><type><name>int</name></type> <name>lj_cconv_tv_bf</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTInfo</name></type> <name>info</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTSize</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>bsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ctype_isbitfield</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NYI: packed bitfields may cause misaligned reads. */</comment>
  <switch>switch <condition>(<expr><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt> <break>break;</break>
  <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
  <comment type="block">/* Check if a packed bitfield crosses a container boundary. */</comment>
  <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>ctype_bitpos</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bsz</name> <operator>=</operator> <call><name>ctype_bitbsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>bsz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bsz</name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>*</operator><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>bsz</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>*</operator><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_FFI_NYIPACKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CTSize</name></type> <name>shift</name> <init>= <expr><literal type="number">32</literal> <operator>-</operator> <name>bsz</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><name>pos</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name><operator>-</operator><name>pos</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>LJ_DUALNUM</name> <operator>||</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>pos</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>bsz</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cts</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tmptv2</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Remember for trace recorder. */</comment>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* No GC step needed. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- TValue to C type conversion ----------------------------------------- */</comment>

<comment type="block">/* Convert table to array. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cconv_array_tab</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
			    <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Array element type. */</comment>
  <decl_stmt><decl><type><name>CTSize</name></type> <name>size</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>esize</name> <init>= <expr><name><name>dc</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><call><name>lj_tab_getint</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tv</name> <operator>||</operator> <call><name>tvisnil</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Try again for 1-based tables. */</comment>
      <break>break;</break>  <comment type="block">/* Stop at first nil. */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>cconv_err_initov</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dp</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>esize</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>CTSIZE_INVALID</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Only fill up arrays with known size. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>==</operator> <name>esize</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Replicate a single element. */</comment>
      <for>for <control>(<init>;</init> <condition><expr><name>ofs</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>ofs</name> <operator>+=</operator> <name>esize</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Otherwise fill the remainder with zero. */</comment>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert table to sub-struct/union. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cconv_substruct_tab</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
				<parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>sib</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>df</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>df</name><operator>-&gt;</operator><name>sib</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isfield</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isbitfield</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>ip</name></expr></init></decl>, <decl><type ref="prev"/><name>iz</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Ignore unnamed fields. */</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <label><name>retry</name>:</label>
	<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><call><name>lj_tab_getint</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tv</name> <operator>||</operator> <call><name>tvisnil</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>retry</name>;</goto> </block_content>}</block></if></if_stmt>  <comment type="block">/* 1-based tables. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>iz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <goto>goto <name>tryname</name>;</goto> </block_content>}</block></if></if_stmt>  <comment type="block">/* Init named fields. */</comment>
	  <break>break;</break>  <comment type="block">/* Stop at first nil. */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
      <label><name>tryname</name>:</label>
	<expr_stmt><expr><name>tv</name> <operator>=</operator> <operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><call><name>lj_tab_getstr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>gco2str</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tv</name> <operator>||</operator> <call><name>tvisnil</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isfield</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dp</name><operator>+</operator><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_cconv_bf_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>dp</name><operator>+</operator><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>CTF_UNION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isxattrib</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>CTA_SUBTYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cconv_substruct_tab</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name>dp</name><operator>+</operator><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>  <comment type="block">/* Ignore all other entries in the chain. */</comment>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Convert table to struct/union. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cconv_struct_tab</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
			     <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Much simpler to clear the struct first. */</comment>
  <expr_stmt><expr><call><name>cconv_substruct_tab</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert TValue to C type. Caveat: expects to get the raw CType! */</comment>
<function><type><name>void</name></type> <name>lj_cconv_ct_tv</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
		    <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>sid</name> <init>= <expr><name>CTID_P_VOID</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmpptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>tmpbool</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>tmpptr</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sid</name> <operator>=</operator> <name>CTID_INT32</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CCF_FROMTV</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sid</name> <operator>=</operator> <name>CTID_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CCF_FROMTV</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tviscdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>cdataptr</name><argument_list>(<argument><expr><call><name>cdataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>cdataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ctypeid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Resolve reference for value. */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>CTSIZE_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>ctype_cid</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctype_raw</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isfunc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>lj_ctype_intern</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>CTINFO</name><argument_list>(<argument><expr><name>CT_PTR</name></expr></argument>, <argument><expr><name>CTALIGN_PTR</name><operator>|</operator><name>sid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CTSIZE_PTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isenum</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <goto>goto <name>doconv</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isenum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Match string against enum constant. */</comment>
      <decl_stmt><decl><type><name>CTSize</name></type> <name>ofs</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>cct</name> <init>= <expr><call><name>lj_ctype_getfield</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ofs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cct</name> <operator>||</operator> <operator>!</operator><call><name>ctype_isconstval</name><argument_list>(<argument><expr><name><name>cct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>cct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>ctype_cid</name><argument_list>(<argument><expr><name><name>cct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isrefarray</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Copy string to array. */</comment>
      <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CTSize</name></type> <name>sz</name> <init>= <expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ctype_isinteger</name><argument_list>(<argument><expr><name><name>dc</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>dc</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>err_conv</name>;</goto></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Otherwise pass it as a const char[]. */</comment>
      <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sid</name> <operator>=</operator> <name>CTID_A_CCHAR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CCF_FROMTV</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvistab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isarray</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cconv_array_tab</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cconv_struct_tab</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <goto>goto <name>err_conv</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisbool</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmpbool</name> <operator>=</operator> <call><name>boolV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <operator>&amp;</operator><name>tmpbool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sid</name> <operator>=</operator> <name>CTID_BOOL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmpptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CCF_FROMTV</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisudata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCudata</name> <modifier>*</modifier></type><name>ud</name> <init>= <expr><call><name>udataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tmpptr</name> <operator>=</operator> <call><name>uddata</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ud</name><operator>-&gt;</operator><name>udtype</name></name> <operator>==</operator> <name>UDTYPE_IO_FILE</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>tmpptr</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>tmpptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvislightud</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmpptr</name> <operator>=</operator> <call><name>lightudV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_ccallback_new</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>err_conv</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
  <label><name>err_conv</name>:</label>
    <expr_stmt><expr><call><name>cconv_err_convtv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>doconv</name>:</label>
  <if_stmt><if>if <condition>(<expr><call><name>ctype_isenum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_cconv_ct_ct</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Convert TValue to bitfield. */</comment>
<function><type><name>void</name></type> <name>lj_cconv_bf_tv</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTInfo</name></type> <name>info</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTSize</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>bsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ctype_isbitfield</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>tmpbool</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ctype_bitbsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>CTID_BOOL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbool</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>tmpbool</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>CTypeID</name></type> <name>did</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><name>CTID_UINT32</name></expr> </then><else>: <expr><name>CTID_INT32</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>ctype_bitpos</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bsz</name> <operator>=</operator> <call><name>ctype_bitbsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>bsz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bsz</name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>*</operator><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Check if a packed bitfield crosses a container boundary. */</comment>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>bsz</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>*</operator><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_FFI_NYIPACKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>bsz</name><operator>)</operator> <operator>-</operator> <literal type="number">1u</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>pos</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
  <comment type="block">/* NYI: packed bitfields may cause misaligned reads/writes. */</comment>
  <switch>switch <condition>(<expr><call><name>ctype_bitcsz</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>&amp;</operator> <operator>~</operator><name>mask</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt> <break>break;</break>
  <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* -- Initialize C type with TValues -------------------------------------- */</comment>

<comment type="block">/* Initialize an array with TValues. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cconv_array_init</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>CTSize</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
			     <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Array element type. */</comment>
  <decl_stmt><decl><type><name>CTSize</name></type> <name>ofs</name></decl>, <decl><type ref="prev"/><name>esize</name> <init>= <expr><name><name>dc</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name><operator>*</operator><name>esize</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>cconv_err_initov</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ofs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ofs</name> <operator>+=</operator> <name>esize</name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>dp</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><name>o</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>==</operator> <name>esize</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Replicate a single element. */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>ofs</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>ofs</name> <operator>+=</operator> <name>esize</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>esize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Otherwise fill the remainder with zero. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialize a sub-struct/union with TValues. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cconv_substruct_init</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
				 <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>MSize</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>sib</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>df</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>df</name><operator>-&gt;</operator><name>sib</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isfield</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isbitfield</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>MSize</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>ip</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>  <comment type="block">/* Ignore unnamed fields. */</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isfield</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dp</name><operator>+</operator><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>o</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_cconv_bf_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>dp</name><operator>+</operator><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>o</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>CTF_UNION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isxattrib</name><argument_list>(<argument><expr><name><name>df</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>CTA_SUBTYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cconv_substruct_init</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>dp</name><operator>+</operator><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>CTF_UNION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>  <comment type="block">/* Ignore all other entries in the chain. */</comment>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Initialize a struct/union with TValues. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cconv_struct_init</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>CTSize</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>,
			      <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Much simpler to clear the struct first. */</comment>
  <expr_stmt><expr><call><name>cconv_substruct_init</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>cconv_err_initov</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Check whether to use a multi-value initializer.
** This is true if an aggregate is to be initialized with a value.
** Valarrays are treated as values here so ct_tv handles (V|C, I|F).
*/</comment>
<function><type><name>int</name></type> <name>lj_cconv_multi_init</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>ctype_isrefarray</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Destination is not an aggregate. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tvistab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Initializer is not a value. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tviscdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>lj_ctype_rawref</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>cdataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ctypeid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Source and destination are identical aggregates. */</comment>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Otherwise the initializer is a value. */</comment>
</block_content>}</block></function>

<comment type="block">/* Initialize C type with TValues. Caveat: expects to get the raw CType! */</comment>
<function><type><name>void</name></type> <name>lj_cconv_ct_init</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>CTSize</name></type> <name>sz</name></decl></parameter>,
		      <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>lj_cconv_multi_init</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ctype_isarray</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Also handles valarray init with len&gt;1. */</comment>
    <expr_stmt><expr><call><name>cconv_array_init</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>cconv_struct_init</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>cconv_err_initov</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
