<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_strfmt_num.c"><comment type="block">/*
** String formatting for floating-point numbers.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
** Contributed by Peter Cawley.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_strfmt_num_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>

<comment type="block">/* -- Precomputed tables -------------------------------------------------- */</comment>

<comment type="block">/* Rescale factors to push the exponent of a number towards zero. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESCALE_EXPONENTS</name><parameter_list>(<parameter><type><name>P</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>P(308), P(289), P(270), P(250), P(231), P(212), P(193), P(173), P(154), \
  P(135), P(115), P(96), P(77), P(58), P(38), P(0), P(0), P(0), N(39), N(58), \
  N(77), N(96), N(116), N(135), N(154), N(174), N(193), N(212), N(231), \
  N(251), N(270), N(289)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_E_P</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1e+0 ## X</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_E_N</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1e-0 ## X</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>rescale_e</name><index>[]</index></name> <init>= <expr><block>{ <macro><name>RESCALE_EXPONENTS</name><argument_list>(<argument>-</argument>, <argument>+</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>rescale_n</name><index>[]</index></name> <init>= <expr><block>{ <macro><name>RESCALE_EXPONENTS</name><argument_list>(<argument>ONE_E_P</argument>, <argument>ONE_E_N</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONE_E_N</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONE_E_P</name></cpp:undef>

<comment type="block">/*
** For p in range -70 through 57, this table encodes pairs (m, e) such that
** 4*2^p &lt;= (uint8_t)m*10^e, and is the smallest value for which this holds.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>four_ulp_m_e</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">34</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>,
  <expr><operator>-</operator><literal type="number">82</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">117</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">33</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>,
  <expr><literal type="number">45</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">78</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">113</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>,
  <expr><literal type="number">114</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">28</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">74</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,
  <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">69</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>,
  <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">65</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>-</operator><literal type="number">103</literal></expr>,
  <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">60</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>,
  <expr><literal type="number">16</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>,
  <expr><literal type="number">32</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">128</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">51</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">92</literal></expr>, <expr><literal type="number">4</literal></expr>,
  <expr><literal type="number">33</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">124</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">34</literal></expr>,
  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">41</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">84</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">10</literal></expr>,
  <expr><literal type="number">69</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">118</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">80</literal></expr>, <expr><literal type="number">13</literal></expr>,
  <expr><literal type="number">36</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">115</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">30</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">15</literal></expr>,
  <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">17</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* min(2^32-1, 10^e-1) for e in range 0 through 10 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>ndigits_dec_threshold</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9U</literal></expr>, <expr><literal type="number">99U</literal></expr>, <expr><literal type="number">999U</literal></expr>, <expr><literal type="number">9999U</literal></expr>, <expr><literal type="number">99999U</literal></expr>, <expr><literal type="number">999999U</literal></expr>,
  <expr><literal type="number">9999999U</literal></expr>, <expr><literal type="number">99999999U</literal></expr>, <expr><literal type="number">999999999U</literal></expr>, <expr><literal type="number">0xffffffffU</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* -- Helper functions ---------------------------------------------------- */</comment>

<comment type="block">/* Compute the number of digits in the decimal representation of x. */</comment>
<function><type><specifier>static</specifier> <name>MSize</name></type> <name>ndigits_dec</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>t</name> <init>= <expr><operator>(</operator><operator>(</operator><call><name>lj_fls</name><argument_list>(<argument><expr><name>x</name> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">77</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* 2^8/77 is roughly log2(10) */</comment>
  <return>return <expr><name>t</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <name><name>ndigits_dec_threshold</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINT_R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>sh</name></type></parameter>, <parameter><type><name>sc</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>{ uint32_t d = (x*(((1&lt;&lt;sh)+sc-1)/sc))&gt;&gt;sh; x -= d*sc; *p++ = (char)('0'+d); }</cpp:value></cpp:define>

<comment type="block">/* Write 9-digit unsigned integer to buffer. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_strfmt_wuint9</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><name>u</name> <operator>/</operator> <literal type="number">10000</literal></expr></init></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>v</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>w</name> <operator>=</operator> <name>v</name> <operator>/</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>v</name> <operator>-=</operator> <name>w</name> <operator>*</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>w</name><operator>)</operator></expr>;</expr_stmt>
  <macro><name>WINT_R</name><argument_list>(<argument>v</argument>, <argument><literal type="number">23</literal></argument>, <argument><literal type="number">1000</literal></argument>)</argument_list></macro>
  <macro><name>WINT_R</name><argument_list>(<argument>v</argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
  <expr_stmt><expr><call><name>WINT_R</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call>
  <operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>v</name><operator>)</operator></expr>;</expr_stmt>
  <macro><name>WINT_R</name><argument_list>(<argument>u</argument>, <argument><literal type="number">23</literal></argument>, <argument><literal type="number">1000</literal></argument>)</argument_list></macro>
  <macro><name>WINT_R</name><argument_list>(<argument>u</argument>, <argument><literal type="number">12</literal></argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>
  <expr_stmt><expr><call><name>WINT_R</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call>
  <operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal><operator>+</operator><name>u</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WINT_R</name></cpp:undef>

<comment type="block">/* -- Extended precision arithmetic --------------------------------------- */</comment>

<comment type="block">/*
** The "nd" format is a fixed-precision decimal representation for numbers. It
** consists of up to 64 uint32_t values, with each uint32_t storing a value
** in the range [0, 1e9). A number in "nd" format consists of three variables:
**
**  uint32_t nd[64];
**  uint32_t ndlo;
**  uint32_t ndhi;
**
** The integral part of the number is stored in nd[0 ... ndhi], the value of
** which is sum{i in [0, ndhi] | nd[i] * 10^(9*i)}. If the fractional part of
** the number is zero, ndlo is zero. Otherwise, the fractional part is stored
** in nd[ndlo ... 63], the value of which is taken to be
** sum{i in [ndlo, 63] | nd[i] * 10^(9*(i-64))}.
**
** If the array part had 128 elements rather than 64, then every double would
** have an exact representation in "nd" format. With 64 elements, all integral
** doubles have an exact representation, and all non-integral doubles have
** enough digits to make both %.99e and %.99f do the right thing.
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ND_MUL2K_MAX_SHIFT</name></cpp:macro>	<cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ND_MUL2K_DIV1E9</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((uint32_t)((val) / 1000000000))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ND_MUL2K_MAX_SHIFT</name></cpp:macro>	<cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ND_MUL2K_DIV1E9</name><parameter_list>(<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((uint32_t)((val) &gt;&gt; 9) / 1953125)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Multiply nd by 2^k and add carry_in (ndlo is assumed to be zero). */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>nd_mul2k</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ndhi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>k</name></decl></parameter>,
			 <parameter><decl><type><name>uint32_t</name></type> <name>carry_in</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ndlo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Performance hacks. */</comment>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>ND_MUL2K_MAX_SHIFT</name><operator>*</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>STRFMT_T_FP_F</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>ndhi</name> <operator>-</operator> <operator>(</operator><call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">17</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Real logic. */</comment>
  <while>while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>ND_MUL2K_MAX_SHIFT</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ndlo</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ndhi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>ND_MUL2K_MAX_SHIFT</name><operator>)</operator> <operator>|</operator> <name>carry_in</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>carry_in</name> <operator>=</operator> <call><name>ND_MUL2K_DIV1E9</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name> <operator>-</operator> <name>carry_in</name> <operator>*</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>carry_in</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><operator>++</operator><name>ndhi</name></expr>]</index></name> <operator>=</operator> <name>carry_in</name></expr>;</expr_stmt> <expr_stmt><expr><name>carry_in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>start</name><operator>++</operator> <operator>==</operator> <name>ndlo</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>ndlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>ND_MUL2K_MAX_SHIFT</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ndlo</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ndhi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>|</operator> <name>carry_in</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>carry_in</name> <operator>=</operator> <call><name>ND_MUL2K_DIV1E9</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>val</name> <operator>-</operator> <name>carry_in</name> <operator>*</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>carry_in</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>nd</name><index>[<expr><operator>++</operator><name>ndhi</name></expr>]</index></name> <operator>=</operator> <name>carry_in</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ndhi</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Divide nd by 2^k (ndlo is assumed to be zero). */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>nd_div2k</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ndhi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ndlo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>stop1</name> <init>= <expr><operator>~</operator><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>stop2</name> <init>= <expr><operator>~</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Performance hacks. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ndhi</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><call><name>lj_ffs</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>k</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>STRFMT_T_FP_F</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>stop1</name> <operator>=</operator> <literal type="number">63</literal> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>floorlog2</name> <init>= <expr><name>ndhi</name> <operator>*</operator> <literal type="number">29</literal> <operator>+</operator> <call><name>lj_fls</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>floorlog10</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>floorlog2</name> <operator>*</operator> <literal type="number">0.30102999566398114</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>stop1</name> <operator>=</operator> <literal type="number">62</literal> <operator>+</operator> <operator>(</operator><name>floorlog10</name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>stop2</name> <operator>=</operator> <literal type="number">61</literal> <operator>+</operator> <name>ndhi</name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Real logic. */</comment>
  <while>while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>ndhi</name></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>*</operator> <literal type="number">1953125</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ndlo</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>ndlo</name> <operator>!=</operator> <name>stop1</name> <operator>&amp;&amp;</operator> <name>ndlo</name> <operator>!=</operator> <name>stop2</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ndlo</name> <operator>=</operator> <operator>(</operator><name>ndlo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>nd</name><index>[<expr><name>ndlo</name></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <operator>(</operator><name>ndhi</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>stop2</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>ndhi</name> <operator>!=</operator> <name>ndlo</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <operator>(</operator><name>ndhi</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt> <expr_stmt><expr><name>stop2</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content> <return>return <expr><name>ndlo</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mul</name> <init>= <expr><literal type="number">1000000000</literal> <operator>&gt;&gt;</operator> <name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><name>ndhi</name></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>*</operator> <name>mul</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ndlo</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ndlo</name> <operator>=</operator> <operator>(</operator><name>ndlo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>nd</name><index>[<expr><name>ndlo</name></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ndlo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add m*10^e to nd (assumes ndlo &lt;= e/9 &lt;= ndhi and 0 &lt;= m &lt;= 9). */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>nd_add_m10e</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ndhi</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>carry</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>e</name><operator>/</operator><literal type="number">9</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>carry</name> <operator>=</operator> <name>m</name> <operator>*</operator> <operator>(</operator><name><name>ndigits_dec_threshold</name><index>[<expr><name>e</name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name><operator>*</operator><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>e</name><operator>-</operator><literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><literal type="number">64</literal> <operator>+</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>carry</name> <operator>=</operator> <name>m</name> <operator>*</operator> <operator>(</operator><name><name>ndigits_dec_threshold</name><index>[<expr><name>e</name> <operator>-</operator> <name>f</name><operator>*</operator><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;=</operator> <literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>ndhi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>ndhi</name> <operator>=</operator> <operator>(</operator><name>ndhi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>ndhi</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Test whether two "nd" values are equal in their most significant digits. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nd_similar</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ndhi</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>hilen</name></decl></parameter>,
		      <parameter><decl><type><name>MSize</name></type> <name>prec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nd9</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ref9</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hilen</name> <operator>&lt;=</operator> <name>prec</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name> <operator>!=</operator> <operator>*</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>prec</name> <operator>-=</operator> <name>hilen</name></expr>;</expr_stmt> <expr_stmt><expr><name>ref</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <operator>(</operator><name>ndhi</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name> <operator>!=</operator> <operator>*</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>prec</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ref</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <operator>(</operator><name>ndhi</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>prec</name> <operator>-=</operator> <name>hilen</name> <operator>-</operator> <literal type="number">9</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>prec</name> <operator>&lt;</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>nd9</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>ref9</name></expr></argument>, <argument><expr><operator>*</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>nd9</name></expr></argument>, <argument><expr><name>ref9</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nd9</name><index>[<expr><name>prec</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'5'</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>ref9</name><index>[<expr><name>prec</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'5'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Formatted conversions to buffer ------------------------------------- */</comment>

<comment type="block">/* Write formatted floating-point number to either sb or p. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lj_strfmt_wfnum</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>width</name> <init>= <expr><call><name>STRFMT_WIDTH</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>prec</name> <init>= <expr><call><name>STRFMT_PREC</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0xffe00000</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Handle non-finite values uniformly for %a, %e, %f, %g. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ch</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x202020</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0x000fffff</literal><operator>)</operator> <operator>|</operator> <name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ch</name> <operator>^=</operator> <operator>(</operator><literal type="char">'n'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'a'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ch</name> <operator>^=</operator> <operator>(</operator><literal type="char">'i'</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="char">'n'</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="char">'f'</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_PLUS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>prefix</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>STRFMT_T_FP_A</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* %a */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hexdig</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"0123456789ABCDEFPX"</literal></expr>
					       </then><else>: <expr><literal type="string">"0123456789abcdefpx"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>e</name> <init>= <expr><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>eprefix</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_PLUS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;=</operator> <literal type="number">0xfffff</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>|=</operator> <literal type="number">0x100000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">1023</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>|</operator> <name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Non-zero denormal - normalise it. */</comment>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>shift</name> <init>= <expr><ternary><condition><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name></expr> ?</condition><then> <expr><literal type="number">20</literal><operator>-</operator><call><name>lj_fls</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">52</literal><operator>-</operator><call><name>lj_fls</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><literal type="number">1022</literal> <operator>-</operator> <name>shift</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>t</name><operator>.</operator><name>u64</name></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* abs(n) == t.u64 * 2^(e - 52) */</comment>
    <comment type="block">/* If n != 0, bit 52 of t.u64 is set, and is the highest set bit. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Default precision: use smallest precision giving exact result. */</comment>
      <expr_stmt><expr><name>prec</name> <operator>=</operator> <ternary><condition><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name></expr> ?</condition><then> <expr><literal type="number">13</literal><operator>-</operator><call><name>lj_ffs</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal><operator>-</operator><call><name>lj_ffs</name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name><operator>|</operator><literal type="number">0x100000</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prec</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Precision is sufficiently low as to maybe require rounding. */</comment>
      <expr_stmt><expr><name><name>t</name><operator>.</operator><name>u64</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">51</literal> <operator>-</operator> <name>prec</name><operator>*</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>eprefix</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal> <operator>+</operator> <call><name>ndigits_dec</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prec</name> <operator>+</operator> <operator>(</operator><name>prefix</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
	    <operator>+</operator> <operator>(</operator><operator>(</operator><name>prec</name> <operator>|</operator> <operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name> <operator>|</operator> <name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* x or X */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name> <operator>|</operator> <name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>STRFMT_F_ZERO</name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Usually '1', sometimes '0' or '2'. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prec</name> <operator>|</operator> <operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Emit fractional part. */</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>prec</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>t</name><operator>.</operator><name>u64</name></name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">52</literal> <operator>-</operator> <name>prec</name><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <while>while <condition>(<expr><name>prec</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>prec</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
      <while>while <condition>(<expr><name>prec</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>prec</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><name><name>t</name><operator>.</operator><name>u64</name></name> <operator>&amp;</operator> <literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><operator>.</operator><name>u64</name></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></while>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>hexdig</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* p or P */</comment>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>eprefix</name></expr>;</expr_stmt> <comment type="block">/* + or - */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* %e or %f or %g - begin by converting n to "nd" format. */</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>nd</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ndhi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ndlo</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>e</name> <init>= <expr><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></init></decl>, <decl><type ref="prev"/><name>ndebias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_PLUS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>prec</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt> <comment type="block">/* Default precision is 6. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>sf</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>STRFMT_FP</name><argument_list>(<argument><expr><name>STRFMT_T_FP_G</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* %g - decrement precision if non-zero (to make it like %e). */</comment>
      <expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>prec</name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_FP_E</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>prec</name> <operator>&lt;</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Precision is sufficiently low that rescaling will probably work. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ndebias</name> <operator>=</operator> <name><name>rescale_e</name><index>[<expr><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name> <operator>*</operator> <name><name>rescale_n</name><index>[<expr><name>e</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>t</name><operator>.</operator><name>n</name></name> <operator>*=</operator> <literal type="number">1e10</literal></expr><operator>,</operator> <expr><name>ndebias</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>u64</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="block">/* Convert 2ulp below (later we convert 2ulp above). */</comment>
	<expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x100000</literal> <operator>|</operator> <operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator> <operator>-</operator> <literal type="number">1075</literal> <operator>-</operator> <operator>(</operator><name>ND_MUL2K_MAX_SHIFT</name> <operator>&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt>
	<goto>goto <name>load_t_lo</name>;</goto> <label><name>rescale_failed</name>:</label>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ndebias</name> <operator>=</operator> <name>ndhi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x100000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">1043</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>e</name> <operator>-=</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>ND_MUL2K_MAX_SHIFT</name> <operator>&lt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt> <label><name>load_t_lo</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ND_MUL2K_MAX_SHIFT</name> <operator>&gt;=</operator> <literal type="number">29</literal></expr></cpp:if>
      <expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>nd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_mul2k</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0x1fffffff</literal></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ND_MUL2K_MAX_SHIFT</name> <operator>&gt;=</operator> <literal type="number">11</literal></expr></cpp:elif>
      <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_mul2k</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_mul2k</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_mul2k</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&lt;&lt;</operator>  <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ND_MUL2K_MAX_SHIFT too small"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_mul2k</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ndlo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ndlo</name> <operator>=</operator> <call><name>nd_div2k</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>e</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ndhi</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ndhi</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* abs(n) == nd * 10^ndebias (for slightly loose interpretation of ==) */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_FP_E</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* %e or %g - assume %e and start by calculating nd's exponent (nde). */</comment>
      <decl_stmt><decl><type><name>char</name></type> <name>eprefix</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>nde</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MSize</name></type> <name>hilen</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ndlo</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>ndhi</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <do>do <block>{<block_content/>}</block> while <condition>(<expr><operator>!</operator><name><name>nd</name><index>[<expr><operator>--</operator><name>ndhi</name></expr>]</index></name></expr>)</condition>;</do>
	<expr_stmt><expr><name>nde</name> <operator>-=</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">9</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>hilen</name> <operator>=</operator> <call><name>ndigits_dec</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nde</name> <operator>+=</operator> <name>ndhi</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name>hilen</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ndebias</name></expr>)</condition> <block>{<block_content>
	<comment type="block">/*
	** Rescaling was performed, but this introduced some error, and might
	** have pushed us across a rounding boundary. We check whether this
	** error affected the result by introducing even more error (2ulp in
	** either direction), and seeing whether a roundary boundary was
	** crossed. Having already converted the -2ulp case, we save off its
	** most significant digits, convert the +2ulp case, and compare them.
	*/</comment>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>eidx</name> <init>= <expr><name>e</name> <operator>+</operator> <literal type="number">70</literal> <operator>+</operator> <operator>(</operator><name>ND_MUL2K_MAX_SHIFT</name> <operator>&lt;</operator> <literal type="number">29</literal><operator>)</operator>
			 <operator>+</operator> <operator>(</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&gt;=</operator> <literal type="number">0xfffffffe</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>~</operator><name><name>t</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>m_e</name> <init>= <expr><name>four_ulp_m_e</name> <operator>+</operator> <name>eidx</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>eidx</name> <operator>&amp;&amp;</operator> <name>eidx</name> <operator>&lt;</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>nd</name><index>[<expr><operator>(</operator><name>ndhi</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nd</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>nd</name><index>[<expr><operator>(</operator><name>ndhi</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>nd_add_m10e</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>m_e</name></expr></argument>, <argument><expr><name><name>m_e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>nd_similar</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><name>nd</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><name>hilen</name></expr></argument>, <argument><expr><name>prec</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <goto>goto <name>rescale_failed</name>;</goto>
	</block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>prec</name> <operator>-</operator> <name>nde</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">0x3f</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>ndlo</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Precision is sufficiently low as to maybe require rounding. */</comment>
	<expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_add_m10e</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>nde</name> <operator>-</operator> <name>prec</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nde</name> <operator>+=</operator> <operator>(</operator><name>hilen</name> <operator>!=</operator> <call><name>ndigits_dec</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nde</name> <operator>+=</operator> <name>ndebias</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_FP_F</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<comment type="block">/* %g */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;=</operator> <name>nde</name> <operator>&amp;&amp;</operator> <name>nde</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">4</literal></expr>)</condition> <block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>nde</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ndhi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>prec</name> <operator>-=</operator> <name>nde</name></expr>;</expr_stmt>
	  <goto>goto <name>g_format_like_f</name>;</goto>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>prec</name> <operator>&amp;&amp;</operator> <name>width</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
	  <comment type="block">/* Decrease precision in order to strip trailing zeroes. */</comment>
	  <decl_stmt><decl><type><name>char</name></type> <name><name>tail</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>maxprec</name> <init>= <expr><name>hilen</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ndhi</name> <operator>-</operator> <name>ndlo</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;=</operator> <name>maxprec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>maxprec</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ndlo</name> <operator>=</operator> <operator>(</operator><name>ndhi</name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>prec</name> <operator>-</operator> <name>hilen</name><operator>)</operator> <operator>+</operator> <literal type="number">9</literal><operator>)</operator> <operator>/</operator> <literal type="number">9</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <expr_stmt><expr><name>i</name> <operator>=</operator> <name>prec</name> <operator>-</operator> <name>hilen</name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ndhi</name> <operator>-</operator> <name>ndlo</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>ndlo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <while>while <condition>(<expr><name>prec</name> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>ndlo</name> <operator>==</operator> <name>ndhi</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><operator>++</operator><name>ndlo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  </block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>nde</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Make nde non-negative. */</comment>
	<expr_stmt><expr><name>eprefix</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nde</name> <operator>=</operator> <operator>-</operator><name>nde</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <name>prec</name> <operator>+</operator> <operator>(</operator><name>prefix</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>+</operator> <call><name>ndigits_dec</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>nde</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>nde</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator>
	      <operator>+</operator> <operator>(</operator><operator>(</operator><name>prec</name> <operator>|</operator> <operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name> <operator>|</operator> <name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
	<while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name> <operator>|</operator> <name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>STRFMT_F_ZERO</name></expr>)</condition> <block>{<block_content>
	<while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* Put leading digit in the correct place. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prec</name> <operator>|</operator> <operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Emit fractional part. */</comment>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>prec</name> <operator>-=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>q</name> <operator>-</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> <comment type="block">/* Account for digits already emitted. */</comment>
	<comment type="block">/* Then emit chunks of 9 digits (this may emit 8 digits too many). */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ndhi</name></expr>;</init> <condition><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>ndlo</name></expr>;</condition> <incr><expr><name>prec</name> <operator>-=</operator> <literal type="number">9</literal></expr></incr>)</control> <block>{<block_content>
	  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_FP_F</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	  <comment type="block">/* %g (and not %#g) - strip trailing zeroes. */</comment>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
	  <while>while <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
	  <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <comment type="block">/* %e (or %#g) - emit trailing zeroes. */</comment>
	  <while>while <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_UPPER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'E'</literal></expr> </then><else>: <expr><literal type="char">'e'</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>eprefix</name></expr>;</expr_stmt> <comment type="block">/* + or - */</comment>
      <if_stmt><if>if <condition>(<expr><name>nde</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Always at least two digits of exponent. */</comment>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* %f (or, shortly, %g in %f style) */</comment>
      <if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&lt;</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><literal type="number">0x3f</literal> <operator>&amp;</operator> <operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>ndlo</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Precision is sufficiently low as to maybe require rounding. */</comment>
	<expr_stmt><expr><name>ndhi</name> <operator>=</operator> <call><name>nd_add_m10e</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>ndhi</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>-</operator> <name>prec</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <label><name>g_format_like_f</name>:</label>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_FP_E</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>prec</name> <operator>&amp;&amp;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Decrease precision in order to strip trailing zeroes. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ndlo</name></expr>)</condition> <block>{<block_content>
	  <comment type="block">/* nd has a fractional part; we need to look at its digits. */</comment>
	  <decl_stmt><decl><type><name>char</name></type> <name><name>tail</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>maxprec</name> <init>= <expr><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>ndlo</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;=</operator> <name>maxprec</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>maxprec</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ndlo</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <operator>(</operator><name>prec</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <expr_stmt><expr><name>i</name> <operator>=</operator> <name>prec</name> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>ndlo</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>ndlo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <while>while <condition>(<expr><name>prec</name> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
	    <expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>ndlo</name> <operator>==</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><operator>++</operator><name>ndlo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  </block_content>}</block></while>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <comment type="block">/* nd has no fractional part, so precision goes straight to zero. */</comment>
	  <expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>ndhi</name> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <call><name>ndigits_dec</name><argument_list>(<argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>prec</name> <operator>+</operator> <operator>(</operator><name>prefix</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator>
		     <operator>+</operator> <operator>(</operator><operator>(</operator><name>prec</name> <operator>|</operator> <operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name> <operator>|</operator> <name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
	<while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <operator>(</operator><name>STRFMT_F_LEFT</name> <operator>|</operator> <name>STRFMT_F_ZERO</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>STRFMT_F_ZERO</name></expr>)</condition> <block>{<block_content>
	<while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Emit integer part. */</comment>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>ndhi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>ndhi</name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>prec</name> <operator>|</operator> <operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
	<comment type="block">/* Emit fractional part. */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
	<comment type="block">/* Emit chunks of 9 digits (this may emit 8 digits too many). */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>ndlo</name></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuint9</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>nd</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>prec</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_T_FP_E</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_ALT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	  <comment type="block">/* %g (and not %#g) - strip trailing zeroes. */</comment>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
	  <while>while <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
	  <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <comment type="block">/* %f (or %#g) - emit trailing zeroes. */</comment>
	  <while>while <condition>(<expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>prec</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>prec</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sf</name> <operator>&amp;</operator> <name>STRFMT_F_LEFT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <while>while <condition>(<expr><name>width</name><operator>--</operator> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add formatted floating-point number to buffer. */</comment>
<function><type><name>SBuf</name> <modifier>*</modifier></type><name>lj_strfmt_putfnum</name><parameter_list>(<parameter><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>SFormat</name></type> <name>sf</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>lj_strfmt_wfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>sb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Conversions to strings ---------------------------------------------- */</comment>

<comment type="block">/* Convert number to string. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_strfmt_num</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>STRFMT_MAXBUF_NUM</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><call><name>lj_strfmt_wfnum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>buf</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

</unit>
