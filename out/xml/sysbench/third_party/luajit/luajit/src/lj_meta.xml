<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_meta.c"><comment type="block">/*
** Metamethod handling.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
**
** Portions taken verbatim or adapted from the Lua interpreter.
** Copyright (C) 1994-2008 Lua.org, PUC-Rio. See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_meta_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_meta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lib.h"</cpp:file></cpp:include>

<comment type="block">/* -- Metamethod handling ------------------------------------------------- */</comment>

<comment type="block">/* String interning of metamethod names for fast indexing. */</comment>
<function><type><name>void</name></type> <name>lj_meta_init</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MMNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>"__" #name</cpp:value></cpp:define>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>metanames</name> <init>= <expr><call><name>MMDEF</name><argument_list>(<argument><expr><name>MMNAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MMNAME</name></cpp:undef>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>mm</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>mm</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>metanames</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>mm</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>q</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>q</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">'_'</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>q</name><operator>-</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* NOBARRIER: g-&gt;gcroot[] is a GC root. */</comment>
    <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gcroot</name><index>[<expr><name>GCROOT_MMNAME</name><operator>+</operator><name>mm</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Negative caching of a few fast metamethods. See the lj_meta_fast() macro. */</comment>
<function><type><name>cTValue</name> <modifier>*</modifier></type><name>lj_meta_cache</name><parameter_list>(<parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>mt</name></decl></parameter>, <parameter><decl><type><name>MMS</name></type> <name>mm</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_tab_getstr</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>mm</name> <operator>&lt;=</operator> <name>MM_FAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mo</name> <operator>||</operator> <call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* No metamethod? */</comment>
    <expr_stmt><expr><name><name>mt</name><operator>-&gt;</operator><name>nomm</name></name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><literal type="number">1u</literal><operator>&lt;&lt;</operator><name>mm</name><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* Set negative cache flag. */</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>mo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Lookup metamethod for object. */</comment>
<function><type><name>cTValue</name> <modifier>*</modifier></type><name>lj_meta_lookup</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>MMS</name></type> <name>mm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>mt</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tvistab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>tabref</name><argument_list>(<argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>tvisudata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>tabref</name><argument_list>(<argument><expr><call><name>udataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>mt</name> <operator>=</operator> <call><name>tabref</name><argument_list>(<argument><expr><call><name>basemt_obj</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mt</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_tab_getstr</name><argument_list>(<argument><expr><name>mt</name></expr></argument>, <argument><expr><call><name>mmname_str</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mo</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>mo</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>niltv</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<comment type="block">/* Tailcall from C function. */</comment>
<function><type><name>int</name></type> <name>lj_meta_tailcall</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>frame_pc</name><argument_list>(<argument><expr><name>base</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Preserve old PC from frame. */</comment>
  <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>base</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Replace frame with new object. */</comment>
  <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>(</operator><name>top</name><operator>++</operator><operator>)</operator><operator>-&gt;</operator><name>u64</name> <operator>=</operator> <name>LJ_CONT_TAILCALL</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>top</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>=</operator> <name>LJ_CONT_TAILCALL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>setframe_pc</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>top</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>setframe_gc</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LJ_TTHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Dummy frame object. */</comment>
  <expr_stmt><expr><call><name>setframe_ftsz</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>top</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>base</name><operator>)</operator> <operator>+</operator> <name>FRAME_CONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>top</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <comment type="block">/*
  ** before:   [old_mo|PC]    [... ...]
  **                         ^base     ^top
  ** after:    [new_mo|itype] [... ...] [NULL|PC] [dummy|delta]
  **                                                           ^base/top
  ** tailcall: [new_mo|PC]    [... ...]
  **                         ^base     ^top
  */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Setup call to metamethod to be run by Assembler VM. */</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>mmcall</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ASMFunction</name></type> <name>cont</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name></decl></parameter>,
		    <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/*
  **           |-- framesize -&gt; top       top+1       top+2 top+3
  ** before:   [func slots ...]
  ** mm setup: [func slots ...] [cont|?]  [mo|tmtype] [a]   [b]
  ** in asm:   [func slots ...] [cont|PC] [mo|delta]  [a]   [b]
  **           ^-- func base                          ^-- mm base
  ** after mm: [func slots ...]           [result]
  **                ^-- copy to base[PC_RA] --/     for lj_cont_ra
  **                          istruecond + branch   for lj_cont_cond*
  **                                       ignore   for lj_cont_nop
  ** next PC:  [func slots ...]
  */</comment>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>curr_funcisL</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>curr_topL</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>setcont</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>, <argument><expr><name>cont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Assembler VM stores PC in upper word or FR2. */</comment>
  <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>++</operator></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Store metamethod and two arguments. */</comment>
  <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>top</name></expr>;</return>  <comment type="block">/* Return new base. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- C helpers for some instructions, called from assembler VM ----------- */</comment>

<comment type="block">/* Helper for TGET*. __index chain and metamethod. */</comment>
<function><type><name>cTValue</name> <modifier>*</modifier></type><name>lj_meta_tget</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>LJ_MAX_IDXCHAIN</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><call><name>tvistab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>tabV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><call><name>lj_tab_get</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>||</operator>
	  <operator>!</operator><operator>(</operator><name>mo</name> <operator>=</operator> <call><name>lj_meta_fast</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MM_index</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>tv</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>MM_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lj_err_optype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>LJ_ERR_OPINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lj_cont_ra</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* Trigger metamethod call. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <name>mo</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_GETLOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
</block_content>}</block></function>

<comment type="block">/* Helper for TSET*. __newindex chain and metamethod. */</comment>
<function><type><name>TValue</name> <modifier>*</modifier></type><name>lj_meta_tset</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>loop</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>loop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <name>LJ_MAX_IDXCHAIN</name></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><call><name>tvistab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>tabV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>tv</name> <init>= <expr><call><name>lj_tab_get</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>nomm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Invalidate negative metamethod cache. */</comment>
	<expr_stmt><expr><call><name>lj_gc_anybarriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><name>tv</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>mo</name> <operator>=</operator> <call><name>lj_meta_fast</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MM_newindex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>nomm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Invalidate negative metamethod cache. */</comment>
	<expr_stmt><expr><call><name>lj_gc_anybarriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tv</name> <operator>!=</operator> <call><name>niltv</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><name>tv</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_NILIDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>&amp;</operator><name>tmp</name></expr>;</expr_stmt> </block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tvisnan</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_NANIDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>lj_tab_newkey</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>MM_newindex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lj_err_optype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>LJ_ERR_OPINDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lj_cont_nop</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* L-&gt;top+2 = v filled in by caller. */</comment>
      <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* Trigger metamethod call. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <operator>&amp;</operator><name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_SETLOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cTValue</name> <modifier>*</modifier></type><name>str2num</name><parameter_list>(<parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>o</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><call><name>setnumV</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator> <name>n</name><operator>)</operator></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>lj_strscan_num</name><argument_list>(<argument><expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>n</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper for arithmetic instructions. Coercion, metamethod. */</comment>
<function><type><name>TValue</name> <modifier>*</modifier></type><name>lj_meta_arith</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>ra</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>rb</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,
		      <parameter><decl><type><name>BCReg</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MMS</name></type> <name>mm</name> <init>= <expr><call><name>bcmode_mm</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>tempb</name></decl>, <decl><type ref="prev"/><name>tempc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>b</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>c</name> <operator>=</operator> <call><name>str2num</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Try coercion first. */</comment>
    <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>ra</name></expr></argument>, <argument><expr><call><name>lj_vm_foldarith</name><argument_list>(<argument><expr><call><name>numV</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>numV</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>mm</name><operator>-</operator><name>MM_add</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>str2num</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempb</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>lj_err_optype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>LJ_ERR_OPARITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lj_cont_ra</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper for CAT. Coercion, iterative concat, __concat metamethod. */</comment>
<function><type><name>TValue</name> <modifier>*</modifier></type><name>lj_meta_cat</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fromc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>-</operator><name>left</name></expr>;</expr_stmt> <expr_stmt><expr><name>fromc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>tvisstr</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tvisnumber</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	<operator>!</operator><operator>(</operator><call><name>tvisstr</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tvisnumber</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MM_concat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>MM_concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tvisnumber</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>top</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>lj_err_optype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>LJ_ERR_OPCAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
	</block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* One of the top two elements is not a string, call __cat metamethod:
      **
      ** before:    [...][CAT stack .........................]
      **                                 top-1     top         top+1 top+2
      ** pick two:  [...][CAT stack ...] [o1]      [o2]
      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
      **            ^-- func base                              ^-- mm base
      ** after mm:  [...][CAT stack ...] &lt;--push-- [result]
      ** next step: [...][CAT stack .............]
      */</comment>
      <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>LJ_FR2</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Carefully ordered stack copies! */</comment>
      <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>LJ_FR2</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>+</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setcont</name><argument_list>(<argument><expr><name>top</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>lj_cont_cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>top</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>top</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
      <return>return <expr><name>top</name><operator>+</operator><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Trigger metamethod call. */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* Pick as many strings as possible from the top and concatenate them:
      **
      ** before:    [...][CAT stack ...........................]
      ** pick str:  [...][CAT stack ...] [...... strings ......]
      ** concat:    [...][CAT stack ...] [result]
      ** next step: [...][CAT stack ............]
      */</comment>
      <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o</name> <init>= <expr><name>top</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>tlen</name> <init>= <expr><ternary><condition><expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr> </then><else>: <expr><name>STRFMT_MAXBUF_NUM</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
      <do>do <block>{<block_content>
	<expr_stmt><expr><name>o</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <ternary><condition><expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr> </then><else>: <expr><name>STRFMT_MAXBUF_NUM</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><operator>--</operator><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tvisnumber</name><argument_list>(<argument><expr><name>o</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
      <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&gt;=</operator> <name>LJ_MAX_STR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STROV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>top</name></expr><operator>,</operator> <expr><name>top</name> <operator>=</operator> <name>o</name></expr>;</init> <condition><expr><name>o</name> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name>lj_buf_putmem</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <expr_stmt><expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><call><name>numV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>left</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>total</name></name> <operator>&gt;=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>threshold</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fromc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>curr_topL</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lj_gc_step</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper for LEN. __len metamethod. */</comment>
<function><type><name>TValue</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_meta_len</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>MM_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>LJ_52</name> <operator>&amp;&amp;</operator> <call><name>tvistab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>tabref</name><argument_list>(<argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>metatable</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nomm</name> <operator>|=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><literal type="number">1u</literal><operator>&lt;&lt;</operator><name>MM_len</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_err_optype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>LJ_ERR_OPLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lj_cont_ra</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><ternary><condition><expr><name>LJ_52</name></expr> ?</condition><then> <expr><name>o</name></expr> </then><else>: <expr><call><name>niltv</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Helper for equality comparisons. __eq metamethod. */</comment>
<function><type><name>TValue</name> <modifier>*</modifier></type><name>lj_meta_equal</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ne</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Field metatable must be at same offset for GCtab and GCudata! */</comment>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_fast</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>o1</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MM_eq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mo</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>it</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>o1</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>metatable</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>tabref</name><argument_list>(<argument><expr><name><name>o2</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo2</name> <init>= <expr><call><name>lj_meta_fast</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>o2</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>metatable</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MM_eq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>mo2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>lj_obj_equal</name><argument_list>(<argument><expr><name>mo</name></expr></argument>, <argument><expr><name>mo2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>ne</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>top</name> <operator>=</operator> <call><name>curr_top</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setcont</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>ne</name></expr> ?</condition><then> <expr><name>lj_cont_condf</name></expr> </then><else>: <expr><name>lj_cont_condt</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>++</operator></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>top</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>o1</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setgcV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setgcV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>top</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>top</name></expr>;</return>  <comment type="block">/* Trigger metamethod call. */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>ne</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<function><type><name>TValue</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_meta_equal_cd</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>BCIns</name></type> <name>ins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ASMFunction</name></type> <name>cont</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>bc_op</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>lj_cont_condf</name></expr> </then><else>: <expr><name>lj_cont_condt</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>bc_op</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>tv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>o1</name> <init>= <expr><operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>base</name><index>[<expr><call><name>bc_a</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o1mm</name> <init>= <expr><name>o1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_ISEQV</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>base</name><index>[<expr><call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tviscdata</name><argument_list>(<argument><expr><name>o1mm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>o1mm</name> <operator>=</operator> <name>o2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_ISEQS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><call><name>gco2str</name><argument_list>(<argument><expr><call><name>proto_kgc</name><argument_list>(<argument><expr><call><name>curr_proto</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>~</operator><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_ISEQN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>&amp;</operator><call><name>mref</name><argument_list>(<argument><expr><call><name>curr_proto</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>k</name></expr></argument>, <argument><expr><name>cTValue</name></expr></argument>)</argument_list></call><index>[<expr><call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>BC_ISEQP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setpriV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><operator>~</operator><call><name>bc_d</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o2</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1mm</name></expr></argument>, <argument><expr><name>MM_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><call><name>bc_op</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Helper for ordered comparisons. String compare, __lt/__le metamethods. */</comment>
<function><type><name>TValue</name> <modifier>*</modifier></type><name>lj_meta_comp</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>LJ_HASFFI</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>tviscdata</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tviscdata</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ASMFunction</name></type> <name>cont</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>lj_cont_condf</name></expr> </then><else>: <expr><name>lj_cont_condt</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MMS</name></type> <name>mm</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>MM_le</name></expr> </then><else>: <expr><name>MM_lt</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>tviscdata</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>o1</name></expr> </then><else>: <expr><name>o2</name></expr></else></ternary></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <return>return <expr><call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>LJ_52</name> <operator>||</operator> <call><name>itype</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>itype</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Never called with two numbers. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tvisstr</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><call><name>lj_str_cmp</name><argument_list>(<argument><expr><call><name>strV</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strV</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>^</operator> <operator>(</operator><name>op</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
    <label><name>trymt</name>:</label>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>ASMFunction</name></type> <name>cont</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>lj_cont_condf</name></expr> </then><else>: <expr><name>lj_cont_condt</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MMS</name></type> <name>mm</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>MM_le</name></expr> </then><else>: <expr><name>MM_lt</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_52</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tvisnil</name><argument_list>(<argument><expr><operator>(</operator><name>mo</name> <operator>=</operator> <call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo2</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>tvisnil</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>lj_obj_equal</name><argument_list>(<argument><expr><name>mo</name></expr></argument>, <argument><expr><name>mo2</name></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* MM_le not found: retry with MM_lt. */</comment>
	    <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>ot</name> <init>= <expr><name>o1</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>o1</name> <operator>=</operator> <name>o2</name></expr>;</expr_stmt> <expr_stmt><expr><name>o2</name> <operator>=</operator> <name>ot</name></expr>;</expr_stmt>  <comment type="block">/* Swap operands. */</comment>
	    <expr_stmt><expr><name>op</name> <operator>^=</operator> <literal type="number">3</literal></expr>;</expr_stmt>  <comment type="block">/* Use LT and flip condition. */</comment>
	    <continue>continue;</continue>
	  </block_content>}</block></if></if_stmt>
	  <goto>goto <name>err</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>mmcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>cont</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisbool</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tvisbool</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <goto>goto <name>trymt</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
  <label><name>err</name>:</label>
    <expr_stmt><expr><call><name>lj_err_comp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper for ISTYPE and ISNUM. Implicit coercion or error. */</comment>
<function><type><name>void</name></type> <name>lj_meta_istype</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>BCReg</name></type> <name>ra</name></decl></parameter>, <parameter><decl><type><name>BCReg</name></type> <name>tp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>curr_topL</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ra</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>tp</name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>LJ_DUALNUM</name> <operator>||</operator> <name>tp</name> <operator>!=</operator> <operator>~</operator><name>LJ_TNUMX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ISTYPE -&gt; ISNUM broken. */</comment>
  <if_stmt><if>if <condition>(<expr><name>LJ_DUALNUM</name> <operator>&amp;&amp;</operator> <name>tp</name> <operator>==</operator> <operator>~</operator><name>LJ_TNUMX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>tp</name> <operator>==</operator> <operator>~</operator><name>LJ_TNUMX</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_lib_checknum</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>tp</name> <operator>==</operator> <operator>~</operator><name>LJ_TSTR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_argtype</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>, <argument><expr><name><name>lj_obj_itypename</name><index>[<expr><name>tp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper for calls. __call metamethod. */</comment>
<function><type><name>void</name></type> <name>lj_meta_call</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>mo</name> <init>= <expr><call><name>lj_meta_lookup</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>MM_call</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tvisfunc</name><argument_list>(<argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_optype_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>top</name></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name>func</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>LJ_FR2</name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name>mo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Helper for FORI. Coercion. */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_meta_for</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lj_strscan_numberobj</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_FORINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lj_strscan_numberobj</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_FORLIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lj_strscan_numberobj</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_FORSTEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>LJ_DUALNUM</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Ensure all slots are integers or all slots are numbers. */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nint</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>intV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>nint</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lj_num2int</name><argument_list>(<argument><expr><call><name>numV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>nint</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>lua_Number</name><operator>)</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <call><name>numV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>nint</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Narrow to integers. */</comment>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nint</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Widen to numbers. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><call><name>intV</name><argument_list>(<argument><expr><name>o</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
