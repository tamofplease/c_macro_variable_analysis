<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_vmmath.c"><comment type="block">/*
** Math helper functions for assembler VM.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_vmmath_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>

<comment type="block">/* -- Wrapper functions --------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86</name> <operator>&amp;&amp;</operator> <name>__ELF__</name> <operator>&amp;&amp;</operator> <name>__PIC__</name></expr></cpp:if>
<comment type="block">/* Wrapper functions to deal with the ELF/x86 PIC disaster. */</comment>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_log</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_log10</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>log10</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_exp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>exp</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_sin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_cos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cos</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_tan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_asin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>asin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_acos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>acos</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_atan</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>atan</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_sinh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>sinh</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_cosh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>cosh</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_tanh</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tanh</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_atan2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_pow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>LJ_FUNCA</name> <name>double</name></type> <name>lj_wrap_fmod</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>fmod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- Helper functions for generated machine code ------------------------- */</comment>

<function><type><name>double</name></type> <name>lj_vm_foldarith</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>IR_ADD</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><name>x</name><operator>+</operator><name>y</name></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_SUB</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><name>x</name><operator>-</operator><name>y</name></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_MUL</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><name>x</name><operator>*</operator><name>y</name></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_DIV</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><name>x</name><operator>/</operator><name>y</name></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_MOD</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><name>x</name><operator>-</operator><call><name>lj_vm_floor</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><name>y</name></expr></argument>)</argument_list></call><operator>*</operator><name>y</name></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_POW</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_NEG</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><operator>-</operator><name>x</name></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_ABS</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <case>case <expr><name>IR_LDEXP</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><call><name>ldexp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_MIN</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return> <break>break;</break>
  <case>case <expr><name>IR_MAX</name> <operator>-</operator> <name>IR_ADD</name></expr>:</case> <return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <default>default:</default> <return>return <expr><name>x</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LJ_HASJIT</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>LJ_TARGET_ARM</name> <operator>||</operator> <name>LJ_TARGET_ARM64</name> <operator>||</operator> <name>LJ_TARGET_PPC</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>LJ_TARGET_MIPS</name></expr></cpp:if>
<function><type><name>int32_t</name> <name>LJ_FASTCALL</name></type> <name>lj_vm_modi</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>ua</name></decl>, <decl><type ref="prev"/><name>ub</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* This must be checked before using this function. */</comment>
  <expr_stmt><expr><name>ua</name> <operator>=</operator> <ternary><condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>a</name></expr> </then><else>: <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>a</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>ub</name> <operator>=</operator> <ternary><condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>b</name></expr> </then><else>: <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>b</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <name>ua</name> <operator>%</operator> <name>ub</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>a</name><operator>^</operator><name>b</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>ub</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>y</name><operator>^</operator><name>b</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>y</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_NO_LOG2</name></cpp:ifdef>
<function><type><name>double</name></type> <name>lj_vm_log2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.4426950408889634074</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
<comment type="block">/* Unsigned x^k. */</comment>
<function><type><specifier>static</specifier> <name>double</name></type> <name>lj_vm_powui</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>k</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>y</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>y</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Signed x^k. */</comment>
<function><type><name>double</name></type> <name>lj_vm_powi</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>lj_vm_powui</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>x</name></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1.0</literal> <operator>/</operator> <call><name>lj_vm_powui</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Computes fpm(x) for extended math functions. */</comment>
<function><type><name>double</name></type> <name>lj_vm_foldfpm</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fpm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>fpm</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>IRFPM_FLOOR</name></expr>:</case> <return>return <expr><call><name>lj_vm_floor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  <case>case <expr><name>IRFPM_CEIL</name></expr>:</case> <return>return <expr><call><name>lj_vm_ceil</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  <case>case <expr><name>IRFPM_TRUNC</name></expr>:</case> <return>return <expr><call><name>lj_vm_trunc</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  <case>case <expr><name>IRFPM_SQRT</name></expr>:</case> <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  <case>case <expr><name>IRFPM_LOG</name></expr>:</case> <return>return <expr><call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  <case>case <expr><name>IRFPM_LOG2</name></expr>:</case> <return>return <expr><call><name>lj_vm_log2</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<function><type><name>int</name></type> <name>lj_vm_errno</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>errno</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
