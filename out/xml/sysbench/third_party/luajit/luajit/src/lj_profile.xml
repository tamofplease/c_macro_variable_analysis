<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_profile.c"><comment type="block">/*
** Low-overhead profiling.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_profile_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASPROFILE</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_profile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"luajit.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_PROFILE_SIGPROF</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_lock</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>UNUSED(ps)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_unlock</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>UNUSED(ps)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_PROFILE_PTHREAD</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PS3</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/timer.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_lock</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>pthread_mutex_lock(&amp;ps-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_unlock</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>pthread_mutex_unlock(&amp;ps-&gt;lock)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_PROFILE_WTHREAD</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_XBOX360</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xtl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xbox.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <function_decl><type><name>unsigned</name> <name>int</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>WMM_TPFUNC</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_lock</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>EnterCriticalSection(&amp;ps-&gt;lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>profile_unlock</name><parameter_list>(<parameter><type><name>ps</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>LeaveCriticalSection(&amp;ps-&gt;lock)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Profiler state. */</comment>
<typedef>typedef <type><struct>struct <name>ProfileState</name> <block>{
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>		<comment type="block">/* VM state that started the profiler. */</comment>
  <decl_stmt><decl><type><name>luaJIT_profile_callback</name></type> <name>cb</name></decl>;</decl_stmt>	<comment type="block">/* Profiler callback. */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>			<comment type="block">/* Profiler callback data. */</comment>
  <decl_stmt><decl><type><name>SBuf</name></type> <name>sb</name></decl>;</decl_stmt>			<comment type="block">/* String buffer for stack dumps. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>interval</name></decl>;</decl_stmt>			<comment type="block">/* Sample interval in milliseconds. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>			<comment type="block">/* Number of samples for next callback. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>vmstate</name></decl>;</decl_stmt>			<comment type="block">/* VM state when profile timer triggered. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_PROFILE_SIGPROF</name></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>oldsa</name></decl>;</decl_stmt>	<comment type="block">/* Previous SIGPROF state. */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_PROFILE_PTHREAD</name></expr></cpp:elif>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>		<comment type="block">/* g-&gt;hookmask update lock. */</comment>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>		<comment type="block">/* Timer thread. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>abort</name></decl>;</decl_stmt>			<comment type="block">/* Abort timer thread. */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_PROFILE_WTHREAD</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_WINDOWS</name></expr></cpp:if>
  <decl_stmt><decl><type><name>HINSTANCE</name></type> <name>wmm</name></decl>;</decl_stmt>		<comment type="block">/* WinMM library handle. */</comment>
  <decl_stmt><decl><type><name>WMM_TPFUNC</name></type> <name>wmm_tbp</name></decl>;</decl_stmt>		<comment type="block">/* WinMM timeBeginPeriod function. */</comment>
  <decl_stmt><decl><type><name>WMM_TPFUNC</name></type> <name>wmm_tep</name></decl>;</decl_stmt>		<comment type="block">/* WinMM timeEndPeriod function. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>lock</name></decl>;</decl_stmt>	<comment type="block">/* g-&gt;hookmask update lock. */</comment>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name></decl>;</decl_stmt>		<comment type="block">/* Timer thread. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>abort</name></decl>;</decl_stmt>			<comment type="block">/* Abort timer thread. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>ProfileState</name>;</typedef>

<comment type="block">/* Sadly, we have to use a static profiler state.
**
** The SIGPROF variant needs a static pointer to the global state, anyway.
** And it would be hard to extend for multiple threads. You can still use
** multiple VMs in multiple threads, but only profile one at a time.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ProfileState</name></type> <name>profile_state</name></decl>;</decl_stmt>

<comment type="block">/* Default sample interval in milliseconds. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJ_PROFILE_INTERVAL_DEFAULT</name></cpp:macro>	<cpp:value>10</cpp:value></cpp:define>

<comment type="block">/* -- Profiler/hook interaction ------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LJ_PROFILE_SIGPROF</name></expr></cpp:if>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_profile_hook_enter</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name>profile_state</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>profile_lock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hook_enter</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>profile_unlock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>hook_enter</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_profile_hook_leave</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name>profile_state</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>profile_lock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hook_leave</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>profile_unlock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>hook_leave</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- Profile callbacks --------------------------------------------------- */</comment>

<comment type="block">/* Callback from profile hook (HOOK_PROFILE already cleared). */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_profile_interpreter</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name>profile_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>mask</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>profile_lock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>&amp;</operator> <operator>~</operator><name>HOOK_PROFILE</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>HOOK_VMEVENT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>samples</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <name>HOOK_VMEVENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>profile_unlock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>cb</name></name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>vmstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Invoke user callback. */</comment>
    <expr_stmt><expr><call><name>profile_lock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mask</name> <operator>|=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>&amp;</operator> <name>HOOK_PROFILE</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>profile_unlock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Trigger profile hook. Asynchronous call from OS-specific profile timer. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_trigger</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>mask</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>profile_lock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>samples</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* Always increment number of samples. */</comment>
  <expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>HOOK_PROFILE</name><operator>|</operator><name>HOOK_VMEVENT</name><operator>|</operator><name>HOOK_GC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* Set profile hook. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>vmstate</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>vmstate</name></name> <operator>=</operator> <ternary><condition><expr><name>st</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="char">'N'</literal></expr> </then><else>:
		  <expr><ternary><condition><expr><name>st</name> <operator>==</operator> <operator>~</operator><name>LJ_VMST_INTERP</name></expr> ?</condition><then> <expr><literal type="char">'I'</literal></expr> </then><else>:
		  <expr><ternary><condition><expr><name>st</name> <operator>==</operator> <operator>~</operator><name>LJ_VMST_C</name></expr> ?</condition><then> <expr><literal type="char">'C'</literal></expr> </then><else>:
		  <expr><ternary><condition><expr><name>st</name> <operator>==</operator> <operator>~</operator><name>LJ_VMST_GC</name></expr> ?</condition><then> <expr><literal type="char">'G'</literal></expr> </then><else>: <expr><literal type="char">'J'</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>=</operator> <operator>(</operator><name>mask</name> <operator>|</operator> <name>HOOK_PROFILE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>profile_unlock</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- OS-specific profile timer handling ---------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_PROFILE_SIGPROF</name></expr></cpp:if>

<comment type="block">/* SIGPROF handler. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>profile_trigger</name><argument_list>(<argument><expr><operator>&amp;</operator><name>profile_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Start profiling timer. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_timer_start</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>interval</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>interval</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_PROF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>profile_signal</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPROF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>oldsa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Stop profiling timer. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_timer_stop</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_PROF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGPROF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>oldsa</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_PROFILE_PTHREAD</name></expr></cpp:elif>

<comment type="block">/* POSIX timer thread. */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>profile_thread</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LJ_TARGET_PS3</name></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>interval</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>interval</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PS3</name></expr></cpp:if>
    <expr_stmt><expr><call><name>sys_timer_usleep</name><argument_list>(<argument><expr><name>interval</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>nanosleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>profile_trigger</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Start profiling timer thread. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_timer_start</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>profile_thread</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Stop profiling timer thread. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_timer_stop</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_PROFILE_WTHREAD</name></expr></cpp:elif>

<comment type="block">/* Windows timer thread. */</comment>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>profile_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>psx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>(</operator><name>ProfileState</name> <operator>*</operator><operator>)</operator><name>psx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_TARGET_UWP</name></expr></cpp:if>
  <expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>wmm_tbp</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>abort</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>profile_trigger</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_TARGET_UWP</name></expr></cpp:if>
  <expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>wmm_tep</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Start profiling timer thread. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_timer_start</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_WINDOWS</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_TARGET_UWP</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>wmm</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Load WinMM library on-demand. */</comment>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>wmm</name></name> <operator>=</operator> <call><name>LJ_WIN_LOADLIBA</name><argument_list>(<argument><expr><literal type="string">"winmm.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>wmm</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>wmm_tbp</name></name> <operator>=</operator> <operator>(</operator><name>WMM_TPFUNC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>wmm</name></name></expr></argument>, <argument><expr><literal type="string">"timeBeginPeriod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>wmm_tep</name></name> <operator>=</operator> <operator>(</operator><name>WMM_TPFUNC</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>wmm</name></name></expr></argument>, <argument><expr><literal type="string">"timeEndPeriod"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>wmm_tbp</name></name> <operator>||</operator> <operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>wmm_tep</name></name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>wmm</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>profile_thread</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Stop profiling timer thread. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>profile_timer_stop</name><parameter_list>(<parameter><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- Public profiling API ------------------------------------------------ */</comment>

<comment type="block">/* Start profiling. */</comment>
<function><type><name>LUA_API</name> <name>void</name></type> <name>luaJIT_profile_start</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>,
				  <parameter><decl><type><name>luaJIT_profile_callback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name>profile_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><name>LJ_PROFILE_INTERVAL_DEFAULT</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>mode</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>*</operator><name>mode</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>m</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'i'</literal></expr>:</case>
      <expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><operator>*</operator><name>mode</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>mode</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>interval</name> <operator>=</operator> <name>interval</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>mode</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
      <if_stmt><if>if <condition>(<expr><name>interval</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case>
      <expr_stmt><expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prof_mode</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_trace_flushall</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default>  <comment type="block">/* Ignore unknown mode chars. */</comment>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>luaJIT_profile_stop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* Profiler in use by another VM. */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_buf_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>profile_timer_start</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Stop profiling. */</comment>
<function><type><name>LUA_API</name> <name>void</name></type> <name>luaJIT_profile_stop</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name>profile_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>g</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Only stop profiler if started by this VM. */</comment>
    <expr_stmt><expr><call><name>profile_timer_stop</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>hookmask</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HOOK_PROFILE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
    <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prof_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_trace_flushall</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>lj_buf_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>sb</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Return a compact stack dump. */</comment>
<function><type><name>LUA_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>luaJIT_profile_dumpstack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
					     <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ProfileState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>&amp;</operator><name>profile_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>sb</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setsbufL</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_buf_reset</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_debug_dumpstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>sbuflen</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sbufB</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
