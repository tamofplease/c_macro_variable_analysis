<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/host/buildvm.c"><comment type="block">/*
** LuaJIT VM builder.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
**
** This is a tool to build the hand-tuned assembler code required for
** LuaJIT's bytecode interpreter. It supports a variety of output formats
** to feed different toolchains (see usage() below).
**
** This tool is not particularly optimized because it's only used while
** _building_ LuaJIT. There's no point in distributing or installing it.
** Only the object code generated by this tool is linked into LuaJIT.
**
** Caveat: some memory is not free'd, error handling is lazy.
** It's a one-shot tool -- any effort fixing this would be wasted.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buildvm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ircall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ccall.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"luajit.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* DynASM glue definitions. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dst</name></cpp:macro>		<cpp:value>ctx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dst_DECL</name></cpp:macro>	<cpp:value>BuildCtx *ctx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Dst_REF</name></cpp:macro>		<cpp:value>(ctx-&gt;D)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DASM_CHECKS</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dynasm/dasm_proto.h"</cpp:file></cpp:include>

<comment type="block">/* Glue macros for DynASM. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>collect_reloc</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DASM_EXTERN</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>addr</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>collect_reloc(ctx, addr, idx, type)</cpp:value></cpp:define>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* Avoid trouble if cross-compiling for an x86 target. Speed doesn't matter. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DASM_ALIGNED_WRITES</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Embed architecture-specific DynASM encoder. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dynasm/dasm_x86.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_ARM</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dynasm/dasm_arm.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_ARM64</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dynasm/dasm_arm64.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dynasm/dasm_ppc.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_MIPS</name></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dynasm/dasm_mips.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"No support for this architecture (yet)"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Embed generated architecture-specific backend. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buildvm_arch.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<function><type><name>void</name></type> <name>owrite</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot write to output file: %s\n"</literal></expr></argument>,
	    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* Emit code as raw bytes. Only used for DynASM debugging. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_raw</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>owrite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Build machine code -------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym_decorate</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name></expr></cpp:if>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symprefix</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_machasm</name></expr> ?</condition><then> <expr><literal type="string">"_"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_XBOX360</name></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symprefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symprefix</name> <init>= <expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>BUILD_elfasm</name></expr> ?</condition><then> <expr><literal type="string">"_"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>symprefix</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>LJ_64</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_coffasm</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_peobj</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>name</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr> ?</condition><then> <expr><literal type="char">'_'</literal></expr> </then><else>: <expr><literal type="char">'@'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* Just for _RtlUnwind@16. */</comment>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_PPC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_TARGET_CONSOLE</name></expr></cpp:elif>
    <comment type="block">/* Keep @plt etc. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* MSVC doesn't like strdup. */</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NRELOCSYM</name></cpp:macro>	<cpp:value>(sizeof(extnames)/sizeof(extnames[0])-1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>relocmap</name><index>[<expr><name>NRELOCSYM</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Collect external relocations. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>collect_reloc</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name> <operator>&gt;=</operator> <name>BUILD_MAX_RELOC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: too many relocations, increase BUILD_MAX_RELOC.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>relocmap</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>relocmap</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nrelocsym</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>relocsym</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nrelocsym</name></name></expr>]</index></name> <operator>=</operator> <call><name>sym_decorate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>extnames</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nrelocsym</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reloc</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name></expr>]</index></name><operator>.</operator><name>ofs</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reloc</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name></expr>]</index></name><operator>.</operator><name>sym</name> <operator>=</operator> <name><name>relocmap</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>reloc</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_XBOX360</name></expr></cpp:if>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</return>  <comment type="block">/* Encode symbol offset of .text. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Encode symbol offset of 0. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Naive insertion sort. Performance doesn't matter here. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sym_insert</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ofs</name></decl></parameter>,
		       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>nsym</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ofs</name> <operator>&lt;=</operator> <name>ofs</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ofs</name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>sym_decorate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Build the machine code. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>build_code</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize DynASM structures. */</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nglob</name></name> <operator>=</operator> <name>GLOB__MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>glob</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nglob</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>glob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nglob</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>globnames</name></name> <operator>=</operator> <name>globnames</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extnames</name></name> <operator>=</operator> <name>extnames</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>relocsym</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>NRELOCSYM</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nrelocsym</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>NRELOCSYM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>relocmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dasm_ident</name></name> <operator>=</operator> <name>DASM_IDENT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dasm_arch</name></name> <operator>=</operator> <name>DASM_ARCH</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dasm_init</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><name>DASM_MAXSECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dasm_setupglobal</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>glob</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nglob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dasm_setup</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><name>build_actionlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Call arch-specific backend to emit the code. */</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>npc</name></name> <operator>=</operator> <call><name>build_backend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Finalize the code. */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>dasm_checkstep</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>dasm_link</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>codesz</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>dasm_encode</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Allocate symbol table and bytecode offsets. */</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>beginsym</name></name> <operator>=</operator> <call><name>sym_decorate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>LABEL_PREFIX</name> <literal type="string">"vm_asm_begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name></name> <operator>=</operator> <operator>(</operator><name>BuildSym</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>npc</name></name><operator>+</operator><name><name>ctx</name><operator>-&gt;</operator><name>nglob</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BuildSym</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nsym</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bc_ofs</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>npc</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Collect the opcodes (PC labels). */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>npc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ofs</name> <init>= <expr><call><name>dasm_getpclabel</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0x22000000</literal><operator>|</operator><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bc_ofs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ofs</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>LJ_HASJIT</name> <operator>||</operator>
	 <operator>!</operator><operator>(</operator><name>i</name> <operator>==</operator> <name>BC_JFORI</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>BC_JFORL</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>BC_JITERL</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>BC_JLOOP</name> <operator>||</operator>
	   <name>i</name> <operator>==</operator> <name>BC_IFORL</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>BC_IITERL</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>BC_ILOOP</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	<operator>(</operator><name>LJ_HASFFI</name> <operator>||</operator> <name>i</name> <operator>!=</operator> <name>BC_KCDATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>sym_insert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>LABEL_PREFIX_BC</name></expr></argument>, <argument><expr><name><name>bc_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Collect the globals (named labels). */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nglob</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gl</name> <init>= <expr><name><name>globnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>glob</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: undefined global %s\n"</literal></expr></argument>, <argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Skip the _Z symbols. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>gl</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>&amp;&amp;</operator> <name><name>gl</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>sym_insert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>glob</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>)</operator></expr></argument>,
		 <argument><expr><name>LABEL_PREFIX</name></expr></argument>, <argument><expr><name><name>globnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Close the address range. */</comment>
  <expr_stmt><expr><call><name>sym_insert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>codesz</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nsym</name></name><operator>--</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>dasm_free</name><argument_list>(<argument><expr><name>Dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Generate VM enums --------------------------------------------------- */</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>bc_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ma</name></type></parameter>, <parameter><type><name>mb</name></type></parameter>, <parameter><type><name>mc</name></type></parameter>, <parameter><type><name>mt</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>#name,</cpp:value></cpp:define>
<macro><name>BCDEF</name><argument_list>(<argument>BCNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BCNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ir_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>m1</name></type></parameter>, <parameter><type><name>m2</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>#name,</cpp:value></cpp:define>
<macro><name>IRDEF</name><argument_list>(<argument>IRNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IRNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>irt_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRTNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>#name,</cpp:value></cpp:define>
<macro><name>IRTDEF</name><argument_list>(<argument>IRTNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IRTNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>irfpm_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPMNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>#name,</cpp:value></cpp:define>
<macro><name>IRFPMDEF</name><argument_list>(<argument>FPMNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FPMNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>irfield_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>ofs</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>#name,</cpp:value></cpp:define>
<macro><name>IRFLDEF</name><argument_list>(<argument>FLNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ircall_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRCALLNAME</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>nargs</name></type></parameter>, <parameter><type><name>kind</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>#name,</cpp:value></cpp:define>
<macro><name>IRCALLDEF</name><argument_list>(<argument>IRCALLNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IRCALLNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>trace_errors</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREDEF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>msg,</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_traceerr.h"</cpp:file></cpp:include>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lower</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>s</name><operator>+</operator><literal type="number">0x20</literal></expr> </then><else>: <expr><operator>*</operator><name>s</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Emit C source code for bytecode-related definitions. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_bcdef</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"/* This is a generated file. DO NOT EDIT! */\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"LJ_DATADEF const uint16_t lj_bc_ofs[] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>npc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bc_ofs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Emit VM definitions as Lua code for debug modules. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_vmdef</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"-- This is a generated file. DO NOT EDIT!\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"return {\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"bcnames = \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bc_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"%-6s"</literal></expr></argument>, <argument><expr><name><name>bc_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\",\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"irnames = \""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ir_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"%-6s"</literal></expr></argument>, <argument><expr><name><name>ir_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\",\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"irfpm = { [0]="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>irfpm_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\"%s\", "</literal></expr></argument>, <argument><expr><call><name>lower</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>irfpm_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"},\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"irfield = { [0]="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>irfield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lower</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>irfield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\"%s\", "</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"},\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"ircall = {\n[0]="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ircall_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\"%s\",\n"</literal></expr></argument>, <argument><expr><name><name>ircall_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"},\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"traceerr = {\n[0]="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>trace_errors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\"%s\",\n"</literal></expr></argument>, <argument><expr><name><name>trace_errors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"},\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Argument parsing ---------------------------------------------------- */</comment>

<comment type="block">/* Build mode names. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>modenames</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDNAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>#name,</cpp:value></cpp:define>
<macro><name>BUILDDEF</name><argument_list>(<argument>BUILDNAME</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUILDNAME</name></cpp:undef>
  <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Print usage information and exit. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>LUAJIT_VERSION</name> <literal type="string">" VM builder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>LUAJIT_COPYRIGHT</name> <literal type="string">", "</literal> <name>LUAJIT_URL</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Target architecture: "</literal> <name>LJ_ARCH_NAME</name> <literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: buildvm -m mode [-o outfile] [infiles...]\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Available modes:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUILD__MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  %s\n"</literal></expr></argument>, <argument><expr><name><name>modenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Parse the output mode name. */</comment>
<function><type><specifier>static</specifier> <name>BuildMode</name></type> <name>parsemode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>modenames</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>modenames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><name>BuildMode</name><operator>)</operator><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>BuildMode</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parse arguments. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parseargs</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <operator>(</operator><name>BuildMode</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outname</name></name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>a</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <switch>switch <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'-'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <goto>goto <name>ok</name>;</goto>
    <case>case <expr><literal type="char">'\0'</literal></expr>:</case>
      <goto>goto <name>ok</name>;</goto>
    <case>case <expr><literal type="char">'m'</literal></expr>:</case>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>parsemode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'o'</literal></expr>:</case>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outname</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <label><name>err</name>:</label>
      <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
<label><name>ok</name>:</label>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>argv</name><operator>+</operator><name>i</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <operator>(</operator><name>BuildMode</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>BuildCtx</name></type> <name>ctx_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>&amp;</operator><name>ctx_</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>binmode</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">4</literal><operator>*</operator><name>LJ_32</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>LJ_64</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Error: pointer size mismatch in cross-build.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Try: make HOST_CC=\"gcc -m32\" CROSS=...\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>parseargs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>build_code</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Error: DASM error %08x\n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BUILD_peobj</name></expr>:</case>
  <case>case <expr><name>BUILD_raw</name></expr>:</case>
    <expr_stmt><expr><name>binmode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><name>binmode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>outname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>outname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>binmode</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Yuck. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outname</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>binmode</name></expr> ?</condition><then> <expr><literal type="string">"wb"</literal></expr> </then><else>: <expr><literal type="string">"w"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot open output file '%s': %s\n"</literal></expr></argument>,
	    <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>outname</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BUILD_elfasm</name></expr>:</case>
  <case>case <expr><name>BUILD_coffasm</name></expr>:</case>
  <case>case <expr><name>BUILD_machasm</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_asm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>emit_asm_debug</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_peobj</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_peobj</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_raw</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_raw</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_bcdef</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_bcdef</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>emit_lib</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_vmdef</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_vmdef</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>emit_lib</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"}\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_ffdef</name></expr>:</case>
  <case>case <expr><name>BUILD_libdef</name></expr>:</case>
  <case>case <expr><name>BUILD_recdef</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_lib</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_folddef</name></expr>:</case>
    <expr_stmt><expr><call><name>emit_fold</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot write to output file: %s\n"</literal></expr></argument>,
	    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
