<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/host/buildvm_asm.c"><comment type="block">/*
** LuaJIT VM builder: Assembler source code emitter.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buildvm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
<comment type="block">/* Emit bytes piecewise as assembler text. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_bytes</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.byte %d"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">",%d"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Emit relocation */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_reloc</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BUILD_elfasm</name></expr>:</case>
    <if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.long %s-.-4\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.long %s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_coffasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.def %s; .scl 3; .type 32; .endef\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.long %s-.-4\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.long %s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <break>break;</break>
  <default>default:</default>  <comment type="block">/* BUILD_machasm for relative relocations handled below. */</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.long %s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>jccnames</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="string">"jo"</literal></expr>, <expr><literal type="string">"jno"</literal></expr>, <expr><literal type="string">"jb"</literal></expr>, <expr><literal type="string">"jnb"</literal></expr>, <expr><literal type="string">"jz"</literal></expr>, <expr><literal type="string">"jnz"</literal></expr>, <expr><literal type="string">"jbe"</literal></expr>, <expr><literal type="string">"ja"</literal></expr>,
  <expr><literal type="string">"js"</literal></expr>, <expr><literal type="string">"jns"</literal></expr>, <expr><literal type="string">"jpe"</literal></expr>, <expr><literal type="string">"jpo"</literal></expr>, <expr><literal type="string">"jl"</literal></expr>, <expr><literal type="string">"jge"</literal></expr>, <expr><literal type="string">"jle"</literal></expr>, <expr><literal type="string">"jg"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Emit x86/x64 text relocations. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_reloc_text</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>--</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>cp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xe8</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opname</name> <operator>=</operator> <literal type="string">"call"</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xe9</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opname</name> <operator>=</operator> <literal type="string">"jmp"</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x8f</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0f</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>opname</name> <operator>=</operator> <name><name>jccnames</name><index>[<expr><name><name>cp</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">0x80</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
<label><name>err</name>:</label>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: unsupported opcode for %s symbol relocation.\n"</literal></expr></argument>,
	    <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>emit_asm_bytes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sym</name><operator>+</operator><operator>(</operator><operator>*</operator><name>sym</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr></argument>, <argument><expr><name>LABEL_PREFIX</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LABEL_PREFIX</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Various fixups for external symbols outside of our binary. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_elfasm</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>LJ_32</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"#if __PIC__\n\t%s lj_wrap_%s\n#else\n"</literal></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t%s %s@PLT\n"</literal></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>LJ_32</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>LJ_32</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_machasm</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t%s L%s$stub\n"</literal></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t%s %s\n"</literal></expr></argument>, <argument><expr><name>opname</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* Emit words piecewise as assembler text. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_words</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>ins</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>+</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM64</name> <operator>&amp;&amp;</operator> <name>LJ_BE</name></expr></cpp:if>
    <expr_stmt><expr><name>ins</name> <operator>=</operator> <call><name>lj_bswap</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ARM64 instructions are always little-endian. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.long 0x%08x"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">",0x%08x"</literal></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Emit relocation as part of an instruction. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_wordreloc</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
			       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sym</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ins</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>emit_asm_words</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ins</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>p</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">0xff000000u</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xfa000000u</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\tblx %s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">0x0e000000u</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0a000000u</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t%s%.2s %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">0x01000000u</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"bl"</literal></expr> </then><else>: <expr><literal type="string">"b"</literal></expr></else></ternary></expr></argument>,
	    <argument><expr><operator>&amp;</operator><literal type="string">"eqnecsccmiplvsvchilsgeltgtle"</literal><index>[<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator></expr>]</index></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
	    <argument><expr><literal type="string">"Error: unsupported opcode %08x for %s symbol relocation.\n"</literal></expr></argument>,
	    <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_ARM64</name></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x25u</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\tbl %s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
	    <argument><expr><literal type="string">"Error: unsupported opcode %08x for %s symbol relocation.\n"</literal></expr></argument>,
	    <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PS3</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOCPREFIX</name></cpp:macro> <cpp:value>"."</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOCPREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t%s %d, %d, "</literal> <name>TOCPREFIX</name> <literal type="string">"%s\n"</literal></expr></argument>,
	    <argument><expr><ternary><condition><expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"bcl"</literal></expr> </then><else>: <expr><literal type="string">"bc"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_PPC64</name></expr></cpp:if>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><literal type="string">"TOC"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\taddi 2,2,%s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><literal type="string">"TOC"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\taddis 2,12,%s\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>==</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_PPC64</name></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>suffix</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>sym</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>suffix</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\tld 12, %s(2)\n"</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t%s "</literal> <name>TOCPREFIX</name> <literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>ins</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"bl"</literal></expr> </then><else>: <expr><literal type="string">"b"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
	    <argument><expr><literal type="string">"Error: unsupported opcode %08x for %s symbol relocation.\n"</literal></expr></argument>,
	    <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_MIPS</name></expr></cpp:elif>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
	  <argument><expr><literal type="string">"Error: unsupported opcode %08x for %s symbol relocation.\n"</literal></expr></argument>,
	  <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"missing relocation support for this architecture"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFASM_PX</name></cpp:macro>	<cpp:value>"%%"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFASM_PX</name></cpp:macro>	<cpp:value>"@"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Emit an assembler label. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_label</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isfunc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BUILD_elfasm</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PS3</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"lj_vm_"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>beginsym</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>!</operator><call><name>strstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"hook"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
	<argument><expr><literal type="string">"\n\t.globl %s\n"</literal>
	<literal type="string">"\t.section \".opd\",\"aw\"\n"</literal>
	<literal type="string">"%s:\n"</literal>
	<literal type="string">"\t.long .%s,.TOC.@tocbase32\n"</literal>
	<literal type="string">"\t.size %s,8\n"</literal>
	<literal type="string">"\t.previous\n"</literal>
	<literal type="string">"\t.globl .%s\n"</literal>
	<literal type="string">"\t.hidden .%s\n"</literal>
	<literal type="string">"\t.type .%s, "</literal> <name>ELFASM_PX</name> <literal type="string">"function\n"</literal>
	<literal type="string">"\t.size .%s, %d\n"</literal>
	<literal type="string">".%s:\n"</literal></expr></argument>,
	<argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
      <argument><expr><literal type="string">"\n\t.globl %s\n"</literal>
      <literal type="string">"\t.hidden %s\n"</literal>
      <literal type="string">"\t.type %s, "</literal> <name>ELFASM_PX</name> <literal type="string">"%s\n"</literal>
      <literal type="string">"\t.size %s, %d\n"</literal>
      <literal type="string">"%s:\n"</literal></expr></argument>,
      <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isfunc</name></expr> ?</condition><then> <expr><literal type="string">"function"</literal></expr> </then><else>: <expr><literal type="string">"object"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_coffasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\n\t.globl %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isfunc</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.def %s; .scl 3; .type 32; .endef\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_machasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
      <argument><expr><literal type="string">"\n\t.private_extern %s\n"</literal>
      <literal type="string">"\t.no_dead_strip %s\n"</literal>
      <literal type="string">"%s:\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Emit alignment. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_asm_align</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BUILD_elfasm</name></expr>:</case>
  <case>case <expr><name>BUILD_coffasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.p2align %d\n"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_machasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.align %d\n"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* Emit assembler source code. */</comment>
<function><type><name>void</name></type> <name>emit_asm</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rel</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.file \"buildvm_%s.dasc\"\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dasm_arch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_PPC64</name></expr></cpp:if>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.abiversion 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.section\t\t\".toc\",\"aw\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.text\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>emit_asm_align</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PS3</name></expr></cpp:if>
  <expr_stmt><expr><call><name>emit_asm_label</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>beginsym</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codesz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>emit_asm_label</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>beginsym</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>BUILD_machasm</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">".Lbegin:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_NO_UNWIND</name></expr></cpp:if>
  <comment type="block">/* This should really be moved into buildvm_arm.dasc. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_HASFPU</name></expr></cpp:if>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
	  <argument><expr><literal type="string">".fnstart\n"</literal>
	  <literal type="string">".save {r5, r6, r7, r8, r9, r10, r11, lr}\n"</literal>
	  <literal type="string">".vsave {d8-d15}\n"</literal>
	  <literal type="string">".save {r4}\n"</literal>
	  <literal type="string">".pad #28\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
	  <argument><expr><literal type="string">".fnstart\n"</literal>
	  <literal type="string">".save {r4, r5, r6, r7, r8, r9, r10, r11, lr}\n"</literal>
	  <literal type="string">".pad #28\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_MIPS</name></expr></cpp:if>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">".set nomips16\n.abicalls\n.set noreorder\n.set nomacro\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>rel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nsym</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ofs</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ofs</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>next</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ofs</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_NO_UNWIND</name> <operator>&amp;&amp;</operator> <name>LJ_HASFFI</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"lj_vm_ffi_call"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
	      <argument><expr><literal type="string">".globl lj_err_unwind_arm\n"</literal>
	      <literal type="string">".personality lj_err_unwind_arm\n"</literal>
	      <literal type="string">".fnend\n"</literal>
	      <literal type="string">".fnstart\n"</literal>
	      <literal type="string">".save {r4, r5, r11, lr}\n"</literal>
	      <literal type="string">".setfp r11, sp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>emit_asm_label</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>next</name> <operator>-</operator> <name>ofs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>rel</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nreloc</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>reloc</name><index>[<expr><name>rel</name></expr>]</index></name><operator>.</operator><name>ofs</name> <operator>&lt;=</operator> <name>next</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BuildReloc</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>reloc</name><index>[<expr><name>rel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>ofs</name></name> <operator>-</operator> <name>ofs</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_elfasm</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>BUILD_machasm</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>emit_asm_reloc_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>+</operator><name>ofs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relocsym</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>sym</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>emit_asm_bytes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>+</operator><name>ofs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>emit_asm_reloc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relocsym</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>sym</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>n</name><operator>+</operator><literal type="number">4</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>emit_asm_wordreloc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>+</operator><name>ofs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>relocsym</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>sym</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ofs</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>rel</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
    <expr_stmt><expr><call><name>emit_asm_bytes</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>+</operator><name>ofs</name></expr></argument>, <argument><expr><name>next</name><operator>-</operator><name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>emit_asm_words</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>code</name></name><operator>+</operator><name>ofs</name></expr></argument>, <argument><expr><name>next</name><operator>-</operator><name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_NO_UNWIND</name></expr></cpp:if>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LJ_HASFFI</name></expr></cpp:if>
	  <argument><expr><literal type="string">".globl lj_err_unwind_arm\n"</literal>
	  <literal type="string">".personality lj_err_unwind_arm\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <literal type="string">".fnend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BUILD_elfasm</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>LJ_TARGET_PS3</name> <operator>||</operator> <name>LJ_TARGET_PSVITA</name><operator>)</operator></expr></cpp:if>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.section .note.GNU-stack,\"\","</literal> <name>ELFASM_PX</name> <literal type="string">"progbits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PPC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_TARGET_PS3</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_ABI_SOFTFP</name></expr></cpp:if>
    <comment type="block">/* Hard-float ABI. */</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.gnu_attribute 4, 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* fallthrough */</comment>
  <case>case <expr><name>BUILD_coffasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\t.ident \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dasm_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BUILD_machasm</name></expr>:</case>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
      <argument><expr><literal type="string">"\t.cstring\n"</literal>
      <literal type="string">"\t.ascii \"%s\\0\"\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>dasm_ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
