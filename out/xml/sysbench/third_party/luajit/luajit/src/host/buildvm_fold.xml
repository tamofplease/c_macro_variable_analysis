<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/host/buildvm_fold.c"><comment type="block">/*
** LuaJIT VM builder: IR folding hash table generator.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buildvm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>

<comment type="block">/* Context for the folding hash table generator. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>lineno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>funcidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>foldkeys</name><index>[<expr><name>BUILD_MAX_FOLD</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>nkeys</name></decl>;</decl_stmt>

<comment type="block">/* Try to fill the hash table with keys using the hash parameters. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tryhash</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>htab</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dorol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dorol</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Avoid zero rotates. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>htab</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>sz</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>key</name> <init>= <expr><name><name>foldkeys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dorol</name></expr> ?</condition><then> <expr><call><name>lj_rol</name><argument_list>(<argument><expr><call><name>lj_rol</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>k</name></expr></argument>, <argument><expr><name>r</name><operator>&amp;</operator><literal type="number">31</literal></expr></argument>)</argument_list></call></expr> </then><else>:
			  <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>k</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>%</operator> <name>sz</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>htab</name><index>[<expr><name>h</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Collision on primary slot. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>htab</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Collision on secondary slot. */</comment>
	<comment type="block">/* Try to move the colliding key, if possible. */</comment>
	<if_stmt><if>if <condition>(<expr><name>h</name> <operator>&lt;</operator> <name>sz</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>htab</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>k2</name> <init>= <expr><name><name>htab</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffffff</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h2</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>dorol</name></expr> ?</condition><then> <expr><call><name>lj_rol</name><argument_list>(<argument><expr><call><name>lj_rol</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>k2</name></expr></argument>, <argument><expr><name>r</name><operator>&amp;</operator><literal type="number">31</literal></expr></argument>)</argument_list></call></expr> </then><else>:
				 <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>k2</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>k2</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>r</name><operator>&amp;</operator><literal type="number">31</literal><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>%</operator> <name>sz</name></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><name>h2</name> <operator>!=</operator> <name>h</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Cannot resolve collision. */</comment>
	  <expr_stmt><expr><name><name>htab</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>htab</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* Move colliding key to secondary slot. */</comment>
	</block_content>}</block></if> <else>else <block>{<block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Collision. */</comment>
	</block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>htab</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>htab</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Success, all keys could be stored. */</comment>
</block_content>}</block></function>

<comment type="block">/* Print the generated hash table. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printhash</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>htab</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"static const uint32_t fold_hash[%d] = {\n0x%08x"</literal></expr></argument>,
	  <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>htab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">",\n0x%08x"</literal></expr></argument>, <argument><expr><name><name>htab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\n};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Exhaustive search for the shortest semi-perfect hash table. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>makehash</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>htab</name><index>[<expr><name>BUILD_MAX_FOLD</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
  <comment type="block">/* Search for the smallest hash table with an odd size. */</comment>
  <for>for <control>(<init><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>nkeys</name><operator>|</operator><literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>sz</name> <operator>&lt;</operator> <name>BUILD_MAX_FOLD</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>sz</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
    <comment type="block">/* First try all shift hash combinations. */</comment>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tryhash</name><argument_list>(<argument><expr><name>htab</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>printhash</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>htab</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
		<argument><expr><literal type="string">"#define fold_hashkey(k)\t(((((k)&lt;&lt;%u)-(k))&lt;&lt;%u)%%%u)\n\n"</literal></expr></argument>,
		<argument><expr><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>r</name><operator>&amp;</operator><literal type="number">31</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* Then try all rotate hash combinations. */</comment>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">32</literal><operator>*</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tryhash</name><argument_list>(<argument><expr><name>htab</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>printhash</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>htab</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>,
	  <argument><expr><literal type="string">"#define fold_hashkey(k)\t(lj_rol(lj_rol((k),%u)-(k),%u)%%%u)\n\n"</literal></expr></argument>,
		<argument><expr><name>r</name><operator>&gt;&gt;</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>r</name><operator>&amp;</operator><literal type="number">31</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: search for perfect hash failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Parse one token of a fold rule. */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>nexttoken</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allowlit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allowany</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>allowlit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"IRFPM_"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>irfpm_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>irfpm_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>allowlit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"IRFL_"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>irfield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>irfield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>allowlit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"IRCALL_"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ircall_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ircall_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>allowlit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"IRCONV_"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>irt_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>irt_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">7</literal></expr></argument>, <argument><expr><name>r</name><operator>-</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>uint32_t</name></type> <name>j</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>irt_names</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>irt_names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>j</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>allowlit</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>allowany</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"any"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>allowany</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ir_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ir_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: bad fold definition token \"%s\" at line %d\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Parse a fold rule. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>foldrule</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>op</name> <init>= <expr><call><name>nexttoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name> <init>= <expr><call><name>nexttoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>right</name> <init>= <expr><call><name>nexttoken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x3ff</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>funcidx</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>left</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <name>right</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nkeys</name> <operator>&gt;=</operator> <name>BUILD_MAX_FOLD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: too many fold rules, increase BUILD_MAX_FOLD.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Simple insertion sort to detect duplicates. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nkeys</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>foldkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffffff</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>foldkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xffffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>key</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: duplicate fold definition at line %d\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>foldkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>foldkeys</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>foldkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nkeys</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Emit C source code for IR folding hash table. */</comment>
<function><type><name>void</name></type> <name>emit_fold</name><parameter_list>(<parameter><decl><type><name>BuildCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* We don't care about analyzing lines longer than that. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: missing input filename\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot open input file '%s': %s\n"</literal></expr></argument>,
	      <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"/* This is a generated file. DO NOT EDIT! */\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"static const FoldFunc fold_func[] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>funcidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>nkeys</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
    <comment type="block">/* The prefix must be at the start of a line, otherwise it's ignored. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>FOLDDEF_PREFIX</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FOLDDEF_PREFIX</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>FOLDDEF_PREFIX</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>foldrule</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>q</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>funcidx</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"  %s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"  fold_%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>funcidx</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: unknown fold definition tag %s%s at line %d\n"</literal></expr></argument>,
		<argument><expr><name>FOLDDEF_PREFIX</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"\n};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>makehash</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
