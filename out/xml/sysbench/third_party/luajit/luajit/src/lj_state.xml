<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_state.c"><comment type="block">/*
** State and stack handling.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
**
** Portions taken verbatim or adapted from the Lua interpreter.
** Copyright (C) 1994-2008 Lua.org, PUC-Rio. See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_state_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_meta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_frame.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_alloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"luajit.h"</cpp:file></cpp:include>

<comment type="block">/* -- Stack handling ------------------------------------------------------ */</comment>

<comment type="block">/* Stack sizes. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJ_STACK_MIN</name></cpp:macro>	<cpp:value>LUA_MINSTACK</cpp:value></cpp:define>	<comment type="block">/* Min. stack size. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJ_STACK_MAX</name></cpp:macro>	<cpp:value>LUAI_MAXSTACK</cpp:value></cpp:define>	<comment type="block">/* Max. stack size. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJ_STACK_START</name></cpp:macro>	<cpp:value>(2*LJ_STACK_MIN)</cpp:value></cpp:define>	<comment type="block">/* Starting stack size. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJ_STACK_MAXEX</name></cpp:macro>	<cpp:value>(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)</cpp:value></cpp:define>

<comment type="block">/* Explanation of LJ_STACK_EXTRA:
**
** Calls to metamethods store their arguments beyond the current top
** without checking for the stack limit. This avoids stack resizes which
** would invalidate passed TValue pointers. The stack check is performed
** later by the function header. This can safely resize the stack or raise
** an error. Thus we need some extra slots beyond the current stack limit.
**
** Most metamethods need 4 slots above top (cont, mobj, arg1, arg2) plus
** one extra slot if mobj is not a function. Only lj_meta_tset needs 5
** slots above top, but then mobj is always a function. So we can get by
** with 5 extra slots.
** LJ_FR2: We need 2 more slots for the frame PC and the continuation PC.
*/</comment>

<comment type="block">/* Resize stack slots and adjust pointers in state. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>resizestack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>st</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldst</name> <init>= <expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>delta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>oldsize</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>realsize</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>LJ_STACK_EXTRA</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>maxstack</name></name></expr></argument>)</argument_list></call><operator>-</operator><name>oldst</name><operator>)</operator><operator>==</operator><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name><operator>-</operator><name>LJ_STACK_EXTRA</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>st</name> <operator>=</operator> <operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_realloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>oldsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TValue</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>realsize</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TValue</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>st</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>oldst</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>maxstack</name></name></expr></argument>, <argument><expr><name>st</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>oldsize</name> <operator>&lt;</operator> <name>realsize</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Clear new slots. */</comment>
    <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>st</name> <operator>+</operator> <name>oldsize</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>realsize</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>mref</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>jit_base</name></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>oldst</name><operator>)</operator> <operator>&lt;</operator> <name>oldsize</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>jit_base</name></expr></argument>, <argument><expr><call><name>mref</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>jit_base</name></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name>delta</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name>delta</name><operator>)</operator></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <call><name>gcref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>up</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>up</name> <operator>=</operator> <call><name>gcnext</name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><call><name>gco2uv</name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>uvval</name><argument_list>(<argument><expr><call><name>gco2uv</name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>delta</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* Relimit stack after error, in case the limit was overdrawn. */</comment>
<function><type><name>void</name></type> <name>lj_state_relimitstack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;</operator> <name>LJ_STACK_MAXEX</name> <operator>&amp;&amp;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LJ_STACK_MAX</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>resizestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_STACK_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Try to shrink the stack (called from GC). */</comment>
<function><type><name>void</name></type> <name>lj_state_shrinkstack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>used</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;</operator> <name>LJ_STACK_MAXEX</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* Avoid stack shrinking while handling stack overflow. */</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">4</literal><operator>*</operator><name>used</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&amp;&amp;</operator>
      <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>LJ_STACK_START</name><operator>+</operator><name>LJ_STACK_EXTRA</name><operator>)</operator> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&amp;&amp;</operator>
      <comment type="block">/* Don't shrink stack of live trace. */</comment>
      <operator>(</operator><call><name>tvref</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>jit_base</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>gcref</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>cur_L</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>resizestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Try to grow stack. */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_state_growstack</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>need</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>n</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;</operator> <name>LJ_STACK_MAXEX</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Overflow while handling overflow? */</comment>
    <expr_stmt><expr><call><name>lj_err_throw</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_ERRERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>+</operator> <name>need</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>LJ_STACK_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>LUA_MINSTACK</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>LJ_STACK_MAX</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>LJ_STACK_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>resizestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>&gt;</operator> <name>LJ_STACK_MAXEX</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_STKOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_state_growstack1</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_state_growstack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Allocate basic stack for new state. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stack_init</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>stend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>lj_mem_newvec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_STACK_START</name><operator>+</operator><name>LJ_STACK_EXTRA</name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <name>LJ_STACK_START</name> <operator>+</operator> <name>LJ_STACK_EXTRA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>stend</name> <operator>=</operator> <name>st</name> <operator>+</operator> <name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>maxstack</name></name></expr></argument>, <argument><expr><name>stend</name> <operator>-</operator> <name>LJ_STACK_EXTRA</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setthreadV</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>st</name><operator>++</operator></expr></argument>, <argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Needed for curr_funcisL() on empty stack. */</comment>
  <if_stmt><if>if <condition>(<expr><name>LJ_FR2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>st</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>L1</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>st</name> <operator>&lt;</operator> <name>stend</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Clear new slots. */</comment>
    <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name>st</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* -- State handling ------------------------------------------------------ */</comment>

<comment type="block">/* Open parts that may cause memory-allocation errors. */</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>cpluaopen</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stack_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: State initialization, all objects are white. */</comment>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><call><name>lj_tab_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LJ_MIN_GLOBAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>settabV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lj_tab_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LJ_MIN_REGISTRY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_str_resize</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_MIN_STRTAB</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_meta_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_lex_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fixstring</name><argument_list>(<argument><expr><call><name>lj_err_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_ERRMEM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Preallocate memory error msg. */</comment>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>total</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_trace_initstate</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_state</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_func_closeuv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_freeall</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>strnum</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_trace_freestate</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <expr_stmt><expr><call><name>lj_ctype_freestate</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>strhash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>strmask</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_buf_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tmpbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>total</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GG_State</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LUAJIT_USE_SYSMALLOC</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>allocf</name></name> <operator>==</operator> <name>lj_alloc_f</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_alloc_destroy</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>allocd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>g</name><operator>-&gt;</operator><name>allocf</name></name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>allocd</name></name></expr></argument>, <argument><expr><call><name>G2GG</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GG_State</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_GC64</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LUAJIT_USE_VALGRIND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LUAJIT_USE_SYSMALLOC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>lj_state_newstate</name><argument_list>(<argument><expr><name>lua_Alloc</name> <name>f</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ud</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>LUA_API</name> <name>lua_State</name> <modifier>*</modifier><name>lua_newstate</name><argument_list>(<argument><expr><name>lua_Alloc</name> <name>f</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>ud</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
  <decl_stmt><decl><type><name>GG_State</name> <modifier>*</modifier></type><name>GG</name> <init>= <expr><operator>(</operator><name>GG_State</name> <operator>*</operator><operator>)</operator><call><name>f</name><argument_list>(<argument><expr><name>ud</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GG_State</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><operator>&amp;</operator><name><name>GG</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>&amp;</operator><name><name>GG</name><operator>-&gt;</operator><name>g</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>GG</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>checkptrGC</name><argument_list>(<argument><expr><name>GG</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>GG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GG_State</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TTHREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <name>LJ_GC_WHITE0</name> <operator>|</operator> <name>LJ_GC_FIXED</name> <operator>|</operator> <name>LJ_GC_SFIXED</name></expr>;</expr_stmt>  <comment type="block">/* Prevent free. */</comment>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>dummy_ffid</name></name> <operator>=</operator> <name>FF_C</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>glref</name></name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>currentwhite</name></name> <operator>=</operator> <name>LJ_GC_WHITE0</name> <operator>|</operator> <name>LJ_GC_FIXED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strempty</name><operator>.</operator><name>marked</name></name> <operator>=</operator> <name>LJ_GC_WHITE0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strempty</name><operator>.</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TSTR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allocf</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>allocd</name></name> <operator>=</operator> <name>ud</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>mainthref</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>prev</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>uvhead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>uvhead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>strmask</name></name> <operator>=</operator> <operator>~</operator><operator>(</operator><name>MSize</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilnode</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilnode</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LJ_GC64</name></expr></cpp:if>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>nilnode</name><operator>.</operator><name>freetop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>nilnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>lj_buf_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tmpbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>GCSpause</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>sweep</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>total</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GG_State</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>pause</name></name> <operator>=</operator> <name>LUAI_GCPAUSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>stepmul</name></name> <operator>=</operator> <name>LUAI_GCMUL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_dispatch_init</name><argument_list>(<argument><expr><operator>(</operator><name>GG_State</name> <operator>*</operator><operator>)</operator><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LUA_ERRERR</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* Avoid touching the stack upon memory error. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>lj_vm_cpcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cpluaopen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Memory allocation error: free partial state. */</comment>
    <expr_stmt><expr><call><name>close_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LJ_TARGET_JUMPRANGE</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_MIPS</name></expr></cpp:if>
  <comment type="block">/* Use the middle of the 256MB-aligned region. */</comment>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>target</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>lj_vm_exit_handler</name> <operator>&amp;</operator>
                     <operator>~</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0x0fffffffu</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x08000000u</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>target</name> <init>= <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>lj_vm_exit_handler</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LJ_HASJIT</name></cpp:ifdef>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>range</name> <init>= <expr><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>LJ_TARGET_JUMPRANGE</name><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>allocbase</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prngstate</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_PRNG_BITS</name><argument_list>(<argument><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>allocbase</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>target</name> <operator>-</operator> <name>range</name> <operator>&gt;</operator> <name>target</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>target</name> <operator>-</operator> <name>range</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>allocbase</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>target</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>range</name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>allocbase</name> <operator>=</operator> <name>allocbase</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LUA_OK</name></expr>;</expr_stmt>
  <return>return <expr><name>L</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>cpfinalize</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ud</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_finalize_cdata</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_finalize_udata</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Frame pop omitted. */</comment>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>LUA_API</name> <name>void</name></type> <name>lua_close</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>mainthread</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Only the main thread can be closed. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASPROFILE</name></expr></cpp:if>
  <expr_stmt><expr><call><name>luaJIT_profile_stop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cur_L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_func_closeuv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_separateudata</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Separate udata which have GC metamethods. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>JIT_F_ON</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>state</name> <operator>=</operator> <name>LJ_TRACE_IDLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>hook_enter</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LUA_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>LJ_FR2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>cframe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>lj_vm_cpcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cpfinalize</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LUA_OK</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lj_gc_separateudata</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Separate udata again. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>gc</name><operator>.</operator><name>mmudata</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Until nothing is left to do. */</comment>
	<break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>close_state</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>lua_State</name> <modifier>*</modifier></type><name>lj_state_new</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L1</name> <init>= <expr><call><name>lj_mem_newobj</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_State</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TTHREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>dummy_ffid</name></name> <operator>=</operator> <name>FF_C</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>LUA_OK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>L1</name><operator>-&gt;</operator><name>cframe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: The lua_State is new (marked white). */</comment>
  <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmrefr</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>glref</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>glref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><name><name>L1</name><operator>-&gt;</operator><name>env</name></name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stack_init</name><argument_list>(<argument><expr><name>L1</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* init stack */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>iswhite</name><argument_list>(<argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>L1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_state_free</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>L</name> <operator>!=</operator> <call><name>mainthread</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>gcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cur_L</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>cur_L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_func_closeuv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>stacksize</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freet</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
