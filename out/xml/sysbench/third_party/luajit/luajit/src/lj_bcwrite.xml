<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_bcwrite.c"><comment type="block">/*
** Bytecode writer.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_bcwrite_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bcdump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>

<comment type="block">/* Context for bytecode writer. */</comment>
<typedef>typedef <type><struct>struct <name>BCWriteCtx</name> <block>{
  <decl_stmt><decl><type><name>SBuf</name></type> <name>sb</name></decl>;</decl_stmt>			<comment type="block">/* Output buffer. */</comment>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl>;</decl_stmt>			<comment type="block">/* Root prototype. */</comment>
  <decl_stmt><decl><type><name>lua_Writer</name></type> <name>wfunc</name></decl>;</decl_stmt>		<comment type="block">/* Writer callback. */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>wdata</name></decl>;</decl_stmt>			<comment type="block">/* Writer callback data. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>strip</name></decl>;</decl_stmt>			<comment type="block">/* Strip debug info. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>			<comment type="block">/* Status from writer callback. */</comment>
}</block></struct></type> <name>BCWriteCtx</name>;</typedef>

<comment type="block">/* -- Bytecode writer ----------------------------------------------------- */</comment>

<comment type="block">/* Write a single constant key/value of a template table. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_ktabk</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narrow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tvisstr</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GCstr</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>+</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>BCDUMP_KTAB_STR</name><operator>+</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_KTAB_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisnum</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>LJ_DUALNUM</name> <operator>&amp;&amp;</operator> <name>narrow</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Narrow number constants to integers. */</comment>
      <decl_stmt><decl><type><name>lua_Number</name></type> <name>num</name> <init>= <expr><call><name>numV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><call><name>lj_num2int</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>k</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* -0 is never a constant. */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_KTAB_INT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_KTAB_NUM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>tvispri</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_KTAB_NIL</name><operator>+</operator><operator>~</operator><call><name>itype</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Write a template table. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_ktab</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>narray</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nhash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>asize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Determine max. length of array part. */</comment>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>t</name><operator>-&gt;</operator><name>asize</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><name>narray</name> <operator>=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>hmask</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Count number of used hash slots. */</comment>
    <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>hmask</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>hmask</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>noderef</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>hmask</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name>nhash</name> <operator>+=</operator> <operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Write number of array slots and hash slots. */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>narray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>narray</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Write array entries (may contain nil). */</comment>
    <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>tvref</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>narray</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>bcwrite_ktabk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nhash</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Write hash entries. */</comment>
    <decl_stmt><decl><type><name>MSize</name></type> <name>i</name> <init>= <expr><name>nhash</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>noderef</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>hmask</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init><condition>;</condition> <incr><expr><name>node</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>bcwrite_ktabk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>bcwrite_ktabk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>--</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Write GC constants of a prototype. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_kgc</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sizekgc</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizekgc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCRef</name> <modifier>*</modifier></type><name>kr</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name>sizekgc</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizekgc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>gcref</name><argument_list>(<argument><expr><operator>*</operator><name>kr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MSize</name></type> <name>tp</name></decl>, <decl><type ref="prev"/><name>need</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <comment type="block">/* Determine constant type and needed size. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TSTR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tp</name> <operator>=</operator> <name>BCDUMP_KGC_STR</name> <operator>+</operator> <call><name>gco2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>need</name> <operator>=</operator> <literal type="number">5</literal><operator>+</operator><call><name>gco2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TPROTO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_CHILD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tp</name> <operator>=</operator> <name>BCDUMP_KGC_CHILD</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TCDATA</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><call><name>gco2cd</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ctypeid</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>need</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>CTID_INT64</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>BCDUMP_KGC_I64</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>id</name> <operator>==</operator> <name>CTID_UINT64</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>BCDUMP_KGC_U64</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name>CTID_COMPLEX_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <name>BCDUMP_KGC_COMPLEX</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TTAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tp</name> <operator>=</operator> <name>BCDUMP_KGC_TAB</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>need</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* Write constant type. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Write constant data (if any). */</comment>
    <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>&gt;=</operator> <name>BCDUMP_KGC_STR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><call><name>gco2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>gco2str</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tp</name> <operator>==</operator> <name>BCDUMP_KGC_TAB</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bcwrite_ktab</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>gco2tab</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tp</name> <operator>!=</operator> <name>BCDUMP_KGC_CHILD</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><name>TValue</name> <operator>*</operator><operator>)</operator><call><name>cdataptr</name><argument_list>(<argument><expr><call><name>gco2cd</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tp</name> <operator>==</operator> <name>BCDUMP_KGC_COMPLEX</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><operator>.</operator><name>lo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Write number constants of a prototype. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_knum</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sizekn</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizekn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>TValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_more</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>*</operator><name>sizekn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizekn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>k</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>save_int</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/* Write a 33 bit ULEB128 for the int (lsb=0) or loword (lsb=1). */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>LJ_DUALNUM</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Narrow number constants to integers. */</comment>
	<decl_stmt><decl><type><name>lua_Number</name></type> <name>num</name> <init>= <expr><call><name>numV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>lj_num2int</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>k</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* -0 is never a constant. */</comment>
	<label><name>save_int</name>:</label>
	  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>k</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>k</name><operator>&amp;</operator><literal type="number">0x80000000u</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>k</name><operator>&gt;&gt;</operator><literal type="number">27</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x18</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>|</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&amp;</operator> <literal type="number">0x80000000u</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name> <operator>&gt;=</operator> <literal type="number">0x80000000u</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>lo</name></name><operator>&gt;&gt;</operator><literal type="number">27</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x18</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>u32</name><operator>.</operator><name>hi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Write bytecode instructions. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>bcwrite_bytecode</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>nbc</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* Omit the [JI]FUNC* header. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nbc</name><operator>*</operator><operator>(</operator><name>MSize</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BCIns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <comment type="block">/* Unpatch modified bytecode containing ILOOP/JLOOP etc. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_ILOOP</name><operator>)</operator> <operator>||</operator> <name><name>pt</name><operator>-&gt;</operator><name>trace</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BCIns</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>BCOp</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>BCOp</name><operator>)</operator><name><name>q</name><index>[<expr><call><name>LJ_ENDIAN_SELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_IFORL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_IITERL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_ILOOP</name> <operator>||</operator>
	  <name>op</name> <operator>==</operator> <name>BC_JFORI</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>q</name><index>[<expr><call><name>LJ_ENDIAN_SELECT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>op</name><operator>-</operator><name>BC_IFORL</name><operator>+</operator><name>BC_FORL</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_JFORL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_JITERL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_JLOOP</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>BCReg</name></type> <name>rd</name> <init>= <expr><name><name>q</name><index>[<expr><call><name>LJ_ENDIAN_SELECT</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>q</name><index>[<expr><call><name>LJ_ENDIAN_SELECT</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>startins</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write prototype. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_proto</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>sizedbg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <comment type="block">/* Recursively write children of prototype. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_CHILD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizekgc</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GCRef</name> <modifier>*</modifier></type><name>kr</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>kr</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>gcref</name><argument_list>(<argument><expr><operator>*</operator><name>kr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name> <operator>==</operator> <operator>~</operator><name>LJ_TPROTO</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>bcwrite_proto</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>gco2pt</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Start writing the prototype info to a buffer. */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_need</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>,
		  <argument><expr><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">6</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>MSize</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>BCIns</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>  <comment type="block">/* Leave room for final size. */</comment>

  <comment type="block">/* Write prototype header. */</comment>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PROTO_CHILD</name><operator>|</operator><name>PROTO_VARARG</name><operator>|</operator><name>PROTO_FFI</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>numparams</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>framesize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizekgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizekn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>strip</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>proto_lineinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>sizedbg</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizept</name></name> <operator>-</operator> <operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>proto_lineinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pt</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sizedbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sizedbg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>numline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Write bytecode instructions and upvalue refs. */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bcwrite_bytecode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>proto_uv</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Write constants. */</comment>
  <expr_stmt><expr><call><name>bcwrite_kgc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bcwrite_knum</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Write debug info, if not stripped. */</comment>
  <if_stmt><if>if <condition>(<expr><name>sizedbg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_more</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>sizedbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>proto_lineinfo</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sizedbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setsbufP</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Pass buffer to writer function. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>MSize</name></type> <name>n</name> <init>= <expr><call><name>sbuflen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MSize</name></type> <name>nn</name> <init>= <expr><operator>(</operator><call><name>lj_fls</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><literal type="number">9</literal> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>sbufB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>nn</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Fill in final size. */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <call><name>sbufB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>wfunc</name></name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>nn</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Write header of bytecode dump. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_header</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>chunkname</name> <init>= <expr><call><name>proto_chunkname</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><name>chunkname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>len</name> <init>= <expr><name><name>chunkname</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>lj_buf_need</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>+</operator><literal type="number">5</literal><operator>+</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_HEAD1</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_HEAD2</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_HEAD3</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>BCDUMP_VERSION</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>strip</name></name></expr> ?</condition><then> <expr><name>BCDUMP_F_STRIP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
	 <name>LJ_BE</name><operator>*</operator><name>BCDUMP_F_BE</name> <operator>+</operator>
	 <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_FFI</name><operator>)</operator></expr> ?</condition><then> <expr><name>BCDUMP_F_FFI</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
	 <name>LJ_FR2</name><operator>*</operator><name>BCDUMP_F_FR2</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>strip</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_strfmt_wuleb128</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lj_buf_wmem</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>wfunc</name></name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sbufB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <call><name>sbufB</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Write footer of bytecode dump. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bcwrite_footer</name><parameter_list>(<parameter><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>wfunc</name></name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>wdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Protected callback for bytecode writer. */</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>cpwriter</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>BCWriteCtx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>BCWriteCtx</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_buf_need</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>sb</name></name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Avoids resize for most prototypes. */</comment>
  <expr_stmt><expr><call><name>bcwrite_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bcwrite_proto</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bcwrite_footer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Write bytecode for a prototype. */</comment>
<function><type><name>int</name></type> <name>lj_bcwrite</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>lua_Writer</name></type> <name>writer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
	      <parameter><decl><type><name>int</name></type> <name>strip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>BCWriteCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pt</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>wfunc</name></name> <operator>=</operator> <name>writer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>wdata</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>strip</name></name> <operator>=</operator> <name>strip</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_buf_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lj_vm_cpcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>cpwriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>status</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>status</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_buf_free</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><call><name>sbufL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>sb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

</unit>
