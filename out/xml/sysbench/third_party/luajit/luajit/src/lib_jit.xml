<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lib_jit.c"><comment type="block">/*
** JIT library.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_jit_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ircall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_iropt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_target.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vmevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"luajit.h"</cpp:file></cpp:include>

<comment type="block">/* -- jit.* functions ----------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_jit</name></cpp:macro></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>setjitmode</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>==</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>||</operator> <call><name>tvisnil</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* jit.on/off/flush([nil]) */</comment>
    <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>LUAJIT_MODE_ENGINE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* jit.on/off/flush(func|proto, nil|true|false) */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tvisproto</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>tvistrue</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* jit.on/off/flush(true, nil|true|false) */</comment>
      <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <call><name>tvisbool</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>mode</name> <operator>|=</operator> <ternary><condition><expr><call><name>boolV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>LUAJIT_MODE_ALLFUNC</name></expr> </then><else>: <expr><name>LUAJIT_MODE_ALLSUBFUNC</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>LUAJIT_MODE_FUNC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>luaJIT_setmode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>LUAJIT_MODE_MASK</name><operator>)</operator> <operator>==</operator> <name>LUAJIT_MODE_ENGINE</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_err_caller</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_NOJIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <label><name>err</name>:</label>
    <expr_stmt><expr><call><name>lj_err_argt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_on</argument>)</argument_list></macro>
<block>{<block_content>
  <return>return <expr><call><name>setjitmode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUAJIT_MODE_ON</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_off</argument>)</argument_list></macro>
<block>{<block_content>
  <return>return <expr><call><name>setjitmode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUAJIT_MODE_OFF</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_flush</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <call><name>tvisnumber</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>traceno</name> <init>= <expr><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>luaJIT_setmode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>traceno</name></expr></argument>, <argument><expr><name>LUAJIT_MODE_FLUSH</name><operator>|</operator><name>LUAJIT_MODE_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><call><name>setjitmode</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUAJIT_MODE_FLUSH</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<comment type="block">/* Push a string for every flag bit that is set. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>flagbits_to_strings</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>base</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>base</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>str</name> <operator>+=</operator> <literal type="number">1</literal><operator>+</operator><operator>*</operator><name>str</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>base</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_status</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JIT_F_ON</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>flagbits_to_strings</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>JIT_F_CPU</name></expr></argument>, <argument><expr><name>JIT_F_CPUSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>flagbits_to_strings</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>JIT_F_OPT</name></expr></argument>, <argument><expr><name>JIT_F_OPTSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>setboolV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_attach</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_DISABLE_VMEVENT</name></cpp:ifdef>
  <expr_stmt><expr><call><name>luaL_error</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"vmevent API disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>lj_lib_checkfunc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>lj_lib_optstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaL_findtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><name>LJ_VMEVENTS_REGKEY</name></expr></argument>, <argument><expr><name>LJ_VMEVENTS_HSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Attach to given event. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>strdata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>^</operator> <operator>(</operator><call><name>lj_rol</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>lua_pushvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_rawseti</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>VMEVENT_HASHIDX</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>vmevmask</name> <operator>=</operator> <name>VMEVENT_NOCACHE</name></expr>;</expr_stmt>  <comment type="block">/* Invalidate cache. */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Detach if no event given. */</comment>
    <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>lua_next</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>funcV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fn</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><call><name>lj_tab_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<macro><name>LJLIB_PUSH</name><argument_list>(<argument>top-<literal type="number">5</literal></argument>)</argument_list></macro> <macro><name>LJLIB_SET</name><argument_list>(<argument>os</argument>)</argument_list></macro>
<macro><name>LJLIB_PUSH</name><argument_list>(<argument>top-<literal type="number">4</literal></argument>)</argument_list></macro> <macro><name>LJLIB_SET</name><argument_list>(<argument>arch</argument>)</argument_list></macro>
<macro><name>LJLIB_PUSH</name><argument_list>(<argument>top-<literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>LJLIB_SET</name><argument_list>(<argument>version_num</argument>)</argument_list></macro>
<macro><name>LJLIB_PUSH</name><argument_list>(<argument>top-<literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>LJLIB_SET</name><argument_list>(<argument>version</argument>)</argument_list></macro>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<comment type="block">/* -- jit.util.* functions ------------------------------------------------ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_jit_util</name></cpp:macro></cpp:define>

<comment type="block">/* -- Reflection API for Lua functions ------------------------------------ */</comment>

<comment type="block">/* Return prototype of first argument (Lua function or prototype object) */</comment>
<function><type><specifier>static</specifier> <name>GCproto</name> <modifier>*</modifier></type><name>check_Lproto</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nolua</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;</operator> <name>o</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tvisproto</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>protoV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isluafunc</name><argument_list>(<argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><call><name>funcproto</name><argument_list>(<argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>nolua</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_err_argt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LUA_TFUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* unreachable */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setintfield</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><call><name>lj_tab_setstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>lj_str_newz</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* local info = jit.util.funcinfo(func [,pc]) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_funcinfo</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>check_Lproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pt</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCPos</name></type> <name>pc</name> <init>= <expr><operator>(</operator><name>BCPos</name><operator>)</operator><call><name>lj_lib_optint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Increment hash size if fields are added. */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>tabV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"linedefined"</literal></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"lastlinedefined"</literal></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>firstline</name></name> <operator>+</operator> <name><name>pt</name><operator>-&gt;</operator><name>numline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"stackslots"</literal></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>numparams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"bytecodes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"gcconsts"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizekgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"nconsts"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizekn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"upvalues"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"currentline"</literal></expr></argument>, <argument><expr><call><name>lj_debug_line</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_VARARG</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"isvararg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushboolean</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_CHILD</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"children"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><call><name>proto_chunkname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_debug_pushloc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"loc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setprotoV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lj_tab_setstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>lj_str_newlit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"proto"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>funcV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Increment hash size if fields are added. */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>tabV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iscfunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"ffid"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>ffid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>setintptrV</name><argument_list>(<argument><expr><call><name>lj_tab_setstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>lj_str_newlit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"addr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
	       <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"upvalues"</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local ins, m = jit.util.funcbc(func, pc) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_funcbc</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>check_Lproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCPos</name></type> <name>pc</name> <init>= <expr><operator>(</operator><name>BCPos</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCIns</name></type> <name>ins</name> <init>= <expr><call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call><index>[<expr><name>pc</name></expr>]</index></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BCOp</name></type> <name>op</name> <init>= <expr><call><name>bc_op</name><argument_list>(<argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>op</name> <operator>&lt;</operator> <name>BC__MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name>ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>lj_bc_mode</name><index>[<expr><name>op</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local k = jit.util.funck(func, idx) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_funck</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>check_Lproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizekn</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>copyTV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>proto_knumtv</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>~</operator><name>idx</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizekgc</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>gc</name> <init>= <expr><call><name>proto_kgc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setgcV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>gc</name></expr></argument>, <argument><expr><operator>~</operator><name><name>gc</name><operator>-&gt;</operator><name>gch</name><operator>.</operator><name>gct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local name = jit.util.funcuvname(func, idx) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_funcuvname</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><call><name>check_Lproto</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_str_newz</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lj_debug_uvname</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* -- Reflection API for traces ------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<comment type="block">/* Check trace argument. Must not throw for non-existent trace numbers. */</comment>
<function><type><specifier>static</specifier> <name>GCtrace</name> <modifier>*</modifier></type><name>jit_checktrace</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TraceNo</name></type> <name>tr</name> <init>= <expr><operator>(</operator><name>TraceNo</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tr</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tr</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Names of link types. ORDER LJ_TRLINK */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>jit_trlinkname</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"root"</literal></expr>, <expr><literal type="string">"loop"</literal></expr>, <expr><literal type="string">"tail-recursion"</literal></expr>, <expr><literal type="string">"up-recursion"</literal></expr>, <expr><literal type="string">"down-recursion"</literal></expr>,
  <expr><literal type="string">"interpreter"</literal></expr>, <expr><literal type="string">"return"</literal></expr>, <expr><literal type="string">"stitch"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* local info = jit.util.traceinfo(tr) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_traceinfo</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>jit_checktrace</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>T</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Increment hash size if fields are added. */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>tabV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"nins"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>T</name><operator>-&gt;</operator><name>nins</name></name> <operator>-</operator> <name>REF_BIAS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"nk"</literal></expr></argument>, <argument><expr><name>REF_BIAS</name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>T</name><operator>-&gt;</operator><name>nk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"nexit"</literal></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><call><name>lj_str_newz</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>jit_trlinkname</name><index>[<expr><name><name>T</name><operator>-&gt;</operator><name>linktype</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"linktype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* There are many more fields. Add them only when needed. */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local m, ot, op1, op2, prev = jit.util.traceir(tr, idx) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_traceir</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>jit_checktrace</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>(</operator><name>IRRef</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>REF_BIAS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name>ref</name> <operator>&gt;=</operator> <name>REF_BIAS</name> <operator>&amp;&amp;</operator> <name>ref</name> <operator>&lt;</operator> <name><name>T</name><operator>-&gt;</operator><name>nins</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><operator>&amp;</operator><name><name>T</name><operator>-&gt;</operator><name>ir</name><index>[<expr><name>ref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>m</name> <init>= <expr><name><name>lj_ir_mode</name><index>[<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ir</name><operator>-&gt;</operator><name>ot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><call><name>irm_op1</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>==</operator><name>IRMref</name></expr> ?</condition><then> <expr><name>REF_BIAS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><call><name>irm_op2</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>==</operator><name>IRMref</name></expr> ?</condition><then> <expr><name>REF_BIAS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">5</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local k, t [, slot] = jit.util.tracek(tr, idx) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_tracek</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>jit_checktrace</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>(</operator><name>IRRef</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>REF_BIAS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name>ref</name> <operator>&gt;=</operator> <name><name>T</name><operator>-&gt;</operator><name>nk</name></name> <operator>&amp;&amp;</operator> <name>ref</name> <operator>&lt;</operator> <name>REF_BIAS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><operator>&amp;</operator><name><name>T</name><operator>-&gt;</operator><name>ir</name><index>[<expr><name>ref</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>slot</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KSLOT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>ir</name><operator>-&gt;</operator><name>op2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ir</name> <operator>=</operator> <operator>&amp;</operator><name><name>T</name><operator>-&gt;</operator><name>ir</name><index>[<expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KINT64</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ctype_ctsG</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>oldtop</name> <init>= <expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>luaopen_ffi</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Load FFI library on-demand. */</comment>
      <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>restorestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>oldtop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>lj_ir_kvalue</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>irt_type</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local snap = jit.util.tracesnap(tr, sn) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_tracesnap</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>jit_checktrace</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SnapNo</name></type> <name>sn</name> <init>= <expr><operator>(</operator><name>SnapNo</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name>sn</name> <operator>&lt;</operator> <name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SnapShot</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><operator>&amp;</operator><name><name>T</name><operator>-&gt;</operator><name>snap</name><index>[<expr><name>sn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SnapEntry</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>&amp;</operator><name><name>T</name><operator>-&gt;</operator><name>snapmap</name><index>[<expr><name><name>snap</name><operator>-&gt;</operator><name>mapofs</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MSize</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nent</name> <init>= <expr><name><name>snap</name><operator>-&gt;</operator><name>nent</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_createtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>nent</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>tabV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><call><name>lj_tab_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>snap</name><operator>-&gt;</operator><name>ref</name></name> <operator>-</operator> <name>REF_BIAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><call><name>lj_tab_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>snap</name><operator>-&gt;</operator><name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nent</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><call><name>lj_tab_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>map</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><call><name>lj_tab_setint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>nent</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>SNAP</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local mcode, addr, loop = jit.util.tracemc(tr) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_tracemc</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>jit_checktrace</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>mcode</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>T</name><operator>-&gt;</operator><name>mcode</name></name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>szmcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintptrV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>T</name><operator>-&gt;</operator><name>mcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>mcloop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local addr = jit.util.traceexitstub([tr,] exitno) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_traceexitstub</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EXITSTUBS_PER_GROUP</name></cpp:ifdef>
  <decl_stmt><decl><type><name>ExitNo</name></type> <name>exitno</name> <init>= <expr><operator>(</operator><name>ExitNo</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>exitno</name> <operator>&lt;</operator> <name>EXITSTUBS_PER_GROUP</name><operator>*</operator><name>LJ_MAX_EXITSTUBGR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setintptrV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>exitstub_addr</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>exitno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Don't throw for one-argument variant. */</comment>
    <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>jit_checktrace</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExitNo</name></type> <name>exitno</name> <init>= <expr><operator>(</operator><name>ExitNo</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExitNo</name></type> <name>maxexit</name> <init>= <expr><ternary><condition><expr><name><name>T</name><operator>-&gt;</operator><name>root</name></name></expr> ?</condition><then> <expr><name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>mcode</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>exitno</name> <operator>&lt;</operator> <name>maxexit</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setintptrV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>exitstub_trace_addr</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>exitno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* local addr = jit.util.ircalladdr(idx) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_util_ircalladdr</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>idx</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <name>IRCALL__MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setintptrV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>lj_ir_callinfo</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>luaopen_jit_util</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jit_util</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- jit.opt module ------------------------------------------------------ */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_jit_opt</name></cpp:macro></cpp:define>

<comment type="block">/* Parse optimization level. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jitopt_level</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>JIT_F_OPT_0</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>JIT_F_OPT_1</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>JIT_F_OPT_2</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>JIT_F_OPT_3</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>JIT_F_OPT_MASK</name><operator>)</operator> <operator>|</operator> <name>flags</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Ok. */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* No match. */</comment>
</block_content>}</block></function>

<comment type="block">/* Parse optimization flag. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jitopt_flag</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name>JIT_F_OPTSTRING</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>set</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'o'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>+=</operator> <ternary><condition><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>set</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><expr><name>opt</name> <operator>=</operator> <name>JIT_F_OPT</name></expr>;</init> <condition>;</condition> <incr><expr><name>opt</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>lst</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>lst</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>opt</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>opt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Ok. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lst</name> <operator>+=</operator> <literal type="number">1</literal><operator>+</operator><name>len</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* No match. */</comment>
</block_content>}</block></function>

<comment type="block">/* Parse optimization parameter. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jitopt_param</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lst</name> <init>= <expr><name>JIT_P_STRING</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>JIT_P__MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>lst</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>lst</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Malformed number. */</comment>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>JIT_P_hotloop</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_dispatch_init_hotcount</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Ok. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>lst</name> <operator>+=</operator> <literal type="number">1</literal><operator>+</operator><name>len</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* No match. */</comment>
</block_content>}</block></function>

<comment type="block">/* jit.opt.start(flags...) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_opt_start</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nargs</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>JIT_F_OPT_MASK</name><operator>)</operator> <operator>|</operator> <name>JIT_F_OPT_DEFAULT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>strdata</name><argument_list>(<argument><expr><call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jitopt_level</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>jitopt_flag</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>!</operator><call><name>jitopt_param</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>lj_err_callerv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_JITOPT</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- jit.profile module -------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASPROFILE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_jit_profile</name></cpp:macro></cpp:define>

<comment type="block">/* Not loaded by default, use: local profile = require("jit.profile") */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>KEY_PROFILE_THREAD</name> <init>= <expr><literal type="char">'t'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>KEY_PROFILE_FUNC</name> <init>= <expr><literal type="char">'f'</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jit_profile_callback</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L2</name></decl></parameter>, <parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samples</name></decl></parameter>,
				 <parameter><decl><type><name>int</name></type> <name>vmstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name></type> <name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>KEY_PROFILE_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>lj_tab_get</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>tabV</name><argument_list>(<argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tvisfunc</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>vmst</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><name>vmstate</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setfuncV</name><argument_list>(<argument><expr><name>L2</name></expr></argument>, <argument><expr><name><name>L2</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><call><name>funcV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setthreadV</name><argument_list>(<argument><expr><name>L2</name></expr></argument>, <argument><expr><name><name>L2</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L2</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L2</name></expr></argument>, <argument><expr><name><name>L2</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vmst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>lua_pcall</name><argument_list>(<argument><expr><name>L2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* callback(thread, samples, vmstate) */</comment>
    <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>L2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>panic</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>G</name><argument_list>(<argument><expr><name>L2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>panic</name><argument_list>(<argument><expr><name>L2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lj_trace_abort</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* profile.start(mode, cb) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_profile_start</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>registry</name> <init>= <expr><call><name>tabV</name><argument_list>(<argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>lj_lib_optstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>lj_lib_checkfunc</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L2</name> <init>= <expr><call><name>lua_newthread</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Thread that runs profiler callback. */</comment>
  <decl_stmt><decl><type><name>TValue</name></type> <name>key</name></decl>;</decl_stmt>
  <comment type="block">/* Anchor thread and function in registry. */</comment>
  <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>KEY_PROFILE_THREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setthreadV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lj_tab_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>L2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>KEY_PROFILE_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setfuncV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>lj_tab_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_anybarriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>luaJIT_profile_start</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mode</name></expr> ?</condition><then> <expr><call><name>strdata</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
		       <argument><expr><operator>(</operator><name>luaJIT_profile_callback</name><operator>)</operator><name>jit_profile_callback</name></expr></argument>, <argument><expr><name>L2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* profile.stop() */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_profile_stop</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>registry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>key</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>luaJIT_profile_stop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>registry</name> <operator>=</operator> <call><name>tabV</name><argument_list>(<argument><expr><call><name>registry</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>KEY_PROFILE_THREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><call><name>lj_tab_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>KEY_PROFILE_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><call><name>lj_tab_set</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_anybarriert</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>registry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* dump = profile.dumpstack([thread,] fmt, depth) */</comment>
<macro><name>LJLIB_CF</name><argument_list>(<argument>jit_profile_dumpstack</argument>)</argument_list></macro>
<block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L2</name> <init>= <expr><name>L</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>arg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&gt;</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>&amp;&amp;</operator> <call><name>tvisthread</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>L2</name> <operator>=</operator> <call><name>threadV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>lj_lib_checkstr</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>depth</name> <operator>=</operator> <call><name>lj_lib_checkint</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>arg</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>luaJIT_profile_dumpstack</name><argument_list>(<argument><expr><name>L2</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushlstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>luaopen_jit_profile</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>jit_profile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- JIT compiler initialization ----------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<comment type="block">/* Default values for JIT parameters. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>jit_param_default</name><index>[<expr><name>JIT_P__MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JIT_PARAMINIT</name><parameter_list>(<parameter><type><name>len</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(value),</cpp:value></cpp:define>
<expr><call><name>JIT_PARAMDEF</name><argument_list>(<argument><expr><name>JIT_PARAMINIT</name></expr></argument>)</argument_list></call>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JIT_PARAMINIT</name></cpp:undef>
  <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_ARM</name> <operator>&amp;&amp;</operator> <name>LJ_TARGET_LINUX</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Arch-dependent CPU feature detection. */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>jit_cpudetect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>vendor</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>features</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>lj_vm_cpuid</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vendor</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>lj_vm_cpuid</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>features</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>features</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>JIT_F_SSE3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>features</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>JIT_F_SSE4_1</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vendor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>xfeatures</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lj_vm_cpuid</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>xfeatures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>xfeatures</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>JIT_F_BMI2</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Don't bother checking for SSE2 -- the VM will crash before getting here. */</comment>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_ARM</name></expr></cpp:elif>

  <decl_stmt><decl><type><name>int</name></type> <name>ver</name> <init>= <expr><name>LJ_ARCH_VERSION</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Compile-time ARM CPU detection. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_LINUX</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Runtime ARM CPU detection. */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>ut</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ut</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><literal type="string">"armv"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>ut</name><operator>.</operator><name>machine</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'8'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ver</name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>ut</name><operator>.</operator><name>machine</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ver</name> <operator>=</operator> <literal type="number">70</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>ut</name><operator>.</operator><name>machine</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'6'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ver</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name>ver</name> <operator>&gt;=</operator> <literal type="number">70</literal></expr> ?</condition><then> <expr><name>JIT_F_ARMV7</name></expr> </then><else>:
	   <expr><ternary><condition><expr><name>ver</name> <operator>&gt;=</operator> <literal type="number">61</literal></expr> ?</condition><then> <expr><name>JIT_F_ARMV6T2_</name></expr> </then><else>:
	   <expr><ternary><condition><expr><name>ver</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr> ?</condition><then> <expr><name>JIT_F_ARMV6_</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name>LJ_ARCH_HASFPU</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name>ver</name> <operator>&gt;=</operator> <literal type="number">70</literal></expr> ?</condition><then> <expr><name>JIT_F_VFPV3</name></expr> </then><else>: <expr><name>JIT_F_VFPV2</name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_ARM64</name></expr></cpp:elif>

  <comment type="block">/* No optional CPU features to detect (for now). */</comment>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_SQRT</name></expr></cpp:if>
  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JIT_F_SQRT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_ROUND</name></expr></cpp:if>
  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JIT_F_ROUND</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_MIPS</name></expr></cpp:elif>

  <comment type="block">/* Compile-time MIPS CPU detection. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_ARCH_VERSION</name> <operator>&gt;=</operator> <literal type="number">20</literal></expr></cpp:if>
  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JIT_F_MIPSXXR2</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* Runtime MIPS CPU detection. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>JIT_F_MIPSXXR2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__mips16</name></cpp:ifdef>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Runtime detection is difficult. Ensure optimal -march flags. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* On MIPS32R1 rotr is treated as srl. rotr r2,r2,1 -&gt; srl r2,r2,1. */</comment>
    <asm>__asm__("li $2, 1\n\t.long 0x00221042\n\tmove %0, $2" : "=r"(x) : : "$2");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>JIT_F_MIPSXXR2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Either 0x80000000 (R2) or 0 (R1). */</comment>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing CPU detection for this architecture"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize JIT compiler. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jit_init</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>jit_cpudetect</name><argument_list>()</argument_list></call> <operator>|</operator> <name>JIT_F_ON</name> <operator>|</operator> <name>JIT_F_OPT_DEFAULT</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><name>jit_param_default</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_jit</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <expr_stmt><expr><call><name>jit_init</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_OS_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ARCH_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushinteger</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUAJIT_VERSION_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_pushliteral</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUAJIT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_JITLIBNAME</name></expr></argument>, <argument><expr><name>jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASPROFILE</name></expr></cpp:if>
  <expr_stmt><expr><call><name>lj_lib_prereg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_JITLIBNAME</name> <literal type="string">".profile"</literal></expr></argument>, <argument><expr><name>luaopen_jit_profile</name></expr></argument>,
		<argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LUAJIT_DISABLE_JITUTIL</name></cpp:ifndef>
  <expr_stmt><expr><call><name>lj_lib_prereg</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_JITLIBNAME</name> <literal type="string">".util"</literal></expr></argument>, <argument><expr><name>luaopen_jit_util</name></expr></argument>, <argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"jit.opt"</literal></expr></argument>, <argument><expr><name>jit_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
