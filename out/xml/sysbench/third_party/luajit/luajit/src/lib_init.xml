<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lib_init.c"><comment type="block">/*
** Library initialization.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
**
** Major parts taken verbatim from the Lua interpreter.
** Copyright (C) 1994-2008 Lua.org, PUC-Rio. See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_init_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_arch.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>lj_lib_load</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">""</literal></expr>,			<expr><name>luaopen_base</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_LOADLIBNAME</name></expr>,	<expr><name>luaopen_package</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_TABLIBNAME</name></expr>,	<expr><name>luaopen_table</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_IOLIBNAME</name></expr>,	<expr><name>luaopen_io</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_OSLIBNAME</name></expr>,	<expr><name>luaopen_os</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_STRLIBNAME</name></expr>,	<expr><name>luaopen_string</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_MATHLIBNAME</name></expr>,	<expr><name>luaopen_math</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_DBLIBNAME</name></expr>,	<expr><name>luaopen_debug</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_BITLIBNAME</name></expr>,	<expr><name>luaopen_bit</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>LUA_JITLIBNAME</name></expr>,	<expr><name>luaopen_jit</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>lj_lib_preload</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <expr><block>{ <expr><name>LUA_FFILIBNAME</name></expr>,	<expr><name>luaopen_ffi</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><block>{ <expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>LUALIB_API</name> <name>void</name></type> <name>luaL_openlibs</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>luaL_Reg</name> <modifier>*</modifier></type><name>lib</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>lib</name> <operator>=</operator> <name>lj_lib_load</name></expr>;</init> <condition><expr><name><name>lib</name><operator>-&gt;</operator><name>func</name></name></expr>;</condition> <incr><expr><name>lib</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_call</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>luaL_findtable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_REGISTRYINDEX</name></expr></argument>, <argument><expr><literal type="string">"_PRELOAD"</literal></expr></argument>,
		 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lj_lib_preload</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>lj_lib_preload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>lib</name> <operator>=</operator> <name>lj_lib_preload</name></expr>;</init> <condition><expr><name><name>lib</name><operator>-&gt;</operator><name>func</name></name></expr>;</condition> <incr><expr><name>lib</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_pushcfunction</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_setfield</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>lib</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lua_pop</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
