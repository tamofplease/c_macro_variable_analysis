<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lib_bit.c"><comment type="block">/*
** Bit manipulation library.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_bit_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_LIB</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lauxlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lualib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_cdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_cconv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_carith.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lib.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LJLIB_MODULE_bit</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bit_result64</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCcdata</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><call><name>lj_cdata_new_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><call><name>cdataptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setcdataV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>FFH_RES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>bit_checkbit</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>narg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name> <operator>+</operator> <name>narg</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>&amp;&amp;</operator> <call><name>lj_strscan_numberobj</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_err_argt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>narg</name></expr></argument>, <argument><expr><name>LUA_TNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_LIKELY</name><argument_list>(<argument><expr><call><name>tvisint</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>intV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><call><name>lj_num2bit</name><argument_list>(<argument><expr><call><name>numV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>LJ_DUALNUM</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>i</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>bit_tobit</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_tobit</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>LJ_FR2</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>FFH_RES</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>bit_bnot</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_unary IR_BNOT</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><call><name>bit_result64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>~</operator><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>FFH_RETRY</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>bit_bswap</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_unary IR_BSWAP</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><call><name>bit_result64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>lj_bswap64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>FFH_RETRY</name></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>bit_lshift</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_shift IR_BSHL</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>id2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sh</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>lj_carith_shift64</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>, <argument><expr><call><name>curr_func</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>c</name><operator>.</operator><name>ffid</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>FF_bit_lshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>bit_result64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>id2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bit_checkbit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>bit_rshift</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_shift IR_BSHR</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>bit_arshift</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_shift IR_BSAR</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>bit_rol</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_shift IR_BROL</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>bit_ror</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_shift IR_BROR</argument>)</argument_list></macro>

<macro><name>LJLIB_ASM</name><argument_list>(<argument>bit_band</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_nary IR_BAND</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>top</name> <init>= <expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content> <expr_stmt><expr><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><operator>++</operator><name>o</name> <operator>&lt;</operator> <name>top</name></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name> <init>= <expr><call><name>ctype_cts</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><call><name>curr_func</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>c</name><operator>.</operator><name>ffid</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>FF_bit_bor</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><ternary><condition><expr><name>op</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>~</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <expr_stmt><expr><call><name>lj_cconv_ct_tv</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>&amp;=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>|=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>^=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block> while <condition>(<expr><operator>++</operator><name>o</name> <operator>&lt;</operator> <name>top</name></expr>)</condition>;</do>
    <return>return <expr><call><name>bit_result64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content> <expr_stmt><expr><call><name>lj_lib_checknumber</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><name>i</name> <operator>&lt;</operator> <name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr>)</condition>;</do>
  <return>return <expr><name>FFH_RETRY</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>bit_bor</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_nary IR_BOR</argument>)</argument_list></macro>
<macro><name>LJLIB_ASM_</name><argument_list>(<argument>bit_bxor</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>bit_nary IR_BXOR</argument>)</argument_list></macro>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<macro><name>LJLIB_CF</name><argument_list>(<argument>bit_tohex</argument>)</argument_list></macro>		<macro><name>LJLIB_REC</name><argument_list>(<argument>.</argument>)</argument_list></macro>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>id2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>b</name> <init>= <expr><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal><operator>&gt;=</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>id</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:
				  <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>lj_carith_check64</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id2</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>bit_checkbit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>+</operator><literal type="number">1</literal><operator>&gt;=</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><call><name>bit_checkbit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFormat</name></type> <name>sf</name> <init>= <expr><operator>(</operator><name>STRFMT_UINT</name><operator>|</operator><name>STRFMT_T_HEX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt> <expr_stmt><expr><name>sf</name> <operator>|=</operator> <name>STRFMT_F_UPPER</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>sf</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>SFormat</name><operator>)</operator><operator>(</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>STRFMT_SH_PREC</name><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>lj_strfmt_putfxint</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>sf</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_check</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_libdef.h"</cpp:file></cpp:include>

<function><type><name>LUALIB_API</name> <name>int</name></type> <name>luaopen_bit</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>LJ_LIB_REG</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LUA_BITLIBNAME</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
