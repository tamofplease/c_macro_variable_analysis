<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_ir.c"><comment type="block">/*
** SSA IR (Intermediate Representation) emitter.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_ir_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<comment type="block">/* For pointers to libc/libm functions. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ircall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_iropt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_cdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_carith.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_lib.h"</cpp:file></cpp:include>

<comment type="block">/* Some local macros to save typing. Undef'd at the end. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IR</name><parameter_list>(<parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>(&amp;J-&gt;cur.ir[(ref)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fins</name></cpp:macro>			<cpp:value>(&amp;J-&gt;fold.ins)</cpp:value></cpp:define>

<comment type="block">/* Pass IR on to next optimization in chain (FOLD). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>emitir</name><parameter_list>(<parameter><type><name>ot</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))</cpp:value></cpp:define>

<comment type="block">/* -- IR tables ----------------------------------------------------------- */</comment>

<comment type="block">/* IR instruction modes. */</comment>
<decl_stmt><decl><type><name>LJ_DATADEF</name> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>lj_ir_mode</name><index>[<expr><name>IR__MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>IRDEF</name><argument_list>(<argument><expr><name>IRMODE</name></expr></argument>)</argument_list></call>
  <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* IR type sizes. */</comment>
<decl_stmt><decl><type><name>LJ_DATADEF</name> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>lj_ir_type_size</name><index>[<expr><name>IRT__MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRTSIZE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>size,</cpp:value></cpp:define>
<expr><call><name>IRTDEF</name><argument_list>(<argument><expr><name>IRTSIZE</name></expr></argument>)</argument_list></call>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IRTSIZE</name></cpp:undef>
  <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* C call info for CALL* instructions. */</comment>
<decl_stmt><decl><type><name>LJ_DATADEF</name> <specifier>const</specifier> <name>CCallInfo</name></type> <name><name>lj_ir_callinfo</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IRCALLCI</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>nargs</name></type></parameter>, <parameter><type><name>kind</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>{ (ASMFunction)IRCALLCOND_##cond(name), \
    (nargs)|(CCI_CALL_##kind)|(IRT_##type&lt;&lt;CCI_OTSHIFT)|(flags) },</cpp:value></cpp:define>
<macro><name>IRCALLDEF</name><argument_list>(<argument>IRCALLCI</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IRCALLCI</name></cpp:undef>
  <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* -- IR emitter ---------------------------------------------------------- */</comment>

<comment type="block">/* Grow IR buffer at the top. */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_ir_growtop</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>baseir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name> <operator>+</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>szins</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>szins</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>baseir</name> <operator>=</operator> <operator>(</operator><name>IRIns</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_realloc</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>baseir</name></expr></argument>, <argument><expr><name>szins</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				     <argument><expr><literal type="number">2</literal><operator>*</operator><name>szins</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>szins</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>baseir</name> <operator>=</operator> <operator>(</operator><name>IRIns</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_realloc</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LJ_MIN_IRSZ</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>=</operator> <name>REF_BASE</name> <operator>-</operator> <name>LJ_MIN_IRSZ</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>+</operator> <name>LJ_MIN_IRSZ</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name> <operator>=</operator> <name>baseir</name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Grow IR buffer at the bottom or shift it up. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lj_ir_growbot</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>baseir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name> <operator>+</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>szins</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>szins</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name> <operator>==</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>||</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name> <operator>+</operator> <operator>(</operator><name>szins</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* More than half of the buffer is free on top: shift up by a quarter. */</comment>
    <decl_stmt><decl><type><name>MSize</name></type> <name>ofs</name> <init>= <expr><name>szins</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>baseir</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><name>baseir</name></expr></argument>, <argument><expr><operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>-=</operator> <name>ofs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>-=</operator> <name>ofs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name> <operator>=</operator> <name>baseir</name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Double the buffer size, but split the growth amongst top/bottom. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>newbase</name> <init>= <expr><call><name>lj_mem_newt</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>szins</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>IRIns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MSize</name></type> <name>ofs</name> <init>= <expr><ternary><condition><expr><name>szins</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><operator>(</operator><name>szins</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>  <comment type="block">/* Limit bottom growth. */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newbase</name> <operator>+</operator> <name>ofs</name></expr></argument>, <argument><expr><name>baseir</name></expr></argument>, <argument><expr><operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_mem_free</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>baseir</name></expr></argument>, <argument><expr><name>szins</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>-=</operator> <name>ofs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>szins</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name> <operator>=</operator> <name>newbase</name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Emit IR without any optimizations. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_ir_emit</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><call><name>lj_ir_nextins</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IROp</name></type> <name>op</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>o</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <name><name>fins</name><operator>-&gt;</operator><name>op2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>guardemit</name><operator>.</operator><name>irt</name></name> <operator>|=</operator> <name><name>fins</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><call><name>irt_t</name><argument_list>(<argument><expr><operator>(</operator><name><name>ir</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <name><name>fins</name><operator>-&gt;</operator><name>t</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Emit call to a C function. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_call</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRCallID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>CCallInfo</name> <modifier>*</modifier></type><name>ci</name> <init>= <expr><operator>&amp;</operator><name><name>lj_ir_callinfo</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><call><name>CCI_NARGS</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TRef</name></type> <name>tr</name> <init>= <expr><name>TREF_NIL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>argp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CCI_L</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>IRRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>emitir</name><argument_list>(<argument><expr><call><name>IRT</name><argument_list>(<argument><expr><name>IR_CARG</name></expr></argument>, <argument><expr><name>IRT_NIL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>argp</name></expr></argument>, <argument><expr><name>IRRef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CCI_OP</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>IR_CALLS</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>needsnap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Need snapshot after call with side effect. */</comment>
  <return>return <expr><call><name>emitir</name><argument_list>(<argument><expr><call><name>CCI_OPTYPE</name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Load field of type t from GG_State + offset. Must be 32 bit aligned. */</comment>
<function><type><name>LJ_FUNC</name> <name>TRef</name></type> <name>lj_ir_ggfload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRType</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>ofs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>ofs</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ofs</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>ofs</name> <operator>&gt;=</operator> <name>IRFL__MAX</name> <operator>&amp;&amp;</operator> <name>ofs</name> <operator>&lt;=</operator> <literal type="number">0x3ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* 10 bit FOLD key limit. */</comment>
  <expr_stmt><expr><call><name>lj_ir_set</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>IRT</name><argument_list>(<argument><expr><name>IR_FLOAD</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>REF_NIL</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lj_opt_fold</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Interning of constants ---------------------------------------------- */</comment>

<comment type="block">/*
** IR instructions for constants are kept between J-&gt;cur.nk &gt;= ref &lt; REF_BIAS.
** They are chained like all other instructions, but grow downwards.
** The are interned (like strings in the VM) to facilitate reference
** comparisons. The same constant must get the same reference.
*/</comment>

<comment type="block">/* Get ref of next IR constant and optionally grow IR.
** Note: this may invalidate all IRIns *!
*/</comment>
<function><type><specifier>static</specifier> <name>LJ_AINLINE</name> <name>IRRef</name></type> <name>ir_nextk</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>ref</name> <operator>&lt;=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_ir_growbot</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name> <operator>=</operator> <operator>--</operator><name>ref</name></expr>;</expr_stmt>
  <return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get ref of next 64 bit IR constant and optionally grow IR.
** Note: this may invalidate all IRIns *!
*/</comment>
<function><type><specifier>static</specifier> <name>LJ_AINLINE</name> <name>IRRef</name></type> <name>ir_nextk64</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>LJ_TRACE_ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>ref</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_ir_growbot</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
  <return>return <expr><name>ref</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_GC64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ir_nextkgc</name></cpp:macro> <cpp:value>ir_nextk64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ir_nextkgc</name></cpp:macro> <cpp:value>ir_nextk</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Intern int32_t constant. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_ir_kint</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KINT</name></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>i</name> <operator>==</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextk</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_KINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KINT</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KINT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<label><name>found</name>:</label>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>IRT_INT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern 64 bit constant, given by its 64 bit pattern. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_k64</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IROp</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>u64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRType</name></type> <name>t</name> <init>= <expr><ternary><condition><expr><name>op</name> <operator>==</operator> <name>IR_KNUM</name></expr> ?</condition><then> <expr><name>IRT_NUM</name></expr> </then><else>: <expr><name>IRT_I64</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ir_k64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>u64</name> <operator>==</operator> <name>u64</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextk64</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>tv</name><operator>.</operator><name>u64</name></name> <operator>=</operator> <name>u64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op12</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<label><name>found</name>:</label>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern FP constant, given by its 64 bit pattern. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_knum_u64</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>u64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>lj_ir_k64</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>IR_KNUM</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern 64 bit integer constant. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_kint64</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>u64</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>lj_ir_k64</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>IR_KINT64</name></expr></argument>, <argument><expr><name>u64</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check whether a number is int and return it. -0 is NOT considered an int. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>numistrueint</name><parameter_list>(<parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>kp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><call><name>lj_num2int</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>(</operator><name>lua_Number</name><operator>)</operator><name>k</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>kp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Special check for -0. */</comment>
      <decl_stmt><decl><type><name>TValue</name></type> <name>tv</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>tv</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern number as int32_t constant if possible, otherwise as FP constant. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_knumint</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>k</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>numistrueint</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>lj_ir_kint</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>lj_ir_knum</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Intern GC object "constant". */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_kgc</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>IRType</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isdead</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KGC</name></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ir_kgc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextkgc</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: Current trace is a GC root. */</comment>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op12</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>ir</name><index>[<expr><name>LJ_GC64</name></expr>]</index></name><operator>.</operator><name>gcr</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_KGC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KGC</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KGC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<label><name>found</name>:</label>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Allocate GCtrace constant placeholder (no interning). */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_ktrace</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><call><name>ir_nextkgc</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>irt_toitype_</name><argument_list>(<argument><expr><name>IRT_P64</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LJ_TTRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_P64</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <ternary><condition><expr><name>LJ_GC64</name></expr> ?</condition><then> <expr><name>IR_KNUM</name></expr> </then><else>: <expr><name>IR_KNULL</name></expr></else></ternary></expr>;</expr_stmt>  <comment type="block">/* Not IR_KGC yet, but same size. */</comment>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op12</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>IRT_P64</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern pointer constant. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_kptr_</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IROp</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>LJ_GC64</name></expr></cpp:if>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>u32ptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>ir_kptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_GC64</name></expr></cpp:if>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextk64</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextk</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op12</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>ir</name><index>[<expr><name>LJ_GC64</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_PGC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<label><name>found</name>:</label>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>IRT_PGC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern typed NULL constant. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_knull</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRType</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KNULL</name></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>irt_t</name><argument_list>(<argument><expr><name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextk</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_KNULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KNULL</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KNULL</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<label><name>found</name>:</label>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern key slot. */</comment>
<function><type><name>TRef</name></type> <name>lj_ir_kslot</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TRef</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cir</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef2</name></type> <name>op12</name> <init>= <expr><call><name>IRREF2</name><argument_list>(<argument><expr><operator>(</operator><name>IRRef1</name><operator>)</operator><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>IRRef1</name><operator>)</operator><name>slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
  <comment type="block">/* Const part is not touched by CSE/DCE, so 0-65535 is ok for IRMlit here. */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>tref_isk</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>slot</name> <operator>==</operator> <operator>(</operator><name>IRRef</name><operator>)</operator><operator>(</operator><name>IRRef1</name><operator>)</operator><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KSLOT</name></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>prev</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cir</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>op12</name> <operator>==</operator> <name>op12</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>ir_nextk</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>op12</name></name> <operator>=</operator> <name>op12</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_P32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_KSLOT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ir</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KSLOT</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_KSLOT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>IRRef1</name><operator>)</operator><name>ref</name></expr>;</expr_stmt>
<label><name>found</name>:</label>
  <return>return <expr><call><name>TREF</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>IRT_P32</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Access to IR constants ---------------------------------------------- */</comment>

<comment type="block">/* Copy value of IR constant. */</comment>
<function><type><name>void</name></type> <name>lj_ir_kvalue</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>!=</operator> <name>IR_KSLOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Common mistake. */</comment>
  <switch>switch <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>IR_KPRI</name></expr>:</case> <expr_stmt><expr><call><name>setpriV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>irt_toitype</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><name>IR_KINT</name></expr>:</case> <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name><name>ir</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><name>IR_KGC</name></expr>:</case> <expr_stmt><expr><call><name>setgcV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>ir_kgc</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>irt_toitype</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><name>IR_KPTR</name></expr>:</case> <case>case <expr><name>IR_KKPTR</name></expr>:</case> <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>ir_kptr</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><name>IR_KNULL</name></expr>:</case> <expr_stmt><expr><call><name>setlightudV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  <case>case <expr><name>IR_KNUM</name></expr>:</case> <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><call><name>ir_knum</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>
  <case>case <expr><name>IR_KINT64</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>GCcdata</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><call><name>lj_cdata_new_</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>CTID_INT64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><call><name>cdataptr</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ir_kint64</name><argument_list>(<argument><expr><name>ir</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>u64</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setcdataV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* -- Convert IR operand types -------------------------------------------- */</comment>

<comment type="block">/* Convert from string to number. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_ir_tonumber</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TRef</name></type> <name>tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tref_isnumber</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tref_isstr</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>emitir</name><argument_list>(<argument><expr><call><name>IRTG</name><argument_list>(<argument><expr><name>IR_STRTO</name></expr></argument>, <argument><expr><name>IRT_NUM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_BADTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>tr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Convert from integer or string to number. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_ir_tonum</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TRef</name></type> <name>tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tref_isnum</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tref_isinteger</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>emitir</name><argument_list>(<argument><expr><call><name>IRTN</name><argument_list>(<argument><expr><name>IR_CONV</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>IRCONV_NUM_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>tref_isstr</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>emitir</name><argument_list>(<argument><expr><call><name>IRTG</name><argument_list>(<argument><expr><name>IR_STRTO</name></expr></argument>, <argument><expr><name>IRT_NUM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_BADTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>tr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Convert from integer or number to string. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_ir_tostr</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TRef</name></type> <name>tr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tref_isstr</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tref_isnumber</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_BADTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>emitir</name><argument_list>(<argument><expr><call><name>IRT</name><argument_list>(<argument><expr><name>IR_TOSTR</name></expr></argument>, <argument><expr><name>IRT_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tr</name></expr></argument>,
		<argument><expr><ternary><condition><expr><call><name>tref_isnum</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>IRTOSTR_NUM</name></expr> </then><else>: <expr><name>IRTOSTR_INT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>tr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Miscellaneous IR ops ------------------------------------------------ */</comment>

<comment type="block">/* Evaluate numeric comparison. */</comment>
<function><type><name>int</name></type> <name>lj_ir_numcmp</name><parameter_list>(<parameter><decl><type><name>lua_Number</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>lua_Number</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>IROp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>IR_EQ</name></expr>:</case> <return>return <expr><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_NE</name></expr>:</case> <return>return <expr><operator>(</operator><name>a</name> <operator>!=</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_LT</name></expr>:</case> <return>return <expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_GE</name></expr>:</case> <return>return <expr><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_LE</name></expr>:</case> <return>return <expr><operator>(</operator><name>a</name> <operator>&lt;=</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_GT</name></expr>:</case> <return>return <expr><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_ULT</name></expr>:</case> <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_UGE</name></expr>:</case> <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_ULE</name></expr>:</case> <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&gt;</operator> <name>b</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_UGT</name></expr>:</case> <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&lt;=</operator> <name>b</name><operator>)</operator></expr>;</return>
  <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Evaluate string comparison. */</comment>
<function><type><name>int</name></type> <name>lj_ir_strcmp</name><parameter_list>(<parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>IROp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>lj_str_cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>IR_LT</name></expr>:</case> <return>return <expr><operator>(</operator><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_GE</name></expr>:</case> <return>return <expr><operator>(</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_LE</name></expr>:</case> <return>return <expr><operator>(</operator><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  <case>case <expr><name>IR_GT</name></expr>:</case> <return>return <expr><operator>(</operator><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  <default>default:</default> <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Rollback IR to previous state. */</comment>
<function><type><name>void</name></type> <name>lj_ir_rollback</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>nins</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>nins</name> <operator>&gt;</operator> <name>ref</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nins</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>nins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name></expr>]</index></name> <operator>=</operator> <name><name>ir</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name> <operator>=</operator> <name>nins</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fins</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>emitir</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
