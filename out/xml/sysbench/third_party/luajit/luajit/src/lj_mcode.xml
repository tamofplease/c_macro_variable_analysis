<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_mcode.c"><comment type="block">/*
** Machine code management.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_mcode_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_mcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name> <operator>||</operator> <name>LJ_HASFFI</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- OS-specific functions ----------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name> <operator>||</operator> <name>LJ_HASFFI</name></expr></cpp:if>

<comment type="block">/* Define this if you want to run LuaJIT with Valgrind. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_USE_VALGRIND</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valgrind/valgrind.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_IOS</name></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>sys_icache_invalidate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Synchronize data/instruction cache. */</comment>
<function><type><name>void</name></type> <name>lj_mcode_sync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_USE_VALGRIND</name></cpp:ifdef>
  <expr_stmt><expr><call><name>VALGRIND_DISCARD_TRANSLATIONS</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>end</name><operator>-</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_IOS</name></expr></cpp:elif>
  <expr_stmt><expr><call><name>sys_icache_invalidate</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>end</name><operator>-</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:elif>
  <expr_stmt><expr><call><name>lj_vm_cachesync</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>__clear_cache</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing builtin to flush instruction cache"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_WINDOWS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RW</name></cpp:macro>	<cpp:value>PAGE_READWRITE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RX</name></cpp:macro>	<cpp:value>PAGE_EXECUTE_READ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RWX</name></cpp:macro>	<cpp:value>PAGE_EXECUTE_READWRITE</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mcode_alloc_at</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>LJ_WIN_VALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hint</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
			  <argument><expr><name>MEM_RESERVE</name><operator>|</operator><name>MEM_COMMIT</name><operator>|</operator><name>MEM_TOP_DOWN</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hint</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_MCODEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_free</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mcode_setprot</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>oprot</name></decl>;</decl_stmt>
  <return>return <expr><operator>!</operator><call><name>LJ_WIN_VPROTECT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oprot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_TARGET_POSIX</name></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_ANONYMOUS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANONYMOUS</name></cpp:macro>	<cpp:value>MAP_ANON</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RW</name></cpp:macro>	<cpp:value>(PROT_READ|PROT_WRITE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RX</name></cpp:macro>	<cpp:value>(PROT_READ|PROT_EXEC)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RWX</name></cpp:macro>	<cpp:value>(PROT_READ|PROT_WRITE|PROT_EXEC)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mcode_alloc_at</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>hint</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name><operator>|</operator><name>MAP_ANONYMOUS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hint</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_MCODEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_free</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mcode_setprot</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>mprotect</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>LJ_64</name></expr></cpp:elif>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Missing OS support for explicit placement of executable memory"</cpp:literal></cpp:error>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* Fallback allocator. This will fail if memory is not executable by default. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUAJIT_UNPROTECT_MCODE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RW</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RX</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RWX</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mcode_alloc_at</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lj_mem_new</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_free</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_mem_free</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- MCode area protection ----------------------------------------------- */</comment>

<comment type="block">/* Define this ONLY if page protection twiddling becomes a bottleneck. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_UNPROTECT_MCODE</name></cpp:ifdef>

<comment type="block">/* It's generally considered to be a potential security risk to have
** pages with simultaneous write *and* execute access in a process.
**
** Do not even think about using this mode for server processes or
** apps handling untrusted external data (such as a browser).
**
** The security risk is not in LuaJIT itself -- but if an adversary finds
** any *other* flaw in your C application logic, then any RWX memory page
** simplifies writing an exploit considerably.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_GEN</name></cpp:macro>	<cpp:value>MCPROT_RWX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RUN</name></cpp:macro>	<cpp:value>MCPROT_RWX</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_protect</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* This is the default behaviour and much safer:
**
** Most of the time the memory pages holding machine code are executable,
** but NONE of them is writable.
**
** The current memory area is marked read-write (but NOT executable) only
** during the short time window while the assembler generates machine code.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_GEN</name></cpp:macro>	<cpp:value>MCPROT_RW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MCPROT_RUN</name></cpp:macro>	<cpp:value>MCPROT_RX</cpp:value></cpp:define>

<comment type="block">/* Protection twiddling failed. Probably due to kernel security. */</comment>
<function><type><specifier>static</specifier> <name>LJ_NOINLINE</name> <name>void</name></type> <name>mcode_protfail</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>lua_CFunction</name></type> <name>panic</name> <init>= <expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>panic</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>panic</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setstrV</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><call><name>lj_err_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>LJ_ERR_JITPROT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>panic</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Change protection of MCode area. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_protect</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>mcprot</name></name> <operator>!=</operator> <name>prot</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><call><name>mcode_setprot</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>szmcarea</name></name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mcode_protfail</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mcprot</name></name> <operator>=</operator> <name>prot</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- MCode area allocation ----------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mcode_validptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(p)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mcode_validptr</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((p) &amp;&amp; (uintptr_t)(p) &lt; 0xffff0000)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LJ_TARGET_JUMPRANGE</name></cpp:ifdef>

<comment type="block">/* Get memory within relative jump distance of our code in 64 bit mode. */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mcode_alloc</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Target an address in the static assembler code (64K aligned).
  ** Try addresses within a distance of J-&gt;allocbase..J-&gt;allocbase+J-&gt;range.
  ** First try a contiguous area below the last one. */</comment>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>hint</name> <init>= <expr><ternary><condition><expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name> <operator>-</operator> <name>sz</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <comment type="block">/* Limit probing iterations, depending on the available pool size. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LJ_TARGET_JUMPRANGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mcode_validptr</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mcode_alloc_at</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MCPROT_GEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>mcode_validptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
          <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>+</operator> <name>sz</name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>target</name></name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>range</name></name> <operator>||</operator>
           <name><name>J</name><operator>-&gt;</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>range</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mcode_free</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Free badly placed area. */</comment>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Next try probing 64K-aligned pseudo-random addresses. */</comment>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name>LJ_PRNG_BITS</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TARGET_JUMPRANGE</name><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>hint</name> <operator>+</operator> <name>sz</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>range</name></name><operator>)</operator></expr>)</condition>;</do>
    <expr_stmt><expr><name>hint</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>allocbase</name></name> <operator>+</operator> <name>hint</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_MCODEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Give up. OS probably ignores hints? */</comment>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* All memory addresses are reachable by relative jumps. */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mcode_alloc</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>LJ_TARGET_UWP</name></expr></cpp:if>
  <comment type="block">/* Allow better executable memory allocation for OpenBSD W^X mode. */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mcode_alloc_at</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MCPROT_RUN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <call><name>mcode_setprot</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MCPROT_GEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>mcode_free</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>mcode_alloc_at</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>MCPROT_GEN</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- MCode area management ----------------------------------------------- */</comment>

<comment type="block">/* Allocate a new MCode area. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mcode_allocarea</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MCode</name> <modifier>*</modifier></type><name>oldarea</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>JIT_P_sizemcode</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name>sz</name> <operator>+</operator> <name>LJ_PAGESIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>LJ_PAGESIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name> <operator>=</operator> <operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><call><name>mcode_alloc</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>szmcarea</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mcprot</name></name> <operator>=</operator> <name>MCPROT_GEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mctop</name></name> <operator>=</operator> <operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name> <operator>+</operator> <name><name>J</name><operator>-&gt;</operator><name>szmcarea</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mcbot</name></name> <operator>=</operator> <operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MCLink</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name><operator>)</operator><operator>-&gt;</operator><name>next</name> <operator>=</operator> <name>oldarea</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name><operator>)</operator><operator>-&gt;</operator><name>size</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>szallmcarea</name></name> <operator>+=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Free all MCode areas. */</comment>
<function><type><name>void</name></type> <name>lj_mcode_free</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MCode</name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>szallmcarea</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>mc</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>MCode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name>mc</name><operator>)</operator><operator>-&gt;</operator><name>next</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mcode_free</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>mc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name>mc</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mc</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* -- MCode transactions -------------------------------------------------- */</comment>

<comment type="block">/* Reserve the remainder of the current MCode area. */</comment>
<function><type><name>MCode</name> <modifier>*</modifier></type><name>lj_mcode_reserve</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>MCode</name> <modifier>*</modifier><modifier>*</modifier></type><name>lim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mcode_allocarea</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mcode_protect</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>MCPROT_GEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>lim</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>mcbot</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>J</name><operator>-&gt;</operator><name>mctop</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Commit the top part of the current MCode area. */</comment>
<function><type><name>void</name></type> <name>lj_mcode_commit</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>MCode</name> <modifier>*</modifier></type><name>top</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mctop</name></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mcode_protect</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>MCPROT_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Abort the reservation. */</comment>
<function><type><name>void</name></type> <name>lj_mcode_abort</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>mcode_protect</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>MCPROT_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Set/reset protection to allow patching of MCode areas. */</comment>
<function><type><name>MCode</name> <modifier>*</modifier></type><name>lj_mcode_patch</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>MCode</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>finish</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_UNPROTECT_MCODE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>finish</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mcode_protect</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>MCPROT_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><call><name>mcode_setprot</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>MCPROT_RUN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>mcode_protfail</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>MCode</name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>mcarea</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Try current area first to use the protection cache. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>mc</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&lt;</operator> <operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mc</name> <operator>+</operator> <name><name>J</name><operator>-&gt;</operator><name>szmcarea</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>mcode_protect</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>MCPROT_GEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>mc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Otherwise search through the list of MCode areas. */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <expr_stmt><expr><name>mc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name>mc</name><operator>)</operator><operator>-&gt;</operator><name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>mc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>mc</name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&lt;</operator> <operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mc</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name>mc</name><operator>)</operator><operator>-&gt;</operator><name>size</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><call><name>mcode_setprot</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MCLink</name> <operator>*</operator><operator>)</operator><name>mc</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>MCPROT_GEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>mcode_protfail</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>mc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Limit of MCode reservation reached. */</comment>
<function><type><name>void</name></type> <name>lj_mcode_limiterr</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>need</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sizemcode</name></decl>, <decl><type ref="prev"/><name>maxmcode</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_mcode_abort</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sizemcode</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>JIT_P_sizemcode</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sizemcode</name> <operator>=</operator> <operator>(</operator><name>sizemcode</name> <operator>+</operator> <name>LJ_PAGESIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>LJ_PAGESIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxmcode</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>JIT_P_maxmcode</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>need</name> <operator>&gt;</operator> <name>sizemcode</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_MCODEOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Too long for any area. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>szallmcarea</name></name> <operator>+</operator> <name>sizemcode</name> <operator>&gt;</operator> <name>maxmcode</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_MCODEAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>mcode_allocarea</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_trace_err</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_TRERR_MCODELM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Retry with new area. */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
