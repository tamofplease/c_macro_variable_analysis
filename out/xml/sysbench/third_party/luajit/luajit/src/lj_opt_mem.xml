<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_opt_mem.c"><comment type="block">/*
** Memory access optimizations.
** AA: Alias Analysis using high-level semantic disambiguation.
** FWD: Load Forwarding (L2L) + Store Forwarding (S2L).
** DSE: Dead-Store Elimination.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_opt_mem_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_iropt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ircall.h"</cpp:file></cpp:include>

<comment type="block">/* Some local macros to save typing. Undef'd at the end. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IR</name><parameter_list>(<parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(&amp;J-&gt;cur.ir[(ref)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fins</name></cpp:macro>		<cpp:value>(&amp;J-&gt;fold.ins)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fleft</name></cpp:macro>		<cpp:value>(J-&gt;fold.left)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fright</name></cpp:macro>		<cpp:value>(J-&gt;fold.right)</cpp:value></cpp:define>

<comment type="block">/*
** Caveat #1: return value is not always a TRef -- only use with tref_ref().
** Caveat #2: FWD relies on active CSE for xREF operands -- see lj_opt_fold().
*/</comment>

<comment type="block">/* Return values from alias analysis. */</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>ALIAS_NO</name></decl>,	<comment type="block">/* The two refs CANNOT alias (exact). */</comment>
  <decl><name>ALIAS_MAY</name></decl>,	<comment type="block">/* The two refs MAY alias (inexact). */</comment>
  <decl><name>ALIAS_MUST</name></decl>	<comment type="block">/* The two refs MUST alias (exact). */</comment>
}</block></enum></type> <name>AliasRet</name>;</typedef>

<comment type="block">/* -- ALOAD/HLOAD forwarding and ASTORE/HSTORE elimination ---------------- */</comment>

<comment type="block">/* Simplified escape analysis: check for intervening stores. */</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_escape</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>(</operator><name>IRRef</name><operator>)</operator><operator>(</operator><name>ir</name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="block">/* The ref that might be stored. */</comment>
  <for>for <control>(<init><expr><name>ir</name><operator>++</operator></expr>;</init> <condition><expr><name>ir</name> <operator>&lt;</operator> <name>stop</name></expr>;</condition> <incr><expr><name>ir</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>ref</name> <operator>&amp;&amp;</operator>
	<operator>(</operator><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ASTORE</name> <operator>||</operator> <name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_HSTORE</name> <operator>||</operator>
	 <name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_USTORE</name> <operator>||</operator> <name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_FSTORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_MAY</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>  <comment type="block">/* Reference was stored and might alias. */</comment>
  <return>return <expr><name>ALIAS_NO</name></expr>;</return>  <comment type="block">/* Reference was not stored. */</comment>
</block_content>}</block></function>

<comment type="block">/* Alias analysis for two different table references. */</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_table</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>tb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>taba</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tabb</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>newa</name></decl>, <decl><type ref="prev"/><name>newb</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>ta</name> <operator>!=</operator> <name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>irt_istab</name><argument_list>(<argument><expr><name><name>taba</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>irt_istab</name><argument_list>(<argument><expr><name><name>tabb</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Disambiguate new allocations. */</comment>
  <expr_stmt><expr><name>newa</name> <operator>=</operator> <operator>(</operator><name><name>taba</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TNEW</name> <operator>||</operator> <name><name>taba</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TDUP</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>newb</name> <operator>=</operator> <operator>(</operator><name><name>tabb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TNEW</name> <operator>||</operator> <name><name>tabb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TDUP</name><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>newa</name> <operator>&amp;&amp;</operator> <name>newb</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Two different allocations never alias. */</comment>
  <if_stmt><if>if <condition>(<expr><name>newb</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* At least one allocation? */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>taba</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>taba</name> <operator>=</operator> <name>tabb</name></expr>;</expr_stmt> <expr_stmt><expr><name>tabb</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>newa</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ALIAS_MAY</name></expr>;</return>  <comment type="block">/* Anything else: we just don't know. */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>aa_escape</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>taba</name></expr></argument>, <argument><expr><name>tabb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Alias analysis for array and hash access using key-based disambiguation. */</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_ahref</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refa</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ka</name> <init>= <expr><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>kb</name> <init>= <expr><name><name>refb</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>keya</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>keyb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ta</name></decl>, <decl><type ref="prev"/><name>tb</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>refa</name> <operator>==</operator> <name>refb</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_MUST</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Shortcut for same refs. */</comment>
  <expr_stmt><expr><name>keya</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ka</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>keya</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KSLOT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ka</name> <operator>=</operator> <name><name>keya</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>keya</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ka</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>keyb</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>keyb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KSLOT</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>kb</name> <operator>=</operator> <name><name>keyb</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>keyb</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ta</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>refa</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_HREFK</name> <operator>||</operator> <name><name>refa</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_AREF</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>refa</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op1</name></expr> </then><else>: <expr><name><name>refa</name><operator>-&gt;</operator><name>op1</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>tb</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>refb</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_HREFK</name> <operator>||</operator> <name><name>refb</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_AREF</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>refb</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op1</name></expr> </then><else>: <expr><name><name>refb</name><operator>-&gt;</operator><name>op1</name></name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ka</name> <operator>==</operator> <name>kb</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Same key. Check for same table with different ref (NEWREF vs. HREF). */</comment>
    <if_stmt><if>if <condition>(<expr><name>ta</name> <operator>==</operator> <name>tb</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_MUST</name></expr>;</return></block_content></block></if>  <comment type="block">/* Same key, same table. */</comment>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* Same key, possibly different table. */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>irref_isk</name><argument_list>(<argument><expr><name>ka</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different constant keys. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_AREF</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Disambiguate array references based on index arithmetic. */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ofsa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ofsb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRRef</name></type> <name>basea</name> <init>= <expr><name>ka</name></expr></init></decl>, <decl><type ref="prev"/><name>baseb</name> <init>= <expr><name>kb</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>refb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_AREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Gather base and offset from t[base] or t[base+-ofs]. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>keya</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>keya</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>basea</name> <operator>=</operator> <name><name>keya</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ofsa</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>keya</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>basea</name> <operator>==</operator> <name>kb</name> <operator>&amp;&amp;</operator> <name>ofsa</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* t[base+-ofs] vs. t[base]. */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>keyb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>keyb</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>baseb</name> <operator>=</operator> <name><name>keyb</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ofsb</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>keyb</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ka</name> <operator>==</operator> <name>baseb</name> <operator>&amp;&amp;</operator> <name>ofsb</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* t[base] vs. t[base+-ofs]. */</comment>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>basea</name> <operator>==</operator> <name>baseb</name> <operator>&amp;&amp;</operator> <name>ofsa</name> <operator>!=</operator> <name>ofsb</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* t[base+-o1] vs. t[base+-o2] and o1 != o2. */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Disambiguate hash references based on the type of their keys. */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>refa</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_HREF</name> <operator>||</operator> <name><name>refa</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_HREFK</name> <operator>||</operator> <name><name>refa</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_NEWREF</name><operator>)</operator> <operator>&amp;&amp;</operator>
	       <operator>(</operator><name><name>refb</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_HREF</name> <operator>||</operator> <name><name>refb</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_HREFK</name> <operator>||</operator> <name><name>refb</name><operator>-&gt;</operator><name>o</name></name><operator>==</operator><name>IR_NEWREF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>irt_sametype</name><argument_list>(<argument><expr><name><name>keya</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name><name>keyb</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different key types. */</comment>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ta</name> <operator>==</operator> <name>tb</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_MAY</name></expr>;</return></block_content></block></if>  <comment type="block">/* Same table, cannot disambiguate keys. */</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* Try to disambiguate tables. */</comment>
</block_content>}</block></function>

<comment type="block">/* Array and hash load forwarding. */</comment>
<function><type><specifier>static</specifier> <name>TRef</name></type> <name>fwd_ahload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>xref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>xref</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>

  <comment type="block">/* Search for conflicting stores. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name><name>fins</name><operator>-&gt;</operator><name>o</name></name><operator>+</operator><name>IRDELTA_L2S</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>xref</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_ahref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>   <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>  <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt> <goto>goto <name>cselim</name>;</goto>  <comment type="block">/* Limit search for load. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case> <return>return <expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr>;</return>  <comment type="block">/* Store forwarding. */</comment>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* No conflicting store (yet): const-fold loads from allocations. */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>xr</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_HREFK</name> <operator>||</operator> <name><name>xr</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_AREF</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>xr</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>xr</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRRef</name></type> <name>tab</name> <init>= <expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TNEW</name> <operator>||</operator> <operator>(</operator><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TDUP</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>xr</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="block">/* A NEWREF with a number key may end up pointing to the array part.
      ** But it's referenced from HSTORE and not found in the ASTORE chain.
      ** For now simply consider this a conflict without forwarding anything.
      */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>xr</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_AREF</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>IRRef</name></type> <name>ref2</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_NEWREF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>ref2</name> <operator>&gt;</operator> <name>tab</name></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>newref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>irt_isnum</name><argument_list>(<argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>newref</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>cselim</name>;</goto></block_content></block></if></if_stmt>
	  <expr_stmt><expr><name>ref2</name> <operator>=</operator> <name><name>newref</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* NEWREF inhibits CSE for HREF, and dependent FLOADs from HREFK/AREF.
      ** But the above search for conflicting stores was limited by xref.
      ** So continue searching, limited by the TNEW/TDUP. Store forwarding
      ** is ok, too. A conflict does NOT limit the search for a matching load.
      */</comment>
      <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>tab</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><call><name>aa_ahref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ALIAS_NO</name></expr>:</case>   <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
	<case>case <expr><name>ALIAS_MAY</name></expr>:</case>  <goto>goto <name>cselim</name>;</goto>  <comment type="block">/* Conflicting store. */</comment>
	<case>case <expr><name>ALIAS_MUST</name></expr>:</case> <return>return <expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr>;</return>  <comment type="block">/* Store forwarding. */</comment>
	</block_content>}</block></switch>
	<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TNEW</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>irt_isnil</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Type instability in loop-carried dependency. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>irt_ispri</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<return>return <expr><call><name>TREF_PRI</name><argument_list>(<argument><expr><call><name>irt_type</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>irt_isnum</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>LJ_DUALNUM</name> <operator>&amp;&amp;</operator> <call><name>irt_isint</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
		 <call><name>irt_isstr</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>TValue</name></type> <name>keyv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>xr</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KSLOT</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>lj_ir_kvalue</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>lj_tab_get</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><call><name>ir_ktab</name><argument_list>(<argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>itype2irt</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>irt_type</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>irt_isnum</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><call><name>lj_ir_knum_u64</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>tv</name><operator>-&gt;</operator><name>u64</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>LJ_DUALNUM</name> <operator>&amp;&amp;</operator> <call><name>irt_isint</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><call><name>lj_ir_kint</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>intV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <return>return <expr><call><name>lj_ir_kstr</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>strV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* Othwerwise: don't intern as a constant. */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

<label><name>cselim</name>:</label>
  <comment type="block">/* Try to find a matching load. Below the conflicting store, if any. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name><name>fins</name><operator>-&gt;</operator><name>o</name></name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>load</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>load</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name>xref</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Load forwarding. */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>load</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Conflict or no match. */</comment>
</block_content>}</block></function>

<comment type="block">/* Reassociate ALOAD across PHIs to handle t[i-1] forwarding case. */</comment>
<function><type><specifier>static</specifier> <name>TRef</name></type> <name>fwd_aload_reassoc</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>irx</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>irx</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>add2</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>add2</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>add2</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<call><name>IR</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name> <operator>==</operator> <operator>-</operator><call><name>IR</name><argument_list>(<argument><expr><name><name>add2</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_AREF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name><name>add2</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>irx</name><operator>-&gt;</operator><name>op1</name></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>irx</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name><name>irx</name><operator>-&gt;</operator><name>op1</name></name> <operator>&amp;&amp;</operator> <name><name>ir</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name><name>add2</name><operator>-&gt;</operator><name>op1</name></name></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><call><name>fwd_ahload</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>ir</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ALOAD forwarding. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_aload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ref</name> <operator>=</operator> <call><name>fwd_ahload</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><name>ref</name> <operator>=</operator> <call><name>fwd_aload_reassoc</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* HLOAD forwarding. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_hload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><call><name>fwd_ahload</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ref</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* HREFK forwarding. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_hrefk</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>tab</name> <init>= <expr><name><name>fleft</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_NEWREF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>tab</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>newref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name><name>newref</name><operator>-&gt;</operator><name>op1</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>fright</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name><name>newref</name><operator>-&gt;</operator><name>op2</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>ref</name></expr>;</return></block_content></block></if>  <comment type="block">/* Forward from NEWREF. */</comment>
      <else>else<block type="pseudo"><block_content>
	<goto>goto <name>docse</name>;</goto></block_content></block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name><name>newref</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ALIAS_NO</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>docse</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>newref</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="block">/* No conflicting NEWREF: key location unchanged for HREFK of TDUP. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IR</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>o</name> <operator>==</operator> <name>IR_TDUP</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IRT_GUARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Drop HREFK guard. */</comment>
<label><name>docse</name>:</label>
  <return>return <expr><name>CSEFOLD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check whether HREF of TNEW/TDUP can be folded to niltv. */</comment>
<function><type><name>int</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_href_nokey</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>

  <comment type="block">/* The key for an ASTORE may end up in the hash part after a NEWREF. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>irt_isnum</name><argument_list>(<argument><expr><name><name>fright</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_NEWREF</name></expr>]</index></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_ASTORE</name></expr>]</index></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_NEWREF</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Conflict. */</comment>
      <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Search for conflicting stores. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_HSTORE</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>aa_ahref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>fins</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ALIAS_NO</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Conflict. */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* No conflict. Can fold to niltv. */</comment>
</block_content>}</block></function>

<comment type="block">/* Check whether there's no aliasing table.clear. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fwd_aa_tab_clear</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>lim</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>ta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_CALLS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>calls</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>calls</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>IRCALL_lj_tab_clear</name> <operator>&amp;&amp;</operator>
	<operator>(</operator><name>ta</name> <operator>==</operator> <name><name>calls</name><operator>-&gt;</operator><name>op1</name></name> <operator>||</operator> <call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name><name>calls</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ALIAS_NO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Conflict. */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>calls</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* No conflict. Can safely FOLD/CSE. */</comment>
</block_content>}</block></function>

<comment type="block">/* Check whether there's no aliasing NEWREF/table.clear for the left operand. */</comment>
<function><type><name>int</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_tptr</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>lim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ta</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_NEWREF</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>newref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ta</name> <operator>==</operator> <name><name>newref</name><operator>-&gt;</operator><name>op1</name></name> <operator>||</operator> <call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name><name>newref</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ALIAS_NO</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Conflict. */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>newref</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><call><name>fwd_aa_tab_clear</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>lim</name></expr></argument>, <argument><expr><name>ta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ASTORE/HSTORE elimination. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_dse_ahstore</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>xref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* xREF reference. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>val</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Stored value reference. */</comment>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef1</name> <modifier>*</modifier></type><name>refp</name> <init>= <expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name><name>fins</name><operator>-&gt;</operator><name>o</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>*</operator><name>refp</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>xref</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Search for redundant or conflicting stores. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_ahref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>
      <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>	<comment type="block">/* Store to MAYBE the same location. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Conflict if the value is different. */</comment>
	<goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>  <comment type="block">/* Otherwise continue searching. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case>	<comment type="block">/* Store to the same location. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Same value: drop the new store. */</comment>
	<return>return <expr><name>DROPFOLD</name></expr>;</return></block_content></block></if></if_stmt>
      <comment type="block">/* Different value: try to eliminate the redundant store. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_LOOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Quick check to avoid crossing LOOP. */</comment>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>;</decl_stmt>
	<comment type="block">/* Check for any intervening guards (includes conflicting loads). */</comment>
	<for>for <control>(<init><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ir</name> <operator>&gt;</operator> <name>store</name></expr>;</condition> <incr><expr><name>ir</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>irt_isguard</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ALEN</name></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>  <comment type="block">/* No elimination possible. */</comment>
	<comment type="block">/* Remove redundant store from chain and replace with NOP. */</comment>
	<expr_stmt><expr><operator>*</operator><name>refp</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_NOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Now emit the new store instead. */</comment>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>doemit</name>;</goto>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>refp</name> <operator>=</operator> <operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
<label><name>doemit</name>:</label>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>  <comment type="block">/* Otherwise we have a conflict or simply no match. */</comment>
</block_content>}</block></function>

<comment type="block">/* ALEN forwarding. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_alen</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>tab</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Table reference. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>tab</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>

  <comment type="block">/* Search for conflicting HSTORE with numeric key. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_HSTORE</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>href</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>href</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>irt_isnum</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>key</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KSLOT</name></expr> ?</condition><then> <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr> </then><else>: <expr><name><name>key</name><operator>-&gt;</operator><name>t</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>  <comment type="block">/* Conflicting store found, limits search for ALEN. */</comment>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Try to find a matching ALEN. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_ALEN</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* CSE for ALEN only depends on the table, not the hint. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op1</name> <operator>==</operator> <name>tab</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IRRef</name></type> <name>sref</name></decl>;</decl_stmt>

      <comment type="block">/* Search for aliasing table.clear. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fwd_aa_tab_clear</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>

      <comment type="block">/* Search for hint-forwarding or conflicting store. */</comment>
      <expr_stmt><expr><name>sref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_ASTORE</name></expr>]</index></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>sref</name> <operator>&gt;</operator> <name>ref</name></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>sref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>aref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>fref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>aref</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>tab</name> <operator>==</operator> <name><name>fref</name><operator>-&gt;</operator><name>op1</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* ASTORE to the same table. */</comment>
	  <comment type="block">/* Detect t[#t+1] = x idiom for push. */</comment>
	  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>idx</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>aref</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>irt_isnil</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <name><name>idx</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <name><name>idx</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name>ref</name> <operator>&amp;&amp;</operator>
	      <call><name>IR</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>o</name> <operator>==</operator> <name>IR_KINT</name> <operator>&amp;&amp;</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
	    <comment type="block">/* Note: this requires an extra PHI check in loop unroll. */</comment>
	    <expr_stmt><expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <name><name>aref</name><operator>-&gt;</operator><name>op2</name></name></expr>;</expr_stmt>  <comment type="block">/* Set ALEN hint. */</comment>
	  </block_content>}</block></if></if_stmt>
	  <goto>goto <name>doemit</name>;</goto>  <comment type="block">/* Conflicting store, possibly giving a hint. */</comment>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name><name>fref</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ALIAS_NO</name></expr>)</condition> <block>{<block_content>
	  <goto>goto <name>doemit</name>;</goto>  <comment type="block">/* Conflicting store. */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>sref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
      </block_content>}</block></while>

      <return>return <expr><name>ref</name></expr>;</return>  <comment type="block">/* Plain ALEN forwarding. */</comment>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></while>
<label><name>doemit</name>:</label>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- ULOAD forwarding ---------------------------------------------------- */</comment>

<comment type="block">/* The current alias analysis for upvalues is very simplistic. It only
** disambiguates between the unique upvalues of the same function.
** This is good enough for now, since most upvalues are read-only.
**
** A more precise analysis would be feasible with the help of the parser:
** generate a unique key for every upvalue, even across all prototypes.
** Lacking a realistic use-case, it's unclear whether this is beneficial.
*/</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_uref</name><parameter_list>(<parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refa</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>o</name></name> <operator>!=</operator> <name><name>refb</name><operator>-&gt;</operator><name>o</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different UREFx type. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name><name>refb</name><operator>-&gt;</operator><name>op1</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Same function. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name><name>refb</name><operator>-&gt;</operator><name>op2</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_MUST</name></expr>;</return></block_content></block></if>  <comment type="block">/* Same function, same upvalue idx. */</comment>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* Same function, different upvalue idx. */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Different functions, check disambiguation hash values. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name> <operator>^</operator> <name><name>refb</name><operator>-&gt;</operator><name>op2</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if>  <comment type="block">/* Upvalues with different hash values cannot alias. */</comment>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><name>ALIAS_MAY</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* No conclusion can be drawn for same hash value. */</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ULOAD forwarding. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_uload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>uref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>REF_BASE</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>uref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>

  <comment type="block">/* Search for conflicting stores. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_USTORE</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_uref</name><argument_list>(<argument><expr><name>xr</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>   <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>  <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt> <goto>goto <name>cselim</name>;</goto>  <comment type="block">/* Limit search for load. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case> <return>return <expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr>;</return>  <comment type="block">/* Store forwarding. */</comment>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>cselim</name>:</label>
  <comment type="block">/* Try to find a matching load. Below the conflicting store, if any. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_ULOAD</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name>uref</name> <operator>||</operator>
	<operator>(</operator><call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op12</name> <operator>==</operator> <call><name>IR</name><argument_list>(<argument><expr><name>uref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op12</name> <operator>&amp;&amp;</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>o</name> <operator>==</operator> <call><name>IR</name><argument_list>(<argument><expr><name>uref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>o</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Match for identical or equal UREFx (non-CSEable UREFO). */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>ir</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><call><name>lj_ir_emit</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* USTORE elimination. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_dse_ustore</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>xref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* xREF reference. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>val</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Stored value reference. */</comment>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef1</name> <modifier>*</modifier></type><name>refp</name> <init>= <expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_USTORE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>*</operator><name>refp</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>xref</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Search for redundant or conflicting stores. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_uref</name><argument_list>(<argument><expr><name>xr</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>
      <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>	<comment type="block">/* Store to MAYBE the same location. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Conflict if the value is different. */</comment>
	<goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>  <comment type="block">/* Otherwise continue searching. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case>	<comment type="block">/* Store to the same location. */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Same value: drop the new store. */</comment>
	<return>return <expr><name>DROPFOLD</name></expr>;</return></block_content></block></if></if_stmt>
      <comment type="block">/* Different value: try to eliminate the redundant store. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_LOOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Quick check to avoid crossing LOOP. */</comment>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>;</decl_stmt>
	<comment type="block">/* Check for any intervening guards (includes conflicting loads). */</comment>
	<for>for <control>(<init><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ir</name> <operator>&gt;</operator> <name>store</name></expr>;</condition> <incr><expr><name>ir</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>irt_isguard</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>  <comment type="block">/* No elimination possible. */</comment>
	<comment type="block">/* Remove redundant store from chain and replace with NOP. */</comment>
	<expr_stmt><expr><operator>*</operator><name>refp</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_NOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ref</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name> <operator>&amp;&amp;</operator>
	    <name><name>store</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>o</name> <operator>==</operator> <name>IR_OBAR</name> <operator>&amp;&amp;</operator> <name><name>store</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>op1</name> <operator>==</operator> <name>xref</name></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>IRRef1</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_OBAR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>obar</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>obar</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><operator>*</operator><name>bp</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>bp</name> <operator>&gt;</operator> <name>ref</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>obar</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><operator>*</operator><name>bp</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>&amp;</operator><name><name>obar</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></for>
	  <comment type="block">/* Remove OBAR, too. */</comment>
	  <expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <name><name>obar</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>obar</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_NOP</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>obar</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_NIL</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>obar</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>obar</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>obar</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Now emit the new store instead. */</comment>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>doemit</name>;</goto>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>refp</name> <operator>=</operator> <operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
<label><name>doemit</name>:</label>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>  <comment type="block">/* Otherwise we have a conflict or simply no match. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- FLOAD forwarding and FSTORE elimination ----------------------------- */</comment>

<comment type="block">/* Alias analysis for field access.
** Field loads are cheap and field stores are rare.
** Simple disambiguation based on field types is good enough.
*/</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_fref</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refa</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name> <operator>!=</operator> <name><name>refb</name><operator>-&gt;</operator><name>op2</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Different fields. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name><name>refb</name><operator>-&gt;</operator><name>op1</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_MUST</name></expr>;</return></block_content></block></if>  <comment type="block">/* Same field, same object. */</comment>
  <if type="elseif">else if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name> <operator>&gt;=</operator> <name>IRFL_TAB_META</name> <operator>&amp;&amp;</operator> <name><name>refa</name><operator>-&gt;</operator><name>op2</name></name> <operator>&lt;=</operator> <name>IRFL_TAB_NOMM</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>aa_table</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>refa</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>, <argument><expr><name><name>refb</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>  <comment type="block">/* Disambiguate tables. */</comment>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_MAY</name></expr>;</return></block_content></block></else></if_stmt>  <comment type="block">/* Same field, possibly different object. */</comment>
</block_content>}</block></function>

<comment type="block">/* Only the loads for mutable fields end up here (see FOLD). */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_fload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>oref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Object reference. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>fid</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Field ID. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>oref</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>

  <comment type="block">/* Search for conflicting stores. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_FSTORE</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>oref</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_fref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>fins</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>   <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>  <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt> <goto>goto <name>cselim</name>;</goto>  <comment type="block">/* Limit search for load. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case> <return>return <expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr>;</return>  <comment type="block">/* Store forwarding. */</comment>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* No conflicting store: const-fold field loads from allocations. */</comment>
  <if_stmt><if>if <condition>(<expr><name>fid</name> <operator>==</operator> <name>IRFL_TAB_META</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>oref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TNEW</name> <operator>||</operator> <name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_TDUP</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>lj_ir_knull</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>IRT_TAB</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>cselim</name>:</label>
  <comment type="block">/* Try to find a matching load. Below the conflicting store, if any. */</comment>
  <return>return <expr><call><name>lj_opt_cselim</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>lim</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* FSTORE elimination. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_dse_fstore</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>fref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* FREF reference. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>val</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Stored value reference. */</comment>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>fref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef1</name> <modifier>*</modifier></type><name>refp</name> <init>= <expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_FSTORE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>*</operator><name>refp</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>fref</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Search for redundant or conflicting stores. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_fref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>
      <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Conflict if the value is different. */</comment>
	<goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>  <comment type="block">/* Otherwise continue searching. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Same value: drop the new store. */</comment>
	<return>return <expr><name>DROPFOLD</name></expr>;</return></block_content></block></if></if_stmt>
      <comment type="block">/* Different value: try to eliminate the redundant store. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_LOOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Quick check to avoid crossing LOOP. */</comment>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>;</decl_stmt>
	<comment type="block">/* Check for any intervening guards or conflicting loads. */</comment>
	<for>for <control>(<init><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ir</name> <operator>&gt;</operator> <name>store</name></expr>;</condition> <incr><expr><name>ir</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>irt_isguard</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_FLOAD</name> <operator>&amp;&amp;</operator> <name><name>ir</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name><name>xr</name><operator>-&gt;</operator><name>op2</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>  <comment type="block">/* No elimination possible. */</comment>
	<comment type="block">/* Remove redundant store from chain and replace with NOP. */</comment>
	<expr_stmt><expr><operator>*</operator><name>refp</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_NOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Now emit the new store instead. */</comment>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>doemit</name>;</goto>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>refp</name> <operator>=</operator> <operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
<label><name>doemit</name>:</label>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>  <comment type="block">/* Otherwise we have a conflict or simply no match. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- XLOAD forwarding and XSTORE elimination ----------------------------- */</comment>

<comment type="block">/* Find cdata allocation for a reference (if any). */</comment>
<function><type><specifier>static</specifier> <name>IRIns</name> <modifier>*</modifier></type><name>aa_findcnew</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>irref_isk</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir1</name> <init>= <expr><call><name>aa_findcnew</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Left-recursion. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ir1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ir1</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>irref_isk</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Flatten right-recursion. */</comment>
  </block_content>}</block></while>
  <return>return <expr><ternary><condition><expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_CNEW</name></expr> ?</condition><then> <expr><name>ir</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Alias analysis for two cdata allocations. */</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_cnew</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refa</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>cnewa</name> <init>= <expr><call><name>aa_findcnew</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>refa</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>cnewb</name> <init>= <expr><call><name>aa_findcnew</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>refb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cnewa</name> <operator>==</operator> <name>cnewb</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_MAY</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Same allocation or neither is an allocation. */</comment>
  <if_stmt><if>if <condition>(<expr><name>cnewa</name> <operator>&amp;&amp;</operator> <name>cnewb</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Two different allocations never alias. */</comment>
  <if_stmt><if>if <condition>(<expr><name>cnewb</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>cnewa</name> <operator>=</operator> <name>cnewb</name></expr>;</expr_stmt> <expr_stmt><expr><name>refb</name> <operator>=</operator> <name>refa</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>aa_escape</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>cnewa</name></expr></argument>, <argument><expr><name>refb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Alias analysis for XLOAD/XSTORE. */</comment>
<function><type><specifier>static</specifier> <name>AliasRet</name></type> <name>aa_xref</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refa</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xa</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ofsa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ofsb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>refb</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>xb</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>basea</name> <init>= <expr><name>refa</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>baseb</name> <init>= <expr><name>refb</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>refa</name> <operator>==</operator> <name>refb</name> <operator>&amp;&amp;</operator> <call><name>irt_sametype</name><argument_list>(<argument><expr><name><name>xa</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name><name>xb</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_MUST</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Shortcut for same refs with identical type. */</comment>
  <comment type="block">/* Offset-based disambiguation. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>refa</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>irk</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>refa</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>basea</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>refa</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ofsa</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>LJ_64</name> <operator>&amp;&amp;</operator> <name><name>irk</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KINT64</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>ir_k64</name><argument_list>(<argument><expr><name>irk</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>u64</name></expr> </then><else>:
					    <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>irk</name><operator>-&gt;</operator><name>i</name></name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>refb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>refb</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>irk</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>refb</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>baseb</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>refb</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ofsb</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>LJ_64</name> <operator>&amp;&amp;</operator> <name><name>irk</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KINT64</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>ir_k64</name><argument_list>(<argument><expr><name>irk</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>u64</name></expr> </then><else>:
					    <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>irk</name><operator>-&gt;</operator><name>i</name></name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Treat constified pointers like base vs. base+offset. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>basea</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KPTR</name> <operator>&amp;&amp;</operator> <name><name>baseb</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KPTR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ofsb</name> <operator>+=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ir_kptr</name><argument_list>(<argument><expr><name>baseb</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>ir_kptr</name><argument_list>(<argument><expr><name>basea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>baseb</name> <operator>=</operator> <name>basea</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* This implements (very) strict aliasing rules.
  ** Different types do NOT alias, except for differences in signedness.
  ** Type punning through unions is allowed (but forces a reload).
  */</comment>
  <if_stmt><if>if <condition>(<expr><name>basea</name> <operator>==</operator> <name>baseb</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>sza</name> <init>= <expr><call><name>irt_size</name><argument_list>(<argument><expr><name><name>xa</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>szb</name> <init>= <expr><call><name>irt_size</name><argument_list>(<argument><expr><name><name>xb</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ofsa</name> <operator>==</operator> <name>ofsb</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>sza</name> <operator>==</operator> <name>szb</name> <operator>&amp;&amp;</operator> <call><name>irt_isfp</name><argument_list>(<argument><expr><name><name>xa</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>irt_isfp</name><argument_list>(<argument><expr><name><name>xb</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>ALIAS_MUST</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Same-sized, same-kind. May need to convert. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ofsa</name> <operator>+</operator> <name>sza</name> <operator>&lt;=</operator> <name>ofsb</name> <operator>||</operator> <name>ofsb</name> <operator>+</operator> <name>szb</name> <operator>&lt;=</operator> <name>ofsa</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ALIAS_NO</name></expr>;</return>  <comment type="block">/* Non-overlapping base+-o1 vs. base+-o2. */</comment>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* NYI: extract, extend or reinterpret bits (int &lt;-&gt; fp). */</comment>
    <return>return <expr><name>ALIAS_MAY</name></expr>;</return>  <comment type="block">/* Overlapping or type punning: force reload. */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>irt_sametype</name><argument_list>(<argument><expr><name><name>xa</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name><name>xb</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><operator>(</operator><call><name>irt_typerange</name><argument_list>(<argument><expr><name><name>xa</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><name>IRT_I8</name></expr></argument>, <argument><expr><name>IRT_U64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>(</operator><operator>(</operator><name><name>xa</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>-</operator> <name>IRT_I8</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>xb</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>-</operator> <name>IRT_I8</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>ALIAS_NO</name></expr>;</return></block_content></block></if></if_stmt>
  <comment type="block">/* NYI: structural disambiguation. */</comment>
  <return>return <expr><call><name>aa_cnew</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>basea</name></expr></argument>, <argument><expr><name>baseb</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="block">/* Try to disambiguate allocations. */</comment>
</block_content>}</block></function>

<comment type="block">/* Return CSEd reference or 0. Caveat: swaps lower ref to the right! */</comment>
<function><type><specifier>static</specifier> <name>IRRef</name></type> <name>reassoc_trycse</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IROp</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>op1</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>op2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>op</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>op1</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>op2</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>op2</name></expr>;</expr_stmt> <expr_stmt><expr><name>op2</name> <operator>=</operator> <name>op1</name></expr>;</expr_stmt> <expr_stmt><expr><name>op1</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name>op1</name> <operator>&amp;&amp;</operator> <name><name>ir</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>op2</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>ir</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reassociate index references. */</comment>
<function><type><specifier>static</specifier> <name>IRRef</name></type> <name>reassoc_xref</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>ofs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Get constant offset. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>irk</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ofs</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>LJ_64</name> <operator>&amp;&amp;</operator> <name><name>irk</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_KINT64</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>ir_k64</name><argument_list>(<argument><expr><name>irk</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>u64</name></expr> </then><else>:
					   <expr><operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>irk</name><operator>-&gt;</operator><name>i</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Add of base + index. */</comment>
    <comment type="block">/* Index ref &gt; base ref for loop-carried dependences. Only check op1. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ir1</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IRRef</name></type> <name>idxref</name></decl>;</decl_stmt>
    <comment type="block">/* Determine index shifts. Don't bother with IR_MUL here. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ir1</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_BSHL</name> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>ir1</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>ir1</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>ir1</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <name><name>ir1</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name><name>ir1</name><operator>-&gt;</operator><name>op2</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>ir1</name> <operator>=</operator> <name>ir</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>ir2</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>ir1</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* A non-reassociated add. Must be a loop-carried dependence. */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ir2</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_ADD</name> <operator>&amp;&amp;</operator> <call><name>irt_isint</name><argument_list>(<argument><expr><name><name>ir2</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>irref_isk</name><argument_list>(<argument><expr><name><name>ir2</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>ofs</name> <operator>+=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><call><name>IR</name><argument_list>(<argument><expr><name><name>ir2</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i</name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>idxref</name> <operator>=</operator> <name><name>ir2</name><operator>-&gt;</operator><name>op1</name></name></expr>;</expr_stmt>
    <comment type="block">/* Try to CSE the reassociated chain. Give up if not found. */</comment>
    <if_stmt><if>if <condition>(<expr><name>ir1</name> <operator>!=</operator> <name>ir</name> <operator>&amp;&amp;</operator>
	<operator>!</operator><operator>(</operator><name>idxref</name> <operator>=</operator> <call><name>reassoc_trycse</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>ir1</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>idxref</name></expr></argument>,
				  <argument><expr><ternary><condition><expr><name><name>ir1</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_BSHL</name></expr> ?</condition><then> <expr><name><name>ir1</name><operator>-&gt;</operator><name>op2</name></name></expr> </then><else>: <expr><name>idxref</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>idxref</name> <operator>=</operator> <call><name>reassoc_trycse</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>IR_ADD</name></expr></argument>, <argument><expr><name>idxref</name></expr></argument>, <argument><expr><name><name>ir</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>IRRef</name></type> <name>refk</name> <init>= <expr><call><name>tref_ref</name><argument_list>(<argument><expr><call><name>lj_ir_kintp</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>idxref</name> <operator>=</operator> <call><name>reassoc_trycse</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>IR_ADD</name></expr></argument>, <argument><expr><name>idxref</name></expr></argument>, <argument><expr><name>refk</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>idxref</name></expr>;</return>  <comment type="block">/* Success, found a reassociated index reference. Phew. */</comment>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Failure. */</comment>
</block_content>}</block></function>

<comment type="block">/* XLOAD forwarding. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_fwd_xload</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>xref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>xref</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name> <operator>&amp;</operator> <name>IRXLOAD_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>cselim</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name> <operator>&amp;</operator> <name>IRXLOAD_VOLATILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Search for conflicting stores. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XSTORE</name></expr>]</index></name></expr>;</expr_stmt>
<label><name>retry</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_CALLXS</name></expr>]</index></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_CALLXS</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XBAR</name></expr>]</index></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XBAR</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_xref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><name>fins</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>   <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>  <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt> <goto>goto <name>cselim</name>;</goto>  <comment type="block">/* Limit search for load. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case>
      <comment type="block">/* Emit conversion if the loaded type doesn't match the forwarded type. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>irt_sametype</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<decl_stmt><decl><type><name>IRType</name></type> <name>dt</name> <init>= <expr><call><name>irt_type</name><argument_list>(<argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>st</name> <init>= <expr><call><name>irt_type</name><argument_list>(<argument><expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>dt</name> <operator>==</operator> <name>IRT_I8</name> <operator>||</operator> <name>dt</name> <operator>==</operator> <name>IRT_I16</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Trunc + sign-extend. */</comment>
	  <expr_stmt><expr><name>st</name> <operator>=</operator> <name>dt</name> <operator>|</operator> <name>IRCONV_SEXT</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>dt</name> <operator>=</operator> <name>IRT_INT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dt</name> <operator>==</operator> <name>IRT_U8</name> <operator>||</operator> <name>dt</name> <operator>==</operator> <name>IRT_U16</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Trunc + zero-extend. */</comment>
	  <expr_stmt><expr><name>st</name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>dt</name> <operator>=</operator> <name>IRT_INT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fins</name><operator>-&gt;</operator><name>ot</name></name> <operator>=</operator> <call><name>IRT</name><argument_list>(<argument><expr><name>IR_CONV</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <operator>(</operator><name>dt</name><operator>&lt;&lt;</operator><literal type="number">5</literal><operator>)</operator><operator>|</operator><name>st</name></expr>;</expr_stmt>
	<return>return <expr><name>RETRYFOLD</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name></expr>;</return>  <comment type="block">/* Store forwarding. */</comment>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>cselim</name>:</label>
  <comment type="block">/* Try to find a matching load. Below the conflicting store, if any. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XLOAD</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* CSE for XLOAD depends on the type, but not on the IRXLOAD_* flags. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op1</name> <operator>==</operator> <name>xref</name> <operator>&amp;&amp;</operator> <call><name>irt_sametype</name><argument_list>(<argument><expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>, <argument><expr><name><name>fins</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Reassociate XLOAD across PHIs to handle a[i-1] forwarding case. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name> <operator>&amp;</operator> <name>IRXLOAD_READONLY</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_LOOP</name></expr>]</index></name> <operator>&amp;&amp;</operator>
      <name>xref</name> <operator>==</operator> <name><name>fins</name><operator>-&gt;</operator><name>op1</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>xref</name> <operator>=</operator> <call><name>reassoc_xref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XSTORE</name></expr>]</index></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Skip stores that have already been checked. */</comment>
      <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev</name></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>lim</name> <operator>=</operator> <name>xref</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>retry</name>;</goto>  <comment type="block">/* Retry with the reassociated reference. */</comment>
  </block_content>}</block></if></if_stmt>
<label><name>doemit</name>:</label>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* XSTORE elimination. */</comment>
<function><type><name>TRef</name> <name>LJ_FASTCALL</name></type> <name>lj_opt_dse_xstore</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>xref</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op1</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>xr</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>lim</name> <init>= <expr><name>xref</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search limit. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>val</name> <init>= <expr><name><name>fins</name><operator>-&gt;</operator><name>op2</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Stored value reference. */</comment>
  <decl_stmt><decl><type><name>IRRef1</name> <modifier>*</modifier></type><name>refp</name> <init>= <expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XSTORE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><operator>*</operator><name>refp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_CALLXS</name></expr>]</index></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_CALLXS</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XBAR</name></expr>]</index></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XBAR</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XSNEW</name></expr>]</index></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_XSNEW</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>lim</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Search for redundant or conflicting stores. */</comment>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>aa_xref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>xr</name></expr></argument>, <argument><expr><name>fins</name></expr></argument>, <argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>ALIAS_NO</name></expr>:</case>
      <break>break;</break>  <comment type="block">/* Continue searching. */</comment>
    <case>case <expr><name>ALIAS_MAY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Conflict if the value is different. */</comment>
	<goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>  <comment type="block">/* Otherwise continue searching. */</comment>
    <case>case <expr><name>ALIAS_MUST</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Same value: drop the new store. */</comment>
	<return>return <expr><name>DROPFOLD</name></expr>;</return></block_content></block></if></if_stmt>
      <comment type="block">/* Different value: try to eliminate the redundant store. */</comment>
      <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_LOOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Quick check to avoid crossing LOOP. */</comment>
	<decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>ir</name></decl>;</decl_stmt>
	<comment type="block">/* Check for any intervening guards or any XLOADs (no AA performed). */</comment>
	<for>for <control>(<init><expr><name>ir</name> <operator>=</operator> <call><name>IR</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ir</name> <operator>&gt;</operator> <name>store</name></expr>;</condition> <incr><expr><name>ir</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>irt_isguard</name><argument_list>(<argument><expr><name><name>ir</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>ir</name><operator>-&gt;</operator><name>o</name></name> <operator>==</operator> <name>IR_XLOAD</name></expr>)</condition><block type="pseudo"><block_content>
	    <goto>goto <name>doemit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>  <comment type="block">/* No elimination possible. */</comment>
	<comment type="block">/* Remove redundant store from chain and replace with NOP. */</comment>
	<expr_stmt><expr><operator>*</operator><name>refp</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>o</name></name> <operator>=</operator> <name>IR_NOP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>t</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <name>IRT_NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>op2</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* Now emit the new store instead. */</comment>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>doemit</name>;</goto>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>refp</name> <operator>=</operator> <operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>prev</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
<label><name>doemit</name>:</label>
  <return>return <expr><name>EMITFOLD</name></expr>;</return>  <comment type="block">/* Otherwise we have a conflict or simply no match. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- ASTORE/HSTORE previous type analysis -------------------------------- */</comment>

<comment type="block">/* Check whether the previous value for a table store is non-nil.
** This can be derived either from a previous store or from a previous
** load (because all loads from tables perform a type check).
**
** The result of the analysis can be used to avoid the metatable check
** and the guard against HREF returning niltv. Both of these are cheap,
** so let's not spend too much effort on the analysis.
**
** A result of 1 is exact: previous value CANNOT be nil.
** A result of 0 is inexact: previous value MAY be nil.
*/</comment>
<function><type><name>int</name></type> <name>lj_opt_fwd_wasnonnil</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>IROpT</name></type> <name>loadop</name></decl></parameter>, <parameter><decl><type><name>IRRef</name></type> <name>xref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* First check stores. */</comment>
  <decl_stmt><decl><type><name>IRRef</name></type> <name>ref</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>loadop</name><operator>+</operator><name>IRDELTA_L2S</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>xref</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name>xref</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Same xREF. */</comment>
      <comment type="block">/* A nil store MAY alias, but a non-nil store MUST alias. */</comment>
      <return>return <expr><operator>!</operator><call><name>irt_isnil</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>irt_isnil</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Must check any nil store. */</comment>
      <decl_stmt><decl><type><name>IRRef</name></type> <name>skref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>op1</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op2</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>IRRef</name></type> <name>xkref</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>xref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op2</name></expr></init></decl>;</decl_stmt>
      <comment type="block">/* Same key type MAY alias. Need ALOAD check due to multiple int types. */</comment>
      <if_stmt><if>if <condition>(<expr><name>loadop</name> <operator>==</operator> <name>IR_ALOAD</name> <operator>||</operator> <call><name>irt_sametype</name><argument_list>(<argument><expr><call><name>IR</name><argument_list>(<argument><expr><name>skref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>, <argument><expr><call><name>IR</name><argument_list>(<argument><expr><name>xkref</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>skref</name> <operator>==</operator> <name>xkref</name> <operator>||</operator> <operator>!</operator><call><name>irref_isk</name><argument_list>(<argument><expr><name>skref</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>irref_isk</name><argument_list>(<argument><expr><name>xkref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* A nil store with same const key or var key MAY alias. */</comment>
	<comment type="block">/* Different const keys CANNOT alias. */</comment>
      </block_content>}</block></if></if_stmt>  <comment type="block">/* Different key types CANNOT alias. */</comment>
    </block_content>}</block></if></if_stmt>  <comment type="block">/* Other non-nil stores MAY alias. */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Check loads since nothing could be derived from stores. */</comment>
  <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>loadop</name></expr>]</index></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>ref</name> <operator>&gt;</operator> <name>xref</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>IRIns</name> <modifier>*</modifier></type><name>load</name> <init>= <expr><call><name>IR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>load</name><operator>-&gt;</operator><name>op1</name></name> <operator>==</operator> <name>xref</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Same xREF. */</comment>
      <comment type="block">/* A nil load MAY alias, but a non-nil load MUST alias. */</comment>
      <return>return <expr><operator>!</operator><call><name>irt_isnil</name><argument_list>(<argument><expr><name><name>load</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>  <comment type="block">/* Other non-nil loads MAY alias. */</comment>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>load</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>  <comment type="block">/* Nothing derived at all, previous value MAY be nil. */</comment>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fins</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fleft</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fright</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
