<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_func.c"><comment type="block">/*
** Function handling (prototypes, functions and upvalues).
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
**
** Portions taken verbatim or adapted from the Lua interpreter.
** Copyright (C) 1994-2008 Lua.org, PUC-Rio. See Copyright Notice in lua.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_func_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>

<comment type="block">/* -- Prototypes ---------------------------------------------------------- */</comment>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_func_freeproto</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lj_mem_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>sizept</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Upvalues ------------------------------------------------------------ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unlinkuv</name><parameter_list>(<parameter><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>uvprev</name><argument_list>(<argument><expr><call><name>uvnext</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>uv</name> <operator>&amp;&amp;</operator> <call><name>uvnext</name><argument_list>(<argument><expr><call><name>uvprev</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><call><name>uvnext</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev</name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><call><name>uvprev</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>next</name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Find existing open upvalue for a stack slot or create a new one. */</comment>
<function><type><specifier>static</specifier> <name>GCupval</name> <modifier>*</modifier></type><name>func_finduv</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCRef</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
  <comment type="block">/* Search the sorted list of open upvalues. */</comment>
  <while>while <condition>(<expr><call><name>gcref</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>uvval</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>gco2uv</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>slot</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <call><name>uvval</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>uvval</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>slot</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Found open upvalue pointing to same slot? */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* Resurrect it, if it's dead. */</comment>
	<expr_stmt><expr><call><name>flipwhite</name><argument_list>(<argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>nextgc</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <comment type="block">/* No matching upvalue found. Create a new one. */</comment>
  <expr_stmt><expr><name>uv</name> <operator>=</operator> <call><name>lj_mem_newt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GCupval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>GCupval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>newwhite</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TUPVAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Still open. */</comment>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Pointing to the stack slot. */</comment>
  <comment type="block">/* NOBARRIER: The GCupval is new (marked white) and open. */</comment>
  <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>nextgc</name></name></expr></argument>, <argument><expr><operator>*</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Insert into sorted list of open upvalues. */</comment>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>uvhead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Insert into GC list, too. */</comment>
  <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><call><name>uvnext</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev</name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>uvhead</name><operator>.</operator><name>next</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>uvprev</name><argument_list>(<argument><expr><call><name>uvnext</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>uv</name> <operator>&amp;&amp;</operator> <call><name>uvnext</name><argument_list>(<argument><expr><call><name>uvprev</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>uv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create an empty and closed upvalue. */</comment>
<function><type><specifier>static</specifier> <name>GCupval</name> <modifier>*</modifier></type><name>func_emptyuv</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><operator>(</operator><name>GCupval</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_newgco</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GCupval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TUPVAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>uv</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>uv</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Close all open upvalues pointing to some stack level or above. */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_func_closeuv</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>TValue</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
	 <call><name>uvval</name><argument_list>(<argument><expr><operator>(</operator><name>uv</name> <operator>=</operator> <call><name>gco2uv</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>level</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCobj</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>isblack</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>uv</name><operator>-&gt;</operator><name>closed</name></name> <operator>&amp;&amp;</operator> <call><name>uvval</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name><name>uv</name><operator>-&gt;</operator><name>tv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>openupval</name></name></expr></argument>, <argument><expr><name><name>uv</name><operator>-&gt;</operator><name>nextgc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* No longer in open list. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isdead</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lj_func_freeuv</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>unlinkuv</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_gc_closeuv</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_func_freeuv</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>uv</name><operator>-&gt;</operator><name>closed</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>unlinkuv</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_mem_freet</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Functions (closures) ------------------------------------------------ */</comment>

<function><type><name>GCfunc</name> <modifier>*</modifier></type><name>lj_func_newC</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>nelems</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><operator>(</operator><name>GCfunc</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_newgco</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>sizeCfunc</name><argument_list>(<argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TFUNC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>ffid</name></name> <operator>=</operator> <name>FF_C</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>nelems</name></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: The GCfunc is new (marked white). */</comment>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>pc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bc_cfunc_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>env</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GCfunc</name> <modifier>*</modifier></type><name>func_newL</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><operator>(</operator><name>GCfunc</name> <operator>*</operator><operator>)</operator><call><name>lj_mem_newgco</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><call><name>sizeLfunc</name><argument_list>(<argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TFUNC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>ffid</name></name> <operator>=</operator> <name>FF_LUA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>nupvalues</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Set to zero until upvalues are initialized. */</comment>
  <comment type="block">/* NOBARRIER: Really a setgcref. But the GCfunc is new (marked white). */</comment>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>pc</name></name></expr></argument>, <argument><expr><call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>env</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Saturating 3 bit counter (0..7) for created closures. */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>+</operator> <name>PROTO_CLCOUNT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>count</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <name>PROTO_CLC_BITS</name><operator>)</operator> <operator>&amp;</operator> <name>PROTO_CLCOUNT</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a new Lua function with empty upvalues. */</comment>
<function><type><name>GCfunc</name> <modifier>*</modifier></type><name>lj_func_newL_empty</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>GCtab</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name> <init>= <expr><call><name>func_newL</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nuv</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* NOBARRIER: The GCfunc is new (marked white). */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nuv</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name> <init>= <expr><call><name>func_emptyuv</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><call><name>proto_uv</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>immutable</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>/</operator> <name>PROTO_UV_IMMUTABLE</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>dhash</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>pt</name> <operator>^</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>uvptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>nupvalues</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>nuv</name></expr>;</expr_stmt>
  <return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Do a GC check and create a new Lua function with inherited upvalues. */</comment>
<function><type><name>GCfunc</name> <modifier>*</modifier></type><name>lj_func_newL_gc</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>GCfuncL</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCRef</name> <modifier>*</modifier></type><name>puv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MSize</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nuv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_gc_check_fixtop</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>func_newL</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><call><name>tabref</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* NOBARRIER: The GCfunc is new (marked white). */</comment>
  <expr_stmt><expr><name>puv</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>uvptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nuv</name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizeuv</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base</name> <operator>=</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nuv</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>proto_uv</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GCupval</name> <modifier>*</modifier></type><name>uv</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <name>PROTO_UV_LOCAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>uv</name> <operator>=</operator> <call><name>func_finduv</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>base</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>immutable</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>/</operator> <name>PROTO_UV_IMMUTABLE</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>uv</name><operator>-&gt;</operator><name>dhash</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>mref</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>uv</name> <operator>=</operator> <operator>&amp;</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>puv</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>uv</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>uvptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>nupvalues</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>nuv</name></expr>;</expr_stmt>
  <return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_func_free</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCfunc</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><call><name>isluafunc</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>sizeLfunc</name><argument_list>(<argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name><name>fn</name><operator>-&gt;</operator><name>l</name><operator>.</operator><name>nupvalues</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
			       <expr><call><name>sizeCfunc</name><argument_list>(<argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name><name>fn</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>nupvalues</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lj_mem_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
