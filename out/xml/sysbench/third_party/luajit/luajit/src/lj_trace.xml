<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_trace.c"><comment type="block">/*
** Trace management.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_trace_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASJIT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_frame.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_state.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_bc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_iropt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_mcode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_trace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_snap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gdbjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_record.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_asm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_dispatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_vmevent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_target.h"</cpp:file></cpp:include>

<comment type="block">/* -- Error handling ------------------------------------------------------ */</comment>

<comment type="block">/* Synchronous abort with error message. */</comment>
<function><type><name>void</name></type> <name>lj_trace_err</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TraceError</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setnilV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>errinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* No error info. */</comment>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_err_throw</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LUA_ERRRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Synchronous abort with error message and error info. */</comment>
<function><type><name>void</name></type> <name>lj_trace_err_info</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TraceError</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_err_throw</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LUA_ERRRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Trace management ---------------------------------------------------- */</comment>

<comment type="block">/* The current trace is first assembled in J-&gt;cur. The variable length
** arrays point to shared, growable buffers (J-&gt;irbuf etc.). When trace
** recording ends successfully, the current trace and its data structures
** are copied to a new (compact) GCtrace object.
*/</comment>

<comment type="block">/* Find a free trace number. */</comment>
<function><type><specifier>static</specifier> <name>TraceNo</name></type> <name>trace_findfree</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MSize</name></type> <name>osz</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>;</condition> <incr><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name><operator>++</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <comment type="block">/* Need to grow trace array. */</comment>
  <expr_stmt><expr><name>lim</name> <operator>=</operator> <operator>(</operator><name>MSize</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>JIT_P_maxtrace</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if> <if type="elseif">else if <condition>(<expr><name>lim</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lim</name> <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>osz</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>osz</name> <operator>&gt;=</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Too many traces. */</comment>
  <expr_stmt><expr><call><name>lj_mem_growvec</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr></argument>, <argument><expr><name>lim</name></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>osz</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>;</condition> <incr><expr><name>osz</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name>osz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_APPENDVEC</name><parameter_list>(<parameter><type><name>field</name></type></parameter>, <parameter><type><name>szfield</name></type></parameter>, <parameter><type><name>tp</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>T-&gt;field = (tp *)p; \
  memcpy(p, J-&gt;cur.field, J-&gt;cur.szfield*sizeof(tp)); \
  p += J-&gt;cur.szfield*sizeof(tp);</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_USE_PERFTOOLS</name></cpp:ifdef>
<comment type="block">/*
** Create symbol table of JIT-compiled code. For use with Linux perf tools.
** Example usage:
**   perf record -f -e cycles luajit test.lua
**   perf report -s symbol
**   rm perf.data /tmp/perf-*.map
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>perftools_addtrace</name><parameter_list>(<parameter><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><operator>&amp;</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startpt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>startpc</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startpc</name></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>BCIns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>proto_chunknamestr</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCLine</name></type> <name>lineno</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>name</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"(string)"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>startpc</name> <operator>&gt;=</operator> <call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>startpc</name> <operator>&lt;</operator> <call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name>lj_debug_line</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><call><name>proto_bcpos</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>startpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"/tmp/perf-%d.map"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>setlinebuf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%lx %x TRACE_%d::%s:%u\n"</literal></expr></argument>,
	  <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>T</name><operator>-&gt;</operator><name>mcode</name></name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>szmcode</name></name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Allocate space for copy of T. */</comment>
<function><type><name>GCtrace</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_trace_alloc</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sztr</name> <init>= <expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GCtrace</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>szins</name> <init>= <expr><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>nins</name></name><operator>-</operator><name><name>T</name><operator>-&gt;</operator><name>nk</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><name>sztr</name> <operator>+</operator> <name>szins</name> <operator>+</operator>
	      <name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SnapShot</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
	      <name><name>T</name><operator>-&gt;</operator><name>nsnapmap</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SnapEntry</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T2</name> <init>= <expr><call><name>lj_mem_newt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><name>sz</name></expr></argument>, <argument><expr><name>GCtrace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T2</name> <operator>+</operator> <name>sztr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TTRACE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>marked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>traceno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>ir</name></name> <operator>=</operator> <operator>(</operator><name>IRIns</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <name><name>T</name><operator>-&gt;</operator><name>nk</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>nins</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>nins</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>nk</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>nk</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>nsnap</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>nsnapmap</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>nsnapmap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>ir</name></name> <operator>+</operator> <name><name>T</name><operator>-&gt;</operator><name>nk</name></name></expr></argument>, <argument><expr><name>szins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>T2</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Save current trace by copying and compacting it. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_save</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sztr</name> <init>= <expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GCtrace</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>szins</name> <init>= <expr><operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name><operator>-</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>T</name> <operator>+</operator> <name>sztr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GCtrace</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefr</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>nextgc</name></name></expr></argument>, <argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefp</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>newwhite</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>gct</name></name> <operator>=</operator> <operator>~</operator><name>LJ_TTRACE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>ir</name></name> <operator>=</operator> <operator>(</operator><name>IRIns</name> <operator>*</operator><operator>)</operator><name>p</name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name></expr>;</expr_stmt>  <comment type="block">/* The IR has already been copied above. */</comment>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>szins</name></expr>;</expr_stmt>
  <macro><name>TRACE_APPENDVEC</name><argument_list>(<argument>snap</argument>, <argument>nsnap</argument>, <argument>SnapShot</argument>)</argument_list></macro>
  <macro><name>TRACE_APPENDVEC</name><argument_list>(<argument>snapmap</argument>, <argument>nsnapmap</argument>, <argument>SnapEntry</argument>)</argument_list></macro>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>curfinal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefp</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gc_barriertrace</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_gdbjit_addtrace</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_USE_PERFTOOLS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>perftools_addtrace</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_trace_free</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_gdbjit_deltrace</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_mem_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>T</name></expr></argument>,
    <argument><expr><operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>GCtrace</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>nins</name></name><operator>-</operator><name><name>T</name><operator>-&gt;</operator><name>nk</name></name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>IRIns</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
    <name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SnapShot</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>T</name><operator>-&gt;</operator><name>nsnapmap</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SnapEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Re-enable compiling a prototype by unpatching any modified bytecode. */</comment>
<function><type><name>void</name></type> <name>lj_trace_reenableproto</name><parameter_list>(<parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_ILOOP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>bc</name> <init>= <expr><call><name>proto_bc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BCPos</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sizebc</name> <init>= <expr><name><name>pt</name><operator>-&gt;</operator><name>sizebc</name></name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PROTO_ILOOP</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><name><name>bc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_IFUNCF</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>BC_FUNCF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sizebc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>BCOp</name></type> <name>op</name> <init>= <expr><call><name>bc_op</name><argument_list>(<argument><expr><name><name>bc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_IFORL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_IITERL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_ILOOP</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>op</name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_LOOP</name><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_ILOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Unpatch the bytecode modified by a root trace. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_unpatch</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>BCOp</name></type> <name>op</name> <init>= <expr><call><name>bc_op</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startins</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startpc</name></name></expr></argument>, <argument><expr><name>BCIns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BC_JMP</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>  <comment type="block">/* No need to unpatch branches in parent traces (yet). */</comment>
  <switch>switch <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BC_JFORL</name></expr>:</case>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>bc_d</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>startins</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name>bc_j</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_JFORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>BC_FORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BC_JITERL</name></expr>:</case>
  <case>case <expr><name>BC_JLOOP</name></expr>:</case>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>BC_ITERL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BC_LOOP</name> <operator>||</operator> <call><name>bc_isret</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>startins</name></name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BC_JMP</name></expr>:</case>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>BC_ITERL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pc</name> <operator>+=</operator> <call><name>bc_j</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_JITERL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>bc_d</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>startins</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  <case>case <expr><name>BC_JFUNCF</name></expr>:</case>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>BC_FUNCF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>startins</name></name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>  <comment type="block">/* Already unpatched. */</comment>
    <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* Flush a root trace. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_flushroot</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><operator>&amp;</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>startpt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pt</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* First unpatch any modified bytecode. */</comment>
  <expr_stmt><expr><call><name>trace_unpatch</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Unlink root trace from chain anchored in prototype. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Trace is first in chain. Easy. */</comment>
    <expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>nextroot</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Otherwise search in chain of root traces. */</comment>
    <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T2</name> <init>= <expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T2</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init>;</init> <condition><expr><name><name>T2</name><operator>-&gt;</operator><name>nextroot</name></name></expr>;</condition> <incr><expr><name>T2</name> <operator>=</operator> <call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>T2</name><operator>-&gt;</operator><name>nextroot</name></name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>T2</name><operator>-&gt;</operator><name>nextroot</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>traceno</name></name></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><name><name>T2</name><operator>-&gt;</operator><name>nextroot</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>nextroot</name></name></expr>;</expr_stmt>  <comment type="block">/* Unlink from chain. */</comment>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Flush a trace. Only root traces are considered. */</comment>
<function><type><name>void</name></type> <name>lj_trace_flush</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>TraceNo</name></type> <name>traceno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>traceno</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>traceno</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>traceno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>trace_flushroot</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Flush all traces associated with a prototype. */</comment>
<function><type><name>void</name></type> <name>lj_trace_flushproto</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>trace_flushroot</name><argument_list>(<argument><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>traceref</name><argument_list>(<argument><expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* Flush all traces. */</comment>
<function><type><name>int</name></type> <name>lj_trace_flushall</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>L2J</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <name>HOOK_GC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>trace_flushroot</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lj_gdbjit_deltrace</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>traceno</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Blacklist the link for cont_stitch. */</comment>
      <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="block">/* Clear penalty cache. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>penalty</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>penalty</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Free the whole machine code and invalidate all exit stub groups. */</comment>
  <expr_stmt><expr><call><name>lj_mcode_free</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>exitstubgroup</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>exitstubgroup</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>lj_vmevent_send</name><argument_list>(<argument>L</argument>, <argument>TRACE</argument>,
    <argument>setstrV(L, L-&gt;top++, lj_str_newlit(L, <literal type="string">"flush"</literal>));</argument>
  )</argument_list></macro><empty_stmt>;</empty_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize JIT compiler state. */</comment>
<function><type><name>void</name></type> <name>lj_trace_initstate</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize aligned SIMD constants. */</comment>
  <expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>LJ_KSIMD</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_KSIMD_ABS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">7fffffff</literal></expr></argument>,<argument><expr><name>ffffffff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">7fffffff</literal></expr></argument>,<argument><expr><name>ffffffff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>LJ_KSIMD</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>LJ_KSIMD_NEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">80000000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">80000000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize 32/64 bit constants. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k64</name><index>[<expr><name>LJ_K64_TOBIT</name></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">43380000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_32</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k64</name><index>[<expr><name>LJ_K64_M2P64_31</name></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><name>c1e00000</name></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k64</name><index>[<expr><name>LJ_K64_2P64</name></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">43f00000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k32</name><index>[<expr><name>LJ_K32_M2P64_31</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>LJ_64</name></expr> ?</condition><then> <expr><literal type="number">0xdf800000</literal></expr> </then><else>: <expr><literal type="number">0xcf000000</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_X86ORX64</name> <operator>||</operator> <name>LJ_TARGET_MIPS64</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k64</name><index>[<expr><name>LJ_K64_M2P64</name></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><name>c3f00000</name></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PPC</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k32</name><index>[<expr><name>LJ_K32_2P52_2P31</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x59800004</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k32</name><index>[<expr><name>LJ_K32_2P52</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x59800000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_PPC</name> <operator>||</operator> <name>LJ_TARGET_MIPS</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k32</name><index>[<expr><name>LJ_K32_2P31</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x4f000000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_TARGET_MIPS</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k64</name><index>[<expr><name>LJ_K64_2P31</name></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">41e00000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_64</name></expr></cpp:if>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k64</name><index>[<expr><name>LJ_K64_2P63</name></expr>]</index></name><operator>.</operator><name>u64</name> <operator>=</operator> <call><name>U64x</name><argument_list>(<argument><expr><literal type="number">43e00000</literal></expr></argument>,<argument><expr><literal type="number">00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k32</name><index>[<expr><name>LJ_K32_2P63</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x5f000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>k32</name><index>[<expr><name>LJ_K32_M2P64</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xdf800000</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Free everything associated with the JIT compiler state. */</comment>
<function><type><name>void</name></type> <name>lj_trace_freestate</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><call><name>G2J</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUA_USE_ASSERT</name></cpp:ifdef>
  <block>{<block_content>  <comment type="block">/* This assumes all traces have already been freed. */</comment>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <operator>(</operator><name>ptrdiff_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name> <operator>||</operator> <call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>lj_mcode_free</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>snapmapbuf</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>sizesnapmap</name></name></expr></argument>, <argument><expr><name>SnapEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>snapbuf</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>sizesnap</name></name></expr></argument>, <argument><expr><name>SnapShot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name> <operator>+</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>irtoplim</name></name> <operator>-</operator> <name><name>J</name><operator>-&gt;</operator><name>irbotlim</name></name></expr></argument>, <argument><expr><name>IRIns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr></argument>, <argument><expr><name>GCRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Penalties and blacklisting ------------------------------------------ */</comment>

<comment type="block">/* Blacklist a bytecode instruction. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>blacklist_pc</name><parameter_list>(<parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_ILOOP</name><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PROTO_ILOOP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Penalize a bytecode instruction. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>penalty_pc</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>, <parameter><decl><type><name>TraceError</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name> <init>= <expr><name>PENALTY_MIN</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PENALTY_SLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>penalty</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>BCIns</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>pc</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Cache slot found? */</comment>
      <comment type="block">/* First try to bump its hotcount several times. */</comment>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>J</name><operator>-&gt;</operator><name>penalty</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>
	    <call><name>LJ_PRNG_BITS</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>PENALTY_RNDBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>PENALTY_MAX</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>blacklist_pc</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Blacklist it, if that didn't help. */</comment>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
      <goto>goto <name>setpenalty</name>;</goto>
    </block_content>}</block></if></if_stmt></block_content></block></for>
  <comment type="block">/* Assign a new penalty cache slot. */</comment>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>penaltyslot</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>penaltyslot</name></name> <operator>=</operator> <operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>penaltyslot</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>PENALTY_SLOTS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>penalty</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pc</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>setpenalty</name>:</label>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>penalty</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>penalty</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reason</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>hotcount_set</name><argument_list>(<argument><expr><call><name>J2GG</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pc</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* -- Trace compiler state machine ---------------------------------------- */</comment>

<comment type="block">/* Start tracing. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_start</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TraceNo</name></type> <name>traceno</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PROTO_NOJIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* JIT disabled for this proto? */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Lazy bytecode patching to disable hotcount events. */</comment>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_FORL</name> <operator>||</operator> <call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_ITERL</name> <operator>||</operator>
		 <call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_LOOP</name> <operator>||</operator> <call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_FUNCF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_ILOOP</name><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>pt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PROTO_ILOOP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_IDLE</name></expr>;</expr_stmt>  <comment type="block">/* Silently ignored. */</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get a new trace number. */</comment>
  <expr_stmt><expr><name>traceno</name> <operator>=</operator> <call><name>trace_findfree</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>traceno</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* No free trace? */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><operator>(</operator><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <name>HOOK_GC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_trace_flushall</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_IDLE</name></expr>;</expr_stmt>  <comment type="block">/* Silently ignored. */</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>setgcrefp</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name>traceno</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup enough of the current trace to be able to send the vmevent. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GCtrace</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name> <operator>=</operator> <name>traceno</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nk</name></name> <operator>=</operator> <name>REF_BASE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>ir</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>irbuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>snap</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>snapbuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>snapmap</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>snapmapbuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>mergesnap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>needsnap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>bcskip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>guardemit</name><operator>.</operator><name>irt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>postproc</name></name> <operator>=</operator> <name>LJ_POST_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_resetsplit</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>retryrec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>ktrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startpt</name></name></expr></argument>, <argument><expr><call><name>obj2gco</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>pt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr>;</expr_stmt>
  <macro><name>lj_vmevent_send</name><argument_list>(<argument>L</argument>, <argument>TRACE</argument>,
    <argument>setstrV(L, L-&gt;top++, lj_str_newlit(L, <literal type="string">"start"</literal>));
    setintV(L-&gt;top++, traceno);
    setfuncV(L, L-&gt;top++, J-&gt;fn);
    setintV(L-&gt;top++, proto_bcpos(J-&gt;pt, J-&gt;pc));
    if (J-&gt;parent) {
      setintV(L-&gt;top++, J-&gt;parent);
      setintV(L-&gt;top++, J-&gt;exitno);
    } else {
      BCOp op = bc_op(*J-&gt;pc);
      if (op == BC_CALLM || op == BC_CALL || op == BC_ITERC) {
	setintV(L-&gt;top++, J-&gt;exitno);  <comment type="block">/* Parent of stitched trace. */</comment>
	setintV(L-&gt;top++, -<literal type="number">1</literal>);
      }
    }</argument>
  )</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>lj_record_setup</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Stop tracing. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_stop</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startpc</name></name></expr></argument>, <argument><expr><name>BCIns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BCOp</name></type> <name>op</name> <init>= <expr><call><name>bc_op</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startins</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCproto</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><operator>&amp;</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startpt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TraceNo</name></type> <name>traceno</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>curfinal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BC_FORL</name></expr>:</case>
    <expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><name>pc</name><operator>+</operator><call><name>bc_j</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startins</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BC_JFORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Patch FORI, too. */</comment>
    <comment type="block">/* fallthrough */</comment>
  <case>case <expr><name>BC_LOOP</name></expr>:</case>
  <case>case <expr><name>BC_ITERL</name></expr>:</case>
  <case>case <expr><name>BC_FUNCF</name></expr>:</case>
    <comment type="block">/* Patch bytecode of starting instruction in root trace. */</comment>
    <expr_stmt><expr><call><name>setbc_op</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>op</name><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_JLOOP</name><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><name>BC_LOOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setbc_d</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>traceno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <label><name>addroot</name>:</label>
    <comment type="block">/* Add to root trace chain in prototype. */</comment>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nextroot</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>trace</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <operator>(</operator><name>TraceNo1</name><operator>)</operator><name>traceno</name></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>BC_RET</name></expr>:</case>
  <case>case <expr><name>BC_RET0</name></expr>:</case>
  <case>case <expr><name>BC_RET1</name></expr>:</case>
    <expr_stmt><expr><operator>*</operator><name>pc</name> <operator>=</operator> <call><name>BCINS_AD</name><argument_list>(<argument><expr><name>BC_JLOOP</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>snap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nslots</name></expr></argument>, <argument><expr><name>traceno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>addroot</name>;</goto>
  <case>case <expr><name>BC_JMP</name></expr>:</case>
    <comment type="block">/* Patch exit branch in parent to side trace entry. */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>root</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_asm_patchexit</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>mcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Avoid compiling a side trace twice (stack resizing uses parent exit). */</comment>
    <expr_stmt><expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>snap</name><index>[<expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name>SNAPCOUNT_DONE</name></expr>;</expr_stmt>
    <comment type="block">/* Add to side trace chain in root trace. */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>nchild</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nextside</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>nextside</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>nextside</name></name> <operator>=</operator> <operator>(</operator><name>TraceNo1</name><operator>)</operator><name>traceno</name></expr>;</expr_stmt>
    </block_content>}</block>
    <break>break;</break>
  <case>case <expr><name>BC_CALLM</name></expr>:</case>
  <case>case <expr><name>BC_CALL</name></expr>:</case>
  <case>case <expr><name>BC_ITERC</name></expr>:</case>
    <comment type="block">/* Trace stitching: patch link of previous trace. */</comment>
    <expr_stmt><expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>link</name> <operator>=</operator> <name>traceno</name></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></switch>

  <comment type="block">/* Commit new mcode only after all patching is done. */</comment>
  <expr_stmt><expr><call><name>lj_mcode_commit</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>mcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>postproc</name></name> <operator>=</operator> <name>LJ_POST_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>trace_save</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr>;</expr_stmt>
  <macro><name>lj_vmevent_send</name><argument_list>(<argument>L</argument>, <argument>TRACE</argument>,
    <argument>setstrV(L, L-&gt;top++, lj_str_newlit(L, <literal type="string">"stop"</literal>));
    setintV(L-&gt;top++, traceno);
    setfuncV(L, L-&gt;top++, J-&gt;fn);</argument>
  )</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<comment type="block">/* Start a new root trace for down-recursion. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>trace_downrec</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Restart recording at the return instruction. */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>pt</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>bc_isret</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>pc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_RETM</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* NYI: down-recursion with RETM. */</comment>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_RECORD</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>trace_start</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Abort tracing. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>trace_abort</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TraceError</name></type> <name>e</name> <init>= <expr><name>LJ_TRERR_RECERR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TraceNo</name></type> <name>traceno</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>postproc</name></name> <operator>=</operator> <name>LJ_POST_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_mcode_abort</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>curfinal</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_trace_free</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>curfinal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>curfinal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tvisnumber</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>TraceError</name><operator>)</operator><call><name>numberVint</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>LJ_TRERR_MCODELM</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* Remove error object */</comment>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_ASM</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>  <comment type="block">/* Retry ASM with new MCode area. */</comment>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Penalize or blacklist starting bytecode instruction. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bc_isret</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startins</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>startpc</name> <init>= <expr><call><name>mref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startpc</name></name></expr></argument>, <argument><expr><name>BCIns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>LJ_TRERR_RETRY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>hotcount_set</name><argument_list>(<argument><expr><call><name>J2GG</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>startpc</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>  <comment type="block">/* Immediate retry. */</comment>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>penalty_pc</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>gcref</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>startpt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pt</name></expr></argument>, <argument><expr><name>startpc</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>link</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>exitno</name></name></expr>;</expr_stmt>  <comment type="block">/* Self-link is blacklisted. */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Is there anything to abort? */</comment>
  <expr_stmt><expr><name>traceno</name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>traceno</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>errobj</name> <init>= <expr><call><name>savestack</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* Stack may be resized. */</comment>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>link</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>linktype</name></name> <operator>=</operator> <name>LJ_TRLINK_NONE</name></expr>;</expr_stmt>
    <macro><name>lj_vmevent_send</name><argument_list>(<argument>L</argument>, <argument>TRACE</argument>,
      <argument>TValue *frame;
      const BCIns *pc;
      GCfunc *fn;
      setstrV(L, L-&gt;top++, lj_str_newlit(L, <literal type="string">"abort"</literal>));
      setintV(L-&gt;top++, traceno);
      <comment type="block">/* Find original Lua function call to generate a better error message. */</comment>
      frame = J-&gt;L-&gt;base-<literal type="number">1</literal>;
      pc = J-&gt;pc;
      while (!isluafunc(frame_func(frame))) {
	pc = (frame_iscont(frame) ? frame_contpc(frame) : frame_pc(frame)) - <literal type="number">1</literal>;
	frame = frame_prev(frame);
      }
      fn = frame_func(frame);
      setfuncV(L, L-&gt;top++, fn);
      setintV(L-&gt;top++, proto_bcpos(funcproto(fn), pc));
      copyTV(L, L-&gt;top++, restorestack(L, errobj));
      copyTV(L, L-&gt;top++, &amp;J-&gt;errinfo);</argument>
    )</argument_list></macro><empty_stmt>;</empty_stmt>
    <comment type="block">/* Drop aborted trace after the vmevent (which may still access it). */</comment>
    <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>trace</name><index>[<expr><name>traceno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>traceno</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>freetrace</name></name> <operator>=</operator> <name>traceno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* Remove error object */</comment>
  <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>LJ_TRERR_DOWNREC</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>trace_downrec</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>e</name> <operator>==</operator> <name>LJ_TRERR_MCODEAL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lj_trace_flushall</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Perform pending re-patch of a bytecode instruction. */</comment>
<function><type><specifier>static</specifier> <name>LJ_AINLINE</name> <name>void</name></type> <name>trace_pendpatch</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>patchpc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator> <name><name>J</name><operator>-&gt;</operator><name>bcskip</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>patchpc</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>patchins</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>patchpc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>bcskip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* State machine for the trace compiler. Protected callback. */</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>trace_state</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><operator>(</operator><name>jit_State</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do <block>{<block_content>
  <label><name>retry</name>:</label>
    <switch>switch <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>LJ_TRACE_START</name></expr>:</case>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_RECORD</name></expr>;</expr_stmt>  <comment type="block">/* trace_start() may change state. */</comment>
      <expr_stmt><expr><call><name>trace_start</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>LJ_TRACE_RECORD</name></expr>:</case>
      <expr_stmt><expr><call><name>trace_pendpatch</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setvmstate</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RECORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>lj_vmevent_send_</name><argument_list>(<argument>L</argument>, <argument>RECORD</argument>,
	<comment type="block">/* Save/restore tmptv state for trace recorder. */</comment>
	<argument>TValue savetv = J2G(J)-&gt;tmptv;
	TValue savetv2 = J2G(J)-&gt;tmptv2;
	setintV(L-&gt;top++, J-&gt;cur.traceno);
	setfuncV(L, L-&gt;top++, J-&gt;fn);
	setintV(L-&gt;top++, J-&gt;pt ? (int32_t)proto_bcpos(J-&gt;pt, J-&gt;pc) : -<literal type="number">1</literal>);
	setintV(L-&gt;top++, J-&gt;framedepth);</argument>
      ,
	<argument>J2G(J)-&gt;tmptv = savetv;
	J2G(J)-&gt;tmptv2 = savetv2;</argument>
      )</argument_list></macro><empty_stmt>;</empty_stmt>
      <expr_stmt><expr><call><name>lj_record_ins</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>LJ_TRACE_END</name></expr>:</case>
      <expr_stmt><expr><call><name>trace_pendpatch</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>loopref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>J</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JIT_F_OPT_LOOP</name><operator>)</operator> <operator>&amp;&amp;</operator>
	  <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>link</name></name> <operator>==</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>traceno</name></name> <operator>&amp;&amp;</operator> <name><name>J</name><operator>-&gt;</operator><name>framedepth</name></name> <operator>+</operator> <name><name>J</name><operator>-&gt;</operator><name>retdepth</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>setvmstate</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>lj_opt_dce</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>lj_opt_loop</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="block">/* Loop optimization failed? */</comment>
	  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>link</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>linktype</name></name> <operator>=</operator> <name>LJ_TRLINK_NONE</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>loopref</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nins</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_RECORD</name></expr>;</expr_stmt>  <comment type="block">/* Try to continue recording. */</comment>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>loopref</name></name> <operator>=</operator> <name><name>J</name><operator>-&gt;</operator><name>chain</name><index>[<expr><name>IR_LOOP</name></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* Needed by assembler. */</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>lj_opt_split</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_opt_sink</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>J</name><operator>-&gt;</operator><name>loopref</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>snap</name><index>[<expr><name><name>J</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>nsnap</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>count</name> <operator>=</operator> <name>SNAPCOUNT_DONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_ASM</name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>LJ_TRACE_ASM</name></expr>:</case>
      <expr_stmt><expr><call><name>setvmstate</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ASM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_asm_trace</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>J</name><operator>-&gt;</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>trace_stop</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setvmstate</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_IDLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>

    <default>default:</default>  <comment type="block">/* Trace aborted asynchronously. */</comment>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>LJ_TRERR_RECERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* fallthrough */</comment>
    <case>case <expr><name>LJ_TRACE_ERR</name></expr>:</case>
      <expr_stmt><expr><call><name>trace_pendpatch</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>trace_abort</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>setvmstate</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INTERP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_IDLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_dispatch_update</name><argument_list>(<argument><expr><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block> while <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;</operator> <name>LJ_TRACE_RECORD</name></expr>)</condition>;</do>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- Event handling ------------------------------------------------------ */</comment>

<comment type="block">/* A bytecode instruction is about to be executed. Record it. */</comment>
<function><type><name>void</name></type> <name>lj_trace_ins</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Note: J-&gt;L must already be set. pc is the true bytecode PC here. */</comment>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <name>pc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <call><name>curr_func</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>pt</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isluafunc</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>funcproto</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>fn</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>lj_vm_cpcall</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>J</name></expr></argument>, <argument><expr><name>trace_state</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_ERR</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/* A hotcount triggered. Start recording a root trace. */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_trace_hot</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Note: pc is the interpreter bytecode PC here. It's offset by 1. */</comment>
  <decl_stmt><decl><type><name>ERRNO_SAVE</name></type>
  <comment type="block">/* Reset hotcount. */</comment>
  <name>hotcount_set</name><argument_list>(<argument><expr><call><name>J2GG</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>JIT_P_hotloop</name></expr>]</index></name><operator>*</operator><name>HOTCOUNT_LOOP</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="block">/* Only start a new trace if not recording or inside __gc call or vmevent. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LJ_TRACE_IDLE</name> <operator>&amp;&amp;</operator>
      <operator>!</operator><operator>(</operator><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <operator>(</operator><name>HOOK_GC</name><operator>|</operator><name>HOOK_VMEVENT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Root trace. */</comment>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_START</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_trace_ins</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>pc</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ERRNO_RESTORE</name></expr></expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Check for a hot side exit. If yes, start recording a side trace. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_hotside</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SnapShot</name> <modifier>*</modifier></type><name>snap</name> <init>= <expr><operator>&amp;</operator><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>snap</name><index>[<expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <operator>(</operator><name>HOOK_GC</name><operator>|</operator><name>HOOK_VMEVENT</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
      <call><name>isluafunc</name><argument_list>(<argument><expr><call><name>curr_func</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <name><name>snap</name><operator>-&gt;</operator><name>count</name></name> <operator>!=</operator> <name>SNAPCOUNT_DONE</name> <operator>&amp;&amp;</operator>
      <operator>++</operator><name><name>snap</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>J</name><operator>-&gt;</operator><name>param</name><index>[<expr><name>JIT_P_hotexit</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LJ_TRACE_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* J-&gt;parent is non-zero for a side trace. */</comment>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_START</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_trace_ins</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Stitch a new trace to the previous trace. */</comment>
<function><type><name>void</name> <name>LJ_FASTCALL</name></type> <name>lj_trace_stitch</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Only start a new trace if not recording or inside __gc call or vmevent. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LJ_TRACE_IDLE</name> <operator>&amp;&amp;</operator>
      <operator>!</operator><operator>(</operator><call><name>J2G</name><argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <operator>(</operator><name>HOOK_GC</name><operator>|</operator><name>HOOK_VMEVENT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* Have to treat it like a root trace. */</comment>
    <comment type="block">/* J-&gt;exitno is set to the invoking trace. */</comment>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>LJ_TRACE_START</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_trace_ins</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Tiny struct to pass data to protected call. */</comment>
<typedef>typedef <type><struct>struct <name>ExitDataCP</name> <block>{
  <decl_stmt><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>exptr</name></decl>;</decl_stmt>		<comment type="block">/* Pointer to exit state. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>	<comment type="block">/* Restart interpreter at this PC. */</comment>
}</block></struct></type> <name>ExitDataCP</name>;</typedef>

<comment type="block">/* Need to protect lj_snap_restore because it may throw. */</comment>
<function><type><specifier>static</specifier> <name>TValue</name> <modifier>*</modifier></type><name>trace_exit_cp</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>lua_CFunction</name></type> <name>dummy</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ExitDataCP</name> <modifier>*</modifier></type><name>exd</name> <init>= <expr><operator>(</operator><name>ExitDataCP</name> <operator>*</operator><operator>)</operator><name>ud</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cframe_errfunc</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>cframe</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* Inherit error function. */</comment>
  <expr_stmt><expr><name><name>exd</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <call><name>lj_snap_restore</name><argument_list>(<argument><expr><name><name>exd</name><operator>-&gt;</operator><name>J</name></name></expr></argument>, <argument><expr><name><name>exd</name><operator>-&gt;</operator><name>exptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LUAJIT_DISABLE_VMEVENT</name></cpp:ifndef>
<comment type="block">/* Push all registers from exit state. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_exit_regs</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ExitState</name> <modifier>*</modifier></type><name>ex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>RID_NUM_GPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><name>RID_NUM_FPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RID_NUM_GPR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ex</name><operator>-&gt;</operator><name>gpr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setintV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>ex</name><operator>-&gt;</operator><name>gpr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr></argument>, <argument><expr><operator>(</operator><name>lua_Number</name><operator>)</operator><name><name>ex</name><operator>-&gt;</operator><name>gpr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>LJ_SOFTFP</name></expr></cpp:if>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RID_NUM_FPR</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>setnumV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>ex</name><operator>-&gt;</operator><name>fpr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><call><name>tvisnan</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>setnanV</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>L</name><operator>-&gt;</operator><name>top</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EXITSTATE_PCREG</name></cpp:ifdef>
<comment type="block">/* Determine trace number from pc of exit instruction. */</comment>
<function><type><specifier>static</specifier> <name>TraceNo</name></type> <name>trace_exit_find</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>MCode</name> <modifier>*</modifier></type><name>pc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TraceNo</name></type> <name>traceno</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>traceno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>traceno</name> <operator>&lt;</operator> <name><name>J</name><operator>-&gt;</operator><name>sizetrace</name></name></expr>;</condition> <incr><expr><name>traceno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>traceno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>&gt;=</operator> <name><name>T</name><operator>-&gt;</operator><name>mcode</name></name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>&lt;</operator> <operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>T</name><operator>-&gt;</operator><name>mcode</name></name> <operator>+</operator> <name><name>T</name><operator>-&gt;</operator><name>szmcode</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>traceno</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* A trace exited. Restore interpreter state. */</comment>
<function><type><name>int</name> <name>LJ_FASTCALL</name></type> <name>lj_trace_exit</name><parameter_list>(<parameter><decl><type><name>jit_State</name> <modifier>*</modifier></type><name>J</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ERRNO_SAVE</name>
  <name>lua_State</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><name><name>J</name><operator>-&gt;</operator><name>L</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ExitState</name> <modifier>*</modifier></type><name>ex</name> <init>= <expr><operator>(</operator><name>ExitState</name> <operator>*</operator><operator>)</operator><name>exptr</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ExitDataCP</name></type> <name>exd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>BCIns</name> <modifier>*</modifier></type><name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>GCtrace</name> <modifier>*</modifier></type><name>T</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EXITSTATE_PCREG</name></cpp:ifdef>
  <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>trace_exit_find</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><operator>(</operator><name>MCode</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>ex</name><operator>-&gt;</operator><name>gpr</name><index>[<expr><name>EXITSTATE_PCREG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EXITSTATE_CHECKEXIT</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Treat stack check like a parent exit. */</comment>
    <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>ir</name><index>[<expr><name>REF_BASE</name></expr>]</index></name><operator>.</operator><name>op2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>ir</name><index>[<expr><name>REF_BASE</name></expr>]</index></name><operator>.</operator><name>op1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>J</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name>T</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>J</name><operator>-&gt;</operator><name>exitno</name></name> <operator>&lt;</operator> <name><name>T</name><operator>-&gt;</operator><name>nsnap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exd</name><operator>.</operator><name>J</name></name> <operator>=</operator> <name>J</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>exd</name><operator>.</operator><name>exptr</name></name> <operator>=</operator> <name>exptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>errcode</name> <operator>=</operator> <call><name>lj_vm_cpcall</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exd</name></expr></argument>, <argument><expr><name>trace_exit_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errcode</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><name>errcode</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Return negated error code. */</comment>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>LJ_HASPROFILE</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <name>HOOK_PROFILE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <macro><name>lj_vmevent_send</name><argument_list>(<argument>L</argument>, <argument>TEXIT</argument>,
      <argument>lj_state_checkstack(L, <literal type="number">4</literal>+RID_NUM_GPR+RID_NUM_FPR+LUA_MINSTACK);
      setintV(L-&gt;top++, J-&gt;parent);
      setintV(L-&gt;top++, J-&gt;exitno);
      trace_exit_regs(L, ex);</argument>
    )</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pc</name> <operator>=</operator> <name><name>exd</name><operator>.</operator><name>pc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>cframe_raw</name><argument_list>(<argument><expr><name><name>L</name><operator>-&gt;</operator><name>cframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setcframe_pc</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>LJ_HASPROFILE</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <name>HOOK_PROFILE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Just exit to interpreter. */</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>GCSatomic</name> <operator>||</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>gc</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>GCSfinalize</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>hookmask</name> <operator>&amp;</operator> <name>HOOK_GC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lj_gc_step</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Exited because of GC: drive GC forward. */</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>trace_hotside</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BC_JLOOP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BCIns</name> <modifier>*</modifier></type><name>retpc</name> <init>= <expr><operator>&amp;</operator><call><name>traceref</name><argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><call><name>bc_d</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>startins</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>bc_isret</name><argument_list>(<argument><expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>retpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>J</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>LJ_TRACE_RECORD</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>patchins</name></name> <operator>=</operator> <operator>*</operator><name>pc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>patchpc</name></name> <operator>=</operator> <operator>(</operator><name>BCIns</name> <operator>*</operator><operator>)</operator><name>pc</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name><name>J</name><operator>-&gt;</operator><name>patchpc</name></name> <operator>=</operator> <operator>*</operator><name>retpc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>J</name><operator>-&gt;</operator><name>bcskip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>retpc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setcframe_pc</name><argument_list>(<argument><expr><name>cf</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* Return MULTRES or 0. */</comment>
  <macro><name>ERRNO_RESTORE</name></macro>
  <switch>switch <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>BC_CALLM</name></expr>:</case> <case>case <expr><name>BC_CALLMT</name></expr>:</case>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>BCReg</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>-</operator> <call><name>bc_a</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>bc_c</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>LJ_FR2</name><operator>)</operator></expr>;</return>
  <case>case <expr><name>BC_RETM</name></expr>:</case>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>BCReg</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>bc_a</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>bc_d</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  <case>case <expr><name>BC_TSETM</name></expr>:</case>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>BCReg</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>bc_a</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  <default>default:</default>
    <if_stmt><if>if <condition>(<expr><call><name>bc_op</name><argument_list>(<argument><expr><operator>*</operator><name>pc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>BC_FUNCF</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>BCReg</name><operator>)</operator><operator>(</operator><name><name>L</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>L</name><operator>-&gt;</operator><name>base</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
