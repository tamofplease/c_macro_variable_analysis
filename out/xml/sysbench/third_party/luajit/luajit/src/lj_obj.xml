<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_obj.c"><comment type="block">/*
** Miscellaneous object handling.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lj_obj_c</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUA_CORE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<comment type="block">/* Object type names. */</comment>
<decl_stmt><decl><type><name>LJ_DATADEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>lj_obj_typename</name><index>[]</index></name> <init>= <expr><block>{  <comment type="block">/* ORDER LUA_T */</comment>
  <expr><literal type="string">"no value"</literal></expr>, <expr><literal type="string">"nil"</literal></expr>, <expr><literal type="string">"boolean"</literal></expr>, <expr><literal type="string">"userdata"</literal></expr>, <expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"string"</literal></expr>,
  <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"function"</literal></expr>, <expr><literal type="string">"userdata"</literal></expr>, <expr><literal type="string">"thread"</literal></expr>, <expr><literal type="string">"proto"</literal></expr>, <expr><literal type="string">"cdata"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LJ_DATADEF</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>lj_obj_itypename</name><index>[]</index></name> <init>= <expr><block>{  <comment type="block">/* ORDER LJ_T */</comment>
  <expr><literal type="string">"nil"</literal></expr>, <expr><literal type="string">"boolean"</literal></expr>, <expr><literal type="string">"boolean"</literal></expr>, <expr><literal type="string">"userdata"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"upval"</literal></expr>, <expr><literal type="string">"thread"</literal></expr>,
  <expr><literal type="string">"proto"</literal></expr>, <expr><literal type="string">"function"</literal></expr>, <expr><literal type="string">"trace"</literal></expr>, <expr><literal type="string">"cdata"</literal></expr>, <expr><literal type="string">"table"</literal></expr>, <expr><literal type="string">"userdata"</literal></expr>, <expr><literal type="string">"number"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Compare two objects without calling metamethods. */</comment>
<function><type><name>int</name> <name>LJ_FASTCALL</name></type> <name>lj_obj_equal</name><parameter_list>(<parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>itype</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>itype</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tvispri</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tvisnum</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>gcrefeq</name><argument_list>(<argument><expr><name><name>o1</name><operator>-&gt;</operator><name>gcr</name></name></expr></argument>, <argument><expr><name><name>o2</name><operator>-&gt;</operator><name>gcr</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>tvisnumber</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>tvisnumber</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>numberVnum</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>numberVnum</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return pointer to object or its object data. */</comment>
<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier> <name>LJ_FASTCALL</name></type> <name>lj_obj_ptr</name><parameter_list>(<parameter><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tvisudata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>uddata</name><argument_list>(<argument><expr><call><name>udataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>tvislightud</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>lightudV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>LJ_HASFFI</name> <operator>&amp;&amp;</operator> <call><name>tviscdata</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>cdataptr</name><argument_list>(<argument><expr><call><name>cdataV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>tvisgcv</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>gcV</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

</unit>
