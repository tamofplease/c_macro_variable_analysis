<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/luajit/luajit/src/lj_ctype.c"><comment type="block">/*
** C type management.
** Copyright (C) 2005-2020 Mike Pall. See Copyright Notice in luajit.h
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_obj.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LJ_HASFFI</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_gc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_str.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_tab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_strfmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_ccallback.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lj_buf.h"</cpp:file></cpp:include>

<comment type="block">/* -- C type definitions -------------------------------------------------- */</comment>

<comment type="block">/* Predefined typedefs. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTDDEF</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> \
  <comment type="block">/* Vararg handling. */</comment> \
  <cpp:value>_("va_list",			P_VOID) \
  _("__builtin_va_list",	P_VOID) \
  _("__gnuc_va_list",		P_VOID) \
  <comment type="block">/* From stddef.h. */</comment> \
  _("ptrdiff_t",		INT_PSZ) \
  _("size_t",			UINT_PSZ) \
  _("wchar_t",			WCHAR) \
  <comment type="block">/* Subset of stdint.h. */</comment> \
  _("int8_t",			INT8) \
  _("int16_t",			INT16) \
  _("int32_t",			INT32) \
  _("int64_t",			INT64) \
  _("uint8_t",			UINT8) \
  _("uint16_t",			UINT16) \
  _("uint32_t",			UINT32) \
  _("uint64_t",			UINT64) \
  _("intptr_t",			INT_PSZ) \
  _("uintptr_t",		UINT_PSZ) \
  <comment type="block">/* From POSIX. */</comment> \
  _("ssize_t",			INT_PSZ)</cpp:value></cpp:define> \
  <comment type="block">/* End of typedef list. */</comment>

<comment type="block">/* Keywords (only the ones we actually care for). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTKWDEF</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> \
  <comment type="block">/* Type specifiers. */</comment> \
  <cpp:value>_("void",		-1,	CTOK_VOID) \
  _("_Bool",		0,	CTOK_BOOL) \
  _("bool",		1,	CTOK_BOOL) \
  _("char",		1,	CTOK_CHAR) \
  _("int",		4,	CTOK_INT) \
  _("__int8",		1,	CTOK_INT) \
  _("__int16",		2,	CTOK_INT) \
  _("__int32",		4,	CTOK_INT) \
  _("__int64",		8,	CTOK_INT) \
  _("float",		4,	CTOK_FP) \
  _("double",		8,	CTOK_FP) \
  _("long",		0,	CTOK_LONG) \
  _("short",		0,	CTOK_SHORT) \
  _("_Complex",		0,	CTOK_COMPLEX) \
  _("complex",		0,	CTOK_COMPLEX) \
  _("__complex",	0,	CTOK_COMPLEX) \
  _("__complex__",	0,	CTOK_COMPLEX) \
  _("signed",		0,	CTOK_SIGNED) \
  _("__signed",		0,	CTOK_SIGNED) \
  _("__signed__",	0,	CTOK_SIGNED) \
  _("unsigned",		0,	CTOK_UNSIGNED) \
  <comment type="block">/* Type qualifiers. */</comment> \
  _("const",		0,	CTOK_CONST) \
  _("__const",		0,	CTOK_CONST) \
  _("__const__",	0,	CTOK_CONST) \
  _("volatile",		0,	CTOK_VOLATILE) \
  _("__volatile",	0,	CTOK_VOLATILE) \
  _("__volatile__",	0,	CTOK_VOLATILE) \
  _("restrict",		0,	CTOK_RESTRICT) \
  _("__restrict",	0,	CTOK_RESTRICT) \
  _("__restrict__",	0,	CTOK_RESTRICT) \
  _("inline",		0,	CTOK_INLINE) \
  _("__inline",		0,	CTOK_INLINE) \
  _("__inline__",	0,	CTOK_INLINE) \
  <comment type="block">/* Storage class specifiers. */</comment> \
  _("typedef",		0,	CTOK_TYPEDEF) \
  _("extern",		0,	CTOK_EXTERN) \
  _("static",		0,	CTOK_STATIC) \
  _("auto",		0,	CTOK_AUTO) \
  _("register",		0,	CTOK_REGISTER) \
  <comment type="block">/* GCC Attributes. */</comment> \
  _("__extension__",	0,	CTOK_EXTENSION) \
  _("__attribute",	0,	CTOK_ATTRIBUTE) \
  _("__attribute__",	0,	CTOK_ATTRIBUTE) \
  _("asm",		0,	CTOK_ASM) \
  _("__asm",		0,	CTOK_ASM) \
  _("__asm__",		0,	CTOK_ASM) \
  <comment type="block">/* MSVC Attributes. */</comment> \
  _("__declspec",	0,	CTOK_DECLSPEC) \
  _("__cdecl",		CTCC_CDECL,	CTOK_CCDECL) \
  _("__thiscall",	CTCC_THISCALL,	CTOK_CCDECL) \
  _("__fastcall",	CTCC_FASTCALL,	CTOK_CCDECL) \
  _("__stdcall",	CTCC_STDCALL,	CTOK_CCDECL) \
  _("__ptr32",		4,	CTOK_PTRSZ) \
  _("__ptr64",		8,	CTOK_PTRSZ) \
  <comment type="block">/* Other type specifiers. */</comment> \
  _("struct",		0,	CTOK_STRUCT) \
  _("union",		0,	CTOK_UNION) \
  _("enum",		0,	CTOK_ENUM) \
  <comment type="block">/* Operators. */</comment> \
  _("sizeof",		0,	CTOK_SIZEOF) \
  _("__alignof",	0,	CTOK_ALIGNOF) \
  _("__alignof__",	0,	CTOK_ALIGNOF)</cpp:value></cpp:define> \
  <comment type="block">/* End of keyword list. */</comment>

<comment type="block">/* Type info for predefined types. Size merged in. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>CTInfo</name></type> <name><name>lj_ctype_typeinfo</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTYINFODEF</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>ct</name></type></parameter>, <parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>CTINFO((ct),(((sz)&amp;0x3fu)&lt;&lt;10)+(info)),</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTDINFODEF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>CTINFO(CT_TYPEDEF, CTID_##id),</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTKWINFODEF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>kw</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>CTINFO(CT_KW,(((sz)&amp;0x3fu)&lt;&lt;10)+(kw)),</cpp:value></cpp:define>
<macro><name>CTTYDEF</name><argument_list>(<argument>CTTYINFODEF</argument>)</argument_list></macro>
<macro><name>CTTDDEF</name><argument_list>(<argument>CTTDINFODEF</argument>)</argument_list></macro>
<expr><call><name>CTKWDEF</name><argument_list>(<argument><expr><name>CTKWINFODEF</name></expr></argument>)</argument_list></call>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTTYINFODEF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTTDINFODEF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTKWINFODEF</name></cpp:undef>
  <literal type="number">0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Predefined type names collected in a single string. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>lj_ctype_typenames</name> <init>=
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTDNAMEDEF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>name "\0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTKWNAMEDEF</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>, <parameter><type><name>cds</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>name "\0"</cpp:value></cpp:define>
<macro><name>CTTDDEF</name><argument_list>(<argument>CTTDNAMEDEF</argument>)</argument_list></macro>
<expr><call><name>CTKWDEF</name><argument_list>(<argument><expr><name>CTKWNAMEDEF</name></expr></argument>)</argument_list></call></expr></init></decl>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTTDNAMEDEF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CTKWNAMEDEF</name></cpp:undef>
;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTYPEINFO_NUM</name></cpp:macro>		<cpp:value>(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_CTYPE_CHECK_ANCHOR</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTYPETAB_MIN</name></cpp:macro>		<cpp:value>CTTYPEINFO_NUM</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTTYPETAB_MIN</name></cpp:macro>		<cpp:value>128</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* -- C type interning ---------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ct_hashtype</name><parameter_list>(<parameter><type><name>info</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(hashrot(info, size) &amp; CTHASH_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ct_hashname</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) &amp; CTHASH_MASK)</cpp:value></cpp:define>

<comment type="block">/* Create new type element. */</comment>
<function><type><name>CTypeID</name></type> <name>lj_ctype_new</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><name><name>cts</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>id</name> <operator>&gt;=</operator> <name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>CTID_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_TABOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LUAJIT_CTYPE_CHECK_ANCHOR</name></cpp:ifdef>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>lj_mem_newvec</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name>id</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>id</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>CType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name></expr></argument>, <argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name> <operator>=</operator> <name>id</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>lj_mem_growvec</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name></expr></argument>, <argument><expr><name>CTID_MAX</name></expr></argument>, <argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>id</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ctp</name> <operator>=</operator> <name>ct</name> <operator>=</operator> <operator>&amp;</operator><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>sib</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Intern a type element. */</comment>
<function><type><name>CTypeID</name></type> <name>lj_ctype_intern</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>CTSize</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>ct_hashtype</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name> <operator>==</operator> <name>info</name> <operator>&amp;&amp;</operator> <name><name>ct</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>id</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>cts</name><operator>-&gt;</operator><name>top</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><name>id</name> <operator>&gt;=</operator> <name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>CTID_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_err_msg</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name>LJ_ERR_TABOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>lj_mem_growvec</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name></expr></argument>, <argument><expr><name>CTID_MAX</name></expr></argument>, <argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>id</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>sib</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>CTypeID1</name><operator>)</operator><name>id</name></expr>;</expr_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add type element to hash table. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_addtype</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>ct_hashtype</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>CTypeID1</name><operator>)</operator><name>id</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Add named element to hash table. */</comment>
<function><type><name>void</name></type> <name>lj_ctype_addname</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>ct_hashname</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>CTypeID1</name><operator>)</operator><name>id</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Get a C type by name, matching the type mask. */</comment>
<function><type><name>CTypeID</name></type> <name>lj_ctype_getname</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctp</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name> <init>= <expr><name><name>cts</name><operator>-&gt;</operator><name>hash</name><index>[<expr><call><name>ct_hashname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<operator>(</operator><operator>(</operator><name>tmask</name> <operator>&gt;&gt;</operator> <call><name>ctype_type</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ctp</name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
      <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>ctp</name> <operator>=</operator> <operator>&amp;</operator><name><name>cts</name><operator>-&gt;</operator><name>tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <comment type="block">/* Simplify caller logic. ctype_get() would assert. */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get a struct/union/enum/function field by name. */</comment>
<function><type><name>CType</name> <modifier>*</modifier></type><name>lj_ctype_getfieldq</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>CTSize</name> <modifier>*</modifier></type><name>ofs</name></decl></parameter>,
			  <parameter><decl><type><name>CTInfo</name> <modifier>*</modifier></type><name>qual</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><name><name>ct</name><operator>-&gt;</operator><name>sib</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name><name>ct</name><operator>-&gt;</operator><name>sib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>obj2gco</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ofs</name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <return>return <expr><name>ct</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isxattrib</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>CTA_SUBTYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>fct</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cct</name> <init>= <expr><call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>CTInfo</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name><name>cct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>ctype_attrib</name><argument_list>(<argument><expr><name><name>cct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTA_QUAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>q</name> <operator>|=</operator> <name><name>cct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>cct</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>cct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>fct</name> <operator>=</operator> <call><name>lj_ctype_getfieldq</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>cct</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>, <argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>fct</name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>qual</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>qual</name> <operator>|=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>ofs</name> <operator>+=</operator> <name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<return>return <expr><name>fct</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>  <comment type="block">/* Not found. */</comment>
</block_content>}</block></function>

<comment type="block">/* -- C type information -------------------------------------------------- */</comment>

<comment type="block">/* Follow references and get raw type for a C type ID. */</comment>
<function><type><name>CType</name> <modifier>*</modifier></type><name>lj_ctype_rawref</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_child</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>ct</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get size for a C type ID. Does NOT support VLA/VLS. */</comment>
<function><type><name>CTSize</name></type> <name>lj_ctype_size</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_raw</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><call><name>ctype_hassize</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><name>CTSIZE_INVALID</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get size for a variable-length C type. Does NOT support other C types. */</comment>
<function><type><name>CTSize</name></type> <name>lj_ctype_vlsize</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>CTSize</name></type> <name>nelem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>xsz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ctype_isstruct</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>CTypeID</name></type> <name>arrid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fid</name> <init>= <expr><name><name>ct</name><operator>-&gt;</operator><name>sib</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>xsz</name> <operator>=</operator> <name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>  <comment type="block">/* Add the struct size. */</comment>
    <while>while <condition>(<expr><name>fid</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ctf</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_type</name><argument_list>(<argument><expr><name><name>ctf</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CT_FIELD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>arrid</name> <operator>=</operator> <call><name>ctype_cid</name><argument_list>(<argument><expr><name><name>ctf</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* Remember last field of VLS. */</comment>
      <expr_stmt><expr><name>fid</name> <operator>=</operator> <name><name>ctf</name><operator>-&gt;</operator><name>sib</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_raw</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>arrid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ctype_isvlarray</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Must be a VLA. */</comment>
  <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_rawchild</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Get array element. */</comment>
  <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ctype_hassize</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Calculate actual size of VLA and check for overflow. */</comment>
  <expr_stmt><expr><name>xsz</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ct</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>nelem</name></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>xsz</name> <operator>&lt;</operator> <literal type="number">0x80000000u</literal></expr> ?</condition><then> <expr><operator>(</operator><name>CTSize</name><operator>)</operator><name>xsz</name></expr> </then><else>: <expr><name>CTSIZE_INVALID</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get type, qualifiers, size and alignment for a C type ID. */</comment>
<function><type><name>CTInfo</name></type> <name>lj_ctype_info</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>CTSize</name> <modifier>*</modifier></type><name>szp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTInfo</name></type> <name>qual</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>CTInfo</name></type> <name>info</name> <init>= <expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_isenum</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="block">/* Follow child. Need to look at its attributes, too. */</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isxattrib</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>CTA_QUAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>qual</name> <operator>|=</operator> <name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><call><name>ctype_isxattrib</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>CTA_ALIGN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>qual</name> <operator>&amp;</operator> <name>CTFP_ALIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>qual</name> <operator>|=</operator> <name>CTFP_ALIGNED</name> <operator>+</operator> <call><name>CTALIGN</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>qual</name> <operator>&amp;</operator> <name>CTFP_ALIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qual</name> <operator>|=</operator> <operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_ALIGN</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>qual</name> <operator>|=</operator> <operator>(</operator><name>info</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CTF_ALIGN</name><operator>|</operator><name>CTMASK_CID</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><call><name>ctype_hassize</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isfunc</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>szp</name> <operator>=</operator> <ternary><condition><expr><call><name>ctype_isfunc</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>CTSIZE_INVALID</name></expr> </then><else>: <expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_cid</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>qual</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Get ctype metamethod. */</comment>
<function><type><name>cTValue</name> <modifier>*</modifier></type><name>lj_ctype_meta</name><parameter_list>(<parameter><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>MMS</name></type> <name>mm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cTValue</name> <modifier>*</modifier></type><name>tv</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><call><name>ctype_isattrib</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ctype_isref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ctype_cid</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><call><name>ctype_isptr</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>ctype_isfunc</name><argument_list>(<argument><expr><call><name>ctype_get</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><call><name>ctype_cid</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>lj_tab_getstr</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>miscmap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cts</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>strempty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>tv</name> <operator>=</operator> <call><name>lj_tab_getinth</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>miscmap</name></name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tv</name> <operator>&amp;&amp;</operator> <call><name>tvistab</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>tv</name> <operator>=</operator> <call><name>lj_tab_getstr</name><argument_list>(<argument><expr><call><name>tabV</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mmname_str</name><argument_list>(<argument><expr><name><name>cts</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tvisnil</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>tv</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- C type representation ----------------------------------------------- */</comment>

<comment type="block">/* Fixed max. length of a C type representation. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTREPR_MAX</name></cpp:macro>		<cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>CTRepr</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pb</name></decl>, <modifier>*</modifier><name>pe</name>;</decl_stmt>
  <decl_stmt><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>needsp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>CTREPR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>CTRepr</name>;</typedef>

<comment type="block">/* Prepend string. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_prepstr</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>MSize</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctr</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctr</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>len</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctype_preplit</name><parameter_list>(<parameter><type><name>ctr</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>ctype_prepstr((ctr), "" str, sizeof(str)-1)</cpp:value></cpp:define>

<comment type="block">/* Prepend char. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_prepc</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctr</name><operator>-&gt;</operator><name>buf</name></name> <operator>&gt;=</operator> <name><name>ctr</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><operator>--</operator><name><name>ctr</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Prepend number. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_prepnum</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>ctr</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ctr</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <literal type="number">10</literal><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>p</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
  <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Append char. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_appc</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ctr</name><operator>-&gt;</operator><name>pe</name></name> <operator>&gt;=</operator> <name><name>ctr</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>CTREPR_MAX</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>ctr</name><operator>-&gt;</operator><name>pe</name></name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Append number. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_appnum</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>ctr</name><operator>-&gt;</operator><name>pe</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name><name>ctr</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>CTREPR_MAX</name> <operator>-</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
  <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>buf</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition>;</do>
  <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>pe</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Prepend qualifiers. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_prepqual</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_VOLATILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"volatile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_CONST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"const"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Prepend named type. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_preptype</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>CTInfo</name></type> <name>qual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>gco2str</name><argument_list>(<argument><expr><call><name>gcref</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ctype_prepstr</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_prepc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ctype_prepnum</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><call><name>ctype_typeid</name><argument_list>(<argument><expr><name><name>ctr</name><operator>-&gt;</operator><name>cts</name></name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>ctype_prepstr</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>MSize</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ctype_prepqual</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ctype_repr</name><parameter_list>(<parameter><decl><type><name>CTRepr</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>ctype_get</name><argument_list>(<argument><expr><name><name>ctr</name><operator>-&gt;</operator><name>cts</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTInfo</name></type> <name>qual</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ptrto</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>CTInfo</name></type> <name>info</name> <init>= <expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTSize</name></type> <name>size</name> <init>= <expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><call><name>ctype_type</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CT_NUM</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_FP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"long double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>info</name> <operator>^</operator> <name>CTF_UCHAR</name><operator>)</operator> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>CTF_UCHAR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"signed char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"unsigned char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ctype_prepnum</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>size</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_UNSIGNED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_prepc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>ctype_prepqual</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><operator>(</operator><name>qual</name><operator>|</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <case>case <expr><name>CT_VOID</name></expr>:</case>
      <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctype_prepqual</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><operator>(</operator><name>qual</name><operator>|</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <case>case <expr><name>CT_STRUCT</name></expr>:</case>
      <expr_stmt><expr><call><name>ctype_preptype</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>qual</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_UNION</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"union"</literal></expr> </then><else>: <expr><literal type="string">"struct"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <case>case <expr><name>CT_ENUM</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name>CTID_CTYPEID</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"ctype"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ctype_preptype</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>qual</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    <case>case <expr><name>CT_ATTRIB</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_attrib</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CTA_QUAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>qual</name> <operator>|=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>CT_PTR</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_REF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>ctype_prepc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>ctype_prepqual</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><operator>(</operator><name>qual</name><operator>|</operator><name>info</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>LJ_64</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"__ptr32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ctype_prepc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>qual</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ptrto</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CT_ARRAY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>ctype_isrefarray</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptrto</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ptrto</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>ctype_prepc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>CTSIZE_INVALID</name></expr>)</condition> <block>{<block_content>
	  <decl_stmt><decl><type><name>CTSize</name></type> <name>csize</name> <init>= <expr><call><name>ctype_child</name><argument_list>(<argument><expr><name><name>ctr</name><operator>-&gt;</operator><name>cts</name></name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name>ctype_appnum</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>csize</name></expr> ?</condition><then> <expr><name>size</name><operator>/</operator><name>csize</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_VLA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	  <expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>info</name> <operator>&amp;</operator> <name>CTF_COMPLEX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"complex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">")))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ctype_prepnum</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ctype_preplit</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="string">"__attribute__((vector_size("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>CT_FUNC</name></expr>:</case>
      <expr_stmt><expr><name><name>ctr</name><operator>-&gt;</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ptrto</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ptrto</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>ctype_prepc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ctype_appc</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>lua_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>ct</name> <operator>=</operator> <call><name>ctype_get</name><argument_list>(<argument><expr><name><name>ctr</name><operator>-&gt;</operator><name>cts</name></name></expr></argument>, <argument><expr><call><name>ctype_cid</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Return a printable representation of a C type. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier></type><name>lj_ctype_repr</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>CTypeID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTRepr</name></type> <name>ctr</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>pb</name></name> <operator>=</operator> <name><name>ctr</name><operator>.</operator><name>pe</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctr</name><operator>.</operator><name>buf</name><index>[<expr><name>CTREPR_MAX</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>cts</name></name> <operator>=</operator> <call><name>ctype_ctsG</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>L</name></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctr</name><operator>.</operator><name>needsp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_prepstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>, <argument><expr><call><name>strdata</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>ctype_repr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>LJ_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctr</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lj_str_newlit</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>ctr</name><operator>.</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ctr</name><operator>.</operator><name>pe</name></name> <operator>-</operator> <name><name>ctr</name><operator>.</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Convert int64_t/uint64_t to string with 'LL' or 'ULL' suffix. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier></type><name>lj_ctype_repr_int64</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isunsigned</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">20</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>isunsigned</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">'U'</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> </block_content>}</block> while <condition>(<expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>)</condition>;</do>
  <if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>p</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>buf</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Convert complex to string with 'i' or 'I' suffix. */</comment>
<function><type><name>GCstr</name> <modifier>*</modifier></type><name>lj_ctype_repr_complex</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>CTSize</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>SBuf</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><call><name>lj_buf_tmp_</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TValue</name></type> <name>re</name></decl>, <decl><type ref="prev"/><name>im</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>re</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>im</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>re</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>im</name><operator>.</operator><name>n</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>sp</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><name><name>re</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>im</name><operator>.</operator><name>u32</name><operator>.</operator><name>hi</name></name> <operator>&amp;</operator> <literal type="number">0x80000000u</literal><operator>)</operator> <operator>||</operator> <name><name>im</name><operator>.</operator><name>n</name></name> <operator>!=</operator> <name><name>im</name><operator>.</operator><name>n</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lj_buf_putchar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lj_strfmt_putfnum</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>STRFMT_G14</name></expr></argument>, <argument><expr><name><name>im</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lj_buf_putchar</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>sbufP</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr> ?</condition><then> <expr><literal type="char">'I'</literal></expr> </then><else>: <expr><literal type="char">'i'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>lj_buf_str</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* -- C type state -------------------------------------------------------- */</comment>

<comment type="block">/* Initialize C type table and state. */</comment>
<function><type><name>CTState</name> <modifier>*</modifier></type><name>lj_ctype_init</name><parameter_list>(<parameter><decl><type><name>lua_State</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name> <init>= <expr><call><name>lj_mem_newt</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CTState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>CTState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CType</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><call><name>lj_mem_newvec</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>CTTYPETAB_MIN</name></expr></argument>, <argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>lj_ctype_typenames</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CTypeID</name></type> <name>id</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CTState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name> <operator>=</operator> <name>CTTYPETAB_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>CTTYPEINFO_NUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>L</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cts</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name>CTTYPEINFO_NUM</name></expr>;</condition> <incr><expr><name>id</name><operator>++</operator></expr><operator>,</operator> <expr><name>ct</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>CTInfo</name></type> <name>info</name> <init>= <expr><name><name>lj_ctype_typeinfo</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>CTSize</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>info</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name>info</name> <operator>&amp;</operator> <literal type="number">0xffff03ffu</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>sib</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ctype_type</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CT_KW</name> <operator>||</operator> <call><name>ctype_istypedef</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>GCstr</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>lj_str_new</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ctype_setname</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name> <operator>+=</operator> <name>len</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lj_ctype_addname</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setgcrefnull</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ct</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ctype_isenum</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ctype_addtype</name><argument_list>(<argument><expr><name>cts</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>setmref</name><argument_list>(<argument><expr><call><name>G</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ctype_state</name></expr></argument>, <argument><expr><name>cts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>cts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free C type table and state. */</comment>
<function><type><name>void</name></type> <name>lj_ctype_freestate</name><parameter_list>(<parameter><decl><type><name>global_State</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CTState</name> <modifier>*</modifier></type><name>cts</name> <init>= <expr><call><name>ctype_ctsG</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cts</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>lj_ccallback_mcode_free</name><argument_list>(<argument><expr><name>cts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>sizetab</name></name></expr></argument>, <argument><expr><name>CType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_mem_freevec</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>cbid</name></name></expr></argument>, <argument><expr><name><name>cts</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>sizeid</name></name></expr></argument>, <argument><expr><name>CTypeID1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lj_mem_freet</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>cts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
