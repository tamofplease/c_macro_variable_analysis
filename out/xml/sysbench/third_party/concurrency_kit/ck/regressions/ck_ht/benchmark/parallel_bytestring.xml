<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/regressions/ck_ht/benchmark/parallel_bytestring.c"><comment type="block">/*
 * Copyright 2012-2015 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_ht.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_epoch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_spinlock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ck_ht_t</name> <name>ht</name></type> <name>CK_CC_CACHELINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>keys_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>keys_capacity</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_epoch_t</name></type> <name>epoch_ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_epoch_record_t</name></type> <name>epoch_wr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>n_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>next_stage</name></decl>;</decl_stmt>

<enum>enum <name>state</name> <block>{
	<decl><name>HT_STATE_STOP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>HT_STATE_GET</name></decl>,
	<decl><name>HT_STATE_STRICT_REPLACEMENT</name></decl>,
	<decl><name>HT_STATE_DELETION</name></decl>,
	<decl><name>HT_STATE_REPLACEMENT</name></decl>,
	<decl><name>HT_STATE_COUNT</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>affinity</name></name></type> <name>affinerator</name> <init>= <expr><name>AFFINITY_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name><name>accumulator</name><index>[<expr><name>HT_STATE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_spinlock_t</name></type> <name>accumulator_mutex</name> <init>= <expr><name>CK_SPINLOCK_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>barrier</name><index>[<expr><name>HT_STATE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>state</name></decl>;</decl_stmt>

<struct>struct <name>ht_epoch</name> <block>{
	<decl_stmt><decl><type><name>ck_epoch_entry_t</name></type> <name>epoch_entry</name></decl>;</decl_stmt>
}</block>;</struct>

<macro><name>COMMON_ALARM_DECLARE_GLOBAL</name><argument_list>(<argument>ht_alarm</argument>, <argument>alarm_event</argument>, <argument>next_stage</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>alarm_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_stage</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ht_destroy</name><parameter_list>(<parameter><decl><type><name>ck_epoch_entry_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>ht_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_epoch_entry_t</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ht_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ht_epoch</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>b</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Destruction requires safe memory reclamation. */</comment>
		<expr_stmt><expr><call><name>ck_epoch_call</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>--</operator><name>e</name><operator>)</operator><operator>-&gt;</operator><name>epoch_entry</name></expr></argument>, <argument><expr><name>ht_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>--</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ck_malloc</name></name></type> <name>my_allocator</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>malloc</name> <operator>=</operator> <name>ht_malloc</name></expr>,
	<expr><operator>.</operator><name>free</name> <operator>=</operator> <name>ht_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>table_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name> <init>= <expr><name>CK_HT_MODE_BYTESTRING</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HT_DELETE</name></cpp:ifdef>
	<expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>CK_HT_WORKLOAD_DELETE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>ck_epoch_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_epoch_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_ht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>common_srand48</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ck_ht_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_allocator</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>common_lrand48</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"ck_ht_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>table_remove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_ht_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ck_ht_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_ht_entry_key_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ck_ht_remove_spmc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>table_replace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_ht_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ck_ht_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_ht_entry_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="string">"REPLACED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ck_ht_set_spmc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>table_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_ht_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ck_ht_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_ht_entry_key_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ck_ht_get_spmc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>ck_ht_entry_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>table_insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_ht_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ck_ht_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_ht_entry_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>ck_ht_put_spmc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>table_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_ht_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>table_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_ht_reset_spmc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ht</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>reader</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_epoch_record_t</name></type> <name>epoch_record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>state_previous</name> <init>= <expr><name>HT_STATE_STOP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>aff_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>affinerator</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"WARNING: Failed to affine thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_epoch_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_ht</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epoch_record</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_epoch_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_record</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>table_get</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"REPLACED"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Found invalid value: [%s] but expected [%s]\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_epoch_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_record</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>n_state</name> <operator>=</operator> <call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n_state</name> <operator>!=</operator> <name>state_previous</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_spinlock_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>accumulator_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>accumulator</name><index>[<expr><name>state_previous</name></expr>]</index></name> <operator>+=</operator> <name>a</name> <operator>/</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_spinlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>accumulator_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_inc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>state_previous</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>state_previous</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n_threads</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

			<expr_stmt><expr><name>state_previous</name> <operator>=</operator> <name>n_state</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>repeated</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>readers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>p_r</name></decl>, <decl><type ref="prev"/><name>p_d</name></decl>;</decl_stmt>

	<macro><name>COMMON_ALARM_DECLARE_LOCAL</name><argument_list>(<argument>ht_alarm</argument>, <argument>alarm_event</argument>)</argument_list></macro>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p_d</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>p_r</name> <operator>=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n_threads</name> <operator>=</operator> <name>CORES</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"Usage: parallel &lt;dictionary&gt; [&lt;interval length&gt; &lt;initial size&gt; &lt;readers&gt;\n"</literal>
		    <literal type="string">" &lt;probability of replacement&gt; &lt;probability of deletion&gt; &lt;epoch threshold&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n_threads</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n_threads</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Number of readers must be &gt;= 1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p_r</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.00</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>p_r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Probability of replacement must be &gt;= 0 and &lt;= 100.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>p_d</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.00</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>p_d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Probability of deletion must be &gt;= 0 and &lt;= 100.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>COMMON_ALARM_INIT</name><argument_list>(<argument>ht_alarm</argument>, <argument>alarm_event</argument>, <argument>r</argument>)</argument_list></macro>

	<expr_stmt><expr><name><name>affinerator</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>readers</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>readers</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keys_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>keys</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>buffer</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keys</name><index>[<expr><name>keys_length</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>keys_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>keys_length</name> <operator>==</operator> <name>keys_capacity</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>keys_capacity</name> <operator>*=</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>keys</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>keys_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>keys</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n_threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>readers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Failed to create thread %zu.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>table_insert</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [S] %d readers, 1 writer.\n"</literal></expr></argument>, <argument><expr><name>n_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" [S] %zu entries stored and %u duplicates.\n\n"</literal></expr></argument>,
	    <argument><expr><call><name>table_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" ,- BASIC TEST\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing SMR test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>table_reset</name><argument_list>()</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Failed to reset hash table.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name>d</name> <operator>+=</operator> <call><name>table_insert</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (%"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>, <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing replacement test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>table_replace</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (%"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>, <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing get test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>table_get</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Unexpected NULL value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (%"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>, <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing removal test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>table_remove</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>table_insert</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (%"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>, <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing negative look-up test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>table_get</name><argument_list>(<argument><expr><literal type="string">"\x50\x03\x04\x05\x06\x10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (%"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>, <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ck_epoch_record_t</name></type> <name>epoch_temporary</name> <init>= <expr><name>epoch_wr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ck_epoch_synchronize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" '- Summary: %u pending, %u peak, %u reclamations -&gt; "</literal>
	    <literal type="string">"%u pending, %u peak, %u reclamations\n\n"</literal></expr></argument>,
	    <argument><expr><name><name>epoch_temporary</name><operator>.</operator><name>n_pending</name></name></expr></argument>, <argument><expr><name><name>epoch_temporary</name><operator>.</operator><name>n_peak</name></name></expr></argument>, <argument><expr><name><name>epoch_temporary</name><operator>.</operator><name>n_dispatch</name></name></expr></argument>,
	    <argument><expr><name><name>epoch_wr</name><operator>.</operator><name>n_pending</name></name></expr></argument>, <argument><expr><name><name>epoch_wr</name><operator>.</operator><name>n_peak</name></name></expr></argument>, <argument><expr><name><name>epoch_wr</name><operator>.</operator><name>n_dispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" ,- READER CONCURRENCY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing reader test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>HT_STATE_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_STOP</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n_threads</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>ck_pr_inc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_STOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>common_sleep</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>HT_STATE_STRICT_REPLACEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_GET</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n_threads</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (reader = %"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>,
	    <argument><expr><name><name>accumulator</name><index>[<expr><name>HT_STATE_GET</name></expr>]</index></name> <operator>/</operator> <name>n_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing strict replacement test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>repeated</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>common_alarm</name><argument_list>(<argument><expr><name>alarm_handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alarm_event</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_pr_inc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_GET</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>repeated</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>table_replace</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>next_stage</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next_stage</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ck_pr_store_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>HT_STATE_DELETION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_STRICT_REPLACEMENT</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n_threads</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>table_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_epoch_synchronize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (writer = %"</literal> <name>PRIu64</name> <literal type="string">" ticks, reader = %"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>,
	    <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>repeated</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>, <argument><expr><name><name>accumulator</name><index>[<expr><name>HT_STATE_STRICT_REPLACEMENT</name></expr>]</index></name> <operator>/</operator> <name>n_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>common_alarm</name><argument_list>(<argument><expr><name>alarm_handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alarm_event</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing deletion test (%.2f)..."</literal></expr></argument>, <argument><expr><name>p_d</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>repeated</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_inc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_STRICT_REPLACEMENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>delete</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>repeated</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>table_insert</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>p_d</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>delete</name> <operator>=</operator> <call><name>common_drand48</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>delete</name> <operator>&lt;=</operator> <name>p_d</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>table_remove</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>next_stage</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next_stage</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ck_pr_store_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>HT_STATE_REPLACEMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_DELETION</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n_threads</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><call><name>table_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_epoch_synchronize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (writer = %"</literal> <name>PRIu64</name> <literal type="string">" ticks, reader = %"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>,
	    <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>repeated</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>, <argument><expr><name><name>accumulator</name><index>[<expr><name>HT_STATE_DELETION</name></expr>]</index></name> <operator>/</operator> <name>n_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>common_alarm</name><argument_list>(<argument><expr><name>alarm_handler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alarm_event</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" | Executing replacement test (%.2f)..."</literal></expr></argument>, <argument><expr><name>p_r</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>repeated</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_inc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_DELETION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type> <name>replace</name></decl>, <decl><type ref="prev"/><name>delete</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>repeated</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>keys_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>table_insert</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>p_d</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>delete</name> <operator>=</operator> <call><name>common_drand48</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>delete</name> <operator>&lt;=</operator> <name>p_d</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>table_remove</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>p_r</name> <operator>!=</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>replace</name> <operator>=</operator> <call><name>common_drand48</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>replace</name> <operator>&lt;=</operator> <name>p_r</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>table_replace</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>e</name> <operator>-</operator> <name>s</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>next_stage</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>next_stage</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ck_pr_store_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>HT_STATE_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_REPLACEMENT</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n_threads</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>table_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_epoch_synchronize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"done (writer = %"</literal> <name>PRIu64</name> <literal type="string">" ticks, reader = %"</literal> <name>PRIu64</name> <literal type="string">" ticks)\n"</literal></expr></argument>,
	    <argument><expr><name>a</name> <operator>/</operator> <operator>(</operator><name>repeated</name> <operator>*</operator> <name>keys_length</name><operator>)</operator></expr></argument>, <argument><expr><name><name>accumulator</name><index>[<expr><name>HT_STATE_REPLACEMENT</name></expr>]</index></name> <operator>/</operator> <name>n_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_pr_inc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>HT_STATE_REPLACEMENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>epoch_temporary</name> <operator>=</operator> <name>epoch_wr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_epoch_synchronize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>epoch_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" '- Summary: %u pending, %u peak, %u reclamations -&gt; "</literal>
	    <literal type="string">"%u pending, %u peak, %u reclamations\n\n"</literal></expr></argument>,
	    <argument><expr><name><name>epoch_temporary</name><operator>.</operator><name>n_pending</name></name></expr></argument>, <argument><expr><name><name>epoch_temporary</name><operator>.</operator><name>n_peak</name></name></expr></argument>, <argument><expr><name><name>epoch_temporary</name><operator>.</operator><name>n_dispatch</name></name></expr></argument>,
	    <argument><expr><name><name>epoch_wr</name><operator>.</operator><name>n_pending</name></name></expr></argument>, <argument><expr><name><name>epoch_wr</name><operator>.</operator><name>n_peak</name></name></expr></argument>, <argument><expr><name><name>epoch_wr</name><operator>.</operator><name>n_dispatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
