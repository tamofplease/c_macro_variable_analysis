<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/regressions/ck_rhs/validate/serial.c"><comment type="block">/*
 * Copyright 2012 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyrights
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyrights
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_rhs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../common.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>hs_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hs_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ck_malloc</name></name></type> <name>my_allocator</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>malloc</name> <operator>=</operator> <name>hs_malloc</name></expr>,
	<expr><operator>.</operator><name>free</name> <operator>=</operator> <name>hs_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"Samy"</literal></expr>, <expr><literal type="string">"Al"</literal></expr>, <expr><literal type="string">"Bahra"</literal></expr>, <expr><literal type="string">"dances"</literal></expr>, <expr><literal type="string">"in"</literal></expr>, <expr><literal type="string">"the"</literal></expr>, <expr><literal type="string">"wind."</literal></expr>, <expr><literal type="string">"Once"</literal></expr>,
			<expr><literal type="string">"upon"</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"time"</literal></expr>, <expr><literal type="string">"his"</literal></expr>, <expr><literal type="string">"gypsy"</literal></expr>, <expr><literal type="string">"ate"</literal></expr>, <expr><literal type="string">"one"</literal></expr>, <expr><literal type="string">"itsy"</literal></expr>,
			    <expr><literal type="string">"bitsy"</literal></expr>, <expr><literal type="string">"spider."</literal></expr>, <expr><literal type="string">"What"</literal></expr>, <expr><literal type="string">"goes"</literal></expr>, <expr><literal type="string">"up"</literal></expr>, <expr><literal type="string">"must"</literal></expr>,
				<expr><literal type="string">"come"</literal></expr>, <expr><literal type="string">"down."</literal></expr>, <expr><literal type="string">"What"</literal></expr>, <expr><literal type="string">"is"</literal></expr>, <expr><literal type="string">"down"</literal></expr>, <expr><literal type="string">"stays"</literal></expr>,
				    <expr><literal type="string">"down."</literal></expr>, <expr><literal type="string">"A"</literal></expr>, <expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"C"</literal></expr>, <expr><literal type="string">"D"</literal></expr>, <expr><literal type="string">"E"</literal></expr>, <expr><literal type="string">"F"</literal></expr>, <expr><literal type="string">"G"</literal></expr>, <expr><literal type="string">"H"</literal></expr>,
					<expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"J"</literal></expr>, <expr><literal type="string">"K"</literal></expr>, <expr><literal type="string">"L"</literal></expr>, <expr><literal type="string">"M"</literal></expr>, <expr><literal type="string">"N"</literal></expr>, <expr><literal type="string">"O"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><literal type="string">"Q"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>negative</name> <init>= <expr><literal type="string">"negative"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Purposefully crappy hash function. */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>hs_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>object</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>seed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hs_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>previous</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>test_ip</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>closure</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"Mismatch: %s != %s\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>closure</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>test_negative</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>closure</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Apply callback expects NULL argument instead of [%s]\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>test_unique</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Apply callback expects NULL argument instead of [%s]\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>closure</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>test_remove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>closure</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>closure</name></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>run_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_rhs_t</name></type> <name><name>hs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>hs</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>blob</name> <init>= <expr><literal type="string">"#blobs"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CK_RHS_MODE_SPMC</name> <operator>|</operator> <name>CK_RHS_MODE_OBJECT</name> <operator>|</operator> <name>ad</name></expr></argument>, <argument><expr><name>hs_hash</name></expr></argument>, <argument><expr><name>hs_compare</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_allocator</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="number">6602834</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ck_rhs_init\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_put_unique</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%zu]: Failed to insert unique (%s)\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ck_rhs_apply</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_unique</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Failed to apply for insertion.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%zu]: Failed to remove unique (%s)\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ck_rhs_apply</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_remove</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Failed to remove apply.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_apply</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_negative</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Failed to apply.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		</block_content>}</block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_rhs_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u] [1]: put must fail on collision (%s).\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: get must not fail after put\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Test grow semantics. */</comment>
		<expr_stmt><expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u] [2]: put must fail on collision.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: get must not fail\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>blob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Blob must always exist after first.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: A unique blob put failed.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Duplicate blob put succeeded.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Grow set and check get semantics. */</comment>
		<expr_stmt><expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: get must not fail\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Delete and check negative membership. */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>=</operator> <call><name>ck_rhs_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: remove must not fail\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Removed incorrect node (%s != %s)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Test replacement semantics. */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>test</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>d</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>test</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Failed to set\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Expected replacement. */</comment>
			<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Incorrect previous value: %s != %s\n"</literal></expr></argument>,
				    <argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Replacement should succeed. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_fas</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: ck_rhs_fas must succeed.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Incorrect replaced value: %s != %s\n"</literal></expr></argument>,
				    <argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_fas</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>negative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Replacement of negative should fail.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Failed to set [1]\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Invalid &amp;hs[j]: %s != %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Attempt in-place mutation. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_apply</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>test_ip</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Failed to apply: %s != %s\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ck_rhs_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR [%u]: Expected [%s] to exist.\n"</literal></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_move</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>hs_hash</name></expr></argument>, <argument><expr><name>hs_compare</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_allocator</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"Failed to move hash table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ck_rhs_gc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_rebuild</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"Failed to rebuild"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>k</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>run_test</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
