<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/regressions/ck_hp/validate/ck_hp_fifo_donner.c"><comment type="block">/*
 * Copyright 2012 Hendrik Donner
 * Copyright 2012-2015 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_hp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_hp_fifo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../common.h"</cpp:file></cpp:include>

<comment type="block">/* FIFO queue */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_hp_fifo_t</name></type> <name>fifo</name></decl>;</decl_stmt>

<comment type="block">/* Hazard pointer global */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_hp_t</name></type> <name>fifo_hp</name></decl>;</decl_stmt>

<comment type="block">/* thread local element count */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>thread_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>start_barrier</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>end_barrier</name></decl>;</decl_stmt>

<comment type="block">/* destructor for FIFO queue */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>destructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/* entry struct for FIFO queue entries */</comment>
<struct>struct <name>entry</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* function for thread */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>queue_50_50</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>elements</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ck_hp_fifo_entry_t</name> <modifier>*</modifier></type><name>fifo_entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_hp_record_t</name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>slots</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>element_count</name> <init>= <expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator><name>elements</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ck_hp_record_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slots</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>CK_HP_FIFO_SLOTS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* different seed for each thread */</comment>
	<expr_stmt><expr><name>seed</name> <operator>=</operator> <literal type="number">1337</literal></expr>;</expr_stmt> <comment type="block">/*(unsigned int) pthread_self(); */</comment>

        <comment type="block">/*
         * This subscribes the thread to the fifo_hp state using the thread-owned
         * record.
         * FIFO queue needs 2 hazard pointers.
         */</comment>
        <expr_stmt><expr><call><name>ck_hp_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fifo_hp</name></expr></argument>, <argument><expr><name>record</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* start barrier */</comment>
	<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>thread_count</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* 50/50 enqueue-dequeue */</comment>
	<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>element_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* rand_r with thread local state should be thread safe */</comment>
		<if_stmt><if>if<condition>( <expr><literal type="number">50</literal> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">100.0</literal><operator>*</operator><call><name>common_rand_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><name>RAND_MAX</name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* This is the container for the enqueued data. */</comment>
        		<expr_stmt><expr><name>fifo_entry</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ck_hp_fifo_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        		<if_stmt><if>if <condition>(<expr><name>fifo_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        	        	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

        		<comment type="block">/* This is the data. */</comment>
        		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        	        	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

        	       <comment type="block">/*
        	 	* Enqueue the value of the pointer entry into FIFO queue using the
        	 	* container fifo_entry.
        	 	*/</comment>
        		<expr_stmt><expr><call><name>ck_hp_fifo_enqueue_mpmc</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fifo</name></expr></argument>, <argument><expr><name>fifo_entry</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/*
        		 * ck_hp_fifo_dequeue_mpmc will return a pointer to the first unused node and store
        		 * the value of the first pointer in the FIFO queue in entry.
        		 */</comment>
  		      	<expr_stmt><expr><name>fifo_entry</name> <operator>=</operator> <call><name>ck_hp_fifo_dequeue_mpmc</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fifo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		<if_stmt><if>if <condition>(<expr><name>fifo_entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
               		 	<comment type="block">/*
               		 	 * Safely reclaim memory associated with fifo_entry.
                		 * This inserts garbage into a local list. Once the list (plist) reaches
      			       	 * a length of 100, ck_hp_free will attempt to reclaim all references
                		 * to objects on the list.
        		       	 */</comment>
                		<expr_stmt><expr><call><name>ck_hp_free</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fifo_entry</name><operator>-&gt;</operator><name>hazard</name></name></expr></argument>, <argument><expr><name>fifo_entry</name></expr></argument>, <argument><expr><name>fifo_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* end barrier */</comment>
	<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>thread_count</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

       	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>ck_hp_fifo_entry_t</name> <modifier>*</modifier></type><name>stub</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>element_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>thr</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        	<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"Usage: cktest &lt;thread_count&gt; &lt;element_count&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Get element count from argument */</comment>
        <expr_stmt><expr><name>element_count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get element count from argument */</comment>
        <expr_stmt><expr><name>thread_count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pthread handles */</comment>
	<expr_stmt><expr><name>thr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* array for local operation count */</comment>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <operator>*</operator> <name>thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Initialize global hazard pointer safe memory reclamation to execute free()
         * when a fifo_entry is safe to be deleted.
         * Hazard pointer scan routine will be called when the thread local intern plist's
         * size exceed 100 entries.
         */</comment>

	<comment type="block">/* FIFO queue needs 2 hazard pointers */</comment>
	<expr_stmt><expr><call><name>ck_hp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fifo_hp</name></expr></argument>, <argument><expr><name>CK_HP_FIFO_SLOTS_COUNT</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>destructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* The FIFO requires one stub entry on initialization. */</comment>
        <expr_stmt><expr><name>stub</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ck_hp_fifo_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Behavior is undefined if stub is NULL. */</comment>
        <if_stmt><if>if <condition>(<expr><name>stub</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

        <comment type="block">/* This is called once to initialize the fifo. */</comment>
        <expr_stmt><expr><call><name>ck_hp_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fifo</name></expr></argument>, <argument><expr><name>stub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create threads */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>element_count</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>thread_count</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>queue_50_50</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* start barrier */</comment>
	<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>thread_count</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

	<comment type="block">/* end barrier */</comment>
	<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end_barrier</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>thread_count</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

	<comment type="block">/* Join threads */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>thr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
