<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/regressions/ck_bitmap/validate/serial.c"><comment type="block">/*
 * Copyright 2012-2015 Samy Al Bahra.
 * Copyright 2012-2014 AppNexus, Inc.
 * Copyright 2012 Shreyas Prasad.
 * Copyright 2014 Paul Khuong.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_bitmap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../common.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STATIC_LENGTH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC_LENGTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>length</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_bitmap_t</name> <modifier>*</modifier></type><name>g_bits</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_iteration</name><parameter_list>(<parameter><decl><type><name>ck_bitmap_t</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>initial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_bitmap_iterator_t</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>initial</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <name>g_bits</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>length</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>STATIC_LENGTH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_bitmap_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ck_bitmap_next</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[4] ERROR: Expected bit %u, got bit %u\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[5] ERROR: Expected length %u, got length %u\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test</name><parameter_list>(<parameter><decl><type><name>ck_bitmap_t</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n_length</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>initial</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<macro><name>CK_BITMAP_INSTANCE</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>u</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CK_BITMAP_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CK_BITMAP_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CK_BITMAP_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>!</operator><name>initial</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[0] ERROR [%u]: Expected %u got %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
				<argument><expr><name>initial</name></expr></argument>, <argument><expr><operator>!</operator><name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_bitmap_set</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[1] ERROR: Expected bit to be set: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ck_bitmap_reset</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[2] ERROR: Expected bit to be cleared: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_bitmap_bts</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[3] ERROR: Expected bit to be cleared before 1st bts: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[4] ERROR: Expected bit to be set: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_bitmap_bts</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[5] ERROR: Expected bit to be set before 2nd bts: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[6] ERROR: Expected bit to be set: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ck_bitmap_reset</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[7] ERROR: Expected bit to be cleared: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ck_bitmap_set</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[8] ERROR: Expected bit to be set: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>check_iteration</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[9] ERROR: Expected bit to be set: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ck_bitmap_clear</name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"[10] ERROR: Expected bit to be reset: %u\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ck_bitmap_union</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><call><name>CK_BITMAP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name> <operator>||</operator>
	    <call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected union semantics.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_init</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>ck_bitmap_size</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_bits</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected length %u got %u\n"</literal></expr></argument>,
		    <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>ck_bitmap_bits</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>init</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected bit %i at index %u, got %i\n"</literal></expr></argument>,
			    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>init</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>!</operator><name>init</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ck_bitmap_t</name> <modifier>*</modifier></type>
<name>random_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>ck_bitmap_size</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_bitmap_init</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_bitmap_set</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ck_bitmap_t</name> <modifier>*</modifier></type>
<name>copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ck_bitmap_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_bitmap_t</name> <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>bytes</name> <init>= <expr><call><name>ck_bitmap_size</name><argument_list>(<argument><expr><call><name>ck_bitmap_bits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>bitmap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_counts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ck_bitmap_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ck_bitmap_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count_intersect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>length</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name></type> <name>actual_limit</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>check</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>actual_limit</name> <operator>&gt;</operator> <call><name>ck_bitmap_bits</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>actual_limit</name> <operator>=</operator> <call><name>ck_bitmap_bits</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>ck_bitmap_empty</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>check</name> <operator>!=</operator> <operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ck_bitmap_empty(%u): got %i expected %i\n"</literal></expr></argument>,
			    <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>check</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>ck_bitmap_full</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>check</name> <operator>!=</operator> <operator>(</operator><name>count</name> <operator>==</operator> <name>actual_limit</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ck_bitmap_full(%u): got %i expected %i\n"</literal></expr></argument>,
			    <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>check</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>count</name> <operator>==</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_bitmap_count</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ck_bitmap_count(%u): got %u expected %u\n"</literal></expr></argument>,
			    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_bitmap_count_intersect</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>count_intersect</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ck_bitmap_count_intersect(%u): got %u expected %u\n"</literal></expr></argument>,
			    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>count_intersect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>count_intersect</name> <operator>+=</operator> <call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>random_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_bitmap_t</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x_copy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>srandom</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_init</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_init</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>random_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>random_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>routine</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {					\
		x_copy = copy(x);					\
		routine(x_copy, y);					\
		for (i = 0; i &lt; length; i++) {				\
			bool xi = ck_bitmap_test(x, i);			\
			bool yi = ck_bitmap_test(y, i);			\
			bool ri = ck_bitmap_test(x_copy, i);		\
			bool wanted = expected(xi, yi);			\
									\
			if (ri != wanted) {				\
				ck_error("In " #routine " at %u: "	\
				    "got %i expected %i\n",		\
				    i, ri, wanted);			\
			}						\
		}							\
		free(x_copy);						\
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x | y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDC2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; (~y))</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>ck_bitmap_union</name></expr></argument>, <argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>ck_bitmap_intersection</name></expr></argument>, <argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TEST</name><argument_list>(<argument><expr><name>ck_bitmap_intersection_negate</name></expr></argument>, <argument><expr><name>ANDC2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ANDC2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AND</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST</name></cpp:undef>

	<expr_stmt><expr><call><name>test_counts</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_bitmap_init</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_bitmap_init</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>test_counts</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>ck_bitmap_base</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>ck_bitmap_size</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Configuration: %u bytes\n"</literal></expr></argument>,
	    <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>g_bits</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>g_bits</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_bitmap_init</name><argument_list>(<argument><expr><name>g_bits</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>g_bits</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>g_bits</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_bitmap_init</name><argument_list>(<argument><expr><name>g_bits</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>g_bits</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_bitmap_test</name><argument_list>(<argument><expr><name>g_bits</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>CK_BITMAP_INSTANCE</name><argument_list>(<argument>STATIC_LENGTH</argument>)</argument_list></macro> <expr_stmt><expr><name>sb</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Static configuration: %zu bytes\n"</literal></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>CK_BITMAP_BUFFER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>ck_bitmap_base</name><argument_list>(<argument><expr><name>STATIC_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CK_BITMAP_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>STATIC_LENGTH</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><call><name>CK_BITMAP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STATIC_LENGTH</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>CK_BITMAP_BUFFER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><call><name>ck_bitmap_base</name><argument_list>(<argument><expr><name>STATIC_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CK_BITMAP_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>STATIC_LENGTH</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><call><name>CK_BITMAP</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STATIC_LENGTH</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CK_BITMAP_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>CK_BITMAP_TEST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected bit to be reset.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CK_BITMAP_SET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>CK_BITMAP_TEST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected bit to be set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CK_BITMAP_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>CK_BITMAP_TEST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_error</name><argument_list>(<argument><expr><literal type="string">"ERROR: Expected bit to be reset.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>*</operator> <name>CHAR_BIT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>random_test</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
