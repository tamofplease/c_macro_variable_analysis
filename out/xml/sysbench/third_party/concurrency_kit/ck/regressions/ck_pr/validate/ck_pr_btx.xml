<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/regressions/ck_pr/validate/ck_pr_btx.c"><comment type="block">/*
 * Copyright 2011 David Joseph.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../common.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPEAT</name></cpp:macro> <cpp:value>2000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BTX</name><parameter_list>(<parameter><type><name>K</name></type></parameter>, <parameter><type><name>S</name></type></parameter>, <parameter><type><name>M</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>L</name></type></parameter>, <parameter><type><name>P</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>R</name></type></parameter>)</parameter_list></cpp:macro>						\
	<cpp:value>static bool									\
	test_##K##_##S(M *target, int offset)						\
	{										\
		T previous;								\
		const L change = R (0x01 &lt;&lt; offset);					\
											\
		previous = (T)*target;							\
		*target = previous P change;						\
		return ((previous &gt;&gt; offset) &amp; 0x01);					\
	}										\
	static void									\
	run_test_##K##_##S(void)							\
	{										\
		int i, offset, m;							\
		bool serial_t, ck_pr_t;							\
		T x = 65535, y = 65535;							\
											\
		common_srand((unsigned int)getpid());					\
		m = sizeof(T) * 8;							\
											\
		puts("***TESTING ck_pr_"#K"_"#S"***");					\
		for (i = 0; i &lt; REPEAT; ++i) {						\
			offset = common_rand() % m;						\
			serial_t = test_##K##_##S(&amp;x, offset);				\
			ck_pr_t = ck_pr_##K##_##S(&amp;y, offset);				\
											\
			if (serial_t != ck_pr_t || x != y ) {				\
				printf("Serial(%"#D") and ck_pr(%"#D")"			\
					#K"_"#S " do not match.\n"			\
					"FAILURE.\n", 					\
					serial_t, ck_pr_t);				\
											\
				return;							\
			}								\
		}									\
		printf("\tserial_"#K"_"#S": %"#D"\n"					\
			"\tck_pr_"#K"_"#S": %"#D"\n"					\
			"SUCCESS.\n",							\
			x, y);								\
											\
		return;									\
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BTX_S</name><parameter_list>(<parameter><type><name>K</name></type></parameter>, <parameter><type><name>S</name></type></parameter>, <parameter><type><name>T</name></type></parameter>, <parameter><type><name>P</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>R</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TEST_BTX(K, S, T, T, T, P, D, R)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATE_TEST</name><parameter_list>(<parameter><type><name>K</name></type></parameter>, <parameter><type><name>P</name></type></parameter>, <parameter><type><name>R</name></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>TEST_BTX_S(K, int, int, P, d, R)		\
	TEST_BTX_S(K, uint, unsigned int, P, u, R)	\
	static void					\
	run_test_##K(void)				\
	{						\
		run_test_##K##_int();			\
		run_test_##K##_uint();			\
							\
		return;					\
	}</cpp:value></cpp:define>

<macro><name>GENERATE_TEST</name><argument_list>(<argument>btc</argument>, <argument>^</argument>, <argument><literal type="number">0</literal>+</argument>)</argument_list></macro>
<macro><name>GENERATE_TEST</name><argument_list>(<argument>btr</argument>, <argument>&amp;</argument>, <argument>~</argument>)</argument_list></macro>
<macro><name>GENERATE_TEST</name><argument_list>(<argument>bts</argument>, <argument>|</argument>, <argument><literal type="number">0</literal>+</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GENERATE_TEST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_BTX_S</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_BTX</name></cpp:undef>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>run_test_btc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>run_test_btr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>run_test_bts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


</unit>
