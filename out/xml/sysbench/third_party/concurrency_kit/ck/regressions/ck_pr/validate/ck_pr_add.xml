<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/regressions/ck_pr/validate/ck_pr_add.c"><comment type="block">/*
 * Copyright 2009 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../common.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>R_REPEAT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_REPEAT</name></cpp:macro> <cpp:value>200000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_PR_ADD_T</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>v</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>							\
	<cpp:value>{									\
		uint##w##_t t = v;						\
		ck_pr_add_##w(&amp;t, d);						\
		if (t != (uint##w##_t)(v + d)) {				\
			printf("FAIL [");					\
			printf("%" PRIu##w " (%" PRIu##w ") -&gt; %" PRIu##w "]\n",\
					(uint##w##_t)v, d, t);			\
			exit(EXIT_FAILURE);					\
		}								\
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_PR_ADD_B</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro>								\
	<cpp:value>{									\
		unsigned int __ck_i = 0;					\
		printf("ck_pr_add_" #w ": ");					\
		if (w &lt; 10)							\
			printf(" ");						\
		for (__ck_i = 0; __ck_i &lt; R_REPEAT; __ck_i++) {			\
			uint##w##_t a = common_rand() % ((uint##w##_t)-1 / 2);	\
			uint##w##_t b = common_rand() % ((uint##w##_t)-1 / 2);	\
			CK_PR_ADD_T(w, a, b);					\
		}								\
		rg_width(w);							\
		printf("  SUCCESS\n");						\
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_PR_ADD_W</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro>							\
	<cpp:value>{									\
		uint##m##_t t = -1, r = -1 &amp; ~(uint##m##_t)(uint##w##_t)-1;	\
		ck_pr_add_##w((uint##w##_t *)(void *)&amp;t, 1);			\
		if (t != r) {							\
			printf("FAIL [%#" PRIx##m " != %#" PRIx##m "]\n", t, r);\
			exit(EXIT_FAILURE);					\
		}								\
		t = 0, r = (uint##m##_t)(uint##w##_t)-1;			\
		ck_pr_add_##w((uint##w##_t *)(void *)&amp;t, -1);			\
		if (t != r) {							\
			printf("FAIL [%#" PRIx##m " != %#" PRIx##m "]\n", t, r);\
			exit(EXIT_FAILURE);					\
		}								\
	}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rg_width</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<comment type="block">/* Other architectures are bi-endian. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_F_PR_ADD_64</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_ADD_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>CK_PR_ADD_W</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_PR_ADD_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>CK_PR_ADD_W</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_PR_ADD_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>CK_PR_ADD_W</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CK_PR_ADD_64 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_F_PR_ADD_32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_ADD_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>CK_PR_ADD_W</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_PR_ADD_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>CK_PR_ADD_W</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CK_PR_ADD_32 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_ADD_16</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_PR_ADD_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CK_PR_ADD_W</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CK_PR_ADD_16 &amp;&amp; CK_PR_ADD_8 */</comment>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>common_srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_F_PR_ADD_64</name></cpp:ifdef>
	<expr_stmt><expr><call><name>CK_PR_ADD_B</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_F_PR_ADD_32</name></cpp:ifdef>
	<expr_stmt><expr><call><name>CK_PR_ADD_B</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_F_PR_ADD_16</name></cpp:ifdef>
	<expr_stmt><expr><call><name>CK_PR_ADD_B</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_F_PR_ADD_8</name></cpp:ifdef>
	<expr_stmt><expr><call><name>CK_PR_ADD_B</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
