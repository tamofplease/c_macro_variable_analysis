<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_hp.c"><comment type="block">/*
 * Copyright 2010-2015 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<comment type="block">/*
 * (c) Copyright 2008, IBM Corporation.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * This is an implementation of hazard pointers as detailed in:
 *   http://www.research.ibm.com/people/m/michael/ieeetpds-2004.pdf
 *
 * This API provides a publishing mechanism that defers destruction of
 * hazard pointers until it is safe to do so. Preventing arbitrary re-use
 * protects against the ABA problem and provides safe memory reclamation.
 * The implementation was derived from the Hazard Pointers implementation
 * from the Amino CBBS project. It has been heavily modified for Concurrency
 * Kit.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_backoff.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_hp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stack.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_string.h&gt;</cpp:file></cpp:include>

<macro><name>CK_STACK_CONTAINER</name><argument_list>(<argument>struct ck_hp_record</argument>, <argument>global_entry</argument>, <argument>ck_hp_record_container</argument>)</argument_list></macro>
<macro><name>CK_STACK_CONTAINER</name><argument_list>(<argument>struct ck_hp_hazard</argument>, <argument>pending_entry</argument>, <argument>ck_hp_hazard_container</argument>)</argument_list></macro>

<function><type><name>void</name></type>
<name>ck_hp_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
	   <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>degree</name></decl></parameter>,
	   <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold</name></decl></parameter>,
	   <parameter><decl><type><name>ck_hp_destructor_t</name></type> <name>destroy</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>degree</name></name> <operator>=</operator> <name>degree</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>destroy</name></name> <operator>=</operator> <name>destroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>n_subscribers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>n_free</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_stack_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>subscribers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_set_threshold</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>threshold</name></name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type>
<name>ck_hp_recycle</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_stack_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>n_free</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>CK_STACK_FOREACH</name><argument_list>(<argument>&amp;global-&gt;subscribers</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>ck_hp_record_container</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CK_HP_FREE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>ck_pr_fas_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>CK_HP_USED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>CK_HP_FREE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ck_pr_dec_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>global</name><operator>-&gt;</operator><name>n_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>record</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_unregister</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>n_peak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>n_reclamations</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_stack_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>CK_HP_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>global</name><operator>-&gt;</operator><name>n_free</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_register</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pointers</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CK_HP_USED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>global</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pointers</name></name> <operator>=</operator> <name>pointers</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>n_peak</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>n_reclamations</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pointers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>degree</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_stack_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_stack_push_upmc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>subscribers</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>global_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>n_subscribers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>hazard_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name> <operator>&gt;</operator> <operator>*</operator><name>y</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&lt;</operator> <operator>*</operator><name>y</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>CK_CC_INLINE</name> <specifier>static</specifier> <name>bool</name></type>
<name>ck_hp_member_scan</name><parameter_list>(<parameter><decl><type><name>ck_stack_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>degree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hazard</name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>ck_hp_record_container</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CK_HP_FREE</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>pointers</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>degree</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>hazard</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>pointers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>hazard</name> <operator>==</operator> <name>pointer</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block> while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>CK_STACK_NEXT</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

	<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>CK_CC_INLINE</name> <specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>ck_hp_member_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>global</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>n_hazards</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_stack_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hazards</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

	<macro><name>CK_STACK_FOREACH</name><argument_list>(<argument>&amp;global-&gt;subscribers</argument>, <argument>entry</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>record</name> <operator>=</operator> <call><name>ck_hp_record_container</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CK_HP_FREE</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>pointers</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>global</name><operator>-&gt;</operator><name>degree</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>hazards</name> <operator>&gt;</operator> <name>CK_HP_CACHE</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>pointer</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>record</name><operator>-&gt;</operator><name>pointers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pointer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>cache</name><index>[<expr><name>hazards</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block>

	<expr_stmt><expr><operator>*</operator><name>n_hazards</name> <operator>=</operator> <name>hazards</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>entry</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_reclaim</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hp_hazard</name></name> <modifier>*</modifier></type><name>hazard</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>global</name> <init>= <expr><name><name>thread</name><operator>-&gt;</operator><name>global</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_hazards</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>marker</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_stack_entry_t</name> <modifier>*</modifier></type><name>previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<comment type="block">/* Store as many entries as possible in local array. */</comment>
	<expr_stmt><expr><name>cache</name> <operator>=</operator> <name><name>thread</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>ck_hp_member_cache</name><argument_list>(<argument><expr><name>global</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_hazards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * In theory, there is an n such that (n * (log n) ** 2) &lt; np.
	 */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>n_hazards</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hazard_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>CK_STACK_FOREACH_SAFE</name><argument_list>(<argument>&amp;thread-&gt;pending</argument>, <argument>entry</argument>, <argument>next</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>hazard</name> <operator>=</operator> <call><name>ck_hp_hazard_container</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>n_hazards</name></expr></argument>,
				  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hazard_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		    <call><name>ck_hp_member_scan</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>global</name><operator>-&gt;</operator><name>degree</name></name></expr></argument>, <argument><expr><name><name>hazard</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>previous</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/* Remove from the pending stack. */</comment>
		<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CK_STACK_NEXT</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>CK_STACK_NEXT</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CK_STACK_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>CK_STACK_NEXT</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* The entry is now safe to destroy. */</comment>
		<expr_stmt><expr><call><name><name>global</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name><name>hazard</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>n_reclamations</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_retire</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_hp_hazard</name></name> <modifier>*</modifier></type><name>hazard</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_stack_push_spnc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>pending_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>&gt;</operator> <name><name>thread</name><operator>-&gt;</operator><name>n_peak</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>n_peak</name></name> <operator>=</operator> <name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_hp_hazard</name></name> <modifier>*</modifier></type><name>hazard</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hp</name></name> <modifier>*</modifier></type><name>global</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>global</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>global</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>, <argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_stack_push_spnc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>-&gt;</operator><name>pending</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hazard</name><operator>-&gt;</operator><name>pending_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>&gt;</operator> <name><name>thread</name><operator>-&gt;</operator><name>n_peak</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>n_peak</name></name> <operator>=</operator> <name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>&gt;=</operator> <name><name>global</name><operator>-&gt;</operator><name>threshold</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_hp_reclaim</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hp_purge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hp_record</name></name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_backoff_t</name></type> <name>backoff</name> <init>= <expr><name>CK_BACKOFF_INITIALIZER</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_hp_reclaim</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>thread</name><operator>-&gt;</operator><name>n_pending</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_backoff_eb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return;</return>
</block_content>}</block></function>
</unit>
