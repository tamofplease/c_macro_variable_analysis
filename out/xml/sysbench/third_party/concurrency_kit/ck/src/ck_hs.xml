<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_hs.c"><comment type="block">/*
 * Copyright 2012-2015 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_hs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_md.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ck_internal.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HS_PROBE_L1_SHIFT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_PROBE_L1_SHIFT</name></cpp:macro> <cpp:value>3ULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CK_HS_PROBE_L1_SHIFT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_PROBE_L1</name></cpp:macro> <cpp:value>(1 &lt;&lt; CK_HS_PROBE_L1_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_PROBE_L1_MASK</name></cpp:macro> <cpp:value>(CK_HS_PROBE_L1 - 1)</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HS_PROBE_L1_DEFAULT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_PROBE_L1_DEFAULT</name></cpp:macro> <cpp:value>CK_MD_CACHELINE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_VMA_MASK</name></cpp:macro> <cpp:value>((uintptr_t)((1ULL &lt;&lt; CK_MD_VMA_BITS) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_VMA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	\
	<cpp:value>((void *)((uintptr_t)(x) &amp; CK_HS_VMA_MASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_EMPTY</name></cpp:macro>     <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_TOMBSTONE</name></cpp:macro> <cpp:value>((void *)~(uintptr_t)0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_G</name></cpp:macro>		<cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_G_MASK</name></cpp:macro>	<cpp:value>(CK_HS_G - 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_8</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_WORD</name></cpp:macro>          <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_8(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>ck_pr_load_8(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_16</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_16</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_WORD</name></cpp:macro>          <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_16(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>ck_pr_load_16(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_WORD</name></cpp:macro>          <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_32(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HS_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>ck_pr_load_32(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ck_hs is not supported on your platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>ck_hs_probe_behavior</name> <block>{
	<decl><name>CK_HS_PROBE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,	<comment type="block">/* Default behavior. */</comment>
	<decl><name>CK_HS_PROBE_TOMBSTONE</name></decl>,	<comment type="block">/* Short-circuit on tombstone. */</comment>
	<decl><name>CK_HS_PROBE_INSERT</name></decl>	<comment type="block">/* Short-circuit on probe bound if tombstone found. */</comment>
}</block>;</enum>

<struct>struct <name>ck_hs_map</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>generation</name><index>[<expr><name>CK_HS_G</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probe_maximum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>step</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probe_limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tombstones</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>capacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HS_WORD</name> <modifier>*</modifier></type><name>probe_bound</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ck_hs_map_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name>h</name> <operator>&amp;=</operator> <name>CK_HS_G_MASK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>,
	    <argument><expr><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> 
<name>_ck_hs_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_iterator</name></name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>CK_HS_EMPTY</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <name>CK_HS_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HS_PP</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CK_HS_VMA</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hs</name></expr>;</expr_stmt> <comment type="block">/* Avoid unused parameter warning. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>++</operator><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition>;</do>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hs_iterator_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs_iterator</name></name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_iterator</name></name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>_ck_hs_next</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_next_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_iterator</name></name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>i</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>_ck_hs_next</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hs_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>tombstones</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>tombstones</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type>
<name>ck_hs_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_hs_map_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>defer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_hs_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_hs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type>
<name>ck_hs_map_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>n_entries</name></decl>, <decl><type ref="prev"/><name>prefix</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n_entries</name> <operator>=</operator> <call><name>ck_internal_power_2</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n_entries</name> <operator>&lt;</operator> <name>CK_HS_PROBE_L1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n_entries</name> <operator>=</operator> <name>CK_HS_PROBE_L1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_hs_map</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name> <operator>+</operator> <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_DELETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>prefix</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CK_HS_WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>prefix</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<comment type="block">/* We should probably use a more intelligent heuristic for default probe length. */</comment>
	<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>ck_internal_max</name><argument_list>(<argument><expr><name>n_entries</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>CK_HS_PROBE_L1_SHIFT</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>CK_HS_PROBE_L1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>limit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>n_entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>ck_internal_bsf</name><argument_list>(<argument><expr><name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>n_entries</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Align map allocation to cache line. */</comment>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>prefix</name> <operator>+</operator>
	    <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>map</name><operator>-&gt;</operator><name>generation</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_DELETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>=</operator> <operator>(</operator><name>CK_HS_WORD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Commit entries purge with respect to map publication. */</comment>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_reset_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>ck_hs_map_create</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_hs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<return>return <expr><call><name>ck_hs_reset_size</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type>
<name>ck_hs_map_probe_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>level</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>stride</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>level</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>stride</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <operator>~</operator><name>CK_HS_PROBE_L1_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <operator>(</operator><name>r</name> <operator>&amp;</operator> <name>CK_HS_PROBE_L1_MASK</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>offset</name> <operator>+</operator> <operator>(</operator><name>probes</name> <operator>&gt;&gt;</operator> <name>CK_HS_PROBE_L1_SHIFT</name><operator>)</operator> <operator>+</operator>
	    <operator>(</operator><name>stride</name> <operator>|</operator> <name>CK_HS_PROBE_L1</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ck_hs_map_bound_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name> <init>= <expr><name>h</name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&lt;</operator> <name>n_probes</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name>CK_HS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n_probes</name> <operator>=</operator> <name>CK_HS_WORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>CK_HS_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>ck_hs_map_bound_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name> <init>= <expr><name>h</name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name> <init>= <expr><name>CK_HS_WORD_MAX</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CK_HS_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>CK_HS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_grow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>update</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;</operator> <name>capacity</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>update</name> <operator>=</operator> <call><name>ck_hs_map_create</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>update</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <name>CK_HS_EMPTY</name> <operator>||</operator> <name>previous</name> <operator>==</operator> <name>CK_HS_TOMBSTONE</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HS_PP</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>CK_HS_VMA</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>update</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>probes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
			<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>update</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CK_HS_PROBE_L1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>bucket</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>CK_HS_PROBE_L1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>==</operator> <name><name>update</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>CK_CC_LIKELY</name><argument_list>(<argument><expr><operator>*</operator><name>cursor</name> <operator>==</operator> <name>CK_HS_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>ck_hs_map_bound_set</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>CK_HS_PROBE_L1</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_hs_map_probe_next</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>probes</name> <operator>&gt;</operator> <name><name>update</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * We have hit the probe limit, map needs to be even larger.
			 */</comment>
			<expr_stmt><expr><call><name>ck_hs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>capacity</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<goto>goto <name>restart</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_hs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_hs_map_postinsert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_hs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_rebuild</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_hs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>ck_hs_map_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>n_probes</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>priority</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probe_limit</name></decl></parameter>,
    <parameter><decl><type><name><name>enum</name> <name>ck_hs_probe_behavior</name></name></type> <name>behavior</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>bucket</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>cursor</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>compare</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>probes</name></decl>, <decl><type ref="prev"/><name>opl</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HS_PP</name></cpp:ifdef>
	<comment type="block">/* If we are storing object pointers, then we may leverage pointer packing. */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hv</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <name>CK_HS_KEY_MASK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>CK_HS_VMA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>probes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>opl</name> <operator>=</operator> <name>probe_limit</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>CK_HS_PROBE_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>probe_limit</name> <operator>=</operator> <call><name>ck_hs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CK_HS_PROBE_L1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>bucket</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>CK_HS_PROBE_L1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>==</operator> <name>probe_limit</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>probe_limit</name> <operator>==</operator> <name>opl</name> <operator>||</operator> <name>pr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CK_HS_EMPTY</name></expr>;</expr_stmt>
					<goto>goto <name>leave</name>;</goto>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * If no eligible slot has been found yet, continue probe
				 * sequence with original probe limit.
				 */</comment>
				<expr_stmt><expr><name>probe_limit</name> <operator>=</operator> <name>opl</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>CK_HS_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>CK_HS_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>pr</name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>n_probes</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>CK_HS_PROBE_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CK_HS_EMPTY</name></expr>;</expr_stmt>
						<goto>goto <name>leave</name>;</goto>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HS_PP</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>k</name> <operator>&gt;&gt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator> <operator>!=</operator> <name>hv</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>CK_HS_VMA</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>compare</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_hs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>leave</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>probes</name> <operator>&gt;</operator> <name>probe_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>n_probes</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>priority</name> <operator>=</operator> <name>pr</name></expr>;</expr_stmt>
	<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>ck_hs_marshal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HS_PP</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CK_HS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>insert</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>CK_HS_VMA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>|</operator>
		    <operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>insert</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>insert</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>

	<return>return <expr><name>key</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_gc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cycles</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maximum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HS_WORD</name> <modifier>*</modifier></type><name>bounds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CK_HS_WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cycles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>maximum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CK_HS_WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bounds</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>maximum</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>seed</name><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>CK_HS_EMPTY</name> <operator>||</operator> <name>entry</name> <operator>==</operator> <name>CK_HS_TOMBSTONE</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HS_PP</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>CK_HS_VMA</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
		    <argument><expr><call><name>ck_hs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CK_HS_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name> <init>= <expr><call><name>ck_hs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_hs_map_signal</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CK_HS_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cycles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name>maximum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>maximum</name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name>CK_HS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n_probes</name> <operator>=</operator> <name>CK_HS_WORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n_probes</name> <operator>&gt;</operator> <name><name>bounds</name><index>[<expr><name>offset</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>bounds</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>--</operator><name>cycles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * The following only apply to garbage collection involving
	 * a full scan of all entries.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>maximum</name> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CK_HS_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bounds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name><name>hs</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_fas</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><call><name>ck_hs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CK_HS_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Replacement semantics presume existence. */</comment>
	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_hs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_hs_map_signal</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CK_HS_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * An apply function takes two arguments. The first argument is a pointer to a
 * pre-existing object. The second argument is a pointer to the fifth argument
 * passed to ck_hs_apply. If a non-NULL pointer is passed to the first argument
 * and the return value of the apply function is NULL, then the pre-existing
 * value is deleted. If the return pointer is the same as the one passed to the
 * apply function then no changes are made to the hash table.  If the first
 * argument is non-NULL and the return pointer is different than that passed to
 * the apply function, then the pre-existing value is replaced. For
 * replacement, it is required that the value itself is identical to the
 * previous value.
 */</comment>
<function><type><name>bool</name></type>
<name>ck_hs_apply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>ck_hs_apply_fn_t</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>delta</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><name>CK_HS_PROBE_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_hs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * The apply function has requested deletion. If the object doesn't exist,
		 * then exit early.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>object</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Otherwise, mark slot as deleted. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CK_HS_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>tombstones</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The apply function has not requested hash set modification so exit early. */</comment>
	<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <name>object</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* A modification or insertion has been requested. */</comment>
	<expr_stmt><expr><call><name>ck_hs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_hs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * This follows the same semantics as ck_hs_set, please refer to that
		 * function for documentation.
		 */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_hs_map_signal</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CK_HS_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * If we are storing into same slot, then atomic store is sufficient
		 * for replacement.
		 */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_hs_map_postinsert</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><name>CK_HS_PROBE_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_hs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_hs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_hs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If an earlier bucket was found, then store entry there. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If a duplicate key was found, then delete it after
		 * signaling concurrent probes to restart. Optionally,
		 * it is possible to install tombstone after grace
		 * period if we can guarantee earlier position of
		 * duplicate key.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_hs_map_signal</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CK_HS_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * If we are storing into same slot, then atomic store is sufficient
		 * for replacement.
		 */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_hs_map_postinsert</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CK_CC_INLINE</name> <specifier>static</specifier> <name>bool</name></type>
<name>ck_hs_put_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name><name>enum</name> <name>ck_hs_probe_behavior</name></name></type> <name>behavior</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_hs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fail operation if a match was found. */</comment>
	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_hs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_hs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Insert key into first bucket in probe sequence. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* An empty slot was found. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ck_hs_map_postinsert</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_hs_put_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>CK_HS_PROBE_INSERT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_put_unique</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_hs_put_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>CK_HS_PROBE_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ck_hs_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>g_p</name></decl>, <decl><type ref="prev"/><name>probe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>generation</name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>generation</name> <operator>=</operator> <operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_HS_G_MASK</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>probe</name>  <operator>=</operator> <call><name>ck_hs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>, <argument><expr><name>CK_HS_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>g_p</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>g</name> <operator>!=</operator> <name>g_p</name></expr>)</condition>;</do>

	<return>return <expr><call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ck_hs_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slot</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_hs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ck_hs_map_probe</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><call><name>ck_hs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CK_HS_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CK_HS_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>tombstones</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
    <parameter><decl><type><name>ck_hs_hash_cb_t</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>,
    <parameter><decl><type><name>ck_hs_compare_cb_t</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>malloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>seed</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name> <operator>=</operator> <name>hf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_hs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_hs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
    <parameter><decl><type><name>ck_hs_hash_cb_t</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>,
    <parameter><decl><type><name>ck_hs_compare_cb_t</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n_entries</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>malloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name> <operator>=</operator> <name>hf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>ck_hs_map_create</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
