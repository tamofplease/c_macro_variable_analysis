<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_barrier_combining.c"><comment type="block">/*
 * Copyright 2011-2015 Samy Al Bahra.
 * Copyright 2011 David Joseph.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_barrier.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_spinlock.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ck_barrier_combining_queue</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
}</block>;</struct>

<expr_stmt><expr><name>CK_CC_INLINE</name> <specifier>static</specifier> struct <name>ck_barrier_combining_group</name> <operator>*</operator>
<macro><name>ck_barrier_combining_queue_dequeue</name><argument_list>(<argument>struct ck_barrier_combining_queue *queue</argument>)</argument_list></macro>
<block>{
	struct <expr><name>ck_barrier_combining_group</name> <operator>*</operator><name>front</name> <operator>=</operator> <name>NULL</name></expr>;

	<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>front</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

	<return>return <expr><name>front</name></expr>;</return>
}

CK_CC_INLINE <function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_barrier_combining_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>tnode</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><operator>*</operator><name>child</name> <operator>=</operator> <name>tnode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tnode</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * After inserting, we must increment the parent group's count for
	 * number of threads expected to reach it; otherwise, the
	 * barrier may end prematurely.
	 */</comment>
	<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This implementation of software combining tree barriers
 * uses level order traversal to insert new thread groups
 * into the barrier's tree. We use a queue to implement this
 * traversal.
 */</comment>
<function><type><name>CK_CC_INLINE</name> <specifier>static</specifier> <name>void</name></type>
<name>ck_barrier_combining_queue_enqueue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>node_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>node_value</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node_value</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node_value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node_value</name></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ck_barrier_combining_group_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>tnode</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nthr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_barrier_combining_queue</name></name></type> <name>queue</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>queue</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name><name>queue</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tnode</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>nthr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tnode</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tnode</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tnode</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>tnode</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Finds the first available node for linkage into the combining
	 * tree. The use of a spinlock is excusable as this is a one-time
	 * initialization cost.
	 */</comment>
	<expr_stmt><expr><call><name>ck_spinlock_fas_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_barrier_combining_queue_enqueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>queue</name><operator>.</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ck_barrier_combining_queue_dequeue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* If the left child is free, link the group there. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_barrier_combining_insert</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>leave</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* If the right child is free, link the group there. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_barrier_combining_insert</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>tnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>leave</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If unsuccessful, try inserting as a child of the children of the
		 * current node.
		 */</comment>
		<expr_stmt><expr><call><name>ck_barrier_combining_queue_enqueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_barrier_combining_queue_enqueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

<label><name>leave</name>:</label>
	<expr_stmt><expr><call><name>ck_spinlock_fas_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_barrier_combining_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>init_root</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>init_root</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_root</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_root</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_root</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>init_root</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>init_root</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_spinlock_fas_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>root</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>init_root</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_barrier_combining_aux</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>tnode</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>sense</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<comment type="block">/*
	 * If this is the last thread in the group, it moves on to the parent group.
	 * Otherwise, it spins on this group's sense.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ck_pr_faa_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tnode</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>tnode</name><operator>-&gt;</operator><name>k</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If we are and will be the last thread entering the barrier for the
		 * current group then signal the parent group if one exists.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>tnode</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_barrier_combining_aux</name><argument_list>(<argument><expr><name>barrier</name></expr></argument>, <argument><expr><name><name>tnode</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>sense</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Once the thread returns from its parent(s), it reinitializes the group's
		 * arrival count and signals other threads to continue by flipping the group
		 * sense. Order of these operations is not important since we assume a static
		 * number of threads are members of a barrier for the lifetime of the barrier.
		 * Since count is explicitly reinitialized, it is guaranteed that at any point
		 * tnode-&gt;count is equivalent to tnode-&gt;k if and only if that many threads
		 * are at the barrier.
		 */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tnode</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tnode</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>, <argument><expr><operator>~</operator><name><name>tnode</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ck_pr_fence_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>sense</name> <operator>!=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tnode</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_barrier_combining</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_group</name></name> <modifier>*</modifier></type><name>tnode</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_combining_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_barrier_combining_aux</name><argument_list>(<argument><expr><name>barrier</name></expr></argument>, <argument><expr><name>tnode</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reverse the execution context's sense for the next barrier. */</comment>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <operator>~</operator><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
