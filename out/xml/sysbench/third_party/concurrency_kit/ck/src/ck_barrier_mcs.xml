<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_barrier_mcs.c"><comment type="block">/*
 * Copyright 2011-2015 Samy Al Bahra.
 * Copyright 2011 David Joseph.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_barrier.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdbool.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>ck_barrier_mcs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_mcs</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nthr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/*
			 * If there are still threads that don't have parents,
			 * add it as a child.
			 */</comment>
			<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>havechild</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <name>nthr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>~</operator><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

			<comment type="block">/*
			 * childnotready is initialized to havechild to ensure
			 * a thread does not wait for a child that does not exist.
			 */</comment>
			<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>childnotready</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>havechild</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* The root thread does not have a parent. */</comment>
		<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parent</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
		    <expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dummy</name></expr> </then><else>:
		    <expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>childnotready</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

		<comment type="block">/* Leaf threads do not have any children. */</comment>
		<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>nthr</name><operator>)</operator></expr>	?</condition><then>
		    <expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dummy</name></expr> </then><else>:
		    <expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>parentsense</name></expr></else></ternary></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>nthr</name><operator>)</operator></expr>	?</condition><then>
		    <expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dummy</name></expr> </then><else>:
		    <expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>parentsense</name></expr></else></ternary></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>parentsense</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_barrier_mcs_subscribe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_mcs</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_barrier_mcs_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name> <operator>=</operator> <call><name>ck_pr_faa_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>CK_CC_INLINE</name> <specifier>static</specifier> <name>bool</name></type>
<name>ck_barrier_mcs_check_children</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>childnotready</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>childnotready</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>childnotready</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>childnotready</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>childnotready</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CK_CC_INLINE</name> <specifier>static</specifier> <name>void</name></type>
<name>ck_barrier_mcs_reinitialize_children</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_mcs</name></name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>childnotready</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>havechild</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>childnotready</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>havechild</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>childnotready</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>havechild</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>childnotready</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>havechild</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_barrier_mcs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_mcs</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_mcs_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<comment type="block">/*
	 * Wait until all children have reached the barrier and are done waiting
	 * for their children.
	 */</comment>
	<while>while <condition>(<expr><call><name>ck_barrier_mcs_check_children</name><argument_list>(<argument><expr><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name></expr>]</index></name><operator>.</operator><name>childnotready</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* Reinitialize for next barrier. */</comment>
	<expr_stmt><expr><call><name>ck_barrier_mcs_reinitialize_children</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Inform parent thread and its children have arrived at the barrier. */</comment>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name></expr>]</index></name><operator>.</operator><name>parent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait until parent indicates all threads have arrived at the barrier. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name></expr>]</index></name><operator>.</operator><name>parentsense</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Inform children of successful barrier. */</comment>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>vpid</name></name></expr>]</index></name><operator>.</operator><name><name>children</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <operator>~</operator><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
