<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_ht.c"><comment type="block">/*
 * Copyright 2012-2015 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_IM</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_ht.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * This implementation borrows several techniques from Josh Dybnis's
 * nbds library which can be found at http://code.google.com/p/nbds
 *
 * This release currently only includes support for 64-bit platforms.
 * We can address 32-bit platforms in a future release.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_md.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ck_ht_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ck_internal.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_BUCKET_LENGTH</name></cpp:ifndef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_BUCKET_SHIFT</name></cpp:macro> <cpp:value>2ULL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_BUCKET_SHIFT</name></cpp:macro> <cpp:value>1ULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_BUCKET_LENGTH</name></cpp:macro> <cpp:value>(1U &lt;&lt; CK_HT_BUCKET_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_BUCKET_MASK</name></cpp:macro> <cpp:value>(CK_HT_BUCKET_LENGTH - 1)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PROBE_DEFAULT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_PROBE_DEFAULT</name></cpp:macro> <cpp:value>64ULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_8</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_WORD</name></cpp:macro>	    <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_8(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	    <cpp:value>ck_pr_load_8(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_16</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_16</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_WORD</name></cpp:macro>	    <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_16(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	    <cpp:value>ck_pr_load_16(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_WORD</name></cpp:macro>	    <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_32(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_HT_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	    <cpp:value>ck_pr_load_32(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ck_ht is not supported on your platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ck_ht_map</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>deletions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probe_maximum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probe_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probe_limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>n_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>capacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>step</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_WORD</name> <modifier>*</modifier></type><name>probe_bound</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type>
<name>ck_ht_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_ht_stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_ht_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>uint16_t</name></type> <name>key_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name><name>table</name><operator>-&gt;</operator><name>h</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_length</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_ht_hash_direct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name>uintptr_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_ht_hash</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_ht_hash_wrapper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
    <parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>MurmurHash64A</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type>
<name>ck_ht_map_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>CK_HT_TYPE</name></type> <name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name>prefix</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_entries</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n_entries</name> <operator>=</operator> <call><name>ck_internal_power_2</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n_entries</name> <operator>&lt;</operator> <name>CK_HT_BUCKET_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n_entries</name> <operator>=</operator> <name>CK_HT_BUCKET_LENGTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_ht_map</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
		   <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_ht_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name> <operator>+</operator> <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_WORKLOAD_DELETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>prefix</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CK_HT_WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>prefix</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name> <operator>=</operator> <call><name>ck_internal_max_64</name><argument_list>(<argument><expr><name>n_entries</name> <operator>&gt;&gt;</operator>
	    <operator>(</operator><name>CK_HT_BUCKET_SHIFT</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>CK_HT_PROBE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>n_entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>ck_internal_bsf_64</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator>struct <name>ck_ht_entry</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>prefix</name> <operator>+</operator>
	    <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_WORKLOAD_DELETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>=</operator> <operator>(</operator><name>CK_HT_WORD</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_ht_entry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ck_ht_map_bound_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>CK_HT_TYPE</name></type> <name>n_probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>offset</name> <init>= <expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&lt;</operator> <name>n_probes</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;=</operator> <name>CK_HT_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n_probes</name> <operator>=</operator> <name>CK_HT_WORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>CK_HT_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>CK_HT_TYPE</name></type>
<name>ck_ht_map_bound_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>offset</name> <init>= <expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>r</name> <init>= <expr><name>CK_HT_WORD_MAX</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CK_HT_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>CK_HT_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_ht_map_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>defer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type>
<name>ck_ht_map_probe_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ck_ht_hash_t</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>stride</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>level</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>probes</name> <operator>&gt;&gt;</operator> <name>CK_HT_BUCKET_SHIFT</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>r</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>.</operator><name>value</name></name> <operator>&gt;&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>step</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>level</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>stride</name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <operator>~</operator><name>CK_HT_BUCKET_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal>
		     <operator>|</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name>CK_HT_BUCKET_MASK</name><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>level</name> <operator>+</operator>
	    <operator>(</operator><name>stride</name> <operator>|</operator> <name>CK_HT_BUCKET_LENGTH</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_cb_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
    <parameter><decl><type><name>CK_HT_TYPE</name></type> <name>entries</name></decl></parameter>,
    <parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>malloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>ck_ht_hash_wrapper</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>ck_ht_map_create</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>table</name><operator>-&gt;</operator><name>map</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type>
<name>ck_ht_map_probe_wr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>available</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>uint16_t</name></type> <name>key_length</name></decl></parameter>,
    <parameter><decl><type><name>CK_HT_TYPE</name> <modifier>*</modifier></type><name>probe_limit</name></decl></parameter>,
    <parameter><decl><type><name>CK_HT_TYPE</name> <modifier>*</modifier></type><name>probe_wr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>bucket</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>limit</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>probe_limit</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>ck_ht_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>CK_HT_TYPE_MAX</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/*
		 * Probe on a complete cache line first. Scan forward and wrap around to
		 * the beginning of the cache line. Only when the complete cache line has
		 * been scanned do we move on to the next row.
		 */</comment>
		<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator>
			     <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CK_HT_BUCKET_LENGTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint16_t</name></type> <name>k</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>bucket</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>CK_HT_BUCKET_LENGTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * It is probably worth it to encapsulate probe state
			 * in order to prevent a complete reprobe sequence in
			 * the case of intermittent writers.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>first</name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>probe_wr</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * Check memoized portion of hash value before
				 * expensive full-length comparison.
				 */</comment>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name>key_length</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cursor</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;&gt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>(</operator><name><name>h</name><operator>.</operator><name>value</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <name>CK_HT_KEY_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>hash</name></name> <operator>!=</operator> <name><name>h</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<expr_stmt><expr><name>pointer</name> <operator>=</operator> <call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_ht_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>leave</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>probe_limit</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>probe_limit</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>probe_wr</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>available</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>snapshot</name> <operator>=</operator> <operator>*</operator><name>cursor</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_gc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cycles</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CK_HT_WORD</name> <modifier>*</modifier></type><name>bounds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>ht</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>maximum</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CK_HT_WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cycles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>maximum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CK_HT_WORD</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bounds</name> <operator>=</operator> <call><name><name>ht</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>maximum</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>priority</name></decl>, <decl><type ref="prev"/><name>snapshot</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name></type> <name>h</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probes_wr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>offset</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>seed</name><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name> <operator>||</operator>
		    <name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name><name>ht</name><operator>-&gt;</operator><name>h</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>ck_ht_map_probe_wr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>,
			    <argument><expr><call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probes_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name><name>ht</name><operator>-&gt;</operator><name>h</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>ck_ht_map_probe_wr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
			    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probes_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
			<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CK_HT_KEY_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cycles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>probes_wr</name> <operator>&gt;</operator> <name>maximum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>maximum</name> <operator>=</operator> <name>probes_wr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>probes_wr</name> <operator>&gt;=</operator> <name>CK_HT_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>probes_wr</name> <operator>=</operator> <name>CK_HT_WORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>probes_wr</name> <operator>&gt;</operator> <name><name>bounds</name><index>[<expr><name>offset</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>bounds</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name>probes_wr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>--</operator><name>cycles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>maximum</name> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>bounds</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CK_HT_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>probe_bound</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bounds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name><name>ht</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type>
<name>ck_ht_map_probe_rd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier></type><name>snapshot</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>uint16_t</name></type> <name>key_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>bucket</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probe_maximum</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>d_prime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<label><name>retry</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>probe_maximum</name> <operator>=</operator> <call><name>ck_ht_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/*
		 * Probe on a complete cache line first. Scan forward and wrap around to
		 * the beginning of the cache line. Only when the complete cache line has
		 * been scanned do we move on to the next row.
		 */</comment>
		<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator>
			     <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CK_HT_BUCKET_LENGTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>uint16_t</name></type> <name>k</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>&gt;</operator> <name>probe_maximum</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>bucket</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>CK_HT_BUCKET_LENGTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
			<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>key_length</name></name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>snapshot</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cursor</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<comment type="block">/*
			 * It is probably worth it to encapsulate probe state
			 * in order to prevent a complete reprobe sequence in
			 * the case of intermittent writers.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * Check memoized portion of hash value before
				 * expensive full-length comparison.
				 */</comment>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name>key_length</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>snapshot</name><operator>-&gt;</operator><name>value</name></name> <operator>&gt;&gt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>(</operator><name><name>h</name><operator>.</operator><name>value</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <name>CK_HT_KEY_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>hash</name></name> <operator>!=</operator> <name><name>h</name><operator>.</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>d_prime</name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * It is possible that the slot was
				 * replaced, initiate a re-probe.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>d_prime</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<expr_stmt><expr><name>pointer</name> <operator>=</operator> <call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_ht_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>

<label><name>leave</name>:</label>
	<return>return <expr><name>cursor</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CK_HT_TYPE</name></type>
<name>ck_ht_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_ht_iterator</name></name> <modifier>*</modifier></type><name>i</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uintptr_t</name></type> <name>key</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <name>CK_HT_KEY_EMPTY</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>!=</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>++</operator><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name><name>i</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_reset_size_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>CK_HT_TYPE</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>update</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>update</name> <operator>=</operator> <call><name>ck_ht_map_create</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>update</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_ht_map_destroy</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_reset_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>ck_ht_reset_size_spmc</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_grow_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>CK_HT_TYPE</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>update</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>bucket</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_hash</name></name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probes</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>update</name> <operator>=</operator> <call><name>ck_ht_map_create</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>update</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>previous</name> <operator>=</operator> <operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>previous</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name> <operator>||</operator> <name><name>previous</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint16_t</name></type> <name>key_length</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>key_length</name> <operator>=</operator> <call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name><name>table</name><operator>-&gt;</operator><name>h</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_length</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>hash</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name><name>table</name><operator>-&gt;</operator><name>h</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>previous</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>previous</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>update</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>update</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>bucket</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>update</name><operator>-&gt;</operator><name>entries</name></name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>CK_HT_BUCKET_LENGTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><name>bucket</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>CK_HT_BUCKET_LENGTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>probes</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>CK_CC_LIKELY</name><argument_list>(<argument><expr><name><name>cursor</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <operator>*</operator><name>previous</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ck_ht_map_bound_set</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>CK_HT_BUCKET_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_ht_map_probe_next</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>update</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * We have hit the probe limit, the map needs to be even
			 * larger.
			 */</comment>
			<expr_stmt><expr><call><name>ck_ht_map_destroy</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>capacity</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<goto>goto <name>restart</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_ht_map_destroy</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_remove_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>candidate</name></decl>, <decl><type ref="prev"/><name>snapshot</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_rd</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>,
		    <argument><expr><call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_rd</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>,
		    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* No matching entry was found. */</comment>
	<if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>snapshot</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CK_HT_KEY_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_get_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name> <modifier>*</modifier></type><name>candidate</name></decl>, <decl><type ref="prev"/><name>snapshot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>d_prime</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Platforms that cannot read key and key_length atomically must reprobe
	 * on the scan of any single entry.
	 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_rd</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>,
		    <argument><expr><call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_rd</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>,
		    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>d_prime</name> <operator>=</operator> <call><name>CK_HT_TYPE_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>d_prime</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * It is possible we have read (K, V'). Only valid states are
		 * (K, V), (K', V') and (T, V). Restart load operation in face
		 * of concurrent deletions or replacements.
		 */</comment>
		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>snapshot</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_set_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name></type> <name>snapshot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>candidate</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>priority</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probes</name></decl>, <decl><type ref="prev"/><name>probes_wr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>empty</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_wr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>,
			    <argument><expr><call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><operator>&amp;</operator><name>probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probes_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_wr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
			    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			    <argument><expr><operator>&amp;</operator><name>probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probes_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>probes</name> <operator>=</operator> <name>probes_wr</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_ht_grow_spmc</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>empty</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>CK_HT_KEY_EMPTY</name> <operator>&amp;&amp;</operator>
	    <name>priority</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>candidate</name> <operator>!=</operator> <name>priority</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * Entry is moved into another position in probe sequence.
		 * We avoid a state of (K, B) (where [K, B] -&gt; [K', B]) by
		 * guaranteeing a forced reprobe before transitioning from K to
		 * T. (K, B) implies (K, B, D') so we will reprobe successfully
		 * from this transient state.
		 */</comment>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <name>probes_wr</name></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_HT_PP</name></cpp:ifndef>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * Readers must observe version counter change before they
		 * observe re-use. If they observe re-use, it is at most
		 * a tombstone.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>priority</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priority</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Make sure that readers who observe the tombstone would
		 * also observe counter change.
		 */</comment>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>CK_HT_KEY_TOMBSTONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * In this case we are inserting a new entry or replacing
		 * an existing entry. Yes, this can be combined into above branch,
		 * but isn't because you are actually looking at dying code
		 * (ck_ht is effectively deprecated and is being replaced soon).
		 */</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>replace</name> <init>= <expr><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>CK_HT_KEY_EMPTY</name> <operator>&amp;&amp;</operator>
		    <name><name>candidate</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>priority</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>probes</name> <operator>=</operator> <name>probes_wr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * If we are insert a new entry then increment number
		 * of entries associated with map.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>replace</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ck_ht_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enforce a load factor of 0.5. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_ht_grow_spmc</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>empty</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>CK_HT_KEY_EMPTY</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>entry</name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_ht_put_spmc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_hash_t</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>ck_ht_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_entry</name></name></type> <name>snapshot</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>candidate</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>priority</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_ht_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_HT_TYPE</name></type> <name>probes</name></decl>, <decl><type ref="prev"/><name>probes_wr</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_HT_MODE_BYTESTRING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_wr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>,
			    <argument><expr><call><name>ck_ht_entry_key</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><call><name>ck_ht_entry_key_length</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><operator>&amp;</operator><name>probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probes_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ck_ht_map_probe_wr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priority</name></expr></argument>,
			    <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
			    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			    <argument><expr><operator>&amp;</operator><name>probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>probes_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>candidate</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>priority</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ck_ht_grow_spmc</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Version counter is updated before re-use. */</comment>
		<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>deletions</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Re-use tombstone if one was found. */</comment>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>priority</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <name>probes_wr</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>CK_HT_KEY_EMPTY</name> <operator>&amp;&amp;</operator>
	    <name><name>candidate</name><operator>-&gt;</operator><name>key</name></name> <operator>!=</operator> <name>CK_HT_KEY_TOMBSTONE</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If the snapshot key is non-empty and the value field is not
		 * a tombstone then an identical key was found. As store does
		 * not implement replacement, we will fail.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_ht_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_HT_PP</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>candidate</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CK_HT_TYPE_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enforce a load factor of 0.5. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_ht_grow_spmc</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_ht_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_ht</name></name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_ht_map_destroy</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
