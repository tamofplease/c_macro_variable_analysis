<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_barrier_dissemination.c"><comment type="block">/*
 * Copyright 2011-2015 Samy Al Bahra.
 * Copyright 2011 David Joseph.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_barrier.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_spinlock.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ck_internal.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>ck_barrier_dissemination_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_dissemination</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_dissemination_flag</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>barrier_internal</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nthr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>p</name> <init>= <expr><name>nthr</name> <operator>&amp;</operator> <operator>(</operator><name>nthr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>nthr</name></name> <operator>=</operator> <name>nthr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name> <operator>=</operator> <call><name>ck_internal_log</name><argument_list>(<argument><expr><call><name>ck_internal_power_2</name><argument_list>(<argument><expr><name>nthr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>barrier_internal</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>barrier_internal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr><operator>,</operator> <expr><name>offset</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/*
			 * Determine the thread's partner, j, for the current round, k.
			 * Partners are chosen such that by the completion of the barrier,
			 * every thread has been directly (having one of its flag set) or
			 * indirectly (having one of its partners's flags set) signaled
			 * by every other thread in the barrier.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>nthr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>%</operator> <name>nthr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/* Set the thread's partner for round k. */</comment>
			<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pflag</name> <operator>=</operator> <operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>tflag</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pflag</name> <operator>=</operator> <operator>&amp;</operator><name><name>barrier</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>tflag</name></expr>;</expr_stmt>

			<comment type="block">/* Set the thread's flags to false. */</comment>
			<expr_stmt><expr><name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>tflag</name> <operator>=</operator> <name><name>barrier</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>tflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_barrier_dissemination_subscribe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_dissemination</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_dissemination_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>ck_pr_faa_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>ck_barrier_dissemination_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nthr</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><operator>(</operator><call><name>ck_internal_log</name><argument_list>(<argument><expr><call><name>ck_internal_power_2</name><argument_list>(<argument><expr><name>nthr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_barrier_dissemination</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_barrier_dissemination</name></name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_barrier_dissemination_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name> <init>= <expr><name><name>barrier</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pflag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tflag</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>pflag</name> <operator>=</operator> <name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>tid</name></name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>parity</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pflag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tflag</name> <operator>=</operator> <operator>&amp;</operator><name><name>barrier</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>tid</name></name></expr>]</index></name><operator>.</operator><name><name>flags</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>parity</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tflag</name></expr>;</expr_stmt>

		<comment type="block">/* Unblock current partner. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><name>pflag</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Wait until some other thread unblocks this one. */</comment>
		<while>while <condition>(<expr><call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><name>tflag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_pr_stall</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Dissemination barriers use two sets of flags to prevent race conditions
	 * between successive calls to the barrier. Parity indicates which set will
	 * be used for the next barrier. They also use a sense reversal technique
	 * to avoid re-initialization of the flags for every two calls to the barrier.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>parity</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>sense</name></name> <operator>=</operator> <operator>~</operator><name><name>state</name><operator>-&gt;</operator><name>sense</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>parity</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>parity</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ck_pr_fence_acquire</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
