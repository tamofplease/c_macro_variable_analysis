<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_array.c"><comment type="block">/*
 * Copyright 2013-2015 Samy Al Bahra
 * Copyright 2013-2014 AppNexus, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_array.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_string.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type>
<name>ck_array_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type><name>active</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>active</name> <operator>=</operator> <call><name><name>allocator</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>active</name><operator>-&gt;</operator><name>n_committed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>active</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

	<return>return <expr><name>active</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_array_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type><name>active</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>allocator</name><operator>-&gt;</operator><name>realloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
	    <name><name>allocator</name><operator>-&gt;</operator><name>malloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
	    <name><name>allocator</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
	    <name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>active</name> <operator>=</operator> <call><name>ck_array_create</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>active</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>allocator</name></name> <operator>=</operator> <name>allocator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_array_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If no transaction copy has been necessary, attempt to do in-place
	 * modification of the array.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>==</operator> <name><name>target</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name><name>array</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>realloc</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>,
			    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>,
			    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>,
			    <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Serialize with respect to contents. */</comment>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>transaction</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>==</operator> <name><name>target</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name><name>array</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>realloc</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>,
		    <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ck_array_put_unique</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>transaction</name><operator>-&gt;</operator><name>values</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>active</name><operator>-&gt;</operator><name>values</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>-</operator><operator>!</operator><call><name>ck_array_put</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_array_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>transaction</name></name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><operator>--</operator><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>]</index></name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If there are pending additions, immediately eliminate the operation. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>n_committed</name></name> <operator>!=</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><operator>--</operator><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The assumption is that these allocations are small to begin with.
	 * If there is no immediate opportunity for transaction, allocate a
	 * transactional array which will be applied upon commit time.
	 */</comment>
	<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>ck_array_create</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>allocator</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>active</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>n_committed</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>values</name><index>[<expr><operator>--</operator><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_array_commit</name><parameter_list>(<parameter><decl><type><name>ck_array_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>_ck_array</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>n_committed</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>array</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
		    <name><name>p</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><operator>-&gt;</operator><name>active</name><operator>-&gt;</operator><name>n_committed</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>n_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_array_deinit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name><name>array</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>active</name></name></expr></argument>,
	    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>array</name><operator>-&gt;</operator><name>active</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>defer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>array</name><operator>-&gt;</operator><name>allocator</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ck_array</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>array</name><operator>-&gt;</operator><name>transaction</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>defer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>transaction</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
