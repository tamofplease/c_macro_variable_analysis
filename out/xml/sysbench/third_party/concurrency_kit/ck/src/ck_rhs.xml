<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/third_party/concurrency_kit/ck/src/ck_rhs.c"><comment type="block">/*
 * Copyright 2014-2015 Olivier Houchard.
 * Copyright 2012-2015 Samy Al Bahra.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_cc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_rhs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_md.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_pr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ck_string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ck_internal.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_RHS_PROBE_L1_SHIFT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_PROBE_L1_SHIFT</name></cpp:macro> <cpp:value>3ULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CK_RHS_PROBE_L1_SHIFT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_PROBE_L1</name></cpp:macro> <cpp:value>(1 &lt;&lt; CK_RHS_PROBE_L1_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_PROBE_L1_MASK</name></cpp:macro> <cpp:value>(CK_RHS_PROBE_L1 - 1)</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CK_RHS_PROBE_L1_DEFAULT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_PROBE_L1_DEFAULT</name></cpp:macro> <cpp:value>CK_MD_CACHELINE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_VMA_MASK</name></cpp:macro> <cpp:value>((uintptr_t)((1ULL &lt;&lt; CK_MD_VMA_BITS) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_VMA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	\
	<cpp:value>((void *)((uintptr_t)(x) &amp; CK_RHS_VMA_MASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_EMPTY</name></cpp:macro>     <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_G</name></cpp:macro>		<cpp:value>(1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_G_MASK</name></cpp:macro>	<cpp:value>(CK_RHS_G - 1)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_8</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_WORD</name></cpp:macro>          <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT8_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_8(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>ck_pr_load_8(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_16</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_16</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_WORD</name></cpp:macro>          <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT16_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_16(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>ck_pr_load_16(x)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_LOAD_32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CK_F_PR_STORE_32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_WORD</name></cpp:macro>          <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_WORD_MAX</name></cpp:macro>	    <cpp:value>UINT32_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_STORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>ck_pr_store_32(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_LOAD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>ck_pr_load_32(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"ck_rhs is not supported on your platform."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_MAX_WANTED</name></cpp:macro>	<cpp:value>0xffff</cpp:value></cpp:define>

<enum>enum <name>ck_rhs_probe_behavior</name> <block>{
	<decl><name>CK_RHS_PROBE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,	<comment type="block">/* Default behavior. */</comment>
	<decl><name>CK_RHS_PROBE_RH</name></decl>,	<comment type="block">/* Short-circuit if RH slot found. */</comment>
	<decl><name>CK_RHS_PROBE_INSERT</name></decl>,	<comment type="block">/* Short-circuit on probe bound if tombstone found. */</comment>

	<decl><name>CK_RHS_PROBE_ROBIN_HOOD</name></decl>,<comment type="block">/* Look for the first slot available for the entry we are about to replace, only used to internally implement Robin Hood */</comment>
	<decl><name>CK_RHS_PROBE_NO_RH</name></decl>,	<comment type="block">/* Don't do the RH dance */</comment>
}</block>;</enum>
<struct>struct <name>ck_rhs_entry_desc</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>wanted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_RHS_WORD</name></type> <name>probe_bound</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>in_rh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
}</block> <decl><name>CK_CC_ALIGN</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></decl>;</struct>

<struct>struct <name>ck_rhs_no_entry_desc</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>wanted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CK_RHS_WORD</name></type> <name>probe_bound</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>in_rh</name></decl>;</decl_stmt>
}</block> <decl><name>CK_CC_ALIGN</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>;</struct>

<typedef>typedef <function_decl><type><name>long</name></type> <name>ck_rhs_probe_cb_t</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>n_probes</name></decl></parameter>,
    <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>priority</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probe_limit</name></decl></parameter>,
    <parameter><decl><type><name><name>enum</name> <name>ck_rhs_probe_behavior</name></name></type> <name>behavior</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>ck_rhs_map</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>generation</name><index>[<expr><name>CK_RHS_G</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probe_maximum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>step</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probe_limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>capacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>max_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>offset_mask</name></decl>;</decl_stmt>
	<union>union <block>{
		<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>descs</name></decl>;</decl_stmt>
		<struct>struct <name>ck_rhs_no_entry</name> <block>{
			<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_no_entry_desc</name></name> <modifier>*</modifier></type><name>descs</name></decl>;</decl_stmt>
		}</block> <decl><name>no_entries</name></decl>;</struct>
	}</block> <decl><name>entries</name></decl>;</union>
	<decl_stmt><decl><type><name>bool</name></type> <name>read_mostly</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ck_rhs_probe_cb_t</name> <modifier>*</modifier></type><name>probe_func</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>ck_rhs_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>entries</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>entry</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>ck_rhs_entry_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>entries</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>entry</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>CK_CC_INLINE</name> struct <name>ck_rhs_entry_desc</name> <operator>*</operator>
<macro><name>ck_rhs_desc</name><argument_list>(<argument>struct ck_rhs_map *map</argument>, <argument>long offset</argument>)</argument_list></macro>
<block>{

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>(</operator>struct <name>ck_rhs_entry_desc</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
}</block></expr></expr_stmt>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>void</name></type>
<name>ck_rhs_wanted_inc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>wanted</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>wanted</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>unsigned</name> <name>int</name></type>
<name>ck_rhs_probes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probes</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probes</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>void</name></type>
<name>ck_rhs_set_probes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probes</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probes</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>CK_RHS_WORD</name></type>
<name>ck_rhs_probe_bound</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probe_bound</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probe_bound</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>CK_RHS_WORD</name> <modifier>*</modifier></type>
<name>ck_rhs_probe_bound_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probe_bound</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probe_bound</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>bool</name></type>
<name>ck_rhs_in_rh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>in_rh</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>in_rh</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>void</name></type>
<name>ck_rhs_set_rh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>in_rh</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>in_rh</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CK_CC_INLINE</name> <name>void</name></type>
<name>ck_rhs_unset_rh</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>in_rh</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>in_rh</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_DEFAULT_LOAD_FACTOR</name></cpp:macro>	<cpp:value>50</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ck_rhs_probe_cb_t</name></type> <name>ck_rhs_map_probe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ck_rhs_probe_cb_t</name></type> <name>ck_rhs_map_probe_rm</name></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>ck_rhs_set_load_factor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>load_factor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>load_factor</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>load_factor</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>load_factor</name></name> <operator>=</operator> <name>load_factor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>max_entries</name></name> <operator>=</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>hs</name><operator>-&gt;</operator><name>load_factor</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>max_entries</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_rhs_iterator_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_iterator</name></name> <modifier>*</modifier></type><name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>cursor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_rhs_iterator</name></name> <modifier>*</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><call><name>ck_rhs_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>CK_RHS_EMPTY</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><operator>++</operator><name><name>i</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition>;</do>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_rhs_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_rhs_stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type>
<name>ck_rhs_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>n_entries</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_rhs_map_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>defer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ck_rhs_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>ck_rhs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type>
<name>ck_rhs_map_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>entries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>n_entries</name></decl>, <decl><type ref="prev"/><name>limit</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n_entries</name> <operator>=</operator> <call><name>ck_internal_power_2</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n_entries</name> <operator>&lt;</operator> <name>CK_RHS_PROBE_L1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n_entries</name> <operator>=</operator> <name>CK_RHS_PROBE_L1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_READ_MOSTLY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_map</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
		    <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name> <operator>+</operator>
		     <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_no_entry_desc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name> <operator>+</operator>
		     <literal type="number">2</literal> <operator>*</operator> <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_map</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
		    <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_entry_desc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name> <operator>+</operator>
		     <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>m</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_READ_MOSTLY</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<comment type="block">/* We should probably use a more intelligent heuristic for default probe length. */</comment>
	<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>ck_internal_max</name><argument_list>(<argument><expr><name>n_entries</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>CK_RHS_PROBE_L1_SHIFT</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>CK_RHS_PROBE_L1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>limit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>n_entries</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>ck_internal_bsf</name><argument_list>(<argument><expr><name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>n_entries</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>max_entries</name></name> <operator>=</operator> <operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>hs</name><operator>-&gt;</operator><name>load_factor</name></name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<comment type="block">/* Align map allocation to cache line. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>read_mostly</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
		    <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>entries</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name><operator>)</operator> <operator>+</operator> <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator><operator>~</operator> <operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>entries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_no_entry_desc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name> <operator>=</operator> <operator>(</operator><name>CK_MD_CACHELINE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name> <operator>=</operator> <name>ck_rhs_map_probe_rm</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>&amp;</operator><name><name>map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>
		    <name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>CK_MD_CACHELINE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_entry_desc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name> <operator>=</operator> <operator>(</operator><name>CK_MD_CACHELINE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ck_rhs_entry_desc</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name> <operator>=</operator> <name>ck_rhs_map_probe</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>map</name><operator>-&gt;</operator><name>generation</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Commit entries purge with respect to map publication. */</comment>
	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_reset_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>ck_rhs_map_create</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_rhs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_reset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<return>return <expr><call><name>ck_rhs_reset_size</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type>
<name>ck_rhs_map_probe_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>probes</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator><operator>~</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator> <operator>+</operator>
		    <operator>(</operator><operator>(</operator><name>offset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><name>offset</name></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>probes</name><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type>
<name>ck_rhs_map_probe_prev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>probes</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator><operator>~</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>offset</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator>
		    <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><name>offset</name></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><name>offset</name> <operator>-</operator> <name>probes</name><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ck_rhs_map_bound_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name> <init>= <expr><name>h</name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_pr_store_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>read_mostly</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>desc</name> <operator>=</operator> <operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>&lt;</operator> <name>n_probes</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n_probes</name> <operator>&gt;</operator> <name>CK_RHS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n_probes</name> <operator>=</operator> <name>CK_RHS_WORD_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>CK_RHS_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type>
<name>ck_rhs_map_bound_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name> <init>= <expr><name>h</name> <operator>&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mask</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>r</name> <init>= <expr><name>CK_RHS_WORD_MAX</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>read_mostly</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CK_RHS_LOAD</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>probe_bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>CK_RHS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_grow</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>update</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_saved</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>probes</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;</operator> <name>capacity</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>update</name> <operator>=</operator> <call><name>ck_rhs_map_create</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>update</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>prev_saved</name> <operator>=</operator> <name>previous</name> <operator>=</operator> <call><name>ck_rhs_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <name>CK_RHS_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>update</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>==</operator> <name><name>update</name><operator>-&gt;</operator><name>probe_limit</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/*
				 * We have hit the probe limit, map needs to be even larger.
				 */</comment>
				<expr_stmt><expr><call><name>ck_rhs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>capacity</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<goto>goto <name>restart</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>CK_CC_LIKELY</name><argument_list>(<argument><expr><operator>*</operator><name>cursor</name> <operator>==</operator> <name>CK_RHS_EMPTY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>prev_saved</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>update</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ck_rhs_probes</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>probes</name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>prev_saved</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old_probes</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>prev_saved</name> <operator>=</operator> <name>previous</name> <operator>=</operator> <operator>*</operator><name>cursor</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><operator>*</operator><name>cursor</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>old_probes</name> <operator>=</operator> <call><name>ck_rhs_probes</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>probes</name> <operator>=</operator> <name>old_probes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>ck_rhs_wanted_inc</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>update</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,  <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_rhs_map_destroy</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_rebuild</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>ck_rhs_map_probe_rm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>n_probes</name></decl></parameter>,
    <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>priority</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probe_limit</name></decl></parameter>,
    <parameter><decl><type><name><name>enum</name> <name>ck_rhs_probe_behavior</name></name></type> <name>behavior</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>compare</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>probes</name></decl>, <decl><type ref="prev"/><name>opl</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
	<comment type="block">/* If we are storing object pointers, then we may leverage pointer packing. */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hv</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <name>CK_RHS_KEY_MASK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 	<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>!=</operator> <name>CK_RHS_PROBE_ROBIN_HOOD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Restart from the bucket we were previously in */</comment>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <operator>*</operator><name>n_probes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>*</operator><name>priority</name></expr></argument>,
		    <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>opl</name> <operator>=</operator> <name>probe_limit</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>==</operator> <name>probe_limit</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>probe_limit</name> <operator>==</operator> <name>opl</name> <operator>||</operator> <name>pr</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CK_RHS_EMPTY</name></expr>;</expr_stmt>
				<goto>goto <name>leave</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/*
			 * If no eligible slot has been found yet, continue probe
			 * sequence with original probe limit.
			 */</comment>
			<expr_stmt><expr><name>probe_limit</name> <operator>=</operator> <name>opl</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>entries</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>CK_RHS_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>!=</operator> <name>CK_RHS_PROBE_NO_RH</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>no_entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
			    <name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>&lt;</operator> <name>probes</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pr</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>n_probes</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>CK_RHS_PROBE_RH</name> <operator>||</operator>
				    <name>behavior</name> <operator>==</operator> <name>CK_RHS_PROBE_ROBIN_HOOD</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CK_RHS_EMPTY</name></expr>;</expr_stmt>
					<goto>goto <name>leave</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>!=</operator> <name>CK_RHS_PROBE_ROBIN_HOOD</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>k</name> <operator>&gt;&gt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator> <operator>!=</operator> <name>hv</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>compare</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<label><name>leave</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>probes</name> <operator>&gt;</operator> <name>probe_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>n_probes</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>priority</name> <operator>=</operator> <name>pr</name></expr>;</expr_stmt>
	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>ck_rhs_map_probe</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>n_probes</name></decl></parameter>,
    <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>priority</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>object</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>probe_limit</name></decl></parameter>,
    <parameter><decl><type><name><name>enum</name> <name>ck_rhs_probe_behavior</name></name></type> <name>behavior</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>compare</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>pr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>probes</name></decl>, <decl><type ref="prev"/><name>opl</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
	<comment type="block">/* If we are storing object pointers, then we may leverage pointer packing. */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hv</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&amp;</operator> <name>CK_RHS_KEY_MASK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>compare</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 	<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>!=</operator> <name>CK_RHS_PROBE_ROBIN_HOOD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Restart from the bucket we were previously in */</comment>
		<expr_stmt><expr><name>probes</name> <operator>=</operator> <operator>*</operator><name>n_probes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><operator>*</operator><name>priority</name></expr></argument>,
		    <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>opl</name> <operator>=</operator> <name>probe_limit</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>CK_RHS_PROBE_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>probe_limit</name> <operator>=</operator> <call><name>ck_rhs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>probes</name><operator>++</operator> <operator>==</operator> <name>probe_limit</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>probe_limit</name> <operator>==</operator> <name>opl</name> <operator>||</operator> <name>pr</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CK_RHS_EMPTY</name></expr>;</expr_stmt>
				<goto>goto <name>leave</name>;</goto>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/*
			 * If no eligible slot has been found yet, continue probe
			 * sequence with original probe limit.
			 */</comment>
			<expr_stmt><expr><name>probe_limit</name> <operator>=</operator> <name>opl</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>CK_RHS_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>behavior</name> <operator>!=</operator> <name>CK_RHS_PROBE_NO_RH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>descs</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
			    <name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>&lt;</operator> <name>probes</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pr</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>n_probes</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>==</operator> <name>CK_RHS_PROBE_RH</name> <operator>||</operator>
				    <name>behavior</name> <operator>==</operator> <name>CK_RHS_PROBE_ROBIN_HOOD</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>k</name> <operator>=</operator> <name>CK_RHS_EMPTY</name></expr>;</expr_stmt>
					<goto>goto <name>leave</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>behavior</name> <operator>!=</operator> <name>CK_RHS_PROBE_ROBIN_HOOD</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>k</name> <operator>&gt;&gt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator> <operator>!=</operator> <name>hv</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>compare</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
<label><name>leave</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>probes</name> <operator>&gt;</operator> <name>probe_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>object</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>n_probes</name> <operator>=</operator> <name>probes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>priority</name> <operator>=</operator> <name>pr</name></expr>;</expr_stmt>
	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>ck_rhs_marshal</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>insert</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>CK_MD_VMA_BITS</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>insert</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>insert</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>h</name></expr>;</expr_stmt>

	<return>return <expr><name>key</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_gc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_probes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>max_probes</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>max_probes</name> <operator>=</operator> <call><name>ck_rhs_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name> <operator>=</operator> <name>max_probes</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_rhs_add_wanted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>end_offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>old_slot</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found_slot</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>old_slot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>found_slot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><name>offset</name> <operator>!=</operator> <name>end_offset</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>old_slot</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>found_slot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>found_slot</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name> <operator>&lt;</operator> <name>CK_RHS_MAX_WANTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>probes</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>ck_rhs_remove_wanted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>probes</name> <init>= <expr><call><name>ck_rhs_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>do_remove</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>probes</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>probes</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_prev</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>do_remove</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>do_remove</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name> <operator>!=</operator> <name>CK_RHS_MAX_WANTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>ck_rhs_get_first_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>probes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>probes</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>probes</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator><operator>~</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>&amp;=</operator> <name><name>map</name><operator>-&gt;</operator><name>mask</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&amp;</operator><operator>~</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator> <operator>+</operator>
		    <operator>(</operator><operator>(</operator><name>offset</name> <operator>-</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>probes</name> <operator>-=</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator><operator>~</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>offset</name> <operator>-</operator> <operator>(</operator><name>probes</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>offset_mask</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CK_RHS_MAX_RH</name></cpp:macro>	<cpp:value>512</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ck_rhs_put_robin_hood</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>long</name></type> <name>orig_slot</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name><name>prevs</name><index>[<expr><name>CK_RHS_MAX_RH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>prevs_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>first</name> <operator>=</operator> <name>orig_slot</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n_probes</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>probes</name></name></expr>;</expr_stmt>
<label><name>restart</name>:</label>
	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><call><name>ck_rhs_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>insert</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CK_RHS_PP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <name>CK_RHS_MODE_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>CK_RHS_VMA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>orig_slot</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_rhs_set_rh</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>orig_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>prevs_nb</name> <operator>==</operator> <name>CK_RHS_MAX_RH</name></expr> ?</condition><then>
	    <expr><name>CK_RHS_PROBE_NO_RH</name></expr> </then><else>: <expr><name>CK_RHS_PROBE_ROBIN_HOOD</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>prevs_nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ck_rhs_unset_rh</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>prevs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>old_probes</name> <init>= <expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>ck_rhs_get_first_offset</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>orig_slot</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prevs</name><index>[<expr><name>prevs_nb</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_probes</name> <operator>=</operator> <name>old_probes</name></expr>;</expr_stmt>
		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* An empty slot was found. */</comment>
		<expr_stmt><expr><name>h</name> <operator>=</operator>  <call><name>ck_rhs_get_first_offset</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_atomic_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>orig_slot</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<while>while <condition>(<expr><name>prevs_nb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>prevs</name><index>[<expr><operator>--</operator><name>prevs_nb</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>orig_slot</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>ck_rhs_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>ck_rhs_get_first_offset</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>orig_slot</name></expr></argument>,
		    <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>orig_slot</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_atomic_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>orig_slot</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>orig_slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ck_rhs_do_backward_shift_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>ck_rhs_remove_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp_offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>wanted_probes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>probe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_probes</name></decl>;</decl_stmt>

		<comment type="block">/* Find a successor */</comment>
		<while>while <condition>(<expr><name>wanted_probes</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>probe</name> <operator>=</operator> <name>wanted_probes</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>probe</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>new_desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>new_desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>==</operator> <name>probe</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>probe</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
				    <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if <condition>(<expr><name>probe</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>wanted_probes</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>wanted_probes</name> <operator>&lt;</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>wanted_probes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>ck_rhs_remove_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><call><name>ck_rhs_entry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_atomic_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>wanted_probes</name> <operator>&lt;</operator> <name>CK_RHS_WORD_MAX</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>hdesc</name> <init>= <expr><call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>hdesc</name><operator>-&gt;</operator><name>wanted</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>CK_RHS_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdesc</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>,
				    <argument><expr><name>wanted_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>hdesc</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>==</operator> <name>CK_RHS_WORD_MAX</name> <operator>||</operator>
			    <name><name>hdesc</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>==</operator> <name><name>new_desc</name><operator>-&gt;</operator><name>probes</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>probe</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>hdesc</name><operator>-&gt;</operator><name>probe_bound</name></name> <operator>==</operator> <name>CK_RHS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>max_probes</name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>probe_maximum</name></name></expr>;</expr_stmt></block_content></block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><name>max_probes</name> <operator>=</operator> <name><name>hdesc</name><operator>-&gt;</operator><name>probe_bound</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>max_probes</name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>tmp_offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
				    <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>probe</name> <operator>&lt;</operator> <name>max_probes</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>ck_rhs_get_first_offset</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>tmp_offset</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>probe</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>tmp_offset</name> <operator>=</operator> <call><name>ck_rhs_map_probe_next</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>tmp_offset</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while>
				<if_stmt><if>if <condition>(<expr><name>probe</name> <operator>==</operator> <name>max_probes</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>CK_RHS_STORE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdesc</name><operator>-&gt;</operator><name>probe_bound</name></name></expr></argument>,
					    <argument><expr><name>wanted_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name> <operator>&lt;</operator> <name>CK_RHS_MAX_WANTED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>wanted</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>new_desc</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CK_RHS_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>CK_RHS_WORD_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CK_RHS_STORE</name><argument_list>(<argument><expr><call><name>ck_rhs_probe_bound_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_fas</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc2</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>restart</name>:</label>
	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><call><name>ck_rhs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CK_RHS_PROBE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Replacement semantics presume existence. */</comment>
	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_rhs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>desc2</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ck_rhs_put_robin_hood</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>desc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>restart</name>;</goto></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_atomic_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc2</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_do_backward_shift_delete</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * An apply function takes two arguments. The first argument is a pointer to a
 * pre-existing object. The second argument is a pointer to the fifth argument
 * passed to ck_hs_apply. If a non-NULL pointer is passed to the first argument
 * and the return value of the apply function is NULL, then the pre-existing
 * value is deleted. If the return pointer is the same as the one passed to the
 * apply function then no changes are made to the hash table.  If the first
 * argument is non-NULL and the return pointer is different than that passed to
 * the apply function, then the pre-existing value is replaced. For
 * replacement, it is required that the value itself is identical to the
 * previous value.
 */</comment>
<function><type><name>bool</name></type>
<name>ck_rhs_apply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>ck_rhs_apply_fn_t</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name>  <modifier>*</modifier></type><name>object</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>delta</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>delta_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><name>CK_RHS_PROBE_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>delta_set</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>delta_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * The apply function has requested deletion. If the object doesn't exist,
		 * then exit early.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>object</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Otherwise, delete it. */</comment>
		<expr_stmt><expr><call><name>ck_rhs_do_backward_shift_delete</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The apply function has not requested hash set modification so exit early. */</comment>
	<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>==</operator> <name>object</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* A modification or insertion has been requested. */</comment>
	<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_rhs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * This follows the same semantics as ck_hs_set, please refer to that
		 * function for documentation.
		 */</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc2</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>desc2</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ck_rhs_put_robin_hood</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>desc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<comment type="block">/* If an earlier bucket was found, then store entry there. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc2</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt>
		<comment type="block">/*
		 * If a duplicate key was found, then delete it after
		 * signaling concurrent probes to restart. Optionally,
		 * it is possible to install tombstone after grace
		 * period if we can guarantee earlier position of
		 * duplicate key.
		 */</comment>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_atomic_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_rhs_do_backward_shift_delete</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * If we are storing into same slot, then atomic store is sufficient
		 * for replacement.
		 */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>)</operator> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>max_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>previous</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><name>CK_RHS_PROBE_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_rhs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>desc2</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>desc2</name> <operator>=</operator> <call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ck_rhs_put_robin_hood</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>desc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in_rh</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>restart</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<comment type="block">/* If an earlier bucket was found, then store entry there. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc2</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt>
		<comment type="block">/*
		 * If a duplicate key was found, then delete it after
		 * signaling concurrent probes to restart. Optionally,
		 * it is possible to install tombstone after grace
		 * period if we can guarantee earlier position of
		 * duplicate key.
		 */</comment>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ck_pr_inc_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_pr_fence_atomic_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ck_rhs_do_backward_shift_delete</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * If we are storing into same slot, then atomic store is sufficient
		 * for replacement.
		 */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>)</operator> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>max_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>previous</name> <operator>=</operator> <call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ck_rhs_put_internal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
    <parameter><decl><type><name><name>enum</name> <name>ck_rhs_probe_behavior</name></name></type> <name>behavior</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>insert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><name><name>map</name><operator>-&gt;</operator><name>probe_limit</name></name></expr></argument>, <argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<goto>goto <name>restart</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fail operation if a match was found. */</comment>
	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ck_rhs_map_bound_set</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>insert</name> <operator>=</operator> <call><name>ck_rhs_marshal</name><argument_list>(<argument><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_entry_desc</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>ck_rhs_desc</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ck_rhs_put_robin_hood</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>ck_rhs_put_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>CK_CC_UNLIKELY</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<comment type="block">/* Insert key into first bucket in probe sequence. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>probes</name></name> <operator>=</operator> <name>n_probes</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* An empty slot was found. */</comment>
		<expr_stmt><expr><call><name>ck_pr_store_ptr</name><argument_list>(<argument><expr><call><name>ck_rhs_entry_addr</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_set_probes</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>n_probes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_rhs_add_wanted</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name> <operator>)</operator> <operator>&gt;</operator> <name><name>map</name><operator>-&gt;</operator><name>max_entries</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ck_rhs_grow</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_rhs_put_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>CK_RHS_PROBE_INSERT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_put_unique</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<return>return <expr><call><name>ck_rhs_put_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>CK_RHS_PROBE_RH</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ck_rhs_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>g</name></decl>, <decl><type ref="prev"/><name>g_p</name></decl>, <decl><type ref="prev"/><name>probe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>generation</name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>ck_pr_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>generation</name> <operator>=</operator> <operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>generation</name><index>[<expr><name>h</name> <operator>&amp;</operator> <name>CK_RHS_G_MASK</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>probe</name>  <operator>=</operator> <call><name>ck_rhs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>, <argument><expr><name>probe</name></expr></argument>, <argument><expr><name>CK_RHS_PROBE_NO_RH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>g_p</name> <operator>=</operator> <call><name>ck_pr_load_uint</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>g</name> <operator>!=</operator> <name>g_p</name></expr>)</condition>;</do>

	<return>return <expr><call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ck_rhs_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type> <name>slot</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ck_rhs_map</name></name> <modifier>*</modifier></type><name>map</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n_probes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name><name>map</name><operator>-&gt;</operator><name>probe_func</name></name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n_probes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object</name></expr></argument>,
	    <argument><expr><call><name>ck_rhs_map_bound_get</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CK_RHS_PROBE_NO_RH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>object</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>n_entries</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ck_rhs_do_backward_shift_delete</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>CK_CC_DECONST_PTR</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
    <parameter><decl><type><name>ck_rhs_hash_cb_t</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>,
    <parameter><decl><type><name>ck_rhs_compare_cb_t</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>malloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>seed</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>map</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>load_factor</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>load_factor</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name> <operator>=</operator> <name>hf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ck_rhs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ck_rhs</name></name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,
    <parameter><decl><type><name>ck_rhs_hash_cb_t</name> <modifier>*</modifier></type><name>hf</name></decl></parameter>,
    <parameter><decl><type><name>ck_rhs_compare_cb_t</name> <modifier>*</modifier></type><name>compare</name></decl></parameter>,
    <parameter><decl><type><name><name>struct</name> <name>ck_malloc</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n_entries</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>malloc</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>free</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>hf</name></name> <operator>=</operator> <name>hf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>load_factor</name></name> <operator>=</operator> <name>CK_RHS_DEFAULT_LOAD_FACTOR</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <call><name>ck_rhs_map_create</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>hs</name><operator>-&gt;</operator><name>map</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
