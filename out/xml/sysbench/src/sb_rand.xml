<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/sb_rand.c"><comment type="block">/*
   Copyright (C) 2016-2017 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<comment type="block">/*
 * This file incorporates work covered by the following copyright and
 * permission notice:
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRING_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRINGS_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MATH_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_logger.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_ck_pr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>TLS</name> <name>sb_rng_state_t</name> <name>sb_rng_state</name></type> <name>CK_CC_CACHELINE</name></decl>;</decl_stmt>

<comment type="block">/* Exported variables */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sb_rand_seed</name></decl>;</decl_stmt> <comment type="block">/* optional seed set on the command line */</comment>

<comment type="block">/* Random numbers command line options */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>rand_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"rand-type"</literal></expr></argument>,
         <argument><expr><literal type="string">"random numbers distribution {uniform, gaussian, pareto, zipfian} "</literal>
         <literal type="string">"to use by default"</literal></expr></argument>, <argument><expr><literal type="string">"uniform"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"rand-seed"</literal></expr></argument>,
         <argument><expr><literal type="string">"seed for random number generator. When 0, the current time is "</literal>
         <literal type="string">"used as an RNG seed."</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"rand-pareto-h"</literal></expr></argument>, <argument><expr><literal type="string">"shape parameter for the Pareto distribution"</literal></expr></argument>,
         <argument><expr><literal type="string">"0.2"</literal></expr></argument>, <argument><expr><name>DOUBLE</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"rand-zipfian-exp"</literal></expr></argument>,
         <argument><expr><literal type="string">"shape parameter (exponent, theta) for the Zipfian distribution"</literal></expr></argument>,
         <argument><expr><literal type="string">"0.8"</literal></expr></argument>, <argument><expr><name>DOUBLE</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>rand_dist_t</name></type> <name>rand_type</name></decl>;</decl_stmt>
<comment type="block">/* pointer to the default PRNG as defined by --rand-type */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> (<modifier>*</modifier><name>rand_func</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rand_iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rand_pct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>rand_res</name></decl>;</decl_stmt>

<comment type="block">/*
  Pre-computed FP constants to avoid unnecessary conversions and divisions at
  runtime.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>rand_iter_mult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>rand_pct_mult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>rand_pct_2_mult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>rand_res_mult</name></decl>;</decl_stmt>

<comment type="block">/* parameters for Pareto distribution */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>pareto_h</name></decl>;</decl_stmt> <comment type="block">/* parameter h */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>pareto_power</name></decl>;</decl_stmt> <comment type="block">/* parameter pre-calculated by h */</comment>

<comment type="block">/* parameter and precomputed values for the Zipfian distribution */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>zipf_exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>zipf_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>zipf_hIntegralX1</name></decl>;</decl_stmt>

<comment type="block">/* Unique sequence generator state */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name> <name>rand_unique_index</name></type> <name>CK_CC_CACHELINE</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>rand_unique_offset</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>sb_rand_uniform_uint64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>inline</specifier> <name>double</name></type> <name>sb_rand_uniform_double</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>xoroshiro_rotl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>xoroshiro_next</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rand_unique_seed</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Helper functions for the Zipfian distribution */</comment>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>hIntegral</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>hIntegralInverse</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>h</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>helper1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>helper2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>sb_rand_register</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>sb_register_arg_set</name><argument_list>(<argument><expr><name>rand_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize random numbers generation */</comment>

<function><type><name>int</name></type> <name>sb_rand_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>sb_rand_seed</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"rand-seed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"rand-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"uniform"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>rand_type</name> <operator>=</operator> <name>DIST_TYPE_UNIFORM</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rand_func</name> <operator>=</operator> <operator>&amp;</operator><name>sb_rand_uniform</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"gaussian"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>rand_type</name> <operator>=</operator> <name>DIST_TYPE_GAUSSIAN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rand_func</name> <operator>=</operator> <operator>&amp;</operator><name>sb_rand_gaussian</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"pareto"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>rand_type</name> <operator>=</operator> <name>DIST_TYPE_PARETO</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rand_func</name> <operator>=</operator> <operator>&amp;</operator><name>sb_rand_pareto</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"zipfian"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>rand_type</name> <operator>=</operator> <name>DIST_TYPE_ZIPFIAN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rand_func</name> <operator>=</operator> <operator>&amp;</operator><name>sb_rand_zipfian</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid random numbers distribution: %s."</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>rand_iter</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"rand-spec-iter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rand_iter_mult</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>rand_iter</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rand_pct</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"rand-spec-pct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rand_pct_mult</name> <operator>=</operator> <name>rand_pct</name> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rand_pct_2_mult</name> <operator>=</operator> <name>rand_pct</name> <operator>/</operator> <literal type="number">200.0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>rand_res</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"rand-spec-res"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rand_res_mult</name> <operator>=</operator> <literal type="number">100.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">100.0</literal> <operator>-</operator> <name>rand_res</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>pareto_h</name>  <operator>=</operator> <call><name>sb_get_value_double</name><argument_list>(<argument><expr><literal type="string">"rand-pareto-h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pareto_power</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>pareto_h</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>-</operator><name>pareto_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>zipf_exp</name> <operator>=</operator> <call><name>sb_get_value_double</name><argument_list>(<argument><expr><literal type="string">"rand-zipfian-exp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>zipf_exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"--rand-zipfian-exp must be &gt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zipf_s</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <call><name>hIntegralInverse</name><argument_list>(<argument><expr><call><name>hIntegral</name><argument_list>(<argument><expr><literal type="number">2.5</literal></expr></argument>, <argument><expr><name>zipf_exp</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>h</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zipf_exp</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>zipf_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zipf_hIntegralX1</name> <operator>=</operator> <call><name>hIntegral</name><argument_list>(<argument><expr><literal type="number">1.5</literal></expr></argument>, <argument><expr><name>zipf_exp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Seed PRNG for the main thread. Worker threads do their own seeding */</comment>
  <expr_stmt><expr><call><name>sb_rand_thread_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Seed the unique sequence generator */</comment>
  <expr_stmt><expr><call><name>rand_unique_seed</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_rand_print_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pseudo-Random Numbers Generator options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_print_options</name><argument_list>(<argument><expr><name>rand_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_rand_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<comment type="block">/* Initialize thread-local RNG state */</comment>

<function><type><name>void</name></type> <name>sb_rand_thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* We use libc PRNG to seed xoroshiro128+ */</comment>
  <expr_stmt><expr><name><name>sb_rng_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
    <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>UINT32_MAX</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb_rng_state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
    <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>random</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>UINT32_MAX</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Return random number in the specified range with distribution specified
  with the --rand-type command line option
*/</comment>

<function><type><name>uint32_t</name></type> <name>sb_rand_default</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>rand_func</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* uniform distribution */</comment>

<function><type><name>uint32_t</name></type> <name>sb_rand_uniform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>a</name> <operator>+</operator> <call><name>sb_rand_uniform_double</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* gaussian distribution */</comment>

<function><type><name>uint32_t</name></type> <name>sb_rand_gaussian</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type>       <name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>       <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rand_iter</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>sb_rand_uniform_double</name><argument_list>()</argument_list></call> <operator>*</operator> <name>t</name></expr>;</expr_stmt></block_content></block></for>

  <return>return <expr><name>a</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>sum</name> <operator>*</operator> <name>rand_iter_mult</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="block">/* Pareto distribution */</comment>

<function><type><name>uint32_t</name></type> <name>sb_rand_pareto</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>a</name> <operator>+</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
                         <call><name>pow</name><argument_list>(<argument><expr><call><name>sb_rand_uniform_double</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pareto_power</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Generate random string */</comment>

<function><type><name>void</name></type> <name>sb_rand_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sb_rand_uniform</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sb_rand_uniform</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
  Generates a random string of ASCII characters between '0' and 'z' of a length
  between min and max. buf should have enough room for max len bytes. Returns
  the number of characters written into the buffer.
 */</comment>

<function><type><name>uint32_t</name></type> <name>sb_rand_varstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>min_len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>max_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>num_chars</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>max_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* we can't be sure buf is long enough to populate, so be safe */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>min_len</name> <operator>&gt;</operator> <name>max_len</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>min_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>num_chars</name> <operator>=</operator> <call><name>sb_rand_uniform</name><argument_list>(<argument><expr><name>min_len</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_chars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sb_rand_uniform</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>num_chars</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  Unique random sequence generator. This is based on public domain code from
  https://github.com/preshing/RandomSequence
*/</comment>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>rand_unique_permute</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>prime</name> <init>= <expr><call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">4294967291</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>prime</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* The 5 integers out of range are mapped to themselves. */</comment>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>residue</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>prime</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;=</operator> <name>prime</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>residue</name></expr> </then><else>: <expr><name>prime</name> <operator>-</operator> <name>residue</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>rand_unique_seed</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>rand_unique_index</name> <operator>=</operator> <call><name>rand_unique_permute</name><argument_list>(<argument><expr><call><name>rand_unique_permute</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>+</operator>
                                          <literal type="number">0x682f0161</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rand_unique_offset</name> <operator>=</operator> <call><name>rand_unique_permute</name><argument_list>(<argument><expr><call><name>rand_unique_permute</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>+</operator>
                                          <literal type="number">0x46790905</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* This is safe to be called concurrently from multiple threads */</comment>

<function><type><name>uint32_t</name></type> <name>sb_rand_unique</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>index</name> <init>= <expr><call><name>ck_pr_faa_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rand_unique_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>rand_unique_permute</name><argument_list>(<argument><expr><operator>(</operator><call><name>rand_unique_permute</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>rand_unique_offset</name><operator>)</operator> <operator>^</operator>
                             <literal type="number">0x5bf03635</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  Implementation of the Zipf distribution is based on
  RejectionInversionZipfSampler.java from the Apache Commons RNG project
  (https://commons.apache.org/proper/commons-rng/) implementing the rejection
  inversion sampling method for a descrete, bounded Zipf distribution that is in
  turn based on the method described in:

  Wolfgang HÃ¶rmann and Gerhard Derflinger. "Rejection-inversion to generate
  variates from monotone discrete distributions", ACM Transactions on Modeling
  and Computer Simulation, (TOMACS) 6.3 (1996): 169-184.
*/</comment>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>sb_rand_zipfian_int</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>s</name></decl></parameter>,
                                    <parameter><decl><type><name>double</name></type> <name>hIntegralX1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/*
    The paper describes an algorithm for exponents larger than 1 (Algorithm
    ZRI).

    The original method uses

    H(x) = (v + x)^(1 - q) / (1 - q)

    as the integral of the hat function.  This function is undefined for q = 1,
    which is the reason for the limitation of the exponent.  If instead the
    integral function

    H(x) = ((v + x)^(1 - q) - 1) / (1 - q)

    is used, for which a meaningful limit exists for q = 1, the method works for
    all positive exponents.  The following implementation uses v = 0 and
    generates integral number in the range [1, numberOfElements].  This is
    different to the original method where v is defined to be positive and
    numbers are taken from [0, i_max].  This explains why the implementation
    looks slightly different.
  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>hIntegralNumberOfElements</name> <init>= <expr><call><name>hIntegral</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>u</name> <init>= <expr><name>hIntegralNumberOfElements</name> <operator>+</operator> <call><name>sb_rand_uniform_double</name><argument_list>()</argument_list></call> <operator>*</operator>
      <operator>(</operator><name>hIntegralX1</name> <operator>-</operator> <name>hIntegralNumberOfElements</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="block">/* u is uniformly distributed in (hIntegralX1, hIntegralNumberOfElements] */</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>hIntegralInverse</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
      Limit k to the range [1, numberOfElements] if it would be outside due to
      numerical inaccuracies.
    */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>k</name> <operator>&gt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
      Here, the distribution of k is given by:

      P(k = 1) = C * (hIntegral(1.5) - hIntegralX1) = C
      P(k = m) = C * (hIntegral(m + 1/2) - hIntegral(m - 1/2)) for m &gt;= 2

      where C = 1 / (hIntegralNumberOfElements - hIntegralX1)
    */</comment>

    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>-</operator> <name>x</name> <operator>&lt;=</operator> <name>s</name> <operator>||</operator> <name>u</name> <operator>&gt;=</operator> <call><name>hIntegral</name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>h</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/*
        Case k = 1:

        The right inequality is always true, because replacing k by 1 gives u &gt;=
        hIntegral(1.5) - h(1) = hIntegralX1 and u is taken from (hIntegralX1,
        hIntegralNumberOfElements].

        Therefore, the acceptance rate for k = 1 is P(accepted | k = 1) = 1 and
        the probability that 1 is returned as random value is P(k = 1 and
        accepted) = P(accepted | k = 1) * P(k = 1) = C = C / 1^exponent

        Case k &gt;= 2:

        The left inequality (k - x &lt;= s) is just a short cut to avoid the more
        expensive evaluation of the right inequality (u &gt;= hIntegral(k + 0.5) -
        h(k)) in many cases.

        If the left inequality is true, the right inequality is also true:
          Theorem 2 in the paper is valid for all positive exponents, because
          the requirements h'(x) = -exponent/x^(exponent + 1) &lt; 0 and
          (-1/hInverse'(x))'' = (1+1/exponent) * x^(1/exponent-1) &gt;= 0 are both
          fulfilled.  Therefore, f(x) = x - hIntegralInverse(hIntegral(x + 0.5)
          - h(x)) is a non-decreasing function. If k - x &lt;= s holds, k - x &lt;= s
          + f(k) - f(2) is obviously also true which is equivalent to -x &lt;=
          -hIntegralInverse(hIntegral(k + 0.5) - h(k)), -hIntegralInverse(u) &lt;=
          -hIntegralInverse(hIntegral(k + 0.5) - h(k)), and finally u &gt;=
          hIntegral(k + 0.5) - h(k).

        Hence, the right inequality determines the acceptance rate: P(accepted |
        k = m) = h(m) / (hIntegrated(m+1/2) - hIntegrated(m-1/2)) The
        probability that m is returned is given by P(k = m and accepted) =
        P(accepted | k = m) * P(k = m) = C * h(m) = C / m^exponent.

      In both cases the probabilities are proportional to the probability mass
      function of the Zipf distribution.
      */</comment>

      <return>return <expr><name>k</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>sb_rand_zipfian</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* sb_rand_zipfian_int() returns a number in the range [1, b - a + 1] */</comment>
  <return>return <expr><name>a</name> <operator>+</operator>
    <call><name>sb_rand_zipfian_int</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>zipf_exp</name></expr></argument>, <argument><expr><name>zipf_s</name></expr></argument>, <argument><expr><name>zipf_hIntegralX1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  H(x) is defined as

  (x^(1 - exponent) - 1) / (1 - exponent), exponent != 1
  log(x), if exponent == 1

  H(x) is an integral function of h(x), the derivative of H(x) is h(x).
*/</comment>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hIntegral</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>logX</name> <init>= <expr><call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>helper2</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>e</name><operator>)</operator> <operator>*</operator> <name>logX</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>logX</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* h(x) = 1 / x^exponent */</comment>

<function><type><specifier>static</specifier> <name>double</name></type> <name>h</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><name>e</name> <operator>*</operator> <call><name>log</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The inverse function of H(x) */</comment>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hIntegralInverse</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><name>x</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator><name>e</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*
      Limit value to the range [-1, +inf).
      t could be smaller than -1 in some rare cases due to numerical errors.
    */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>exp</name><argument_list>(<argument><expr><call><name>helper1</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 Helper function that calculates log(1 + x) / x.

 A Taylor series expansion is used, if x is close to 0.
*/</comment>

<function><type><specifier>static</specifier> <name>double</name></type> <name>helper1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-8</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>log1p</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>x</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal> <operator>-</operator> <name>x</name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>-</operator> <name>x</name> <operator>*</operator> <operator>(</operator><literal type="number">0.33333333333333333</literal> <operator>-</operator> <literal type="number">0.25</literal> <operator>*</operator> <name>x</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 Helper function that calculates (exp(x) - 1) / x.

 A Taylor series expansion is used, if x is close to 0.
*/</comment>

<function><type><specifier>static</specifier> <name>double</name></type> <name>helper2</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-8</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>expm1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>x</name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">0.33333333333333333</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0.25</literal> <operator>*</operator> <name>x</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
