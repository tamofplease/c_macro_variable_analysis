<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/sb_options.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC_HEADERS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIMITS_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_DELIMITER</name></cpp:macro> <cpp:value>'='</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_SEPARATOR</name></cpp:macro> <cpp:value>','</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT_CHAR</name></cpp:macro> <cpp:value>'#'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXSTRLEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<comment type="block">/* Global options list */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_list_t</name></type> <name>options</name></decl>;</decl_stmt>

<comment type="block">/* List of size modifiers (kilo, mega, giga, tera) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>sizemods</name><index>[]</index></name> <init>= <expr><literal type="string">"KMGT"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Convert dashes to underscores in option names */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>convert_dashes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Compare option names */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_name_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
  Array of option formats as displayed by sb_print_options(). The order and
  number of elements must match sb_arg_type_t!
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>opt_formats</name><index>[]</index></name> <init>= <expr><block>{
  <expr><name>NULL</name></expr>,			<comment type="block">/* SB_ARG_TYPE_NULL */</comment>
  <expr><literal type="string">"[=on|off]"</literal></expr>,		<comment type="block">/* SB_ARG_TYPE_FLAG */</comment>
  <expr><literal type="string">"=N"</literal></expr>,			<comment type="block">/* SB_ARG_TYPE_INT */</comment>
  <expr><literal type="string">"=SIZE"</literal></expr>,		<comment type="block">/* SB_ARG_TYPE_SIZE */</comment>
  <expr><literal type="string">"=N"</literal></expr>,			<comment type="block">/* SB_ARG_TYPE_DOUBLE */</comment>
  <expr><literal type="string">"=STRING"</literal></expr>,    	<comment type="block">/* SB_ARG_TYPE_STRING */</comment>
  <expr><literal type="string">"=[LIST,...]"</literal></expr>,	<comment type="block">/* SB_ARG_TYPE_LIST */</comment>
  <expr><literal type="string">"=FILENAME"</literal></expr>		<comment type="block">/* SB_ARG_TYPE_FILE */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initialize options library */</comment>


<function><type><name>int</name></type> <name>sb_options_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Release resource allocated by the options library */</comment>

<function><type><name>int</name></type> <name>sb_options_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>free_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Register set of command line arguments */</comment>


<function><type><name>int</name></type> <name>sb_register_arg_set</name><parameter_list>(<parameter><decl><type><name>sb_arg_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>set</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>set_option</name><argument_list>(<argument><expr><name><name>set</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>set</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>, <argument><expr><name><name>set</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>validate</name></name> <operator>=</operator> <name><name>set</name><operator>-&gt;</operator><name>validate</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>option_t</name> <modifier>*</modifier></type><name>sb_find_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_config_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* read config options from file */</comment>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>read_config</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>option_t</name> <modifier>*</modifier></type><name>set_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>sb_arg_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>tmpbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>add_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>free_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>validate</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>opt</name><operator>-&gt;</operator><name>validate</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>SB_ARG_TYPE_BOOL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>opt</name></expr>;</return></block_content></block></if></if_stmt>

  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SB_ARG_TYPE_BOOL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
          <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SB_ARG_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>SB_ARG_TYPE_SIZE</name></expr>:</case>
    <case>case <expr><name>SB_ARG_TYPE_DOUBLE</name></expr>:</case>
    <case>case <expr><name>SB_ARG_TYPE_STRING</name></expr>:</case>
      <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SB_ARG_TYPE_LIST</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    <case>case <expr><name>SB_ARG_TYPE_FILE</name></expr>:</case>
      <expr_stmt><expr><call><name>read_config_file</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown argument type: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>opt</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_print_options</name><parameter_list>(<parameter><decl><type><name>sb_arg_t</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>maxlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
  
  <comment type="block">/* Count the maximum name length */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>maxlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&lt;</operator> <name>SB_ARG_TYPE_MAX</name><operator>)</operator></expr> ?</condition><then>
      <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt_formats</name><index>[<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr> <comment type="block">/* =UNKNOWN */</comment>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>&lt;</operator> <name>SB_ARG_TYPE_MAX</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>fmt</name> <operator>=</operator> <name><name>opt_formats</name><index>[<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"=UNKNOWN"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  --%s%-*s%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>maxlen</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
           <argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" [%s]"</literal></expr></argument>, <argument><expr><name><name>opts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>sb_opt_to_flag</name><parameter_list>(<parameter><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>!</operator><call><name>SB_LIST_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>sb_get_value_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>sb_opt_to_flag</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>sb_opt_to_int</name><parameter_list>(<parameter><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name>        <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>           <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

  <macro><name>SB_LIST_ONCE</name><argument_list>(<argument>pos</argument>, <argument>&amp;opt-&gt;values</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>res</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>||</operator> <name>res</name> <operator>&lt;</operator> <name>INT_MIN</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for the '%s' option: '%s'\n"</literal></expr></argument>,
              <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name></expr>;</return>
  </block_content>}</block>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>  


<function><type><name>int</name></type> <name>sb_get_value_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>sb_opt_to_int</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>sb_opt_to_size</name><parameter_list>(<parameter><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name>             <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name>      <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type>  <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>                <name>mult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                 <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>        <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>                <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

  <macro><name>SB_LIST_ONCE</name><argument_list>(<argument>pos</argument>, <argument>&amp;opt-&gt;values</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Reimplentation of sscanf(val-&gt;data, "%llu%c", &amp;res, &amp;mult), since
     * there is no standard on how to specify long long values
     */</comment>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr>;</init> <condition><expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>mult</name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>*</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
      <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>sizemods</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><name>mult</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>sizemods</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      <if_stmt><if>if <condition>(<expr><name><name>sizemods</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
      <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><name>res</name> <operator>*=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></for>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* Unknown size modifier */</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>sb_get_value_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name>            <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
 
  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>sb_opt_to_size</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>sb_opt_to_double</name><parameter_list>(<parameter><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name>        <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>          <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>&amp;opt-&gt;values</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>sb_get_value_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>sb_opt_to_double</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>sb_opt_to_string</name><parameter_list>(<parameter><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name>        <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

  <macro><name>SB_LIST_ONCE</name><argument_list>(<argument>pos</argument>, <argument>&amp;opt-&gt;values</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
  </block_content>}</block>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>sb_get_value_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>sb_opt_to_string</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>sb_opt_copy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>set_option</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><call><name>sb_opt_to_string</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_list_t</name> <modifier>*</modifier></type><name>sb_opt_to_list</name><parameter_list>(<parameter><decl><type><name>option_t</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_list_t</name> <modifier>*</modifier></type><name>sb_get_value_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>opt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>sb_opt_to_list</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type><name>sb_print_value_size</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sizemods</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>value</name> <operator>/=</operator> <literal type="number">1024</literal></expr></incr>)</control><block type="pseudo"><block_content>
    <comment type="block">/* empty */</comment> <empty_stmt>;</empty_stmt></block_content></block></for>

  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%.5g%ci"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>sizemods</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%.5g"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>value_t</name> <modifier>*</modifier></type><name>new_value</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name> <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>newval</name> <operator>=</operator> <operator>(</operator><name>value_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>newval</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>newval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>option_t</name> <modifier>*</modifier></type><name>new_option</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier></type><name>newopt</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>newopt</name> <operator>=</operator> <operator>(</operator><name>option_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>option_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>newopt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newopt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>option_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SB_LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newopt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>newopt</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>free_values</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>value_t</name>        <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <macro><name>SB_LIST_FOR_EACH_SAFE</name><argument_list>(<argument>cur</argument>, <argument>next</argument>, <argument>values</argument>)</argument_list></macro>
    <block>{<block_content>
    <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>SB_LIST_DELETE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>free_options</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <macro><name>SB_LIST_FOR_EACH_SAFE</name><argument_list>(<argument>cur</argument>, <argument>next</argument>, <argument>options</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>option_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
</block_content>}</block></function>  


<function><type><name>int</name></type> <name>remove_value</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>valname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name> <modifier>*</modifier></type>  <name>value</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>valname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>valname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SB_LIST_DELETE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>-&gt;</operator><name>listitem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>remove_option</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>optname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier></type>  <name>option</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>optname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>free_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SB_LIST_DELETE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>listitem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function> 


<function><type><name>value_t</name> <modifier>*</modifier></type><name>add_value</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>value_t</name> <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newval</name> <operator>=</operator> <call><name>new_value</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>newval</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newval</name><operator>-&gt;</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>newval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>value_t</name> <modifier>*</modifier></type><name>find_value</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>value_t</name>        <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt> 
  
  <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>values</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>value</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>option_t</name> <modifier>*</modifier></type><name>add_option</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name> <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>find_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>option</name></expr>;</return></block_content></block></if></if_stmt> 

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>new_option</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>convert_dashes</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>option</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>convert_dashes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>opt_name_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<comment type="block">/* empty */</comment><init>;</init> <condition><expr><operator>*</operator><name>s1</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>s1</name><operator>++</operator></expr><operator>,</operator> <expr><name>s2</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <operator>*</operator><name>s2</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s1</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s1</name> <operator>!=</operator> <literal type="char">'_'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>s2</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s2</name> <operator>!=</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>*</operator><name>s1</name> <operator>-</operator> <operator>*</operator><name>s2</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>option_t</name> <modifier>*</modifier></type><name>find_option</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>    
  
  <if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>options</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>option_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>opt_name_cmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>opt</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>sb_options_enum_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>SB_LIST_ENUM_START</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>sb_options_enum_next</name><parameter_list>(<parameter><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>option_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>SB_LIST_ENUM_NEXT</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>opt</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>option_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_list_t</name> <modifier>*</modifier></type><name>read_config</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>buf</name><index>[<expr><name>MAXSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name>qc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>option_t</name>    <modifier>*</modifier></type><name>newopt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>optlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nline</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>nline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXSTRLEN</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>nline</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>VALUE_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>tmp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>newopt</name> <operator>=</operator> <call><name>add_option</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>free_values</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newopt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <name>COMMENT_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <operator>*</operator><name>tmp</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>qc</name> <operator>=</operator> <operator>*</operator><name>tmp</name></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>tmp</name><operator>++</operator></expr><operator>,</operator> <expr><name>optlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>!=</operator> <name>qc</name></expr>;</condition>
             <incr><expr><name>optlen</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
          <comment type="block">/* Empty */</comment>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unexpected EOL on line %d\n"</literal></expr></argument>, <argument><expr><name>nline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>optlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newopt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <name>optlen</name></expr>;</init> <condition><expr><operator>*</operator><name>tmp</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>tmp</name> <operator>!=</operator> <name>VALUE_SEPARATOR</name></expr>;</condition> <incr><expr><name>tmp</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
          <comment type="block">/* Empty */</comment>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>tmp</name> <operator>==</operator> <name>VALUE_SEPARATOR</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><expr><name>optlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>!=</operator> <name>VALUE_SEPARATOR</name>
                         <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition>
             <incr><expr><name>optlen</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
          <comment type="block">/* Empty */</comment>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><name>optlen</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>optlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>add_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newopt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>optlen</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></while>

  <return>return <expr><name>options</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>write_config</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>option_t</name>       <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>value_t</name>        <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos_opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos_val</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>options</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos_opt</argument>, <argument>options</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos_opt</name></expr></argument>, <argument><expr><name>option_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>ignore</name></name> <operator>||</operator> <name><name>opt</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s %c "</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>VALUE_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos_val</argument>, <argument>&amp;opt-&gt;values</argument>)</argument_list></macro>
    <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos_val</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>val</name><operator>-&gt;</operator><name>ignore</name></name> <operator>&amp;&amp;</operator> <name><name>val</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SB_LIST_ITEM_LAST</name><argument_list>(<argument><expr><name>pos_val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%c "</literal></expr></argument>, <argument><expr><name>VALUE_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
    
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
