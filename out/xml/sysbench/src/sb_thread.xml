<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/sb_thread.c"><comment type="block">/*
   Copyright (C) 2016-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<comment type="block">/*
   Wrappers around pthread_create() and friends to provide necessary
   (de-)initialization.
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PTHREAD_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_PTHREAD_CANCEL</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_logger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_ck_pr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>pthread_attr_t</name></type>  <name>sb_thread_attr</name></decl>;</decl_stmt>

<comment type="block">/* Thread descriptors */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_thread_ctxt_t</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>

<comment type="block">/* Stack size for each thread */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thread_stack_size</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>sb_thread_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>thread_stack_size</name> <operator>=</operator> <call><name>sb_get_value_size</name><argument_list>(<argument><expr><literal type="string">"thread-stack-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>thread_stack_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for thread-stack-size: %d.\n"</literal></expr></argument>, <argument><expr><name>thread_stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* initialize attr */</comment>
  <expr_stmt><expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_thread_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PTHREAD_SCOPE_SYSTEM</name></cpp:ifdef>
  <expr_stmt><expr><call><name>pthread_attr_setscope</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_thread_attr</name></expr></argument>,<argument><expr><name>PTHREAD_SCOPE_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>pthread_attr_setstacksize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_thread_attr</name></expr></argument>, <argument><expr><name>thread_stack_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_THR_SETCONCURRENCY</name></cpp:ifdef>
  <comment type="block">/* Set thread concurrency (required on Solaris) */</comment>
  <expr_stmt><expr><call><name>thr_setconcurrency</name><argument_list>(<argument><expr><name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>threads</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sb_globals</name><operator>.</operator><name>threads</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sb_thread_ctxt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>threads</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failure.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sb_thread_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>threads</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_PTHREAD_CANCEL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_CANCELED</name></cpp:macro> <cpp:value>((void *) -1)</cpp:value></cpp:define>

<struct>struct <name>sb_thread_proxy</name> <block>{
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thread_cancel_signal</name> <init>= <expr><name>SIGUSR1</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_cancel_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sig</name> <operator>==</operator> <name>thread_cancel_signal</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>pthread_exit</name><argument_list>(<argument><expr><name>PTHREAD_CANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>install_thread_signal_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>action</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>thread_cancel_handler</name></expr>;</expr_stmt>
  <return>return <expr><call><name>sigaction</name><argument_list>(<argument><expr><name>thread_cancel_signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>thread_start_routine_proxy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>sb_thread_proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>start_routine</name></name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>real_arg</name> <init>= <expr><name><name>proxy</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>install_thread_signal_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>start_routine</name><argument_list>(<argument><expr><name>real_arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>sb_thread_create</name><parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,
                     <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PTHREAD_CANCEL</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>start_routine</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>sb_thread_proxy</name></name> <modifier>*</modifier></type><name>proxy</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sb_thread_proxy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>proxy</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>start_routine</name></name> <operator>=</operator> <name>start_routine</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>proxy</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>thread_start_routine_proxy</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rv</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sb_thread_join</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>retval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sb_thread_cancel</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PTHREAD_CANCEL</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_kill</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>thread_cancel_signal</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sb_thread_create_workers</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>worker_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Initializing worker threads...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>


  <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sb_thread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb_thread_attr</name></expr></argument>,
                                <argument><expr><name>worker_routine</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>threads</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"sb_thread_create() for thread #%d failed."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>sb_thread_join_workers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sb_thread_join</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"sb_thread_join() for thread #%d failed."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>ck_pr_dec_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb_globals</name><operator>.</operator><name>threads_running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
