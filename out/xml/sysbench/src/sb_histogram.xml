<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/sb_histogram.c"><comment type="block">/* Copyright (C) 2011-2018 Alexey Kopytov.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC_HEADERS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRING_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MATH_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_histogram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_logger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_rand.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_ck_pr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ck_cc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_util.h"</cpp:file></cpp:include>


<comment type="block">/*
   Number of slots for current histogram array. TODO: replace this constant with
   some autodetection code based on the number of available cores or some such.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_HISTOGRAM_NSLOTS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<comment type="block">/* Global latency histogram */</comment>
<decl_stmt><decl><type><name>sb_histogram_t</name> <name>sb_latency_histogram</name></type> <name>CK_CC_CACHELINE</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>sb_histogram_init</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
                      <parameter><decl><type><name>double</name></type> <name>range_min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Allocate memory for cumulative_array + temp_array + all slot arrays */</comment>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <operator>(</operator><name>SB_HISTOGRAM_NSLOTS</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>SB_HISTOGRAM_NSLOTS</name> <operator>*</operator>
                                         <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>interm_slots</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
             <argument><expr><literal type="string">"Failed to allocate memory for a histogram object, size = %zd"</literal></expr></argument>,
             <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>temp_array</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SB_HISTOGRAM_NSLOTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>range_deduct</name></name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><name>range_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>range_mult</name></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><call><name>log</name><argument_list>(<argument><expr><name>range_max</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>range_deduct</name></name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>range_min</name></name> <operator>=</operator> <name>range_min</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>range_max</name></name> <operator>=</operator> <name>range_max</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>array_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_histogram_update</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>slot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>     <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>sb_rand_uniform_uint64</name><argument_list>()</argument_list></call> <operator>%</operator> <name>SB_HISTOGRAM_NSLOTS</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><call><name>log</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>range_deduct</name></name><operator>)</operator> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>range_mult</name></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>array_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>array_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>ck_pr_inc_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name><index>[<expr><name>slot</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>sb_histogram_get_pct_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
                                         <parameter><decl><type><name>double</name></type> <name>percentile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>nevents</name></decl>, <decl><type ref="prev"/><name>ncur</name></decl>, <decl><type ref="prev"/><name>nmax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>   <name>res</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nevents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/*
    This can be called concurrently with other sb_histogram_get_pct_*()
    functions, so use the lock to protect shared structures. This will not block
    sb_histogram_update() calls, but we make sure we don't lose any concurrent
    increments by atomically fetching each array element and replacing it with
    0.
  */</comment>
  <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
    Merge intermediate slots into temp_array.
  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>array_size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>array</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>temp_array</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ck_pr_fas_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nevents</name> <operator>+=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>SB_HISTOGRAM_NSLOTS</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ck_pr_fas_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nevents</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="block">/*
    Now that we have an aggregate 'snapshot' of current arrays and the total
    number of events in it, calculate the current, intermediate percentile value
    to return.
  */</comment>
  <expr_stmt><expr><name>nmax</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>nevents</name> <operator>*</operator> <name>percentile</name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ncur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>ncur</name> <operator>+=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ncur</name> <operator>&gt;=</operator> <name>nmax</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <name><name>h</name><operator>-&gt;</operator><name>range_mult</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>range_deduct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Finally, add temp_array into accumulated values in cumulative_array. */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_nevents</name></name> <operator>+=</operator> <name>nevents</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
  Aggregate arrays from intermediate slots into cumulative_array. This should be
  called with the histogram lock write-locked.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_intermediate_into_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>nevents</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nevents</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cumulative_nevents</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>array_size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>array</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>SB_HISTOGRAM_NSLOTS</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><call><name>ck_pr_fas_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nevents</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_nevents</name></name> <operator>=</operator> <name>nevents</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
  Calculate a given percentile from the cumulative array. This should be called
  with the histogram lock either read- or write-locked.
*/</comment>
<function><type><specifier>static</specifier> <name>double</name></type> <name>get_pct_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>percentile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>ncur</name></decl>, <decl><type ref="prev"/><name>nmax</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nmax</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_nevents</name></name> <operator>*</operator> <name>percentile</name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ncur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>ncur</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ncur</name> <operator>&gt;=</operator> <name>nmax</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><call><name>exp</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <name><name>h</name><operator>-&gt;</operator><name>range_mult</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>range_deduct</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>sb_histogram_get_pct_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>percentile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>

  <comment type="block">/*
    This can be called concurrently with other sb_histogram_get_pct_*()
    functions, so use the lock to protect shared structures. This will not block
    sb_histogram_update() calls, but we make sure we don't lose any concurrent
    increments by atomically fetching each array element and replacing it with
    0.
  */</comment>
  <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>merge_intermediate_into_cumulative</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_pct_cumulative</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>percentile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>double</name></type> <name>sb_histogram_get_pct_checkpoint</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
                                       <parameter><decl><type><name>double</name></type> <name>percentile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type>   <name>res</name></decl>;</decl_stmt>

  <comment type="block">/*
    This can be called concurrently with other sb_histogram_get_pct_*()
    functions, so use the lock to protect shared structures. This will not block
    sb_histogram_update() calls, but we make sure we don't lose any concurrent
    increments by atomically fetching each array element and replacing it with
    0.
  */</comment>
  <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>merge_intermediate_into_cumulative</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>get_pct_cumulative</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>percentile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the cumulative array */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>array_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_nevents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_histogram_print</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>maxcnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>width</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>merge_intermediate_into_cumulative</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>array</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>maxcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>maxcnt</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>maxcnt</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>maxcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"       value  ------------- distribution ------------- count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>array_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">40</literal> <operator>/</operator> <name>maxcnt</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%12.3f |%-40.*s %lu\n"</literal></expr></argument>,
           <argument><expr><call><name>exp</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <name><name>h</name><operator>-&gt;</operator><name>range_mult</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>range_deduct</name></name></expr></argument>)</argument_list></call></expr></argument>,          <comment type="block">/* value */</comment>
           <argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="string">"****************************************"</literal></expr></argument>, <comment type="block">/* distribution */</comment>
           <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="block">/* count */</comment>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>sb_histogram_done</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cumulative_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>interm_slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Allocate a new histogram and initialize it with sb_histogram_init().
*/</comment>

<function><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>sb_histogram_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>range_min</name></decl></parameter>,
                                 <parameter><decl><type><name>double</name></type> <name>range_max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>sb_histogram_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>range_min</name></expr></argument>, <argument><expr><name>range_max</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  Deallocate a histogram allocated with sb_histogram_new().
*/</comment>

<function><type><name>void</name></type> <name>sb_histogram_delete</name><parameter_list>(<parameter><decl><type><name>sb_histogram_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>sb_histogram_done</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
