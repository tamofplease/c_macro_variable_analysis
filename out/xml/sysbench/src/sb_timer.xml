<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/sb_timer.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2017 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC_HEADERS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRING_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_logger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_timer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_util.h"</cpp:file></cpp:include>

<comment type="block">/* Some functions for simple time operations */</comment>

<comment type="block">/* initialize timer */</comment>

<function><type><name>void</name></type> <name>sb_timer_init</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_COMPILE_TIME_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_timer_t</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>CK_MD_CACHELINE</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>time_start</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timespec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>time_end</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timespec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ck_spinlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_timer_reset</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Reset timer counters, but leave the current state intact */</comment>

<function><type><name>void</name></type> <name>sb_timer_reset</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>min_time</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>max_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sum_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>queue_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Clone a timer */</comment>

<function><type><name>void</name></type> <name>sb_timer_copy</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ck_spinlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* check whether the timer is running */</comment>

<function><type><name>bool</name></type> <name>sb_timer_running</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>TIMESPEC_DIFF</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>time_start</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>time_end</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  get time elapsed since the previous call to sb_timer_current() for the
  specified timer without stopping it.  The first call returns time elapsed
  since the timer was started.
*/</comment>

<function><type><name>uint64_t</name></type> <name>sb_timer_current</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>        <name>res</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SB_GETTIME</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>TIMESPEC_DIFF</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>time_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>time_start</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  Atomically reset a given timer after copying its state into the timer pointed
  to by 'old'.
*/</comment>

<function><type><name>void</name></type> <name>sb_timer_checkpoint</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ck_spinlock_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>old</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ck_spinlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_timer_reset</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ck_spinlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* get average time per event */</comment>


<function><type><name>uint64_t</name></type> <name>sb_timer_avg</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>events</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* return zero if there were no events */</comment>
  <return>return <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>sum_time</name></name> <operator>/</operator> <name><name>t</name><operator>-&gt;</operator><name>events</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* get total time for all events */</comment>


<function><type><name>uint64_t</name></type> <name>sb_timer_sum</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>sum_time</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* get minimum time */</comment>


<function><type><name>uint64_t</name></type> <name>sb_timer_min</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>events</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>min_time</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* get maximum time */</comment>


<function><type><name>uint64_t</name></type> <name>sb_timer_max</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>t</name><operator>-&gt;</operator><name>max_time</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* sum data from several timers. used in summing data from multiple threads */</comment>


<function><type><name>sb_timer_t</name></type> <name>sb_timer_merge</name><parameter_list>(<parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>sb_timer_t</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_timer_t</name></type> <name>t</name></decl>;</decl_stmt>

  <comment type="block">/* Initialize to avoid warnings */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>sum_time</name></name> <operator>=</operator> <name><name>t1</name><operator>-&gt;</operator><name>sum_time</name></name><operator>+</operator><name><name>t2</name><operator>-&gt;</operator><name>sum_time</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name><name>t1</name><operator>-&gt;</operator><name>events</name></name><operator>+</operator><name><name>t2</name><operator>-&gt;</operator><name>events</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>max_time</name></name> <operator>&gt;</operator> <name><name>t2</name><operator>-&gt;</operator><name>max_time</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>max_time</name></name> <operator>=</operator> <name><name>t1</name><operator>-&gt;</operator><name>max_time</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> 
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>max_time</name></name> <operator>=</operator> <name><name>t2</name><operator>-&gt;</operator><name>max_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>min_time</name></name><operator>&lt;</operator><name><name>t2</name><operator>-&gt;</operator><name>min_time</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>min_time</name></name> <operator>=</operator> <name><name>t1</name><operator>-&gt;</operator><name>min_time</name></name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content> 
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>min_time</name></name> <operator>=</operator> <name><name>t2</name><operator>-&gt;</operator><name>min_time</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
     
  <return>return <expr><name>t</name></expr>;</return>       
</block_content>}</block></function>
</unit>
