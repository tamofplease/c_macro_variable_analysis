<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/db_driver.c"><comment type="block">/*
   Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC_HEADERS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRING_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRINGS_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_histogram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_ck_pr.h"</cpp:file></cpp:include>

<comment type="block">/* Query length limit for bulk insert queries */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BULK_PACKET_SIZE</name></cpp:macro> <cpp:value>(512*1024)</cpp:value></cpp:define>

<comment type="block">/* How many rows to insert before COMMITs (used in bulk insert) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_BEFORE_COMMIT</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<comment type="block">/* Global variables */</comment>
<decl_stmt><decl><type><name>db_globals_t</name> <name>db_globals</name></type> <name>CK_CC_CACHELINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_list_t</name></type>        <name>drivers</name></decl>;</decl_stmt>          <comment type="block">/* list of available DB drivers */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>stats_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>db_global_initialized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>db_global_once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Timers used in debug mode */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_timer_t</name> <modifier>*</modifier></type><name>exec_timers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_timer_t</name> <modifier>*</modifier></type><name>fetch_timers</name></decl>;</decl_stmt>

<comment type="block">/* Static functions */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>db_parse_arguments</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void db_free_row(db_row_t *);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>db_bulk_do_insert</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>db_reset_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>db_free_results_int</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* DB layer arguments */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>db_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"db-driver"</literal></expr></argument>, <argument><expr><literal type="string">"specifies database driver to use "</literal>
         <literal type="string">"('help' to get list of available drivers)"</literal></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MYSQL</name></cpp:ifdef>
         <argument><expr><literal type="string">"mysql"</literal></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
         <argument><expr><name>NULL</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"db-ps-mode"</literal></expr></argument>, <argument><expr><literal type="string">"prepared statements usage mode {auto, disable}"</literal></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>,
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"db-debug"</literal></expr></argument>, <argument><expr><literal type="string">"print database-specific debug information"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Register available database drivers and command line arguments */</comment>

<function><type><name>int</name></type> <name>db_register</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_driver_t</name>    <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

  <comment type="block">/* Register database drivers */</comment>
  <expr_stmt><expr><call><name>SB_LIST_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_MYSQL</name></cpp:ifdef>
  <expr_stmt><expr><call><name>register_driver_mysql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PGSQL</name></cpp:ifdef>
  <expr_stmt><expr><call><name>register_driver_pgsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Register command line options for each driver */</comment>
  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>&amp;drivers</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>db_driver_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>args</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>sb_register_arg_set</name><argument_list>(<argument><expr><name><name>drv</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>drv</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <comment type="block">/* Register general command line arguments for DB API */</comment>
  <expr_stmt><expr><call><name>sb_register_arg_set</name><argument_list>(<argument><expr><name>db_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Print list of available drivers and their options */</comment>


<function><type><name>void</name></type> <name>db_print_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_driver_t</name>    <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"General database options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sb_print_options</name><argument_list>(<argument><expr><name>db_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Compiled-in database drivers:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>&amp;drivers</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>db_driver_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"  %s - %s"</literal></expr></argument>, <argument><expr><name><name>drv</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name><name>drv</name><operator>-&gt;</operator><name>lname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>&amp;drivers</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>db_driver_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s options:"</literal></expr></argument>, <argument><expr><name><name>drv</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sb_print_options</name><argument_list>(<argument><expr><name><name>drv</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_print_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ck_pr_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_enabled</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>disable_print_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ck_pr_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_enabled</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ck_pr_fence_store</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_print_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>rc</name> <init>= <expr><call><name>ck_pr_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats_enabled</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ck_pr_fence_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>db_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>SB_LIST_IS_EMPTY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drivers</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No DB drivers available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>db_parse_arguments</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Initialize timers if in debug mode */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>db_globals</name><operator>.</operator><name>debug</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>exec_timers</name> <operator>=</operator> <call><name>sb_alloc_per_thread_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fetch_timers</name> <operator>=</operator> <call><name>sb_alloc_per_thread_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_timer_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>db_reset_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>enable_print_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>db_global_initialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Initialize a driver specified by 'name' and return a handle to it
  If NULL is passed as a name, then use the driver passed in --db-driver
  command line option
*/</comment>

<function><type><name>db_driver_t</name> <modifier>*</modifier></type><name>db_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_driver_t</name>    <modifier>*</modifier></type><name>drv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_driver_t</name>    <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_global_once</name></expr></argument>, <argument><expr><name>db_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db_global_initialized</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>db_globals</name><operator>.</operator><name>driver</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drivers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_driver_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Is it the only driver available? */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>drv</name><operator>-&gt;</operator><name>listitem</name></name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator>
        <call><name>SB_LIST_ITEM_PREV</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>drv</name><operator>-&gt;</operator><name>listitem</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"No DB drivers specified, using %s"</literal></expr></argument>, <argument><expr><name><name>drv</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Multiple DB drivers are available. "</literal>
               <literal type="string">"Use --db-driver=name to specify which one to use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>err</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>db_globals</name><operator>.</operator><name>driver</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>&amp;drivers</argument>)</argument_list></macro>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>db_driver_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>sname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>drv</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>drv</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"invalid database driver name: '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize database driver only once */</comment>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>drv</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>drv</name><operator>-&gt;</operator><name>initialized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>thread_init</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>thread_init</name></name><argument_list>(<argument><expr><name>sb_tls_thread_id</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"thread-local driver initialization failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>drv</name></expr>;</return>

<label><name>err</name>:</label>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Deinitialize a driver object */</comment>

<function><type><name>int</name></type> <name>db_destroy</name><parameter_list>(<parameter><decl><type><name>db_driver_t</name> <modifier>*</modifier></type><name>drv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>thread_done</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>thread_done</name></name><argument_list>(<argument><expr><name>sb_tls_thread_id</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Describe database capabilities */</comment>

<function><type><name>int</name></type> <name>db_describe</name><parameter_list>(<parameter><decl><type><name>db_driver_t</name> <modifier>*</modifier></type><name>drv</name></decl></parameter>, <parameter><decl><type><name>drv_caps_t</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>describe</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>describe</name></name><argument_list>(<argument><expr><name>caps</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Connect to database */</comment>


<function><type><name>db_conn_t</name> <modifier>*</modifier></type><name>db_connection_create</name><parameter_list>(<parameter><decl><type><name>db_driver_t</name> <modifier>*</modifier></type><name>drv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SB_COMPILE_TIME_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_conn_t</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>CK_MD_CACHELINE</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>con</name> <operator>=</operator> <operator>(</operator><name>db_conn_t</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_conn_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <name>drv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name> <operator>=</operator>  <name>sb_tls_thread_id</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>con</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Disconnect from database */</comment>


<function><type><name>int</name></type> <name>db_connection_close</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_driver_t</name> <modifier>*</modifier></type><name>drv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to close an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>disconnect</name></name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_INVALID</name></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reconnect with the same connection parameters */</comment>

<function><type><name>int</name></type> <name>db_connection_reconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_driver_t</name> <modifier>*</modifier></type><name>drv</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>driver</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>reconnect</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"reconnect is not supported by the current driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to close an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>reconnect</name></name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>DB_ERROR_FATAL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_INVALID</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name>SB_CNT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name>SB_CNT_RECONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Clear DB_ERROR_IGNORABLE */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DB_ERROR_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Disconnect and release memory allocated by a connection object */</comment>

<function><type><name>void</name></type> <name>db_connection_free</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DB_CONN_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>db_connection_close</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Prepare statement */</comment>


<function><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>db_prepare</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>(</operator><name>db_stmt_t</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_stmt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>stmt</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Bind parameters for prepared statement */</comment>


<function><type><name>int</name></type> <name>db_bind_param</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>bind_param</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Bind results for prepared statement */</comment>


<function><type><name>int</name></type> <name>db_bind_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>bind_result</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Execute prepared statement */</comment>


<function><type><name>db_result_t</name> <modifier>*</modifier></type><name>db_execute</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_result_t</name>     <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name></name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_LIKELY</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>DB_ERROR_NONE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>SB_CNT_READ</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_RESULT_SET</name></expr>;</expr_stmt>
      <return>return <expr><name>rs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Retrieve the next result of a prepared statement */</comment>

<function><type><name>db_result_t</name> <modifier>*</modifier></type><name>db_stmt_next_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_result_t</name>     <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name></name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>stmt_next_result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>stmt_next_result</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_LIKELY</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>DB_ERROR_NONE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>SB_CNT_READ</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_RESULT_SET</name></expr>;</expr_stmt>
      <return>return <expr><name>rs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Fetch row from result set of a query */</comment>


<function><type><name>db_row_t</name> <modifier>*</modifier></type><name>db_fetch_row</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>SB_CONTAINER_OF</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>db_conn_t</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DB_CONN_RESULT_SET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to fetch row from an invalid result set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>fetch_row</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"fetching rows is not supported by the driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to fetch row from an empty result set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>values</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>values</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>db_value_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>fetch_row</name></name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>row</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Execute non-prepared statement */</comment>


<function><type><name>db_result_t</name> <modifier>*</modifier></type><name>db_query</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_LIKELY</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>DB_ERROR_NONE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>SB_CNT_READ</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_RESULT_SET</name></expr>;</expr_stmt>
      <return>return <expr><name>rs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if more result sets are available */</comment>

<function><type><name>bool</name></type> <name>db_more_results</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DB_CONN_RESULT_SET</name> <operator>||</operator>
      <name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>more_results</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
      <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>more_results</name></name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Retrieve the next result set */</comment>

<function><type><name>db_result_t</name> <modifier>*</modifier></type><name>db_next_result</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name> <init>= <expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>next_result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>DB_ERROR_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>next_result</name></name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>thread_id</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_LIKELY</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>DB_ERROR_NONE</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>SB_CNT_READ</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_RESULT_SET</name></expr>;</expr_stmt>
      <return>return <expr><name>rs</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free result set */</comment>


<function><type><specifier>static</specifier> <name>int</name></type> <name>db_free_results_int</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>       <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>free_results</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>con</name><operator>-&gt;</operator><name>rs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>row</name><operator>.</operator><name>values</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>row</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>row</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>nrows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>nfields</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>statement</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>DB_CONN_READY</name></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>db_free_results</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>con</name> <init>= <expr><call><name>SB_CONTAINER_OF</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>db_conn_t</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>DB_CONN_RESULT_SET</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to free an invalid result set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Close prepared statement */</comment>


<function><type><name>int</name></type> <name>db_close</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>       <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>statement</name></name> <operator>==</operator> <name>stmt</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>con</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Uninitialize DB API */</comment>

<function><type><name>void</name></type> <name>db_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_driver_t</name>    <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db_global_initialized</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>disable_print_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>db_globals</name><operator>.</operator><name>debug</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>exec_timers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fetch_timers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>exec_timers</name> <operator>=</operator> <name>fetch_timers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>&amp;drivers</argument>)</argument_list></macro>
  <block>{<block_content>
    <expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>db_driver_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>initialized</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name><name>drv</name><operator>-&gt;</operator><name>ops</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <return>return;</return>
</block_content>}</block></function>


<comment type="block">/* Parse command line arguments */</comment>


<function><type><name>int</name></type> <name>db_parse_arguments</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"db-ps-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>db_globals</name><operator>.</operator><name>ps_mode</name></name> <operator>=</operator> <name>DB_PS_MODE_AUTO</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"disable"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>db_globals</name><operator>.</operator><name>ps_mode</name></name> <operator>=</operator> <name>DB_PS_MODE_DISABLE</name></expr>;</expr_stmt></block_content></block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for db-ps-mode: %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>db_globals</name><operator>.</operator><name>driver</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"db-driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>db_globals</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"db-debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Produce character representation of a 'bind' variable */</comment>


<function><type><name>int</name></type> <name>db_print_value</name><parameter_list>(<parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>       <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_time_t</name> <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>is_null</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>var</name><operator>-&gt;</operator><name>is_null</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>buflen</name><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>DB_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%hhd"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%hd"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_CHAR</name></expr>:</case>
    <case>case <expr><name>DB_TYPE_VARCHAR</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_DATE</name></expr>:</case>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>(</operator><name>db_time_t</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"'%d-%d-%d'"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>month</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>day</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_TIME</name></expr>:</case>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>(</operator><name>db_time_t</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"'%d:%d:%d'"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>minute</name></name></expr></argument>,
                   <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>DB_TYPE_DATETIME</name></expr>:</case>
    <case>case <expr><name>DB_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name>tm</name> <operator>=</operator> <operator>(</operator><name>db_time_t</name> <operator>*</operator><operator>)</operator><name><name>var</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"'%d-%d-%d %d:%d:%d'"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>month</name></name></expr></argument>,
                   <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>day</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>minute</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>buflen</name><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/* Free row fetched by db_fetch_row() */</comment>


void db_free_row(db_row_t *row)
{
  free(row);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Initialize multi-row insert operation */</comment>


<function><type><name>int</name></type> <name>db_bulk_insert_init</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>query_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>drv_caps_t</name></type> <name>driver_caps</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Get database capabilites */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>db_describe</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>driver_caps</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"failed to get database capabilities!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Allocate query buffer */</comment>
  <if_stmt><if>if <condition>(<expr><name>query_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>BULK_PACKET_SIZE</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
             <argument><expr><literal type="string">"Query length exceeds the maximum value (%u), aborting"</literal></expr></argument>,
             <argument><expr><name>BULK_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buflen</name></name> <operator>=</operator> <name>BULK_PACKET_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_commit_max</name></name> <operator>=</operator> <ternary><condition><expr><name><name>driver_caps</name><operator>.</operator><name>needs_commit</name></name></expr> ?</condition><then> <expr><name>ROWS_BEFORE_COMMIT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_commit_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name> <operator>=</operator> <name>query_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_values</name></name> <operator>=</operator> <name>query_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Add row to multi-row insert operation */</comment>

<function><type><name>int</name></type> <name>db_bulk_insert_next</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>query_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_INVALID</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to use an already closed connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>DB_CONN_RESULT_SET</name> <operator>&amp;&amp;</operator>
           <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>db_free_results_int</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"attempt to call bulk_insert_next() before bulk_insert_init()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    Reserve space for '\0' and ',' (if not the first chunk in
    a bulk insert
  */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name> <operator>+</operator> <name>query_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>&gt;</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_buflen</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Is this a first row? */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
               <argument><expr><literal type="string">"Query length exceeds the maximum value (%u), aborting"</literal></expr></argument>,
               <argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>db_bulk_do_insert</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name><index>[<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>+</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>+</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name> <operator>+=</operator> <name>query_len</name> <operator>+</operator> <operator>(</operator><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Do the actual INSERT (and COMMIT, if necessary) */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>db_bulk_do_insert</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_last</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>db_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
      <name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>DB_ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>


  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_commit_max</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_commit_cnt</name></name> <operator>+=</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_last</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_commit_cnt</name></name> <operator>&gt;=</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_commit_max</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>db_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
          <name><name>con</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>DB_ERROR_NONE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_commit_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_ptr</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>bulk_values</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Finish multi-row insert operation */</comment>

<function><type><name>int</name></type> <name>db_bulk_insert_done</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Flush remaining data in buffer, if any */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>db_bulk_do_insert</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>bulk_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>db_report_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Use default stats handler if no drivers are used */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_print_stats</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>sb_report_intermediate</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>seconds</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_timestamp</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>time_total</name></name></expr></argument>,
                <argument><expr><literal type="string">"thds: %u tps: %4.2f "</literal>
                <literal type="string">"qps: %4.2f (r/w/o: %4.2f/%4.2f/%4.2f) "</literal>
                <literal type="string">"lat (ms,%u%%): %4.2f err/s: %4.2f "</literal>
                <literal type="string">"reconn/s: %4.2f"</literal></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>threads_running</name></name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><operator>(</operator><name><name>stat</name><operator>-&gt;</operator><name>reads</name></name> <operator>+</operator> <name><name>stat</name><operator>-&gt;</operator><name>writes</name></name> <operator>+</operator> <name><name>stat</name><operator>-&gt;</operator><name>other</name></name><operator>)</operator> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>reads</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>writes</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>other</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>sb_globals</name><operator>.</operator><name>percentile</name></name></expr></argument>,
                <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_pct</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>errors</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>reconnects</name></name> <operator>/</operator> <name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>tx_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_timestamp</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>time_total</name></name></expr></argument>,
                  <argument><expr><literal type="string">"queue length: %"</literal> <name>PRIu64</name><literal type="string">", concurrency: %"</literal> <name>PRIu64</name></expr></argument>,
                  <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>queue_length</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>concurrency</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>db_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_timer_t</name></type>    <name>exec_timer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_timer_t</name></type>    <name>fetch_timer</name></decl>;</decl_stmt>

  <comment type="block">/* Use default stats handler if no drivers are used */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_print_stats</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>sb_report_cumulative</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>seconds</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>queries</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>reads</name></name> <operator>+</operator> <name><name>stat</name><operator>-&gt;</operator><name>writes</name></name> <operator>+</operator> <name><name>stat</name><operator>-&gt;</operator><name>other</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"SQL statistics:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    queries performed:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"        read:                            %"</literal> <name>PRIu64</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>reads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"        write:                           %"</literal> <name>PRIu64</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>writes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"        other:                           %"</literal> <name>PRIu64</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>other</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"        total:                           %"</literal> <name>PRIu64</name></expr></argument>,
           <argument><expr><name>queries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    transactions:                        %-6"</literal> <name>PRIu64</name>
           <literal type="string">" (%.2f per sec.)"</literal></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name> <operator>/</operator> <name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    queries:                             %-6"</literal> <name>PRIu64</name>
           <literal type="string">" (%.2f per sec.)"</literal></expr></argument>, <argument><expr><name>queries</name></expr></argument>,
           <argument><expr><name>queries</name> <operator>/</operator> <name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    ignored errors:                      %-6"</literal> <name>PRIu64</name>
           <literal type="string">" (%.2f per sec.)"</literal></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>errors</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>errors</name></name> <operator>/</operator> <name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    reconnects:                          %-6"</literal> <name>PRIu64</name>
           <literal type="string">" (%.2f per sec.)"</literal></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>reconnects</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>reconnects</name></name> <operator>/</operator> <name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>db_globals</name><operator>.</operator><name>debug</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>sb_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exec_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sb_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetch_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>exec_timer</name> <operator>=</operator> <call><name>sb_timer_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exec_timer</name></expr></argument>, <argument><expr><name>exec_timers</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fetch_timer</name> <operator>=</operator> <call><name>sb_timer_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetch_timer</name></expr></argument>, <argument><expr><name>fetch_timers</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Query execution statistics:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"    min:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_min</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exec_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"    avg:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_avg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exec_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"    max:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exec_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"  total:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_sum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exec_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Results fetching statistics:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"    min:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_min</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetch_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"    avg:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_avg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetch_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"    max:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_max</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetch_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"  total:                                %.4fs"</literal></expr></argument>,
             <argument><expr><call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_sum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fetch_timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Report sysbench general stats */</comment>
  <expr_stmt><expr><call><name>sb_report_cumulative</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>db_reset_stats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/*
    So that intermediate stats are calculated from the current moment
    rather than from the previous intermediate report
  */</comment>
  <expr_stmt><expr><call><name>sb_timer_current</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb_intermediate_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>db_globals</name><operator>.</operator><name>debug</name></name></expr>)</condition>
  <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><call><name>sb_timer_init</name><argument_list>(<argument><expr><name>exec_timers</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sb_timer_init</name><argument_list>(<argument><expr><name>fetch_timers</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
