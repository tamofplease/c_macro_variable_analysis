<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/sb_counter.c"><comment type="block">/*
   Copyright (C) 2017 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_counter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_ck_pr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>sb_counters_t</name> <modifier>*</modifier><name>sb_counters</name></type> <name>CK_CC_CACHELINE</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_counters_t</name></type> <name>last_intermediate_counters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_counters_t</name></type> <name>last_cumulative_counters</name></decl>;</decl_stmt>

<comment type="block">/* Initialize per-thread stats */</comment>

<function><type><name>int</name></type> <name>sb_counters_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_COMPILE_TIME_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_counters_t</name></expr></argument>)</argument_list></sizeof> <operator>%</operator> <name>CK_MD_CACHELINE</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sb_counters</name> <operator>=</operator> <call><name>sb_alloc_per_thread_array</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_counters_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>sb_counters</name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sb_counters_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sb_counters</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sb_counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sb_counters</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sb_counters_merge</name><parameter_list>(<parameter><decl><type><name>sb_counters_t</name></type> <name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>SB_CNT_MAX</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>dst</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+=</operator> <call><name>sb_counter_val</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sb_counters_checkpoint</name><parameter_list>(<parameter><decl><type><name>sb_counters_t</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sb_counters_t</name></type> <name>cp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SB_CNT_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
  Return aggregate counter values since the last intermediate report. This is
  not thread-safe as it updates the global last report state, so it must be
  called from a single thread.
*/</comment>
<function><type><name>void</name></type> <name>sb_counters_agg_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_counters_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_counters_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_counters_merge</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sb_counters_checkpoint</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>last_intermediate_counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Return aggregate counter values since the last cumulative report. This is
  not thread-safe as it updates the global last report state, so it must be
  called from a single thread.
*/</comment>
<function><type><name>void</name></type> <name>sb_counters_agg_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_counters_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_counters_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_counters_merge</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sb_counters_checkpoint</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>last_cumulative_counters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
