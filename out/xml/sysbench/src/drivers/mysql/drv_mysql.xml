<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/drivers/mysql/drv_mysql.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC_HEADERS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRING_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRINGS_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysql.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mysqld_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errmsg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_driver.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                      \
  <cpp:value>do {                                          \
    if (SB_UNLIKELY(args.debug != 0))           \
      log_text(LOG_DEBUG, format, __VA_ARGS__); \
  } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SAFESTR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MARIADB_BASE_VERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MARIADB_VERSION_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
  <name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">80001</literal> <operator>&amp;&amp;</operator> <name>MYSQL_VERSION_ID</name> <operator>!=</operator> <literal type="number">80002</literal></expr></cpp:if> <comment type="block">/* see https://bugs.mysql.com/?id=87337 */</comment>
<typedef>typedef <type><name>bool</name></type> <name>my_bool</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* MySQL driver arguments */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>mysql_drv_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-host"</literal></expr></argument>, <argument><expr><literal type="string">"MySQL server host"</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>LIST</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-port"</literal></expr></argument>, <argument><expr><literal type="string">"MySQL server port"</literal></expr></argument>, <argument><expr><literal type="string">"3306"</literal></expr></argument>, <argument><expr><name>LIST</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-socket"</literal></expr></argument>, <argument><expr><literal type="string">"MySQL socket"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LIST</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-user"</literal></expr></argument>, <argument><expr><literal type="string">"MySQL user"</literal></expr></argument>, <argument><expr><literal type="string">"sbtest"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-password"</literal></expr></argument>, <argument><expr><literal type="string">"MySQL password"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-db"</literal></expr></argument>, <argument><expr><literal type="string">"MySQL database name"</literal></expr></argument>, <argument><expr><literal type="string">"sbtest"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MYSQL_OPT_SSL_MODE</name></cpp:ifdef>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl"</literal></expr></argument>, <argument><expr><literal type="string">"SSL mode. This accepts the same values as the "</literal>
         <literal type="string">"--ssl-mode option in the MySQL client utilities. Disabled by default"</literal></expr></argument>,
         <argument><expr><literal type="string">"disabled"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl"</literal></expr></argument>, <argument><expr><literal type="string">"use SSL connections, if available in the client "</literal>
         <literal type="string">"library"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-key"</literal></expr></argument>, <argument><expr><literal type="string">"path name of the client private key file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-ca"</literal></expr></argument>, <argument><expr><literal type="string">"path name of the CA file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-cert"</literal></expr></argument>,
         <argument><expr><literal type="string">"path name of the client public key certificate file"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-cipher"</literal></expr></argument>, <argument><expr><literal type="string">"use specific cipher for SSL connections"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-compression"</literal></expr></argument>, <argument><expr><literal type="string">"use compression, if available in the "</literal>
         <literal type="string">"client library"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-debug"</literal></expr></argument>, <argument><expr><literal type="string">"trace all client library calls"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-ignore-errors"</literal></expr></argument>, <argument><expr><literal type="string">"list of errors to ignore, or \"all\""</literal></expr></argument>,
         <argument><expr><literal type="string">"1213,1020,1205"</literal></expr></argument>, <argument><expr><name>LIST</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"mysql-dry-run"</literal></expr></argument>, <argument><expr><literal type="string">"Dry run, pretend that all MySQL client API "</literal>
         <literal type="string">"calls are successful without executing them"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>sb_list_t</name>          <modifier>*</modifier></type><name>hosts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_t</name>          <modifier>*</modifier></type><name>ports</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_t</name>          <modifier>*</modifier></type><name>sockets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MYSQL_OPT_SSL_MODE</name></cpp:ifdef>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>ssl_mode</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>bool</name></type>               <name>use_ssl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>ssl_key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>ssl_cert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>ssl_ca</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         <modifier>*</modifier></type><name>ssl_cipher</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>      <name>use_compression</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type>      <name>debug</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_list_t</name>          <modifier>*</modifier></type><name>ignored_errors</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>dry_run</name></decl>;</decl_stmt>
}</block></struct></type> <name>mysql_drv_args_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>MYSQL</name>        <modifier>*</modifier></type><name>mysql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>   <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>socket</name></decl>;</decl_stmt>
}</block></struct></type> <name>db_mysql_conn_t</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MYSQL_OPT_SSL_MODE</name></cpp:ifdef>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>enum</name> <name>mysql_ssl_mode</name></name></type> <name>mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_mode_map_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Structure used for DB-to-MySQL bind types map */</comment>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>db_bind_type_t</name></type>   <name>db_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>              <name>my_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>db_mysql_bind_map_t</name>;</typedef>

<comment type="block">/* DB-to-MySQL bind types map */</comment>
<decl_stmt><decl><type><name>db_mysql_bind_map_t</name></type> <name><name>db_mysql_bind_map</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{<expr><name>DB_TYPE_TINYINT</name></expr>,   <expr><name>MYSQL_TYPE_TINY</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_SMALLINT</name></expr>,  <expr><name>MYSQL_TYPE_SHORT</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_INT</name></expr>,       <expr><name>MYSQL_TYPE_LONG</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_BIGINT</name></expr>,    <expr><name>MYSQL_TYPE_LONGLONG</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_FLOAT</name></expr>,     <expr><name>MYSQL_TYPE_FLOAT</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_DOUBLE</name></expr>,    <expr><name>MYSQL_TYPE_DOUBLE</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_DATETIME</name></expr>,  <expr><name>MYSQL_TYPE_DATETIME</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_TIMESTAMP</name></expr>, <expr><name>MYSQL_TYPE_TIMESTAMP</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_CHAR</name></expr>,      <expr><name>MYSQL_TYPE_STRING</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_VARCHAR</name></expr>,   <expr><name>MYSQL_TYPE_VAR_STRING</name></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_NONE</name></expr>,      <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* MySQL driver capabilities */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>drv_caps_t</name></type> <name>mysql_drv_caps</name> <init>=
<expr><block>{
  <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">1</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><specifier>static</specifier> <name>mysql_drv_args_t</name></type> <name>args</name></decl>;</decl_stmt>          <comment type="block">/* driver args */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>use_ps</name></decl>;</decl_stmt> <comment type="block">/* whether server-side prepared statemens should be used */</comment>

<comment type="block">/* Positions in the list of hosts/ports/sockets. Protected by pos_mutex */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_list_item_t</name> <modifier>*</modifier></type><name>hosts_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_list_item_t</name> <modifier>*</modifier></type><name>ports_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_list_item_t</name> <modifier>*</modifier></type><name>sockets_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>pos_mutex</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MYSQL_OPT_SSL_MODE</name></cpp:ifdef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MYSQL_VERSION_ID</name> <operator>&lt;</operator> <literal type="number">50711</literal></expr></cpp:if>
<comment type="block">/*
  In MySQL 5.6 the only valid SSL mode is SSL_MODE_REQUIRED. Define
  SSL_MODE_DISABLED to enable the 'disabled' default value for --mysql-ssl
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_MODE_DISABLED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ssl_mode_map_t</name></type> <name><name>ssl_mode_names</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"DISABLED"</literal></expr>, <expr><name>SSL_MODE_DISABLED</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">50711</literal></expr></cpp:if>
  <expr><block>{<expr><literal type="string">"PREFERRED"</literal></expr>, <expr><name>SSL_MODE_PREFERRED</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><block>{<expr><literal type="string">"REQUIRED"</literal></expr>, <expr><name>SSL_MODE_REQUIRED</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">50711</literal></expr></cpp:if>
  <expr><block>{<expr><literal type="string">"VERIFY_CA"</literal></expr>, <expr><name>SSL_MODE_VERIFY_CA</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"VERIFY_IDENTITY"</literal></expr>, <expr><name>SSL_MODE_VERIFY_IDENTITY</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* MySQL driver operations */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_thread_init</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_describe</name><parameter_list>(<parameter><decl><type><name>drv_caps_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_connect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_reconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_disconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_prepare</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_bind_param</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_bind_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>db_error_t</name></type> <name>mysql_drv_execute</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>db_error_t</name></type> <name>mysql_drv_stmt_next_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_fetch</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_fetch_row</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_row_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>db_error_t</name></type> <name>mysql_drv_query</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
                           <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>mysql_drv_more_results</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>db_error_t</name></type> <name>mysql_drv_next_result</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_free_results</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_close</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_thread_done</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* MySQL driver definition */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>db_driver_t</name></type> <name>mysql_driver</name> <init>=
<expr><block>{
  <expr><operator>.</operator><name>sname</name> <operator>=</operator> <literal type="string">"mysql"</literal></expr>,
  <expr><operator>.</operator><name>lname</name> <operator>=</operator> <literal type="string">"MySQL driver"</literal></expr>,
  <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>mysql_drv_args</name></expr>,
  <expr><operator>.</operator><name>ops</name> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>mysql_drv_init</name></expr>,
    <expr><operator>.</operator><name>thread_init</name> <operator>=</operator> <name>mysql_drv_thread_init</name></expr>,
    <expr><operator>.</operator><name>describe</name> <operator>=</operator> <name>mysql_drv_describe</name></expr>,
    <expr><operator>.</operator><name>connect</name> <operator>=</operator> <name>mysql_drv_connect</name></expr>,
    <expr><operator>.</operator><name>disconnect</name> <operator>=</operator> <name>mysql_drv_disconnect</name></expr>,
    <expr><operator>.</operator><name>reconnect</name> <operator>=</operator> <name>mysql_drv_reconnect</name></expr>,
    <expr><operator>.</operator><name>prepare</name> <operator>=</operator> <name>mysql_drv_prepare</name></expr>,
    <expr><operator>.</operator><name>bind_param</name> <operator>=</operator> <name>mysql_drv_bind_param</name></expr>,
    <expr><operator>.</operator><name>bind_result</name> <operator>=</operator> <name>mysql_drv_bind_result</name></expr>,
    <expr><operator>.</operator><name>execute</name> <operator>=</operator> <name>mysql_drv_execute</name></expr>,
    <expr><operator>.</operator><name>stmt_next_result</name> <operator>=</operator> <name>mysql_drv_stmt_next_result</name></expr>,
    <expr><operator>.</operator><name>fetch</name> <operator>=</operator> <name>mysql_drv_fetch</name></expr>,
    <expr><operator>.</operator><name>fetch_row</name> <operator>=</operator> <name>mysql_drv_fetch_row</name></expr>,
    <expr><operator>.</operator><name>more_results</name> <operator>=</operator> <name>mysql_drv_more_results</name></expr>,
    <expr><operator>.</operator><name>next_result</name> <operator>=</operator> <name>mysql_drv_next_result</name></expr>,
    <expr><operator>.</operator><name>free_results</name> <operator>=</operator> <name>mysql_drv_free_results</name></expr>,
    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>mysql_drv_close</name></expr>,
    <expr><operator>.</operator><name>query</name> <operator>=</operator> <name>mysql_drv_query</name></expr>,
    <expr><operator>.</operator><name>thread_done</name> <operator>=</operator> <name>mysql_drv_thread_done</name></expr>,
    <expr><operator>.</operator><name>done</name> <operator>=</operator> <name>mysql_drv_done</name></expr>
  }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Local functions */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_mysql_bind_type</name><parameter_list>(<parameter><decl><type><name>db_bind_type_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Register MySQL driver */</comment>


<function><type><name>int</name></type> <name>register_driver_mysql</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>drivers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mysql_driver</name><operator>.</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>drivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* MySQL driver initialization */</comment>


<function><type><name>int</name></type> <name>mysql_drv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>hosts</name></name> <operator>=</operator> <call><name>sb_get_value_list</name><argument_list>(<argument><expr><literal type="string">"mysql-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SB_LIST_IS_EMPTY</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>hosts</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No MySQL hosts specified, aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>hosts_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>hosts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ports</name></name> <operator>=</operator> <call><name>sb_get_value_list</name><argument_list>(<argument><expr><literal type="string">"mysql-port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SB_LIST_IS_EMPTY</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>ports</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"No MySQL ports specified, aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ports_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>sockets</name></name> <operator>=</operator> <call><name>sb_get_value_list</name><argument_list>(<argument><expr><literal type="string">"mysql-socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sockets_pos</name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>sockets</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>password</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ssl_cipher</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ssl_key</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ssl_cert</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ssl_ca</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl-ca"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MYSQL_OPT_SSL_MODE</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ssl_mode_string</name> <init>= <expr><call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ssl_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ssl_mode_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>ssl_mode_string</name></expr></argument>, <argument><expr><name><name>ssl_mode_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ssl_mode</name></name> <operator>=</operator> <name><name>ssl_mode_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mode</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>ssl_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for --mysql-ssl: '%s'"</literal></expr></argument>, <argument><expr><name>ssl_mode_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>use_ssl</name></name> <operator>=</operator> <operator>(</operator><name><name>args</name><operator>.</operator><name>ssl_mode</name></name> <operator>!=</operator> <name>SSL_MODE_DISABLED</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>use_ssl</name></name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"mysql-ssl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>use_compression</name></name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"mysql-compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"mysql-debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>debug</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>sb_globals</name><operator>.</operator><name>verbosity</name></name> <operator>=</operator> <name>LOG_DEBUG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>ignored_errors</name></name> <operator>=</operator> <call><name>sb_get_value_list</name><argument_list>(<argument><expr><literal type="string">"mysql-ignore-errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>dry_run</name></name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"mysql-dry-run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>use_ps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mysql_drv_caps</name><operator>.</operator><name>prepared_statements</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db_globals</name><operator>.</operator><name>ps_mode</name></name> <operator>!=</operator> <name>DB_PS_MODE_DISABLE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>use_ps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_library_init(%d, %p, %p)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_library_init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Thread-local driver initialization */</comment>

<function><type><name>int</name></type> <name>mysql_drv_thread_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>my_bool</name></type> <name>rc</name> <init>= <expr><call><name>mysql_thread_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_thread_init() = %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Thread-local driver deinitialization */</comment>

<function><type><name>int</name></type> <name>mysql_drv_thread_done</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_thread_end(%s)"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_thread_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Describe database capabilities */</comment>

<function><type><name>int</name></type> <name>mysql_drv_describe</name><parameter_list>(<parameter><decl><type><name>drv_caps_t</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>caps</name> <operator>=</operator> <name>mysql_drv_caps</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_real_connect</name><parameter_list>(<parameter><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL</name>          <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MYSQL_OPT_SSL_MODE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_options(%p,%s,%d)"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"MYSQL_OPT_SSL_MODE"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssl_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>MYSQL_OPT_SSL_MODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>args</name><operator>.</operator><name>ssl_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>use_ssl</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_ssl_set(%p, \"%s\", \"%s\", \"%s\", NULL, \"%s\")"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>,
          <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>ssl_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>ssl_cert</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>ssl_ca</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>ssl_cipher</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mysql_ssl_set</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssl_key</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssl_cert</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>ssl_ca</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                  <argument><expr><name><name>args</name><operator>.</operator><name>ssl_cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>use_compression</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_options(%p, %s, %s)"</literal></expr></argument>,<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"MYSQL_OPT_COMPRESS"</literal></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_options</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>MYSQL_OPT_COMPRESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_real_connect(%p, \"%s\", \"%s\", \"%s\", \"%s\", %u, \"%s\", %s)"</literal></expr></argument>,
        <argument><expr><name>con</name></expr></argument>,
        <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
        <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">50000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"CLIENT_MULTI_STATEMENTS"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>mysql_real_connect</name><argument_list>(<argument><expr><name>con</name></expr></argument>,
                            <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,
                            <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>user</name></name></expr></argument>,
                            <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>password</name></name></expr></argument>,
                            <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                            <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
                            <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MYSQL_VERSION_ID</name> <operator>&gt;=</operator> <literal type="number">50000</literal></expr></cpp:if>
                            <argument><expr><name>CLIENT_MULTI_STATEMENTS</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <literal type="number">0</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            )</argument_list></call> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Connect to MySQL database */</comment>


<function><type><name>int</name></type> <name>mysql_drv_connect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL</name>           <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>db_mysql_con</name> <operator>=</operator> <operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_mysql_conn_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>db_mysql_con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>con</name> <operator>=</operator> <operator>(</operator><name>MYSQL</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MYSQL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_init(%p)"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_LIST_IS_EMPTY</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>sockets</name></name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>hosts_pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator>
      <call><name>atoi</name><argument_list>(<argument><expr><call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>ports_pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
       Pick the next port in args.ports. If there are no more ports in the list,
       move to the next available host and get the first port again.
    */</comment>
    <expr_stmt><expr><name>ports_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>ports_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ports_pos</name> <operator>==</operator> <name><name>args</name><operator>.</operator><name>ports</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hosts_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>hosts_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>hosts_pos</name> <operator>==</operator> <name><name>args</name><operator>.</operator><name>hosts</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hosts_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>hosts_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>ports_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>ports_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <literal type="string">"localhost"</literal></expr>;</expr_stmt>

    <comment type="block">/*
       The sockets list may be empty. So unlike hosts/ports the loop invariant
       here is that sockets_pos points to the previous one and should be
       advanced before using it, not after.
     */</comment>
    <expr_stmt><expr><name>sockets_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>sockets_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sockets_pos</name> <operator>==</operator> <name><name>args</name><operator>.</operator><name>sockets</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>sockets_pos</name> <operator>=</operator> <call><name>SB_LIST_ITEM_NEXT</name><argument_list>(<argument><expr><name>sockets_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>socket</name></name> <operator>=</operator> <call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>sockets_pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pos_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>password</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>password</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>db</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_drv_real_connect</name><argument_list>(<argument><expr><name>db_mysql_con</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SB_LIST_IS_EMPTY</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>sockets</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to MySQL server on socket '%s', "</literal>
               <literal type="string">"aborting..."</literal></expr></argument>, <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to MySQL server on host '%s', "</literal>
               <literal type="string">"port %u, aborting..."</literal></expr></argument>,
               <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"error %d: %s"</literal></expr></argument>, <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db_mysql_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>use_ssl</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_get_ssl_cipher(con): \"%s\""</literal></expr></argument>,
          <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><call><name>mysql_get_ssl_cipher</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>db_mysql_con</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Disconnect from MySQL database */</comment>


<function><type><name>int</name></type> <name>mysql_drv_disconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name> <init>= <expr><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>db_mysql_con</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_close(%p)"</literal></expr></argument>, <argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db_mysql_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Prepare statement */</comment>


<function><type><name>int</name></type> <name>mysql_drv_prepare</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_STMT</name> <modifier>*</modifier></type><name>mystmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name> <init>= <expr><operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name>      <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>use_ps</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>mystmt</name> <operator>=</operator> <call><name>mysql_stmt_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_init(%p) = %p"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>mystmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mystmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mysql_stmt_init() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>mystmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_prepare(%p, \"%s\", %u) = %p"</literal></expr></argument>, <argument><expr><name>mystmt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>,
          <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_stmt_prepare</name><argument_list>(<argument><expr><name>mystmt</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Check if this statement in not supported */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mysql_errno</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_errno(%p) = %u"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>ER_UNSUPPORTED_PS</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>,
                 <argument><expr><literal type="string">"Failed to prepare query \"%s\" (%d: %s), using emulation"</literal></expr></argument>,
                 <argument><expr><name>query</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>emulate</name>;</goto>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mysql_stmt_prepare() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"MySQL error: %d \"%s\""</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_close(%p)"</literal></expr></argument>, <argument><expr><name>mystmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mysql_stmt_close</name><argument_list>(<argument><expr><name>mystmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

 <label><name>emulate</name>:</label>

  <comment type="block">/* Use client-side PS */</comment>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_to_mysql_bind</name><parameter_list>(<parameter><decl><type><name>MYSQL_BIND</name> <modifier>*</modifier></type><name>mybind</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>mybind</name><operator>-&gt;</operator><name>buffer_type</name></name> <operator>=</operator> <call><name>get_mysql_bind_type</name><argument_list>(<argument><expr><name><name>bind</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mybind</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>bind</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mybind</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <name><name>bind</name><operator>-&gt;</operator><name>max_len</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mybind</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>bind</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt>
  <comment type="block">/*
    Reuse the buffer passed by the caller to avoid conversions. This is only
    valid if sizeof(char) == sizeof(mybind-&gt;is_null[0]). Depending on the
    version of the MySQL client library, the type of MYSQL_BIND::is_null[0] can
    be either my_bool or bool, but sizeof(bool) is not defined by the C
    standard. We assume it to be 1 on most platforms to simplify code and Lua
    API.
  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_BOOL</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:error># <cpp:directive>error</cpp:directive> This code assumes sizeof(bool) == 1!</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>mybind</name><operator>-&gt;</operator><name>is_null</name></name> <operator>=</operator> <operator>(</operator><name>my_bool</name> <operator>*</operator><operator>)</operator> <name><name>bind</name><operator>-&gt;</operator><name>is_null</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Bind parameters for prepared statement */</comment>


<function><type><name>int</name></type> <name>mysql_drv_bind_param</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_BIND</name>   <modifier>*</modifier></type><name>bind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>my_bool</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>param_count</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name> <init>= <expr><operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name>        <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Validate parameters count */</comment>
    <expr_stmt><expr><name>param_count</name> <operator>=</operator> <call><name>mysql_stmt_param_count</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_param_count(%p) = %lu"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>param_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>param_count</name> <operator>!=</operator> <name>len</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Wrong number of parameters to mysql_stmt_bind_param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Convert sysbench bind structures to MySQL ones */</comment>
    <expr_stmt><expr><name>bind</name> <operator>=</operator> <operator>(</operator><name>MYSQL_BIND</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MYSQL_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>convert_to_mysql_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mysql_stmt_bind_param</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_bind_param(%p, %p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mysql_stmt_bind_param() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"MySQL error: %d \"%s\""</literal></expr></argument>, <argument><expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>mysql_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Use emulation */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>=</operator> <operator>(</operator><name>db_bind_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>db_bind_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>db_bind_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>


<comment type="block">/* Bind results for prepared statement */</comment>


<function><type><name>int</name></type> <name>mysql_drv_bind_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_BIND</name>   <modifier>*</modifier></type><name>bind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>my_bool</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name> <init>=<expr><operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name>        <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Convert sysbench bind structures to MySQL ones */</comment>
  <expr_stmt><expr><name>bind</name> <operator>=</operator> <operator>(</operator><name>MYSQL_BIND</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MYSQL_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>convert_to_mysql_bind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>mysql_stmt_bind_result</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_bind_result(%p, %p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Reset connection to the server by reconnecting with the same parameters. */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mysql_drv_reconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_con</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name> <init>= <expr><operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator> <name><name>sb_con</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Reconnecting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_close(%p)"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mysql_close</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name>mysql_drv_real_connect</name><argument_list>(<argument><expr><name>db_mysql_con</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Reconnected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>DB_ERROR_IGNORABLE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
  Check if the error in a given connection should be fatal or ignored according
  to the list of errors in --mysql-ignore-errors.
*/</comment>


<function><type><specifier>static</specifier> <name>db_error_t</name></type> <name>check_error</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>sb_counter_type_t</name> <modifier>*</modifier></type><name>counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>   <name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name> <init>= <expr><operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator> <name><name>sb_con</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name>          <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>error</name> <init>= <expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_errno(%p) = %u"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>error</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_state</name></name> <operator>=</operator> <call><name>mysql_sqlstate</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_state(%p) = %s"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errmsg</name></name> <operator>=</operator> <call><name>mysql_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_error(%p) = %s"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><call><name>SAFESTR</name><argument_list>(<argument><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
    Check if the error code is specified in --mysql-ignore-errors, and return
    DB_ERROR_IGNORABLE if so, or DB_ERROR_FATAL otherwise
  */</comment>
  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>args.ignored_errors</argument>)</argument_list></macro>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>tmp</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring error %u %s, "</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check if we should reconnect */</comment>
      <switch>switch <condition>(<expr><name>error</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>CR_SERVER_LOST</name></expr>:</case>
      <case>case <expr><name>CR_SERVER_GONE_ERROR</name></expr>:</case>
      <case>case <expr><name>CR_TCP_CONNECTION</name></expr>:</case>
      <case>case <expr><name>CR_SERVER_LOST_EXTENDED</name></expr>:</case>

        <expr_stmt><expr><operator>*</operator><name>counter</name> <operator>=</operator> <name>SB_CNT_RECONNECT</name></expr>;</expr_stmt>

        <return>return <expr><call><name>mysql_drv_reconnect</name><argument_list>(<argument><expr><name>sb_con</name></expr></argument>)</argument_list></call></expr>;</return>

      <default>default:</default>

        <break>break;</break>
      </block_content>}</block></switch>

      <expr_stmt><expr><operator>*</operator><name>counter</name> <operator>=</operator> <name>SB_CNT_ERROR</name></expr>;</expr_stmt>

      <return>return <expr><name>DB_ERROR_IGNORABLE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s returned error %u (%s) for query '%s'"</literal></expr></argument>,
             <argument><expr><name>func</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s returned error %u (%s)"</literal></expr></argument>,
             <argument><expr><name>func</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>sb_con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>counter</name> <operator>=</operator> <name>SB_CNT_ERROR</name></expr>;</expr_stmt>

  <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Execute prepared statement */</comment>


<function><type><name>db_error_t</name></type> <name>mysql_drv_execute</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>vcnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name>need_realloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>n</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errmsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
               <argument><expr><literal type="string">"ERROR: exiting mysql_drv_execute(), uninitialized statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>mysql_stmt_execute</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_execute(%p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"mysql_stmt_execute()"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mysql_stmt_store_result</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_store_result(%p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"mysql_stmt_store_result()"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mysql_stmt_errno</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>mysql_stmt_field_count</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_stmt_affected_rows</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_affected_rows(%p) = %u"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SB_CNT_WRITE</name></expr> </then><else>: <expr><name>SB_CNT_OTHER</name></expr></else></ternary></expr>;</expr_stmt>

      <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_READ</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_stmt_num_rows</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_num_rows(%p) = %u"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_stmt_field_count</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_field_count(%p) = %u"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Use emulation */</comment>
  <comment type="block">/* Build the actual query string from parameters list */</comment>
  <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
  <label><name>again</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name>buflen</name> <operator>||</operator> <name>need_realloc</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>buflen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>buflen</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ERROR: exiting mysql_drv_execute(), memory allocation failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>db_print_value</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>+</operator> <name>vcnt</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>buflen</name> <operator>-</operator> <name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vcnt</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>db_error_t</name></type> <name>rc</name> <init>= <expr><call><name>mysql_drv_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Retrieve the next result of a prepared statement */</comment>

<function><type><name>db_error_t</name></type> <name>mysql_drv_stmt_next_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errmsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>mysql_drv_next_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
               <argument><expr><literal type="string">"ERROR: exiting mysql_drv_stmt_next_result(), "</literal>
               <literal type="string">"uninitialized statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>mysql_stmt_next_result</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_next_result(%p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"mysql_drv_stmt_next_result()"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>,
                       <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_OTHER</name></expr>;</expr_stmt>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mysql_stmt_store_result</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_store_result(%p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><literal type="string">"mysql_stmt_store_result()"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>mysql_stmt_errno</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <call><name>mysql_stmt_field_count</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_stmt_affected_rows</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_affected_rows(%p) = %u"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SB_CNT_WRITE</name></expr> </then><else>: <expr><name>SB_CNT_OTHER</name></expr></else></ternary></expr>;</expr_stmt>

    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_READ</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_stmt_num_rows</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_num_rows(%p) = %u"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_stmt_field_count</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_field_count(%p) = %u"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Execute SQL query */</comment>


<function><type><name>db_error_t</name></type> <name>mysql_drv_query</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                           <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errmsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>db_mysql_con</name> <operator>=</operator> <operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>mysql_real_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_real_query(%p, \"%s\", %zd) = %d"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>, <argument><expr><literal type="string">"mysql_drv_query()"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Store results and get query type */</comment>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_store_result(%p) = %p"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>mysql_field_count</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Not a select. Check if it was a DML */</comment>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>nrows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_affected_rows</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_WRITE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <name>nrows</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_OTHER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>, <argument><expr><literal type="string">"mysql_store_result()"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_READ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>mysql_num_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_num_rows(%p) = %u"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>=</operator> <call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_num_fields(%p) = %u"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Fetch row from result set of a prepared statement */</comment>


<function><type><name>int</name></type> <name>mysql_drv_fetch</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* NYI */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rs</name></expr>;</expr_stmt>  <comment type="block">/* unused */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fetch row from result set of a query */</comment>

<function><type><name>int</name></type> <name>mysql_drv_fetch_row</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>db_row_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>MYSQL_ROW</name></type> <name>my_row</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>my_row</name> <operator>=</operator> <call><name>mysql_fetch_row</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_fetch_row(%p) = %p"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>my_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><call><name>mysql_fetch_lengths</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_fetch_lengths(%p) = %p"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lengths</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_IGNORABLE</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name><name>my_row</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Check if more result sets are available */</comment>

<function><type><name>bool</name></type> <name>mysql_drv_more_results</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>db_mysql_con</name> <operator>=</operator> <operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>mysql_more_results</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_more_results(%p) = %d"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Retrieve the next result set */</comment>

<function><type><name>db_error_t</name></type> <name>mysql_drv_next_result</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_mysql_conn_t</name> <modifier>*</modifier></type><name>db_mysql_con</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MYSQL</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_state</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errmsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>db_mysql_con</name> <operator>=</operator> <operator>(</operator><name>db_mysql_conn_t</name> <operator>*</operator><operator>)</operator><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>db_mysql_con</name><operator>-&gt;</operator><name>mysql</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>mysql_next_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_next_result(%p) = %d"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>SB_UNLIKELY</name><argument_list>(<argument><expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>, <argument><expr><literal type="string">"mysql_drv_next_result()"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_OTHER</name></expr>;</expr_stmt>
    <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Store results and get query type */</comment>
  <decl_stmt><decl><type><name>MYSQL_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>mysql_store_result</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_store_result(%p) = %p"</literal></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mysql_errno</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>mysql_field_count</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Not a select. Check if it was a DML */</comment>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>nrows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>mysql_affected_rows</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_WRITE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <name>nrows</name></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_OTHER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>check_error</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>, <argument><expr><literal type="string">"mysql_store_result()"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_READ</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>mysql_num_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_num_rows(%p) = %u"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>=</operator> <call><name>mysql_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_num_fields(%p) = %u"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free result set */</comment>

<function><type><name>int</name></type> <name>mysql_drv_free_results</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Is this a result set of a prepared statement? */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>emulated</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_free_result(%p)"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_stmt_free_result</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>statement</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_free_result(%p)"</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mysql_free_result</name><argument_list>(<argument><expr><operator>(</operator><name>MYSQL_RES</name> <operator>*</operator><operator>)</operator><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Close prepared statement */</comment>


<function><type><name>int</name></type> <name>mysql_drv_close</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>mysql_stmt_close</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DEBUG</name><argument_list>(<argument><expr><literal type="string">"mysql_stmt_close(%p) = %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Uninitialize driver */</comment>
<function><type><name>int</name></type> <name>mysql_drv_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>dry_run</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>mysql_library_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Map SQL data type to bind_type value in MYSQL_BIND */</comment>

<function><type><name>int</name></type> <name>get_mysql_bind_type</name><parameter_list>(<parameter><decl><type><name>db_bind_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>db_mysql_bind_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_type</name> <operator>!=</operator> <name>DB_TYPE_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>db_mysql_bind_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_type</name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>db_mysql_bind_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>my_type</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
