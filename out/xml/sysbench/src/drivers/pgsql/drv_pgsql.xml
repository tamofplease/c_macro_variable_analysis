<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/drivers/pgsql/drv_pgsql.c"><comment type="block">/* Copyright (C) 2005 MySQL AB
   Copyright (C) 2005-2017 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRING_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRINGS_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_options.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_driver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_rand.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xfree</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>({ if (ptr) free((void *)ptr); ptr = NULL; })</cpp:value></cpp:define>

<comment type="block">/* Maximum length of text representation of bind parameters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARAM_LENGTH</name></cpp:macro> <cpp:value>256UL</cpp:value></cpp:define>

<comment type="block">/* PostgreSQL driver arguments */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>pgsql_drv_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"pgsql-host"</literal></expr></argument>, <argument><expr><literal type="string">"PostgreSQL server host"</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"pgsql-port"</literal></expr></argument>, <argument><expr><literal type="string">"PostgreSQL server port"</literal></expr></argument>, <argument><expr><literal type="string">"5432"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"pgsql-user"</literal></expr></argument>, <argument><expr><literal type="string">"PostgreSQL user"</literal></expr></argument>, <argument><expr><literal type="string">"sbtest"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"pgsql-password"</literal></expr></argument>, <argument><expr><literal type="string">"PostgreSQL password"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"pgsql-db"</literal></expr></argument>, <argument><expr><literal type="string">"PostgreSQL database name"</literal></expr></argument>, <argument><expr><literal type="string">"sbtest"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"pgsql-sslmode"</literal></expr></argument>, <argument><expr><literal type="string">"PostgreSQL SSL mode (disable, allow, prefer, require, verify-ca, verify-full)"</literal></expr></argument>, <argument><expr><literal type="string">"prefer"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>password</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
}</block></struct></type> <name>pgsql_drv_args_t</name>;</typedef>

<comment type="block">/* Structure used for DB-to-PgSQL bind types map */</comment>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>db_bind_type_t</name></type>   <name>db_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>              <name>pg_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>db_pgsql_bind_map_t</name>;</typedef>

<comment type="block">/* DB-to-PgSQL bind types map */</comment>
<decl_stmt><decl><type><name>db_pgsql_bind_map_t</name></type> <name><name>db_pgsql_bind_map</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{<expr><name>DB_TYPE_TINYINT</name></expr>,   <expr><literal type="number">0</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_SMALLINT</name></expr>,  <expr><literal type="number">21</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_INT</name></expr>,       <expr><literal type="number">23</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_BIGINT</name></expr>,    <expr><literal type="number">20</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_FLOAT</name></expr>,     <expr><literal type="number">700</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_DOUBLE</name></expr>,    <expr><literal type="number">701</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_DATETIME</name></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_TIMESTAMP</name></expr>, <expr><literal type="number">1114</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_CHAR</name></expr>,      <expr><literal type="number">18</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_VARCHAR</name></expr>,   <expr><literal type="number">1043</literal></expr>}</block></expr>,
  <expr><block>{<expr><name>DB_TYPE_NONE</name></expr>,      <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* PgSQL driver capabilities */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>drv_caps_t</name></type> <name>pgsql_drv_caps</name> <init>=
<expr><block>{
  <expr><literal type="number">1</literal></expr>,    <comment type="block">/* multi_rows_insert */</comment>
  <expr><literal type="number">1</literal></expr>,    <comment type="block">/* prepared_statements */</comment>
  <expr><literal type="number">0</literal></expr>,    <comment type="block">/* auto_increment */</comment>
  <expr><literal type="number">0</literal></expr>,    <comment type="block">/* needs_commit */</comment>
  <expr><literal type="number">1</literal></expr>,    <comment type="block">/* serial */</comment>
  <expr><literal type="number">0</literal></expr>,    <comment type="block">/* unsigned int */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Describes the PostgreSQL prepared statement */</comment>
<typedef>typedef <type><struct>struct <name>pg_stmt</name>
<block>{
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>prepared</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>nparams</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name>      <modifier>*</modifier></type><name>ptypes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier><modifier>*</modifier></type><name>pvalues</name></decl>;</decl_stmt>
}</block></struct></type> <name>pg_stmt_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>pgsql_drv_args_t</name></type> <name>args</name></decl>;</decl_stmt>          <comment type="block">/* driver args */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>use_ps</name></decl>;</decl_stmt> <comment type="block">/* whether server-side prepared statemens should be used */</comment>

<comment type="block">/* PgSQL driver operations */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_describe</name><parameter_list>(<parameter><decl><type><name>drv_caps_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_connect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_disconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_reconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_prepare</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_bind_param</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_bind_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>db_error_t</name></type> <name>pgsql_drv_execute</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_fetch</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_fetch_row</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>db_row_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>db_error_t</name></type> <name>pgsql_drv_query</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
                                  <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_free_results</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_close</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pgsql_drv_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* PgSQL driver definition */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>db_driver_t</name></type> <name>pgsql_driver</name> <init>=
<expr><block>{
  <expr><operator>.</operator><name>sname</name> <operator>=</operator> <literal type="string">"pgsql"</literal></expr>,
  <expr><operator>.</operator><name>lname</name> <operator>=</operator> <literal type="string">"PostgreSQL driver"</literal></expr>,
  <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>pgsql_drv_args</name></expr>,
  <expr><operator>.</operator><name>ops</name> <operator>=</operator>
  <block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>pgsql_drv_init</name></expr>,
    <expr><operator>.</operator><name>describe</name> <operator>=</operator> <name>pgsql_drv_describe</name></expr>,
    <expr><operator>.</operator><name>connect</name> <operator>=</operator> <name>pgsql_drv_connect</name></expr>,
    <expr><operator>.</operator><name>disconnect</name> <operator>=</operator> <name>pgsql_drv_disconnect</name></expr>,
    <expr><operator>.</operator><name>reconnect</name> <operator>=</operator> <name>pgsql_drv_reconnect</name></expr>,
    <expr><operator>.</operator><name>prepare</name> <operator>=</operator> <name>pgsql_drv_prepare</name></expr>,
    <expr><operator>.</operator><name>bind_param</name> <operator>=</operator> <name>pgsql_drv_bind_param</name></expr>,
    <expr><operator>.</operator><name>bind_result</name> <operator>=</operator> <name>pgsql_drv_bind_result</name></expr>,
    <expr><operator>.</operator><name>execute</name> <operator>=</operator> <name>pgsql_drv_execute</name></expr>,
    <expr><operator>.</operator><name>fetch</name> <operator>=</operator> <name>pgsql_drv_fetch</name></expr>,
    <expr><operator>.</operator><name>fetch_row</name> <operator>=</operator> <name>pgsql_drv_fetch_row</name></expr>,
    <expr><operator>.</operator><name>free_results</name> <operator>=</operator> <name>pgsql_drv_free_results</name></expr>,
    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>pgsql_drv_close</name></expr>,
    <expr><operator>.</operator><name>query</name> <operator>=</operator> <name>pgsql_drv_query</name></expr>,
    <expr><operator>.</operator><name>done</name> <operator>=</operator> <name>pgsql_drv_done</name></expr>
  }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Local functions */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_pgsql_bind_type</name><parameter_list>(<parameter><decl><type><name>db_bind_type_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_unique_stmt_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Register PgSQL driver */</comment>


<function><type><name>int</name></type> <name>register_driver_pgsql</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>drivers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgsql_driver</name><operator>.</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>drivers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* PgSQL driver initialization */</comment>

<function><type><name>int</name></type> <name>pgsql_drv_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"pgsql-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"pgsql-port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"pgsql-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>password</name></name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"pgsql-password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>dbname</name> <init>= <expr><call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"pgsql-db"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>sslmode</name> <init>= <expr><call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"pgsql-sslmode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"dbname= sslmode="</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                   <call><name>strlen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call> <operator>+</operator>
                   <call><name>strlen</name><argument_list>(<argument><expr><name>sslmode</name></expr></argument>)</argument_list></call> <operator>+</operator>
                   <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"dbname=%s sslmode=%s"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>sslmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>use_ps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pgsql_drv_caps</name><operator>.</operator><name>prepared_statements</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>db_globals</name><operator>.</operator><name>ps_mode</name></name> <operator>!=</operator> <name>DB_PS_MODE_DISABLE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>use_ps</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Describe database capabilities */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_describe</name><parameter_list>(<parameter><decl><type><name>drv_caps_t</name> <modifier>*</modifier></type><name>caps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>caps</name> <operator>=</operator> <name>pgsql_drv_caps</name></expr>;</expr_stmt>

  <comment type="block">/* Determine the server version */</comment>
  <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>PQsetdbLogin</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>host</name></name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>port</name></name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>db</name></name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>user</name></name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Connection to database failed: %s"</literal></expr></argument>,
             <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Support for multi-row INSERTs is not available before 8.2 */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>PQserverVersion</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">80200</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>caps</name><operator>-&gt;</operator><name>multi_rows_insert</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>empty_notice_processor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>msg</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
</block_content>}</block></function>

<comment type="block">/* Connect to database */</comment>

<function><type><name>int</name></type> <name>pgsql_drv_connect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>PQsetdbLogin</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>host</name></name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>port</name></name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>db</name></name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>user</name></name></expr></argument>,
                     <argument><expr><name><name>args</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Connection to database failed: %s"</literal></expr></argument>,
             <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Silence the default notice receiver spitting NOTICE message to stderr */</comment>
  <expr_stmt><expr><call><name>PQsetNoticeProcessor</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>empty_notice_processor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Disconnect from database */</comment>

<function><type><name>int</name></type> <name>pgsql_drv_disconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* These might be allocated in pgsql_check_status() */</comment>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Disconnect from database */</comment>

<function><type><name>int</name></type> <name>pgsql_drv_reconnect</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>pgsql_drv_disconnect</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><call><name>pgsql_drv_connect</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>DB_ERROR_IGNORABLE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Prepare statement */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_prepare</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PGconn</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PGresult</name>     <modifier>*</modifier></type><name>pgres</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pg_stmt_t</name>    <modifier>*</modifier></type><name>pgstmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vcnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>need_realloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>          <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>len</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_ps</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Use client-side PS */</comment>
    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Convert query to PgSQL-style named placeholders */</comment>
  <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vcnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>buflen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>query</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
  <label><name>again</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name>buflen</name> <operator>||</operator> <name>need_realloc</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>buflen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>buflen</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>query</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"$%d"</literal></expr></argument>, <argument><expr><name>vcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>buflen</name> <operator>-</operator> <name>j</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vcnt</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <comment type="block">/* Store the query to be prepared later on the first bind_param call */</comment>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>pgstmt</name> <operator>=</operator> <operator>(</operator><name>pg_stmt_t</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_stmt_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pgstmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <comment type="block">/* Generate random statement name */</comment>
  <expr_stmt><expr><call><name>get_unique_stmt_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <name>vcnt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/*
    Special keys for statements without parameters, since we don't need
    to know the types of arguments, and no calls to bind_param() will be made
  */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Do prepare */</comment>
    <expr_stmt><expr><name>pgres</name> <operator>=</operator> <call><name>PQprepare</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>,
                      <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"PQprepare() failed: %s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pgstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>prepared</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>pgstmt</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>

 <label><name>error</name>:</label>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Bind parameters for prepared statement */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_bind_param</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PGconn</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PGresult</name>     <modifier>*</modifier></type><name>pgres</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pg_stmt_t</name>    <modifier>*</modifier></type><name>pgstmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>=</operator> <operator>(</operator><name>db_bind_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>db_bind_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>db_bind_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
 
  <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pgstmt</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>prepared</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Prepare statement here, since we need to know types of parameters */</comment>
  <comment type="block">/* Validate parameters count */</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>!=</operator> <name>len</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"wrong number of parameters in prepared statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"counted: %d, passed to bind_param(): %zd"</literal></expr></argument>,
             <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>ptypes</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>ptypes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Convert sysbench data types to PgSQL ones */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>ptypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_pgsql_bind_type</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* Do prepare */</comment>
  <expr_stmt><expr><name>pgres</name> <operator>=</operator> <call><name>PQprepare</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>,
                    <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>ptypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"PQprepare() failed: %s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
  <comment type="block">/* Allocate buffers for bind parameters */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>MAX_PARAM_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>prepared</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Bind results for prepared statement */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_bind_result</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_bind_t</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* unused */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>stmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>params</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Check query execution status */</comment>


<function><type><specifier>static</specifier> <name>db_error_t</name></type> <name>pgsql_check_status</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>pgres</name></decl></parameter>,
                                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
                                     <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ExecStatusType</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_error_t</name></type>     <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PGconn</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pgcon</name> <init>= <expr><name><name>con</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>PGRES_TUPLES_OK</name></expr>:</case>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_READ</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DB_ERROR_NONE</name></expr>;</expr_stmt>

    <break>break;</break>

  <case>case <expr><name>PGRES_COMMAND_OK</name></expr>:</case>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><call><name>PQcmdTuples</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>SB_CNT_WRITE</name></expr> </then><else>: <expr><name>SB_CNT_OTHER</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DB_ERROR_NONE</name></expr>;</expr_stmt>

    <comment type="block">/*
      Since we are not returning a result set, the SQL layer will never call
      pgsql_drv_free_results(). So we must call PQclear() here.
    */</comment>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>

  <case>case <expr><name>PGRES_FATAL_ERROR</name></expr>:</case>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_ERROR</name></expr>;</expr_stmt>

    <comment type="block">/*
      Duplicate strings here, because PostgreSQL will deallocate them on
      PQclear() call below. They will be deallocated either on subsequent calls
      to pgsql_check_status() or in pgsql_drv_disconnect().
    */</comment>
    <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errmsg</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>, <argument><expr><literal type="string">"40P01"</literal></expr></argument>)</argument_list></call> <comment type="block">/* deadlock_detected */</comment> <operator>||</operator>
        <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>, <argument><expr><literal type="string">"23505"</literal></expr></argument>)</argument_list></call> <comment type="block">/* unique violation */</comment> <operator>||</operator>
        <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>, <argument><expr><literal type="string">"40001"</literal></expr></argument>)</argument_list></call></expr>)</condition><comment type="block">/* serialization_failure */</comment>
    <block>{<block_content>
      <decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>pgcon</name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DB_ERROR_IGNORABLE</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s() failed: %d %s"</literal></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
               <argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>query</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"failed query was: %s"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator>  <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pgres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>

  <default>default:</default>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>SB_CNT_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>DB_ERROR_FATAL</name></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Execute prepared statement */</comment>


<function><type><name>db_error_t</name></type> <name>pgsql_drv_execute</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>db_conn_t</name>       <modifier>*</modifier></type><name>con</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PGconn</name>          <modifier>*</modifier></type><name>pgcon</name> <init>= <expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><name><name>con</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PGresult</name>        <modifier>*</modifier></type><name>pgres</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pg_stmt_t</name>       <modifier>*</modifier></type><name>pgstmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>            <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>vcnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name>need_realloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>             <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_error_t</name></type>      <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>   <name>len</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>emulated</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>pgstmt</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pgstmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
               <argument><expr><literal type="string">"ERROR: exiting mysql_drv_execute(), uninitialized statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Convert sysbench bind structures to PgSQL data */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_null</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>

      <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>DB_TYPE_CHAR</name></expr>:</case>
        <case>case <expr><name>DB_TYPE_VARCHAR</name></expr>:</case>

          <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>data_len</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>,
                 <argument><expr><call><name>SB_MIN</name><argument_list>(<argument><expr><name>MAX_PARAM_LENGTH</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* PostgreSQL requires a zero-terminated string */</comment>
          <expr_stmt><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>db_print_value</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                         <argument><expr><name>MAX_PARAM_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>
    </block_content>}</block></for>

    <expr_stmt><expr><name>pgres</name> <operator>=</operator> <call><name>PQexecPrepared</name><argument_list>(<argument><expr><name>pgcon</name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>,
                           <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pgsql_check_status</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="string">"PQexecPrepared"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>SB_CNT_READ</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pgres</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Use emulation */</comment>
  <comment type="block">/* Build the actual query string from parameters list */</comment>
  <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>vcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
  <label><name>again</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>j</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;=</operator> <name>buflen</name> <operator>||</operator> <name>need_realloc</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>buflen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>buflen</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">256</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>DB_ERROR_FATAL</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>db_print_value</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>bound_param</name></name> <operator>+</operator> <name>vcnt</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>need_realloc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>again</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vcnt</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pgsql_drv_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Execute SQL query */</comment>


<function><type><name>db_error_t</name></type> <name>pgsql_drv_query</name><parameter_list>(<parameter><decl><type><name>db_conn_t</name> <modifier>*</modifier></type><name>sb_conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                           <parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>PGconn</name>         <modifier>*</modifier></type><name>pgcon</name> <init>= <expr><name><name>sb_conn</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PGresult</name>       <modifier>*</modifier></type><name>pgres</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_error_t</name></type>     <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>len</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <expr_stmt><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>sb_conn</name><operator>-&gt;</operator><name>sql_errmsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pgres</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>pgcon</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pgsql_check_status</name><argument_list>(<argument><expr><name>sb_conn</name></expr></argument>, <argument><expr><name>pgres</name></expr></argument>, <argument><expr><literal type="string">"PQexec"</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rs</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>SB_CNT_READ</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pgres</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Fetch row from result set of a prepared statement */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_fetch</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* NYI */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rs</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Fetch row from result set of a query */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_fetch_row</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>db_row_t</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>intptr_t</name></type> <name>rownum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>i</name></decl>;</decl_stmt>

  <comment type="block">/*
    Use row-&gt;ptr as a row number, rather than a pointer to avoid dynamic
    memory management.
  */</comment>
  <expr_stmt><expr><name>rownum</name> <operator>=</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name><name>row</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rownum</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nrows</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>DB_ERROR_IGNORABLE</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>rs</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <comment type="block">/*
      PQgetvalue() returns an empty string, not a NULL value for a NULL
      field. Callers of this function expect a NULL pointer in this case.
    */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>rownum</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>PQgetlength</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>rownum</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>rownum</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>row</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>rownum</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>DB_ERROR_NONE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Free result set */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_free_results</name><parameter_list>(<parameter><decl><type><name>db_result_t</name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><operator>(</operator><name>PGresult</name> <operator>*</operator><operator>)</operator><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Close prepared statement */</comment>


<function><type><name>int</name></type> <name>pgsql_drv_close</name><parameter_list>(<parameter><decl><type><name>db_stmt_t</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>pg_stmt_t</name> <modifier>*</modifier></type><name>pgstmt</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>pgstmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>ptypes</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>ptypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pgstmt</name><operator>-&gt;</operator><name>nparams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pgstmt</name><operator>-&gt;</operator><name>pvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>xfree</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Uninitialize driver */</comment>
<function><type><name>int</name></type> <name>pgsql_drv_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Map SQL data type to bind_type value in MYSQL_BIND */</comment>


<function><type><name>int</name></type> <name>get_pgsql_bind_type</name><parameter_list>(<parameter><decl><type><name>db_bind_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>db_pgsql_bind_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_type</name> <operator>!=</operator> <name>DB_TYPE_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>db_pgsql_bind_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_type</name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>db_pgsql_bind_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pg_type</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>get_unique_stmt_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"sbstmt%d%d"</literal></expr></argument>,
                  <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>sb_rand_uniform_uint64</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>sb_rand_uniform_uint64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
