<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/tests/threads/sb_threads.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PTHREAD_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_ck_pr.h"</cpp:file></cpp:include>

<comment type="block">/* How to test scheduler pthread_yield or sched_yield */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_PTHREAD_YIELD</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YIELD</name></cpp:macro> <cpp:value>pthread_yield</cpp:value></cpp:define> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YIELD</name></cpp:macro> <cpp:value>sched_yield</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Threads test arguments */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>threads_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"thread-yields"</literal></expr></argument>, <argument><expr><literal type="string">"number of yields to do per request"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"thread-locks"</literal></expr></argument>, <argument><expr><literal type="string">"number of locks per thread"</literal></expr></argument>, <argument><expr><literal type="string">"8"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Threads test operations */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>threads_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>threads_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>threads_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sb_event_t</name></type> <name>threads_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>threads_execute_event</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>threads_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_test_t</name></type> <name>threads_test</name> <init>=
<expr><block>{
  <expr><operator>.</operator><name>sname</name> <operator>=</operator> <literal type="string">"threads"</literal></expr>,
  <expr><operator>.</operator><name>lname</name> <operator>=</operator> <literal type="string">"Threads subsystem performance test"</literal></expr>,
  <expr><operator>.</operator><name>ops</name> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>threads_init</name></expr>,
    <expr><operator>.</operator><name>prepare</name> <operator>=</operator> <name>threads_prepare</name></expr>,
    <expr><operator>.</operator><name>print_mode</name> <operator>=</operator> <name>threads_print_mode</name></expr>,
    <expr><operator>.</operator><name>next_event</name> <operator>=</operator> <name>threads_next_event</name></expr>,
    <expr><operator>.</operator><name>execute_event</name> <operator>=</operator> <name>threads_execute_event</name></expr>,
    <expr><operator>.</operator><name>cleanup</name> <operator>=</operator> <name>threads_cleanup</name></expr>
  }</block></expr>,
  <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>threads_args</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>thread_yields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>thread_locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name> <modifier>*</modifier></type><name>test_mutexes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>req_performed</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>register_test_threads</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>tests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threads_test</name><operator>.</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>threads_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>thread_yields</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"thread-yields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>thread_locks</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"thread-locks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>req_performed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>threads_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>test_mutexes</name> <operator>=</operator> <operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>thread_locks</name> <operator>*</operator>
                                           <sizeof>sizeof<argument_list>(<argument><expr><name>pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>test_mutexes</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failure!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_locks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name>test_mutexes</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>threads_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_locks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name>test_mutexes</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>test_mutexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_event_t</name></type> <name>threads_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_event_t</name></type>         <name>sb_req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_threads_request_t</name> <modifier>*</modifier></type><name>threads_req</name> <init>= <expr><operator>&amp;</operator><name><name>sb_req</name><operator>.</operator><name>u</name><operator>.</operator><name>threads_request</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <expr_stmt><expr><name><name>sb_req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SB_REQ_TYPE_THREADS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threads_req</name><operator>-&gt;</operator><name>lock_num</name></name> <operator>=</operator> <call><name>ck_pr_faa_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req_performed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>thread_locks</name></expr>;</expr_stmt>

  <return>return <expr><name>sb_req</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>threads_execute_event</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>sb_req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>         <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_threads_request_t</name> <modifier>*</modifier></type><name>threads_req</name> <init>= <expr><operator>&amp;</operator><name><name>sb_req</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>threads_request</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>thread_yields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_mutexes</name><index>[<expr><name><name>threads_req</name><operator>-&gt;</operator><name>lock_num</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>YIELD</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>test_mutexes</name><index>[<expr><name><name>threads_req</name><operator>-&gt;</operator><name>lock_num</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>threads_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Doing thread subsystem performance test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Thread yields per test: %d Locks used: %d"</literal></expr></argument>,
         <argument><expr><name>thread_yields</name></expr></argument>, <argument><expr><name>thread_locks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
