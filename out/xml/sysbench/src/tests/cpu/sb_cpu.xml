<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/tests/cpu/sb_cpu.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MATH_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>

<comment type="block">/* CPU test arguments */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>cpu_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"cpu-max-prime"</literal></expr></argument>, <argument><expr><literal type="string">"upper limit for primes generator"</literal></expr></argument>, <argument><expr><literal type="string">"10000"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* CPU test operations */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpu_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cpu_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sb_event_t</name></type> <name>cpu_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpu_execute_event</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cpu_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cpu_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_test_t</name></type> <name>cpu_test</name> <init>=
<expr><block>{
  <expr><operator>.</operator><name>sname</name> <operator>=</operator> <literal type="string">"cpu"</literal></expr>,
  <expr><operator>.</operator><name>lname</name> <operator>=</operator> <literal type="string">"CPU performance test"</literal></expr>,
  <expr><operator>.</operator><name>ops</name> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>cpu_init</name></expr>,
    <expr><operator>.</operator><name>print_mode</name> <operator>=</operator> <name>cpu_print_mode</name></expr>,
    <expr><operator>.</operator><name>next_event</name> <operator>=</operator> <name>cpu_next_event</name></expr>,
    <expr><operator>.</operator><name>execute_event</name> <operator>=</operator> <name>cpu_execute_event</name></expr>,
    <expr><operator>.</operator><name>report_cumulative</name> <operator>=</operator> <name>cpu_report_cumulative</name></expr>,
    <expr><operator>.</operator><name>done</name> <operator>=</operator> <name>cpu_done</name></expr>
  }</block></expr>,
  <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>cpu_args</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Upper limit for primes */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>    <name>max_prime</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>register_test_cpu</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type> <name>tests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cpu_test</name><operator>.</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cpu_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>prime_option</name><init>= <expr><call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"cpu-max-prime"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>prime_option</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value of cpu-max-prime: %d."</literal></expr></argument>, <argument><expr><name>prime_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>max_prime</name><operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>prime_option</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_event_t</name></type> <name>cpu_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_event_t</name></type> <name>req</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SB_REQ_TYPE_CPU</name></expr>;</expr_stmt>

  <return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>cpu_execute_event</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>r</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <comment type="block">/* So far we're using very simple test prime number tests in 64bit */</comment>

  <for>for<control>(<init><expr><name>c</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>max_prime</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>t</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>%</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>t</name></expr> )</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cpu_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Doing CPU performance benchmark\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Prime numbers limit: %d\n"</literal></expr></argument>, <argument><expr><name>max_prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Print cumulative stats. */</comment>

<function><type><name>void</name></type> <name>cpu_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"CPU speed:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"    events per second: %8.2f"</literal></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name> <operator>/</operator> <name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sb_report_cumulative</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>cpu_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
