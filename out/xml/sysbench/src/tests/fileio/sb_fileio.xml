<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/tests/fileio/sb_fileio.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STDC_HEADERS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNISTD_H</name></cpp:ifdef> 
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_STAT_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FCNTL_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_ERRNO_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;libaio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_MMAN_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_histogram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_counter.h"</cpp:file></cpp:include>

<comment type="block">/* Lengths of the checksum and the offset fields in a block */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_CHECKSUM_LENGTH</name></cpp:macro> <cpp:value>sizeof(int)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_OFFSET_LENGTH</name></cpp:macro> <cpp:value>sizeof(long)</cpp:value></cpp:define>

<typedef>typedef <type><name>int</name></type> <name>FILE_DESCRIPTOR</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_FILE</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fd &gt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_INVALID_FILE</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_FMT</name></cpp:macro> <cpp:value>"%d"</cpp:value></cpp:define>

<comment type="block">/* Supported operations in request */</comment>
<typedef>typedef <type><enum>enum
<block>{
  <decl><name>MODE_READ</name></decl>,
  <decl><name>MODE_WRITE</name></decl>,
  <decl><name>MODE_REWRITE</name></decl>,
  <decl><name>MODE_RND_READ</name></decl>,
  <decl><name>MODE_RND_WRITE</name></decl>,
  <decl><name>MODE_RND_RW</name></decl>,
  <decl><name>MODE_MIXED</name></decl>
}</block></enum></type> <name>file_test_mode_t</name>;</typedef>

<comment type="block">/* fsync modes */</comment>
<typedef>typedef <type><enum>enum
<block>{
  <decl><name>FSYNC_ALL</name></decl>,
  <decl><name>FSYNC_DATA</name></decl>
}</block></enum></type> <name>file_fsync_mode_t</name>;</typedef>

<comment type="block">/* File I/O modes */</comment>
<typedef>typedef <type><enum>enum
<block>{
  <decl><name>FILE_IO_MODE_SYNC</name></decl>,
  <decl><name>FILE_IO_MODE_ASYNC</name></decl>,
  <decl><name>FILE_IO_MODE_MMAP</name></decl>
}</block></enum></type> <name>file_io_mode_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>SB_FILE_FLAG_SYNC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>SB_FILE_FLAG_DSYNC</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
  <decl><name>SB_FILE_FLAG_DIRECTIO</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>file_flags_t</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
<comment type="block">/* Per-thread async I/O context */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>io_context_t</name></type>    <name>io_ctxt</name></decl>;</decl_stmt>      <comment type="block">/* AIO context */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>nrequests</name></decl>;</decl_stmt>    <comment type="block">/* Current number of queued I/O requests */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>io_event</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>      <comment type="block">/* Array of events */</comment>
}</block></struct></type> <name>sb_aio_context_t</name>;</typedef>

<comment type="block">/* Async I/O operation */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name><name>struct</name> <name>iocb</name></name></type>   <name>iocb</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>sb_file_op_t</name></type>  <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type>       <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>sb_aio_oper_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_aio_context_t</name> <modifier>*</modifier></type><name>aio_ctxts</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>void</name>           <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>    <name>buffer_file_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>       <name>buffer_pos</name></decl>;</decl_stmt>
}</block></struct></type> <name>sb_per_thread_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_per_thread_t</name>	<modifier>*</modifier></type><name>per_thread</name></decl>;</decl_stmt>

<comment type="block">/* Test options */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>      <name>num_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type>         <name>total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type>         <name>file_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>               <name>file_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>file_flags_t</name></type>      <name>file_extra_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>               <name>file_fsync_freq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>               <name>file_fsync_all</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>               <name>file_fsync_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>file_fsync_mode_t</name></type> <name>file_fsync_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type>            <name>file_rw_ratio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>               <name>file_merged_requests</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type>         <name>file_request_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>file_io_mode_t</name></type>    <name>file_io_mode</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>      <name>file_async_backlog</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* statistical and other "local" variables */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type>       <name>position</name></decl>;</decl_stmt>      <comment type="block">/* current position in file */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>    <name>current_file</name></decl>;</decl_stmt>  <comment type="block">/* current file */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>    <name>fsynced_file</name></decl>;</decl_stmt>  <comment type="block">/* file number to be fsynced (periodic) */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_dirty</name></decl>;</decl_stmt>               <comment type="block">/* any writes after last fsync series ? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>req_performed</name></decl>;</decl_stmt> <comment type="block">/* number of requests done */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>mebibyte</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name>megabyte</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<comment type="block">/* Array of file mappings */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name>          <modifier>*</modifier><modifier>*</modifier></type><name>mmaps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>file_page_mask</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Array of file descriptors */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE_DESCRIPTOR</name> <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<comment type="block">/* test mode type */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>file_test_mode_t</name></type> <name>test_mode</name></decl>;</decl_stmt>

<comment type="block">/* Previous request needed for validation */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_file_request_t</name></type> <name>prev_req</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>fileio_args</name><index>[]</index></name> <init>= <expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-num"</literal></expr></argument>, <argument><expr><literal type="string">"number of files to create"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-block-size"</literal></expr></argument>, <argument><expr><literal type="string">"block size to use in all IO operations"</literal></expr></argument>, <argument><expr><literal type="string">"16384"</literal></expr></argument>,
         <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-total-size"</literal></expr></argument>, <argument><expr><literal type="string">"total size of files to create"</literal></expr></argument>, <argument><expr><literal type="string">"2G"</literal></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-test-mode"</literal></expr></argument>,
         <argument><expr><literal type="string">"test mode {seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw}"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-io-mode"</literal></expr></argument>, <argument><expr><literal type="string">"file operations mode {sync,async,mmap}"</literal></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>,
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-async-backlog"</literal></expr></argument>,
         <argument><expr><literal type="string">"number of asynchronous operatons to queue per thread"</literal></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-extra-flags"</literal></expr></argument>,
         <argument><expr><literal type="string">"list of additional flags to use to open files {sync,dsync,direct}"</literal></expr></argument>,
         <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>LIST</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-fsync-freq"</literal></expr></argument>, <argument><expr><literal type="string">"do fsync() after this number of requests "</literal>
         <literal type="string">"(0 - don't use fsync())"</literal></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-fsync-all"</literal></expr></argument>, <argument><expr><literal type="string">"do fsync() after each write operation"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>,
         <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-fsync-end"</literal></expr></argument>, <argument><expr><literal type="string">"do fsync() at the end of test"</literal></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-fsync-mode"</literal></expr></argument>,
         <argument><expr><literal type="string">"which method to use for synchronization {fsync, fdatasync}"</literal></expr></argument>,
         <argument><expr><literal type="string">"fsync"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-merged-requests"</literal></expr></argument>, <argument><expr><literal type="string">"merge at most this number of IO requests "</literal>
         <literal type="string">"if possible (0 - don't merge)"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>INT</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"file-rw-ratio"</literal></expr></argument>, <argument><expr><literal type="string">"reads/writes ratio for combined test"</literal></expr></argument>, <argument><expr><literal type="string">"1.5"</literal></expr></argument>, <argument><expr><name>DOUBLE</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* fileio test commands */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_cmd_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_cmd_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* fileio test operations */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sb_event_t</name></type> <name>file_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_execute_event</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_thread_done</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_report_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_test_t</name></type> <name>fileio_test</name> <init>=
<expr><block>{
  <expr><operator>.</operator><name>sname</name> <operator>=</operator> <literal type="string">"fileio"</literal></expr>,
  <expr><operator>.</operator><name>lname</name> <operator>=</operator> <literal type="string">"File I/O test"</literal></expr>,
  <expr><operator>.</operator><name>ops</name> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>file_init</name></expr>,
    <expr><operator>.</operator><name>prepare</name> <operator>=</operator> <name>file_prepare</name></expr>,
    <expr><operator>.</operator><name>print_mode</name> <operator>=</operator> <name>file_print_mode</name></expr>,
    <expr><operator>.</operator><name>next_event</name> <operator>=</operator> <name>file_next_event</name></expr>,
    <expr><operator>.</operator><name>execute_event</name> <operator>=</operator> <name>file_execute_event</name></expr>,
    <expr><operator>.</operator><name>report_intermediate</name> <operator>=</operator> <name>file_report_intermediate</name></expr>,
    <expr><operator>.</operator><name>report_cumulative</name> <operator>=</operator> <name>file_report_cumulative</name></expr>,
    <expr><operator>.</operator><name>thread_done</name> <operator>=</operator> <name>file_thread_done</name></expr>,
    <expr><operator>.</operator><name>done</name> <operator>=</operator> <name>file_done</name></expr>
  }</block></expr>,
  <expr><operator>.</operator><name>builtin_cmds</name> <operator>=</operator> <block>{
   <expr><operator>.</operator><name>prepare</name> <operator>=</operator> <name>file_cmd_prepare</name></expr>,
   <expr><operator>.</operator><name>cleanup</name> <operator>=</operator> <name>file_cmd_cleanup</name></expr>
  }</block></expr>,
  <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>fileio_args</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>remove_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>parse_arguments</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sb_event_t</name></type> <name>file_get_seq_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sb_event_t</name></type> <name>file_get_rnd_request</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_seq_req</name><parameter_list>(<parameter><decl><type><name>sb_file_request_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sb_file_request_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_io_mode_str</name><parameter_list>(<parameter><decl><type><name>file_io_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_test_mode_str</name><parameter_list>(<parameter><decl><type><name>file_test_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>file_fill_buffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_validate_buffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name>  <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* File operation wrappers */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_do_fsync</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_fsync</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>file_pread</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>file_pwrite</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_async_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_async_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_submit_or_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iocb</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sb_file_op_t</name></type></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_mmap_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>file_mmap_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Portability wrappers */</comment>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>sb_get_allocation_granularity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sb_free_memaligned</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FILE_DESCRIPTOR</name></type> <name>sb_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sb_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>register_test_fileio</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>tests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileio_test</name><operator>.</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>file_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>parse_arguments</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>files</name> <operator>=</operator> <operator>(</operator><name>FILE_DESCRIPTOR</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>num_files</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FILE_DESCRIPTOR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>files</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failure."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>file_async_init</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>init_vars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>file_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>file_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"test_file.%d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* remove test files for creation test if they exist */</comment>
    <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_WRITE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>sb_create</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Cannot create file '%s'"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Opening file: %s"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sb_open</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_FILE</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Cannot open file '%s'"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Did you forget to run the prepare step?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="block">/* Validate file size */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"fstat() failed on file '%s'"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <name>file_size</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>ss1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ss2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
               <argument><expr><literal type="string">"Size of file '%s' is %sB, but at least %sB is expected."</literal></expr></argument>,
               <argument><expr><name>file_name</name></expr></argument>,
               <argument><expr><call><name>sb_print_value_size</name><argument_list>(<argument><expr><name>ss1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>sb_print_value_size</name><argument_list>(<argument><expr><name>ss2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
               <argument><expr><literal type="string">"Did you run 'prepare' with different --file-total-size or "</literal>
               <literal type="string">"--file-num values?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>file_mmap_prepare</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>


<function><type><name>int</name></type> <name>file_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>i</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>file_async_done</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>file_mmap_done</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>sb_free_memaligned</name><argument_list>(<argument><expr><name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>per_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>sb_event_t</name></type> <name>file_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_WRITE</name> <operator>||</operator> <name>test_mode</name> <operator>==</operator> <name>MODE_REWRITE</name> <operator>||</operator>
      <name>test_mode</name> <operator>==</operator> <name>MODE_READ</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>file_get_seq_request</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  
  
  <return>return <expr><call><name>file_get_rnd_request</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Get sequential read or write request */</comment>


<function><type><name>sb_event_t</name></type> <name>file_get_seq_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_event_t</name></type>           <name>sb_req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_file_request_t</name>    <modifier>*</modifier></type><name>file_req</name> <init>= <expr><operator>&amp;</operator><name><name>sb_req</name><operator>.</operator><name>u</name><operator>.</operator><name>file_request</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>sb_req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SB_REQ_TYPE_FILE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SB_THREAD_MUTEX_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* assume function is called with correct mode always */</comment>
  <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_WRITE</name> <operator>||</operator> <name>test_mode</name> <operator>==</operator> <name>MODE_REWRITE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_WRITE</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>     
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_READ</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* See whether it's time to fsync file(s) */</comment>
  <if_stmt><if>if <condition>(<expr><name>file_fsync_freq</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>FILE_OP_TYPE_WRITE</name> <operator>&amp;&amp;</operator>
      <name>is_dirty</name> <operator>&amp;&amp;</operator> <name>req_performed</name> <operator>%</operator> <name>file_fsync_freq</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_FSYNC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>=</operator> <name>fsynced_file</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>fsynced_file</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fsynced_file</name> <operator>==</operator> <name>num_files</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>fsynced_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>is_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SB_THREAD_MUTEX_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>sb_req</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>req_performed</name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>FILE_OP_TYPE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>is_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Rewind to the first file if all files are processed */</comment>
  <if_stmt><if>if <condition>(<expr><name>current_file</name> <operator>==</operator> <name>num_files</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>position</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>current_file</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>=</operator> <name>current_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>SB_MIN</name><argument_list>(<argument><expr><name>file_request_size</name></expr></argument>, <argument><expr><name>file_size</name> <operator>-</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>position</name> <operator>+=</operator> <name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

  <comment type="block">/* scroll to the next file if not already out of bound */</comment>
  <if_stmt><if>if <condition>(<expr><name>position</name> <operator>==</operator> <name>file_size</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>current_file</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>position</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>      
  
  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>check_seq_req</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_req</name></expr></argument>, <argument><expr><name>file_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prev_req</name> <operator>=</operator> <operator>*</operator><name>file_req</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>SB_THREAD_MUTEX_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

  <return>return <expr><name>sb_req</name></expr>;</return>    
</block_content>}</block></function>


<comment type="block">/* Request generatior for random tests */</comment>


<function><type><name>sb_event_t</name></type> <name>file_get_rnd_request</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_event_t</name></type>           <name>sb_req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_file_request_t</name>    <modifier>*</modifier></type><name>file_req</name> <init>= <expr><operator>&amp;</operator><name><name>sb_req</name><operator>.</operator><name>u</name><operator>.</operator><name>file_request</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type>   <name>tmppos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                  <name>mode</name> <init>= <expr><name>test_mode</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>         <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>sb_req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SB_REQ_TYPE_FILE</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_RND_RW</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>sb_counter_val</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_READ</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>/</operator>
        <operator>(</operator><call><name>sb_counter_val</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_WRITE</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>&lt;</operator> <name>file_rw_ratio</name></expr> ?</condition><then>
      <expr><name>MODE_RND_READ</name></expr> </then><else>: <expr><name>MODE_RND_WRITE</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    is_dirty is only set if writes are done and cleared after all files
    are synced
  */</comment>
  <if_stmt><if>if <condition>(<expr><name>file_fsync_freq</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>is_dirty</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>req_performed</name> <operator>%</operator> <name>file_fsync_freq</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_FSYNC</name></expr>;</expr_stmt>  
      <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>=</operator> <name>fsynced_file</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>fsynced_file</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>fsynced_file</name> <operator>==</operator> <name>num_files</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>fsynced_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>is_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>SB_THREAD_MUTEX_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>sb_req</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>mode</name><operator>==</operator><name>MODE_RND_WRITE</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* mode shall be WRITE or RND_WRITE only */</comment>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_WRITE</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_READ</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>retry</name>:</label>
  <expr_stmt><expr><name>tmppos</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>(</operator><call><name>sb_rand_uniform_double</name><argument_list>()</argument_list></call> <operator>*</operator> <name>total_size</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmppos</name> <operator>=</operator> <name>tmppos</name> <operator>-</operator> <operator>(</operator><name>tmppos</name> <operator>%</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>file_block_size</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>tmppos</name> <operator>/</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>file_size</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>(</operator><name>tmppos</name> <operator>%</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>file_size</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>SB_MIN</name><argument_list>(<argument><expr><name>file_block_size</name></expr></argument>, <argument><expr><name>file_size</name> <operator>-</operator> <name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/*
       For the multi-threaded validation test we have to make sure the block is
       not being used by another thread
    */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>thread_id</name> <operator>&amp;&amp;</operator> <name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_file_id</name> <operator>==</operator> <name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>&amp;&amp;</operator>
          <name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_pos</name> <operator>==</operator> <name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>per_thread</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>buffer_file_id</name> <operator>=</operator> <name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>per_thread</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>buffer_pos</name> <operator>=</operator> <name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>req_performed</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>FILE_OP_TYPE_WRITE</name></expr>)</condition><block type="pseudo"><block_content> 
    <expr_stmt><expr><name>is_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>SB_THREAD_MUTEX_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>        
  <return>return <expr><name>sb_req</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>file_execute_event</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>sb_req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE_DESCRIPTOR</name></type>    <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_file_request_t</name> <modifier>*</modifier></type><name>file_req</name> <init>= <expr><operator>&amp;</operator><name><name>sb_req</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>file_request</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>debug</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>,
             <argument><expr><literal type="string">"Executing request, operation: %d, file_id: %d, pos: %d, "</literal>
             <literal type="string">"size: %d"</literal></expr></argument>,
             <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>,
             <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Check request parameters */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>&gt;</operator> <name>num_files</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Incorrect file id in request: %u"</literal></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>file_req</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>file_size</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"I/O request exceeds file size. "</literal>
             <literal type="string">"file id: %d file size: %lld req offset: %lld req size: %lld"</literal></expr></argument>,
             <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>file_size</name></expr></argument>,
             <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>files</name><index>[<expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr>]</index></name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FILE_OP_TYPE_NULL</name></expr>:</case>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Execute of NULL request called !, aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    <case>case <expr><name>FILE_OP_TYPE_WRITE</name></expr>:</case>

      <comment type="block">/* Store checksum and offset in a buffer when in validation mode */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>file_fill_buffer</name><argument_list>(<argument><expr><name><name>per_thread</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                         
      <if_stmt><if>if<condition>(<expr><call><name>file_pwrite</name><argument_list>(<argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><name><name>per_thread</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>,
                     <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call>
         <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to write file! file: "</literal> <name>FD_FMT</name> <literal type="string">" pos: %lld"</literal></expr></argument>, 
                  <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Check if we have to fsync each write operation */</comment>
      <if_stmt><if>if <condition>(<expr><name>file_fsync_all</name> <operator>&amp;&amp;</operator> <call><name>file_fsync</name><argument_list>(<argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <comment type="block">/* In async mode stats will me updated on AIO requests completion */</comment>
      <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>!=</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sb_counter_add</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_BYTES_WRITTEN</name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>FILE_OP_TYPE_READ</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><call><name>file_pread</name><argument_list>(<argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><name><name>per_thread</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>,
                    <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call>
         <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to read file! file: "</literal> <name>FD_FMT</name> <literal type="string">" pos: %lld"</literal></expr></argument>,
                  <argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Validate block if run with validation enabled */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name> <operator>&amp;&amp;</operator>
          <call><name>file_validate_buffer</name><argument_list>(<argument><expr><name><name>per_thread</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
          <argument><expr><literal type="string">"Validation failed on file "</literal> <name>FD_FMT</name> <literal type="string">", block offset %lld, exiting..."</literal></expr></argument>,
                 <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>file_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* In async mode stats will me updated on AIO requests completion */</comment>
      <if_stmt><if>if<condition>(<expr><name>file_io_mode</name> <operator>!=</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sb_counter_add</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_BYTES_READ</name></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    <case>case <expr><name>FILE_OP_TYPE_FSYNC</name></expr>:</case>
      <comment type="block">/* Ignore fsync requests if we are already fsync'ing each operation */</comment>
      <if_stmt><if>if <condition>(<expr><name>file_fsync_all</name></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>file_fsync</name><argument_list>(<argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Execute of UNKNOWN file request type called (%d)!, "</literal>
               <literal type="string">"aborting"</literal></expr></argument>, <argument><expr><name><name>file_req</name><operator>-&gt;</operator><name>operation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_file_extra_flags</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Extra file open flags: %s%s%s%s"</literal></expr></argument>,
           <argument><expr><ternary><condition><expr><name>file_extra_flags</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"(none)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
           <argument><expr><ternary><condition><expr><name>file_extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_SYNC</name></expr> ?</condition><then> <expr><literal type="string">"sync "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
           <argument><expr><ternary><condition><expr><name>file_extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_DSYNC</name></expr> ?</condition><then> <expr><literal type="string">"dsync "</literal></expr></then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
           <argument><expr><ternary><condition><expr><name>file_extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_DIRECTIO</name></expr> ?</condition><then> <expr><literal type="string">"directio"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>
           )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>file_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sizestr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>print_file_extra_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%d files, %sB each"</literal></expr></argument>, <argument><expr><name>num_files</name></expr></argument>,
           <argument><expr><call><name>sb_print_value_size</name><argument_list>(<argument><expr><name>sizestr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizestr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%sB total file size"</literal></expr></argument>,
           <argument><expr><call><name>sb_print_value_size</name><argument_list>(<argument><expr><name>sizestr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizestr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                               <argument><expr><name>file_size</name> <operator>*</operator> <name>num_files</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Block size %sB"</literal></expr></argument>,
           <argument><expr><call><name>sb_print_value_size</name><argument_list>(<argument><expr><name>sizestr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizestr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file_block_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file_merged_requests</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Merging requests up to %sB for sequential IO."</literal></expr></argument>,
             <argument><expr><call><name>sb_print_value_size</name><argument_list>(<argument><expr><name>sizestr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sizestr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                 <argument><expr><name>file_request_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <switch>switch <condition>(<expr><name>test_mode</name></expr>)</condition>
  <block>{<block_content>
    <case>case <expr><name>MODE_RND_WRITE</name></expr>:</case>
    <case>case <expr><name>MODE_RND_READ</name></expr>:</case>
    <case>case <expr><name>MODE_RND_RW</name></expr>:</case>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Number of IO requests: %"</literal> <name>PRIu64</name></expr></argument>,
               <argument><expr><name><name>sb_globals</name><operator>.</operator><name>max_events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>,
               <argument><expr><literal type="string">"Read/Write ratio for combined random IO test: %2.2f"</literal></expr></argument>,
               <argument><expr><name>file_rw_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>file_fsync_freq</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>,
             <argument><expr><literal type="string">"Periodic FSYNC enabled, calling fsync() each %d requests."</literal></expr></argument>,
             <argument><expr><name>file_fsync_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>file_fsync_end</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Calling fsync() at the end of test, Enabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>file_fsync_all</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Calling fsync() after each write operation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Using %s I/O mode"</literal></expr></argument>, <argument><expr><call><name>get_io_mode_str</name><argument_list>(<argument><expr><name>file_io_mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Using checksums validation."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Doing %s test"</literal></expr></argument>, <argument><expr><call><name>get_test_mode_str</name><argument_list>(<argument><expr><name>test_mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Print intermediate test statistics. */</comment>

<function><type><name>void</name></type> <name>file_report_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>seconds</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_timestamp</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>time_total</name></name></expr></argument>,
                <argument><expr><literal type="string">"reads: %4.2f MiB/s writes: %4.2f MiB/s fsyncs: %4.2f/s "</literal>
                <literal type="string">"latency (ms,%u%%): %4.3f"</literal></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>/</operator> <name>mebibyte</name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>bytes_written</name></name> <operator>/</operator> <name>mebibyte</name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>other</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
                <argument><expr><name><name>sb_globals</name><operator>.</operator><name>percentile</name></name></expr></argument>,
                <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_pct</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Print cumulative test statistics. */</comment>

<function><type><name>void</name></type> <name>file_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>seconds</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal>
           <literal type="string">"Throughput:\n"</literal>
           <literal type="string">"         read:  IOPS=%4.2f %4.2f MiB/s (%4.2f MB/s)\n"</literal>
           <literal type="string">"         write: IOPS=%4.2f %4.2f MiB/s (%4.2f MB/s)\n"</literal>
           <literal type="string">"         fsync: IOPS=%4.2f"</literal></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>reads</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>/</operator> <name>mebibyte</name> <operator>/</operator> <name>seconds</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>/</operator> <name>megabyte</name> <operator>/</operator> <name>seconds</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>writes</name></name> <operator>/</operator> <name>seconds</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>bytes_written</name></name> <operator>/</operator> <name>mebibyte</name> <operator>/</operator> <name>seconds</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>bytes_written</name></name> <operator>/</operator> <name>megabyte</name> <operator>/</operator> <name>seconds</name></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>other</name></name> <operator>/</operator> <name>seconds</name></expr></argument>
           )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Latency (ms):"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"         min:                            %10.2f"</literal></expr></argument>,
           <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_min</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"         avg:                            %10.2f"</literal></expr></argument>,
           <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_avg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"         max:                            %10.2f"</literal></expr></argument>,
           <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>percentile</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"        %3dth percentile:                %10.2f"</literal></expr></argument>,
             <argument><expr><name><name>sb_globals</name><operator>.</operator><name>percentile</name></name></expr></argument>, <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_pct</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"         percentile stats:               disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"         sum:                            %10.2f"</literal></expr></argument>,
           <argument><expr><call><name>SEC2MS</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>latency_sum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Return name for I/O mode */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_io_mode_str</name><parameter_list>(<parameter><decl><type><name>file_io_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FILE_IO_MODE_SYNC</name></expr>:</case>
      <return>return <expr><literal type="string">"synchronous"</literal></expr>;</return>
    <case>case <expr><name>FILE_IO_MODE_ASYNC</name></expr>:</case>
      <return>return <expr><literal type="string">"asynchronous"</literal></expr>;</return>
    <case>case <expr><name>FILE_IO_MODE_MMAP</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
      <return>return <expr><literal type="string">"slow mmaped"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <return>return <expr><literal type="string">"fast mmaped"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><literal type="string">"(unknown)"</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Return name for test mode */</comment>


<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_test_mode_str</name><parameter_list>(<parameter><decl><type><name>file_test_mode_t</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>MODE_WRITE</name></expr>:</case>
      <return>return <expr><literal type="string">"sequential write (creation)"</literal></expr>;</return>
    <case>case <expr><name>MODE_REWRITE</name></expr>:</case>
      <return>return <expr><literal type="string">"sequential rewrite"</literal></expr>;</return>
    <case>case <expr><name>MODE_READ</name></expr>:</case>
      <return>return <expr><literal type="string">"sequential read"</literal></expr>;</return>
    <case>case <expr><name>MODE_RND_READ</name></expr>:</case>
      <return>return <expr><literal type="string">"random read"</literal></expr>;</return> 
    <case>case <expr><name>MODE_RND_WRITE</name></expr>:</case>
      <return>return <expr><literal type="string">"random write"</literal></expr>;</return>
    <case>case <expr><name>MODE_RND_RW</name></expr>:</case>
      <return>return <expr><literal type="string">"random r/w"</literal></expr>;</return>
    <case>case <expr><name>MODE_MIXED</name></expr>:</case>
      <return>return <expr><literal type="string">"mixed"</literal></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  
  <return>return <expr><literal type="string">"(unknown)"</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
  Converts the argument of --file-extra-flags to platform-specific open() flags.
  Returns 1 on error, 0 on success.
*/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_extra_flags</name><parameter_list>(<parameter><decl><type><name>file_flags_t</name></type> <name>extra_flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>open_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>extra_flags</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>open_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_SYNC</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>open_flags</name> <operator>|=</operator> <name>O_SYNC</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_DSYNC</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>O_DSYNC</name></cpp:ifdef>
      <expr_stmt><expr><operator>*</operator><name>open_flags</name> <operator>|=</operator> <name>O_DSYNC</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
               <argument><expr><literal type="string">"--file-extra-flags=dsync is not supported on this platform."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_DIRECTIO</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DIRECTIO</name></cpp:ifdef>
      <comment type="block">/* Will call directio(3) later */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>O_DIRECT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><operator>*</operator><name>open_flags</name> <operator>|=</operator> <name>O_DIRECT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
               <argument><expr><literal type="string">"--file-extra-flags=direct is not supported on this platform."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>extra_flags</name> <operator>&gt;</operator> <name>SB_FILE_FLAG_DIRECTIO</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown extra flags value: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>extra_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create files of necessary size for test */</comment>

<function><type><name>int</name></type> <name>create_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>file_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>          <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_timer_t</name></type>         <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>             <name>seconds</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%d files, %ldKb each, %ldMb total"</literal></expr></argument>, <argument><expr><name>num_files</name></expr></argument>,
           <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>file_size</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>,
           <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>file_size</name> <operator>*</operator> <name>num_files</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Creating files for the test..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_file_extra_flags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>convert_extra_flags</name><argument_list>(<argument><expr><name>file_extra_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sb_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sb_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"test_file.%d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Can't open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return> 
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>file_size</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Reusing existing file %s"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Extending existing file %s"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Creating file %s"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>offset</name> <operator>&lt;</operator> <name>file_size</name></expr>;</condition>
         <incr><expr><name>written</name> <operator>+=</operator> <name>file_block_size</name></expr><operator>,</operator> <expr><name>offset</name> <operator>+=</operator> <name>file_block_size</name></expr></incr>)</control>
    <block>{<block_content>
      <comment type="block">/*
        If in validation mode, fill buffer with random values
        and write checksum. Not called in parallel, so use per_thread[0].
      */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>file_fill_buffer</name><argument_list>(<argument><expr><name><name>per_thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name>file_block_size</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                         
      <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>per_thread</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><name>file_block_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    
    <comment type="block">/* fsync files to prevent cache flush from affecting test results */</comment>
    <expr_stmt><expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>seconds</name> <operator>=</operator> <call><name>NS2SEC</name><argument_list>(<argument><expr><call><name>sb_timer_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%llu bytes written in %.2f seconds (%.2f MiB/sec)."</literal></expr></argument>,
             <argument><expr><name>written</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>,
             <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>written</name> <operator>/</operator> <name>mebibyte</name><operator>)</operator> <operator>/</operator> <name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"No bytes written."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

 <label><name>error</name>:</label>
  <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to write file!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Remove test files */</comment>


<function><type><name>int</name></type> <name>remove_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>file_name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Removing test files..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"test_file.%d"</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* 'prepare' command for fileio test */</comment>


<function><type><name>int</name></type> <name>file_cmd_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>parse_arguments</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/*
    Make sure that files do not exist for 'sequential write' test mode,
    create test files for other test modes
  */</comment>
  <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>remove_files</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>create_files</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* 'cleanup' command for fileio test */</comment>


<function><type><name>int</name></type> <name>file_cmd_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>parse_arguments</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>remove_files</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_vars</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* position in file */</comment>
  <expr_stmt><expr><name>current_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>fsynced_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* for counting file to be fsynced */</comment>
  <expr_stmt><expr><name>req_performed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>is_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>sb_globals</name><operator>.</operator><name>validate</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>prev_req</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prev_req</name><operator>.</operator><name>operation</name></name> <operator>=</operator> <name>FILE_OP_TYPE_NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prev_req</name><operator>.</operator><name>file_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prev_req</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Before the benchmark is stopped, issue fsync() if --file-fsync-end is used,
  and wait for all async operations to complete.
*/</comment>

<function><type><name>int</name></type> <name>file_thread_done</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>file_fsync_end</name> <operator>&amp;&amp;</operator> <name>test_mode</name> <operator>!=</operator> <name>MODE_READ</name> <operator>&amp;&amp;</operator> <name>test_mode</name> <operator>!=</operator> <name>MODE_RND_READ</name></expr>)</condition>
  <block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><call><name>file_fsync</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_ASYNC</name> <operator>&amp;&amp;</operator> <name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>nrequests</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>file_wait</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>nrequests</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
<comment type="block">/* Allocate async contexts pool */</comment>


<function><type><name>int</name></type> <name>file_async_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>!=</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>file_async_backlog</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"file-async-backlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file_async_backlog</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value of file-async-backlog: %d"</literal></expr></argument>,
             <argument><expr><name>file_async_backlog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>aio_ctxts</name> <operator>=</operator> <operator>(</operator><name>sb_aio_context_t</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr></argument>,
                                         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_aio_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>io_queue_init</name><argument_list>(<argument><expr><name>file_async_backlog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aio_ctxts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>io_ctxt</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"io_queue_init() failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
      
    <expr_stmt><expr><name><name>aio_ctxts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <operator>(</operator>struct <name>io_event</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>file_async_backlog</name> <operator>*</operator>
                                                    <sizeof>sizeof<argument_list>(<argument><expr>struct <name>io_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aio_ctxts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate async I/O context!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Destroy async contexts pool */</comment>


<function><type><name>int</name></type> <name>file_async_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>!=</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>io_queue_release</name><argument_list>(<argument><expr><name><name>aio_ctxts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>io_ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aio_ctxts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aio_ctxts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>  

<comment type="block">/*
  Submit async I/O requests until the length of request queue exceeds
  the limit. Then wait for at least one request to complete and proceed.
*/</comment>


<function><type><name>int</name></type> <name>file_submit_or_wait</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iocb</name></name> <modifier>*</modifier></type><name>iocb</name></decl></parameter>, <parameter><decl><type><name>sb_file_op_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>,
                        <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_aio_oper_t</name>   <modifier>*</modifier></type><name>oper</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iocb</name></name>     <modifier>*</modifier></type><name>iocbp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>oper</name> <operator>=</operator> <operator>(</operator><name>sb_aio_oper_t</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sb_aio_oper_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>oper</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate AIO operation!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oper</name><operator>-&gt;</operator><name>iocb</name></name></expr></argument>, <argument><expr><name>iocb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iocb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>oper</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>oper</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iocbp</name> <operator>=</operator> <operator>&amp;</operator><name><name>oper</name><operator>-&gt;</operator><name>iocb</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>io_submit</name><argument_list>(<argument><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>io_ctxt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iocbp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"io_submit() failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>nrequests</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>nrequests</name> <operator>&lt;</operator> <name>file_async_backlog</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><call><name>file_wait</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
  Wait for at least nreq I/O requests to complete
*/</comment>


<function><type><name>int</name></type> <name>file_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nreq</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
  <decl_stmt><decl><type><name>long</name></type>            <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>            <name>nr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>io_event</name></name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sb_aio_oper_t</name>   <modifier>*</modifier></type><name>oper</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iocb</name></name>     <modifier>*</modifier></type><name>iocbp</name></decl>;</decl_stmt>

  <comment type="block">/* Try to read some events */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OLD_GETEVENTS</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nreq</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>io_getevents</name><argument_list>(<argument><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>io_ctxt</name></expr></argument>, <argument><expr><name>file_async_backlog</name></expr></argument>,
                    <argument><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>io_getevents</name><argument_list>(<argument><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>io_ctxt</name></expr></argument>, <argument><expr><name>nreq</name></expr></argument>, <argument><expr><name>file_async_backlog</name></expr></argument>,
                    <argument><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"io_getevents() failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Verify results */</comment>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>event</name> <operator>=</operator> <operator>(</operator>struct <name>io_event</name> <operator>*</operator><operator>)</operator><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iocbp</name> <operator>=</operator> <operator>(</operator>struct <name>iocb</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>obj</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>oper</name> <operator>=</operator> <operator>(</operator><name>sb_aio_oper_t</name> <operator>*</operator><operator>)</operator><name>iocbp</name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>oper</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FILE_OP_TYPE_FSYNC</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name><name>event</name><operator>-&gt;</operator><name>res</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Asynchronous fsync failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>

    <case>case <expr><name>FILE_OP_TYPE_READ</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>res</name></name> <operator>!=</operator> <name><name>oper</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Asynchronous read failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sb_counter_add</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_BYTES_READ</name></expr></argument>, <argument><expr><name><name>oper</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>

    <case>case <expr><name>FILE_OP_TYPE_WRITE</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>event</name><operator>-&gt;</operator><name>res</name></name> <operator>!=</operator> <name><name>oper</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Asynchronous write failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sb_counter_add</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_BYTES_WRITTEN</name></expr></argument>, <argument><expr><name><name>oper</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>

    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aio_ctxts</name><index>[<expr><name>thread_id</name></expr>]</index></name><operator>.</operator><name>nrequests</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_LIBAIO */</comment>

                        
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<comment type="block">/* Initialize data structures required for mmap'ed I/O operations */</comment>


<function><type><name>int</name></type> <name>file_mmap_prepare</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>!=</operator> <name>FILE_IO_MODE_MMAP</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>file_page_mask</name> <operator>=</operator> <operator>~</operator><operator>(</operator><call><name>sb_get_allocation_granularity</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* Extend file sizes for sequential write test */</comment>
  <if_stmt><if>if <condition>(<expr><name>test_mode</name> <operator>==</operator> <name>MODE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"ftruncate() failed on file %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>
  <expr_stmt><expr><name>mmaps</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>num_files</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>mmaps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>,
                    <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mmaps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"mmap() failed on file %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Destroy data structure used by mmap'ed I/O operations */</comment>


<function><type><name>int</name></type> <name>file_mmap_done</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>!=</operator> <name>FILE_IO_MODE_MMAP</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>&gt;</operator> <literal type="number">4</literal></expr></cpp:if>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>mmaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mmaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
   <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>i</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_MMAP */</comment>

<function><type><name>int</name></type> <name>file_do_fsync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE_DESCRIPTOR</name></type> <name>fd</name> <init>= <expr><name><name>files</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>iocb</name></name></type> <name>iocb</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/*
    FIXME: asynchronous fsync support is missing
    in Linux kernel at the moment
  */</comment>
  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_SYNC</name>
      <operator>||</operator> <name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_ASYNC</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MMAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SIZEOF_SIZE_T</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
      <comment type="block">/* Use fsync in mmaped mode on 32-bit architectures */</comment>
      <operator>||</operator> <name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_MMAP</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      )</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>file_fsync_mode</name> <operator>==</operator> <name>FSYNC_ALL</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>F_FULLFSYNC</name></cpp:ifdef>
      <return>return <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_FULLFSYNC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FDATASYNC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr><call><name>fdatasync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_ALERT</name></expr></argument>, <argument><expr><literal type="string">"Unknown fsync mode: %d"</literal></expr></argument>, <argument><expr><name>file_fsync_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Use asynchronous fsync */</comment>
    <if_stmt><if>if <condition>(<expr><name>file_fsync_mode</name> <operator>==</operator> <name>FSYNC_ALL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>io_prep_fsync</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>io_prep_fdsync</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><call><name>file_submit_or_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>FILE_OP_TYPE_FSYNC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <comment type="block">/* Use msync on file on 64-bit architectures */</comment>
  <if type="elseif">else if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_MMAP</name></expr>)</condition>
  <block>{<block_content>
    <return>return <expr><call><name>msync</name><argument_list>(<argument><expr><name><name>mmaps</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name>file_size</name></expr></argument>, <argument><expr><name>MS_SYNC</name> <operator>|</operator> <name>MS_INVALIDATE</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* Unknown I/O mode */</comment>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>file_fsync</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>file_do_fsync</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to fsync file! file: "</literal> <name>FD_FMT</name></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sb_counter_inc</name><argument_list>(<argument><expr><name>thread_id</name></expr></argument>, <argument><expr><name>SB_CNT_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>ssize_t</name></type> <name>file_pread</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>file_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>count</name></decl></parameter>,
                   <parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE_DESCRIPTOR</name></type> <name>fd</name> <init>= <expr><name><name>files</name><index>[<expr><name>file_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>    <name>page_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type>    <name>page_offset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>iocb</name></name></type> <name>iocb</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_SYNC</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>pread</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Use asynchronous read */</comment>
    <expr_stmt><expr><call><name>io_prep_pread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>file_submit_or_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>FILE_OP_TYPE_READ</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_MMAP</name></expr>)</condition>
  <block>{<block_content>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
    <comment type="block">/* Create file mapping for each I/O operation on 32-bit platforms */</comment>
    <expr_stmt><expr><name>page_addr</name> <operator>=</operator> <name>offset</name> <operator>&amp;</operator> <name>file_page_mask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>page_offset</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>page_addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <name>page_offset</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>,
                 <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>page_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>start</name> <operator>+</operator> <name>page_offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <name>page_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>start</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>page_addr</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>page_offset</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
    
    <comment type="block">/* We already have all files mapped on 64-bit platforms */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mmaps</name><index>[<expr><name>file_id</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>count</name></expr>;</return>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_MMAP */</comment>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* Unknown I/O mode */</comment>
</block_content>}</block></function>


<function><type><name>ssize_t</name></type> <name>file_pwrite</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>file_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>count</name></decl></parameter>,
                    <parameter><decl><type><name>long</name> <name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE_DESCRIPTOR</name></type> <name>fd</name> <init>= <expr><name><name>files</name><index>[<expr><name>file_id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <decl_stmt><decl><type><name>void</name>        <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>       <name>page_addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>       <name>page_offset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>iocb</name></name></type> <name>iocb</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>thread_id</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_SYNC</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>pwrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_ASYNC</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Use asynchronous write */</comment>
    <expr_stmt><expr><call><name>io_prep_pwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>file_submit_or_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iocb</name></expr></argument>, <argument><expr><name>FILE_OP_TYPE_WRITE</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>thread_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
  <if type="elseif">else if <condition>(<expr><name>file_io_mode</name> <operator>==</operator> <name>FILE_IO_MODE_MMAP</name></expr>)</condition>
  <block>{<block_content>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
    <comment type="block">/* Create file mapping for each I/O operation on 32-bit platforms */</comment>
    <expr_stmt><expr><name>page_addr</name> <operator>=</operator> <name>offset</name> <operator>&amp;</operator> <name>file_page_mask</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>page_offset</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name>page_addr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <name>page_offset</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>,
                 <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>page_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>start</name> <operator>+</operator> <name>page_offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <name>page_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>count</name></expr>;</return>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>start</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>page_addr</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>page_offset</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

    <comment type="block">/* We already have all files mapped on 64-bit platforms */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>mmaps</name><index>[<expr><name>file_id</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>count</name></expr>;</return>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>    
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_MMAP */</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* Unknown I/O mode */</comment>
</block_content>}</block></function>


<comment type="block">/* Parse the command line arguments */</comment>


<function><type><name>int</name></type> <name>parse_arguments</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>mode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>i</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>num_files</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"file-num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>num_files</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for file-num: %d"</literal></expr></argument>, <argument><expr><name>num_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>total_size</name> <operator>=</operator> <call><name>sb_get_value_size</name><argument_list>(<argument><expr><literal type="string">"file-total-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for file-total-size: %lld"</literal></expr></argument>,
             <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>file_size</name> <operator>=</operator> <name>total_size</name> <operator>/</operator> <name>num_files</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"file-test-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* File test mode is necessary only for 'run' command */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sb_globals</name><operator>.</operator><name>cmdname</name></name></expr></argument>, <argument><expr><literal type="string">"run"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Missing required argument: --file-test-mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"fileio options:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sb_print_options</name><argument_list>(<argument><expr><name>fileio_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"seqwr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>test_mode</name> <operator>=</operator> <name>MODE_WRITE</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"seqrewr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>test_mode</name> <operator>=</operator> <name>MODE_REWRITE</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"seqrd"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>test_mode</name> <operator>=</operator> <name>MODE_READ</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"rndrd"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>test_mode</name> <operator>=</operator> <name>MODE_RND_READ</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"rndwr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>test_mode</name> <operator>=</operator> <name>MODE_RND_WRITE</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"rndrw"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>test_mode</name> <operator>=</operator> <name>MODE_RND_RW</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid IO operations mode: %s."</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>mode</name>  <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"file-io-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="string">"sync"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>file_io_mode</name> <operator>=</operator> <name>FILE_IO_MODE_SYNC</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"async"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBAIO</name></cpp:ifdef>
    <expr_stmt><expr><name>file_io_mode</name> <operator>=</operator> <name>FILE_IO_MODE_ASYNC</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
             <argument><expr><literal type="string">"asynchronous I/O mode is unsupported on this platform."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"mmap"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
    <expr_stmt><expr><name>file_io_mode</name> <operator>=</operator> <name>FILE_IO_MODE_MMAP</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
             <argument><expr><literal type="string">"mmap'ed I/O mode is unsupported on this platform."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"unknown I/O mode: %s"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><name>file_merged_requests</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"file-merged-requests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file_merged_requests</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for file-merged-requests: %d."</literal></expr></argument>,
             <argument><expr><name>file_merged_requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>file_block_size</name> <operator>=</operator> <call><name>sb_get_value_size</name><argument_list>(<argument><expr><literal type="string">"file-block-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file_block_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for file-block-size: %d."</literal></expr></argument>,
             <argument><expr><name>file_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>file_merged_requests</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>file_request_size</name> <operator>=</operator> <name>file_block_size</name> <operator>*</operator> <name>file_merged_requests</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>file_request_size</name> <operator>=</operator> <name>file_block_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"file-extra-flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>sb_list_item_t</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
  <macro><name>SB_LIST_FOR_EACH</name><argument_list>(<argument>pos</argument>, <argument>sb_get_value_list(<literal type="string">"file-extra-flags"</literal>)</argument>)</argument_list></macro>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>SB_LIST_ENTRY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value_t</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>file_extra_flags</name> <operator>|=</operator> <name>SB_FILE_FLAG_SYNC</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"dsync"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>file_extra_flags</name> <operator>|=</operator> <name>SB_FILE_FLAG_DSYNC</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"direct"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>file_extra_flags</name> <operator>|=</operator> <name>SB_FILE_FLAG_DIRECTIO</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for file-extra-flags: %s"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>file_fsync_freq</name> <operator>=</operator> <call><name>sb_get_value_int</name><argument_list>(<argument><expr><literal type="string">"file-fsync-freq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file_fsync_freq</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for file-fsync-freq: %d."</literal></expr></argument>,
             <argument><expr><name>file_fsync_freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>file_fsync_end</name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"file-fsync-end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>file_fsync_all</name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"file-fsync-all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* file-fsync-all overrides file-fsync-end and file-fsync-freq */</comment>
  <if_stmt><if>if <condition>(<expr><name>file_fsync_all</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>file_fsync_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>file_fsync_freq</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"file-fsync-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"fsync"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>file_fsync_mode</name> <operator>=</operator> <name>FSYNC_ALL</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"fdatasync"</literal></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FDATASYNC</name></cpp:ifdef>
    <expr_stmt><expr><name>file_fsync_mode</name> <operator>=</operator> <name>FSYNC_DATA</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"fdatasync() is unavailable on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid fsync mode: %s."</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>file_rw_ratio</name> <operator>=</operator> <call><name>sb_get_value_double</name><argument_list>(<argument><expr><literal type="string">"file-rw-ratio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file_rw_ratio</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for --file-rw-ratio: %f."</literal></expr></argument>, <argument><expr><name>file_rw_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>per_thread</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>per_thread</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <call><name>sb_memalign</name><argument_list>(<argument><expr><name>file_request_size</name></expr></argument>, <argument><expr><call><name>sb_getpagesize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate a memory buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>per_thread</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>file_request_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* check if two requests are sequential */</comment>


<function><type><name>void</name></type> <name>check_seq_req</name><parameter_list>(<parameter><decl><type><name>sb_file_request_t</name> <modifier>*</modifier></type><name>prev_req</name></decl></parameter>, <parameter><decl><type><name>sb_file_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Do not check fsync operation at the moment */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>FILE_OP_TYPE_FSYNC</name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>FILE_OP_TYPE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt> 
  <comment type="block">/* if old request is NULL do not check against it */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>prev_req</name><operator>-&gt;</operator><name>operation</name></name> <operator>==</operator> <name>FILE_OP_TYPE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <comment type="block">/* check files */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>file_id</name></name> <operator>-</operator> <name><name>prev_req</name><operator>-&gt;</operator><name>file_id</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <operator>!</operator><operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>file_id</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>prev_req</name><operator>-&gt;</operator><name>file_id</name></name> <operator>==</operator> <name>num_files</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
             <argument><expr><literal type="string">"Discovered too large file difference in seq requests!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>file_id</name></name> <operator>==</operator> <name><name>prev_req</name><operator>-&gt;</operator><name>file_id</name></name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name><name>prev_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <name><name>prev_req</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>,
               <argument><expr><literal type="string">"Discovered too large position difference in seq request!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if>    
  <else>else <comment type="block">/* if file changed last request has to complete file and new start */</comment>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>prev_req</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>prev_req</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name>file_size</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid file switch found!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Old: file_id: %d, pos: %d  size: %d"</literal></expr></argument>,
               <argument><expr><name><name>prev_req</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prev_req</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prev_req</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"New: file_id: %d, pos: %d  size: %d"</literal></expr></argument>,
               <argument><expr><name><name>r</name><operator>-&gt;</operator><name>file_id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return;</return>
    </block_content>}</block></if></if_stmt>  
  </block_content>}</block></else></if_stmt>    
</block_content>}</block></function> 


<comment type="block">/*
  Alignment requirement for mmap(). The same as page size, except on Windows
  (on Windows it has to be 64KB, even if pagesize is only 4 or 8KB)
*/</comment>
<function><type><name>size_t</name></type> <name>sb_get_allocation_granularity</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>sb_getpagesize</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sb_free_memaligned</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FILE_DESCRIPTOR</name></type> <name>sb_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE_DESCRIPTOR</name></type> <name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>convert_extra_flags</name><argument_list>(<argument><expr><name>file_extra_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>SB_INVALID_FILE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>flags</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DIRECTIO</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>VALID_FILE</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>file_extra_flags</name> <operator>&amp;</operator> <name>SB_FILE_FLAG_DIRECTIO</name> <operator>&amp;&amp;</operator>
      <call><name>directio</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>DIRECTIO_ON</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"directio() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SB_INVALID_FILE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  Create a file with a given path. Signal an error if the file already
  exists. Return a non-zero value on error.
*/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sb_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE_DESCRIPTOR</name></type> <name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>!</operator><call><name>VALID_FILE</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Fill buffer with random values and write checksum */</comment>


<function><type><name>void</name></type> <name>file_fill_buffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>,
                      <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>FILE_CHECKSUM_LENGTH</name> <operator>+</operator> <name>FILE_OFFSET_LENGTH</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sb_rand_uniform_uint64</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt></block_content></block></for>

  <comment type="block">/* Store the checksum */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator>
                                 <operator>(</operator><name>FILE_CHECKSUM_LENGTH</name> <operator>+</operator> <name>FILE_OFFSET_LENGTH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Store the offset */</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>i</name> <operator>+</operator> <name>FILE_CHECKSUM_LENGTH</name><operator>)</operator> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Validate checksum and offset of block read from disk */</comment>


<function><type><name>int</name></type> <name>file_validate_buffer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name>  <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>checksum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cs_offset</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cs_offset</name> <operator>=</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>FILE_CHECKSUM_LENGTH</name> <operator>+</operator> <name>FILE_OFFSET_LENGTH</name><operator>)</operator></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>checksum</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>crc32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>cs_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>cs_offset</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Checksum mismatch in block with offset: %lld"</literal></expr></argument>,
             <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"    Calculated value: 0x%x    Stored value: 0x%x"</literal></expr></argument>,
             <argument><expr><name>checksum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>cs_offset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>cs_offset</name> <operator>+</operator> <name>FILE_CHECKSUM_LENGTH</name><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Offset mismatch in block:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"   Actual offset: %zu    Stored offset: %zu"</literal></expr></argument>,
             <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>cs_offset</name> <operator>+</operator> <name>FILE_CHECKSUM_LENGTH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
