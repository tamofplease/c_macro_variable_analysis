<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sysbench/src/tests/memory/sb_memory.c"><comment type="block">/* Copyright (C) 2004 MySQL AB
   Copyright (C) 2004-2018 Alexey Kopytov &lt;akopytov@gmail.com&gt;

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sysbench.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sb_rand.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_IPC_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ipc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_SHM_H</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE_PAGE_SIZE</name></cpp:macro> <cpp:value>(4UL * 1024 * 1024)</cpp:value></cpp:define>

<comment type="block">/* Memory test arguments */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sb_arg_t</name></type> <name><name>memory_args</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"memory-block-size"</literal></expr></argument>, <argument><expr><literal type="string">"size of memory block for test"</literal></expr></argument>, <argument><expr><literal type="string">"1K"</literal></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"memory-total-size"</literal></expr></argument>, <argument><expr><literal type="string">"total size of data to transfer"</literal></expr></argument>, <argument><expr><literal type="string">"100G"</literal></expr></argument>, <argument><expr><name>SIZE</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"memory-scope"</literal></expr></argument>, <argument><expr><literal type="string">"memory access scope {global,local}"</literal></expr></argument>, <argument><expr><literal type="string">"global"</literal></expr></argument>,
         <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"memory-hugetlb"</literal></expr></argument>, <argument><expr><literal type="string">"allocate memory from HugeTLB pool"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"memory-oper"</literal></expr></argument>, <argument><expr><literal type="string">"type of memory operations {read, write, none}"</literal></expr></argument>,
         <argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,
  <expr><call><name>SB_OPT</name><argument_list>(<argument><expr><literal type="string">"memory-access-mode"</literal></expr></argument>, <argument><expr><literal type="string">"memory access mode {seq,rnd}"</literal></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument>, <argument><expr><name>STRING</name></expr></argument>)</argument_list></call></expr>,

  <expr><name>SB_OPT_END</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Memory test operations */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memory_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memory_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sb_event_t</name></type> <name>memory_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_rnd_none</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_rnd_read</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_rnd_write</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_seq_none</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_seq_read</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>event_seq_write</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memory_report_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memory_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sb_test_t</name></type> <name>memory_test</name> <init>=
<expr><block>{
  <expr><operator>.</operator><name>sname</name> <operator>=</operator> <literal type="string">"memory"</literal></expr>,
  <expr><operator>.</operator><name>lname</name> <operator>=</operator> <literal type="string">"Memory functions speed test"</literal></expr>,
  <expr><operator>.</operator><name>ops</name> <operator>=</operator> <block>{
    <expr><operator>.</operator><name>init</name> <operator>=</operator> <name>memory_init</name></expr>,
    <expr><operator>.</operator><name>print_mode</name> <operator>=</operator> <name>memory_print_mode</name></expr>,
    <expr><operator>.</operator><name>next_event</name> <operator>=</operator> <name>memory_next_event</name></expr>,
    <expr><operator>.</operator><name>report_intermediate</name> <operator>=</operator> <name>memory_report_intermediate</name></expr>,
    <expr><operator>.</operator><name>report_cumulative</name> <operator>=</operator> <name>memory_report_cumulative</name></expr>
  }</block></expr>,
  <expr><operator>.</operator><name>args</name> <operator>=</operator> <name>memory_args</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Test arguments */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>memory_block_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type>    <name>memory_total_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>memory_scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>memory_oper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>memory_access_rnd</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>memory_hugetlb</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>max_offset</name></decl>;</decl_stmt>

<comment type="block">/* Arrays of per-thread buffers and event counters */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>thread_counters</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>hugetlb_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>register_test_memory</name><parameter_list>(<parameter><decl><type><name>sb_list_t</name> <modifier>*</modifier></type><name>tests</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SB_LIST_ADD_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>memory_test</name><operator>.</operator><name>listitem</name></name></expr></argument>, <argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>memory_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>         <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name>       <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>memory_block_size</name> <operator>=</operator> <call><name>sb_get_value_size</name><argument_list>(<argument><expr><literal type="string">"memory-block-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>memory_block_size</name> <operator>&lt;</operator> <name>SIZEOF_SIZE_T</name> <operator>||</operator>
      <comment type="block">/* Must be a power of 2 */</comment>
      <operator>(</operator><name>memory_block_size</name> <operator>&amp;</operator> <operator>(</operator><name>memory_block_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for memory-block-size: %s"</literal></expr></argument>,
             <argument><expr><call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"memory-block-size"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>max_offset</name> <operator>=</operator> <name>memory_block_size</name> <operator>/</operator> <name>SIZEOF_SIZE_T</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>memory_total_size</name> <operator>=</operator> <call><name>sb_get_value_size</name><argument_list>(<argument><expr><literal type="string">"memory-total-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"memory-scope"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"global"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_scope</name> <operator>=</operator> <name>SB_MEM_SCOPE_GLOBAL</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_scope</name> <operator>=</operator> <name>SB_MEM_SCOPE_LOCAL</name></expr>;</expr_stmt></block_content></block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for memory-scope: %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>
    <expr_stmt><expr><name>memory_hugetlb</name> <operator>=</operator> <call><name>sb_get_value_flag</name><argument_list>(<argument><expr><literal type="string">"memory-hugetlb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"memory-oper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_oper</name> <operator>=</operator> <name>SB_MEM_OP_WRITE</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_oper</name> <operator>=</operator> <name>SB_MEM_OP_READ</name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_oper</name> <operator>=</operator> <name>SB_MEM_OP_NONE</name></expr>;</expr_stmt></block_content></block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for memory-oper: %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sb_get_value_string</name><argument_list>(<argument><expr><literal type="string">"memory-access-mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"seq"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_access_rnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"rnd"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>memory_access_rnd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Invalid value for memory-access-mode: %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>memory_scope</name> <operator>==</operator> <name>SB_MEM_SCOPE_GLOBAL</name></expr>)</condition>
  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>memory_hugetlb</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>hugetlb_alloc</name><argument_list>(<argument><expr><name>memory_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>sb_memalign</name><argument_list>(<argument><expr><name>memory_block_size</name></expr></argument>, <argument><expr><call><name>sb_getpagesize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate buffer!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>thread_counters</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sb_globals</name><operator>.</operator><name>threads</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buffers</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>sb_globals</name><operator>.</operator><name>threads</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>thread_counters</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buffers</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate thread-local memory!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>memory_scope</name> <operator>==</operator> <name>SB_MEM_SCOPE_GLOBAL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name>memory_hugetlb</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>hugetlb_alloc</name><argument_list>(<argument><expr><name>memory_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sb_memalign</name><argument_list>(<argument><expr><name>memory_block_size</name></expr></argument>, <argument><expr><call><name>sb_getpagesize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate buffer for thread #%d!"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>memory_block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>thread_counters</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
      <name>memory_total_size</name> <operator>/</operator> <name>memory_block_size</name> <operator>/</operator> <name><name>sb_globals</name><operator>.</operator><name>threads</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <switch>switch <condition>(<expr><name>memory_oper</name></expr>)</condition> <block>{<block_content>
  <case>case <expr><name>SB_MEM_OP_NONE</name></expr>:</case>
    <expr_stmt><expr><name><name>memory_test</name><operator>.</operator><name>ops</name><operator>.</operator><name>execute_event</name></name> <operator>=</operator>
      <ternary><condition><expr><name>memory_access_rnd</name></expr> ?</condition><then> <expr><name>event_rnd_none</name></expr> </then><else>: <expr><name>event_seq_none</name></expr></else></ternary></expr>;</expr_stmt>
    <break>break;</break>

  <case>case <expr><name>SB_MEM_OP_READ</name></expr>:</case>
    <expr_stmt><expr><name><name>memory_test</name><operator>.</operator><name>ops</name><operator>.</operator><name>execute_event</name></name> <operator>=</operator>
      <ternary><condition><expr><name>memory_access_rnd</name></expr> ?</condition><then> <expr><name>event_rnd_read</name></expr> </then><else>: <expr><name>event_seq_read</name></expr></else></ternary></expr>;</expr_stmt>
    <break>break;</break>

  <case>case <expr><name>SB_MEM_OP_WRITE</name></expr>:</case>
    <expr_stmt><expr><name><name>memory_test</name><operator>.</operator><name>ops</name><operator>.</operator><name>execute_event</name></name> <operator>=</operator>
      <ternary><condition><expr><name>memory_access_rnd</name></expr> ?</condition><then> <expr><name>event_rnd_write</name></expr> </then><else>: <expr><name>event_seq_write</name></expr></else></ternary></expr>;</expr_stmt>
    <break>break;</break>

  <default>default:</default>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unknown memory request type: %d\n"</literal></expr></argument>, <argument><expr><name>memory_oper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>

  <comment type="block">/* Use our own limit on the number of events */</comment>
  <expr_stmt><expr><name><name>sb_globals</name><operator>.</operator><name>max_events</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>sb_event_t</name></type> <name>memory_next_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>sb_event_t</name></type>      <name>req</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>memory_total_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>thread_counters</name><index>[<expr><name>tid</name></expr>]</index></name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SB_REQ_TYPE_NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>req</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>SB_REQ_TYPE_MEMORY</name></expr>;</expr_stmt>

  <return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
  Use either 32- or 64-bit primitives depending on the native word
  size. ConcurrencyKit ensures the corresponding loads/stores are not optimized
  away by the compiler.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_LOAD</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ck_pr_load_32((uint32_t *)(ptr))</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_STORE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ck_pr_store_32((uint32_t *)(ptr),(uint32_t)(val))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SIZEOF_SIZE_T</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:elif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_LOAD</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ck_pr_load_64((uint64_t *)(ptr))</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_STORE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ck_pr_store_64((uint64_t *)(ptr),(uint64_t)(val))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> Unsupported platform.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>event_rnd_none</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>req</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>tid</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_offset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>size_t</name><operator>)</operator> <call><name>sb_rand_default</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>event_rnd_read</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>req</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_offset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>sb_rand_default</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>val</name> <init>= <expr><call><name>SIZE_T_LOAD</name><argument_list>(<argument><expr><name><name>buffers</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>val</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>event_rnd_write</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>req</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_offset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>sb_rand_default</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SIZE_T_STORE</name><argument_list>(<argument><expr><name><name>buffers</name><index>[<expr><name>tid</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>event_seq_none</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>req</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for <control>(<init><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>buffers</name><index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>max_offset</name></expr></init></decl>;</init> <condition><expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ck_pr_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* nop */</comment>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>event_seq_read</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>req</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for <control>(<init><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>buffers</name><index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>max_offset</name></expr></init></decl>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>val</name> <init>= <expr><call><name>SIZE_T_LOAD</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>val</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>event_seq_write</name><parameter_list>(<parameter><decl><type><name>sb_event_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>req</name></expr>;</expr_stmt> <comment type="block">/* unused */</comment>

  <for>for <control>(<init><decl><type><name>size_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>buffers</name><index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>max_offset</name></expr></init></decl>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><call><name>SIZE_T_STORE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>memory_print_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Running memory speed test with the following options:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"  block size: %ldKiB"</literal></expr></argument>,
           <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>memory_block_size</name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"  total size: %ldMiB"</literal></expr></argument>,
           <argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>memory_total_size</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>memory_oper</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SB_MEM_OP_READ</name></expr>:</case>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"read"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SB_MEM_OP_WRITE</name></expr>:</case>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"write"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SB_MEM_OP_NONE</name></expr>:</case>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"(unknown)"</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"  operation: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>memory_scope</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SB_MEM_SCOPE_GLOBAL</name></expr>:</case>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"global"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SB_MEM_SCOPE_LOCAL</name></expr>:</case>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"local"</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"(unknown)"</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"  scope: %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Print intermediate test statistics.
*/</comment>

<function><type><name>void</name></type> <name>memory_report_intermediate</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>megabyte</name> <init>= <expr><literal type="number">1024.0</literal> <operator>*</operator> <literal type="number">1024.0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_timestamp</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>time_total</name></name></expr></argument>, <argument><expr><literal type="string">"%4.2f MiB/sec"</literal></expr></argument>,
                <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name> <operator>*</operator> <name>memory_block_size</name> <operator>/</operator> <name>megabyte</name> <operator>/</operator>
                <name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
  Print cumulative test statistics.
*/</comment>

<function><type><name>void</name></type> <name>memory_report_cumulative</name><parameter_list>(<parameter><decl><type><name>sb_stat_t</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>megabyte</name> <init>= <expr><literal type="number">1024.0</literal> <operator>*</operator> <literal type="number">1024.0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"Total operations: %"</literal> <name>PRIu64</name> <literal type="string">" (%8.2f per second)\n"</literal></expr></argument>,
           <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name> <operator>/</operator> <name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>memory_oper</name> <operator>!=</operator> <name>SB_MEM_OP_NONE</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>mb</name> <init>= <expr><name><name>stat</name><operator>-&gt;</operator><name>events</name></name> <operator>*</operator> <name>memory_block_size</name> <operator>/</operator> <name>megabyte</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>log_text</name><argument_list>(<argument><expr><name>LOG_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%4.2f MiB transferred (%4.2f MiB/sec)\n"</literal></expr></argument>,
             <argument><expr><name>mb</name></expr></argument>, <argument><expr><name>mb</name> <operator>/</operator> <name><name>stat</name><operator>-&gt;</operator><name>time_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sb_report_cumulative</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LARGE_PAGES</name></cpp:ifdef>

<comment type="block">/* Allocate memory from HugeTLB pool */</comment>

<function><type><name>void</name> <modifier>*</modifier></type> <name>hugetlb_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>shmid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>shmid_ds</name></name></type> <name>buf</name></decl>;</decl_stmt>

  <comment type="block">/* Align block size to my_large_page_size */</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>LARGE_PAGE_SIZE</name><operator>)</operator> <operator>+</operator> <name>LARGE_PAGE_SIZE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>shmid</name> <operator>=</operator> <call><name>shmget</name><argument_list>(<argument><expr><name>IPC_PRIVATE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>SHM_HUGETLB</name> <operator>|</operator> <name>SHM_R</name> <operator>|</operator> <name>SHM_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>shmid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
      <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>,
                <argument><expr><literal type="string">"Failed to allocate %zd bytes from HugeTLB memory."</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>shmat</name><argument_list>(<argument><expr><name>shmid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>log_errno</name><argument_list>(<argument><expr><name>LOG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to attach shared memory segment,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shmctl</name><argument_list>(<argument><expr><name>shmid</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
        Remove the shared memory segment so that it will be automatically freed
            after memory is detached or process exits
  */</comment>
  <expr_stmt><expr><call><name>shmctl</name><argument_list>(<argument><expr><name>shmid</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
