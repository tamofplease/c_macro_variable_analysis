<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/app/gid/gid_server/src/http_service.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<comment type="block">/* ½«Êý¾Ý·µ»Ø¸ø HTTP ¿Í»§¶Ë */</comment>

<function><type><name>int</name></type> <name>http_server_send_respond</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type> <name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>keep_alive</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>vector</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* Êý¾ÝÊý×é */</comment>
	<decl_stmt><decl><type><name>ACL_VSTRING</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name><modifier>*</modifier></type> <name>hdr_res</name> <init>= <expr><call><name>http_hdr_res_static</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÔÚÇëÇóÍ·ÖÐÉèÖÃÇëÇóÌåµÄÊý¾Ý³¤¶È */</comment>
	<expr_stmt><expr><call><name>http_hdr_put_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃ³¤Á¬½ÓÑ¡Ïî */</comment>
	<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>,
		<argument><expr><ternary><condition><expr><name>keep_alive</name></expr> ?</condition><then> <expr><literal type="string">"keep-alive"</literal></expr> </then><else>: <expr><literal type="string">"close"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¹¹½¨ HTTP ÏìÓ¦Í·Êý¾Ý */</comment>
	<expr_stmt><expr><call><name>http_hdr_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ HTTP Í· */</comment>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃ HTTP Ìå */</comment>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>body</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<comment type="block">/* ·¢ËÍÏìÓ¦Í·¼°ÏìÓ¦Ìå */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writevn</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÊÍ·Å HTTP ÏìÓ¦Í·¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÊÍ·Å»º³åÇø */</comment>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ·¢ËÍHTTPÏìÓ¦³É¹¦ */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* HTTP Ð­Òé´¦Àí¹ý³ÌÈë¿Ú */</comment>

<function><type><name>int</name></type> <name>http_service</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name> <init>= <expr><call><name>http_hdr_req_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>json_fmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* ¶ÁÈ¡HTTPÇëÇóÍ· */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_hdr_req_get_sync</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><name>var_cfg_io_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ÖÎöHTTPÇëÇóÍ· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_req_parse</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: http request header invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ±ØÐë±£Ö¤Êý¾ÝÌå³¤¶È &gt; 0  */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: http request header invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´Ó HTTP ÇëÇóÍ·ÖÐ»ñÈ¡ÇëÇóÌåÖÐµÄÊý¾Ý¸ñÊ½£ºXML »ò JSON ¸ñÊ½ */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>http_hdr_entry_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"x-gid-format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"xml"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>json_fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>json_fmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>http_req_new</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ´´½¨HTTPÇëÇó¶ÔÏó */</comment>

	<if_stmt><if>if <condition>(<expr><name>json_fmt</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>acl_json_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* ´´½¨JSON½âÎöÆ÷¶ÔÏó */</comment>

		<comment type="block">/* ²»¶Ï´Ó¿Í»§¶ËÁ¬½ÓÖÐ¶ÁÈ¡Êý¾Ý£¬²¢·ÅÈëJSON½âÎöÆ÷ÖÐ½øÐÐ½âÎö */</comment>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_req_body_get_sync</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>client</name></expr></argument>,
					<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ËµÃ÷Ã»ÓÐ¶Áµ½ËùÒªÇóµÄÊý¾Ý³¤¶È£¬±íÃ÷³ö´í */</comment>
				<expr_stmt><expr><call><name>http_req_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* ±íÃ÷ÒÑ¾­¶ÁÍêÁËËùÓÐµÄÊý¾Ý */</comment>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_json_update</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_json_service</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>acl_xml_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* ´´½¨XML½âÎöÆ÷¶ÔÏó */</comment>

		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_req_body_get_sync</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>client</name></expr></argument>,
					<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>http_req_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_xml_update</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_xml_service</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>http_req_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
