<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/gid/gid_server/src/gid_oper.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gid_oper.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>GID_STORE</name> <block>{
	<decl_stmt><decl><type><name>ACL_FHANDLE</name></type> <name>fh</name></decl>;</decl_stmt>		<comment type="block">/* ÎÄ¼þ¾ä±ú */</comment>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>logger</name></decl>;</decl_stmt>	<comment type="block">/* ÈÕÖ¾¾ä±ú */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tag</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* ÎÄ¼þ±êÊ¶ºÅ */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sid</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* »á»°IDºÅ£¬Ïàµ±ÓÚÃÜÂë */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name></decl>;</decl_stmt>	<comment type="block">/* ²½½øÖµ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>cur_gid</name></decl>;</decl_stmt>	<comment type="block">/* µ±Ç°µÄIDÖµ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>min_gid</name></decl>;</decl_stmt>	<comment type="block">/* ×îÐ¡µÄIDÖµ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>max_gid</name></decl>;</decl_stmt>	<comment type="block">/* ×î´óµÄIDÖµ */</comment>
}</block></struct></type> <name>GID_STORE</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>tag</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* ÎÄ¼þ±êÊ¶ºÅ */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sid</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* »á»°IDºÅ£¬Ïàµ±ÓÚÃÜÂë */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name></decl>;</decl_stmt>	<comment type="block">/* ²½½øÖµ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>cur_gid</name></decl>;</decl_stmt>	<comment type="block">/* µ±Ç°µÄIDÖµ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>min_gid</name></decl>;</decl_stmt>	<comment type="block">/* ×îÐ¡µÄIDÖµ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>max_gid</name></decl>;</decl_stmt>	<comment type="block">/* ×î´óµÄIDÖµ */</comment>
}</block></struct></type> <name>GID_STORE_CTX</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__sync_gid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Í¬²½ÄÚ´æÊý¾ÝÖÁ´ÅÅÌ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gid_store_sync</name><parameter_list>(<parameter><decl><type><name>GID_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* ÐèÒªÏÈ½«ÎÄ¼þÄÚÈÝÇå¿Õ */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (acl_file_ftruncate(store-&gt;fh.fp, 0) &lt; 0) {
		acl_msg_error("%s(%d), %s: ftruncate %s error(%s)",
			__FILE__, __LINE__, __FUNCTION__,
			ACL_VSTREAM_PATH(store-&gt;fh.fp), acl_last_serror());
		return (-1);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fseek %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%s %d %lld %lld %lld\r\n"</literal></expr></argument>,
		<argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name></expr></argument>,
		<argument><expr><name><name>store</name><operator>-&gt;</operator><name>min_gid</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>max_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ³õÊ¼»¯ÎÄ¼þÄÚÈÝ: tag:sid step cur_gid min_gid max_gid\r\n */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>,
		<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: write to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÎÄ¼þ´ò¿ªÊ±µÄ»Øµ÷º¯Êý£¬ÓÐ¿ÉÄÜÊÇ´ò¿ªÁË»º´æ¾ä±ú¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gid_store_on_open</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GID_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>GID_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GID_STORE_CTX</name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>(</operator><name>GID_STORE_CTX</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* ¼ì²éÊÇ·ñÓÐÎÊÌâ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GID_STORE</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: size(%d) != GID_STORE's size(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fh</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>GID_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Èç¹ûÊÇÐÂÎÄ¼þÔò³õÊ¼»¯ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>fsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>cur_gid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>min_gid</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>min_gid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>max_gid</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>max_gid</name></name></expr>;</expr_stmt>

		<return>return <expr><operator>(</operator><call><name>gid_store_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Êý¾Ý¸ñÊ½£ºtag:sid step cur_gid min_gid max_gid\r\n */</comment>

	<comment type="block">/* ´ÓÎÄ¼þÖÐ»ñµÃÊý¾Ý */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: gets from %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ²ð·Ö×Ö·û´® */</comment>
	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">",\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid line(%s) from %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û´æ´¢µÄ²½½øÖµÓë²ÎÊýÖÐµÄ²½½øÖµ²»Ò»ÖÂ£¬ÔòÓÅÏÈ²ÉÓÃ²ÎÊý²½½øÖµ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name> <operator>!=</operator> <name><name>sc</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: change step from %d to %d for %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><name><name>sc</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>fh</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>sc</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>min_gid</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>max_gid</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÎÄ¼þ¾ä±úÕæÕý¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gid_store_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier><name>fh</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GID_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>GID_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* µ±ÉèÖÃÁË·ÇÊµÊ±Í¬²½±ê¼ÇÊ±²ÅÐèÒªÔÚÎÄ¼þ¾ä±ú¹Ø±ÕÊ±Í¬²½´ÅÅÌ */</comment>
	<if_stmt><if>if <condition>(<expr><name>__sync_gid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>gid_store_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: save %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ´ò¿ªÎÄ¼þ£¬Èç¹ûÎÄ¼þ²»´æÔÚÔò´´½¨ÐÂµÄÎÄ¼þ£¬Èç¹ûÎÄ¼þ¾ä±úÒÑ¾­´æÔÚÔòÖ±½Ó·µ»Ø */</comment>

<function><type><specifier>static</specifier> <name>GID_STORE</name> <modifier>*</modifier></type><name>gid_store_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>filepath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name> <init>= <expr><name>ACL_FHANDLE_O_NOATIME</name>
		<operator>|</operator> <name>ACL_FHANDLE_O_MLOCK</name>
		<operator>|</operator> <name>ACL_FHANDLE_O_EXCL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GID_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GID_STORE_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>sid</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>sid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>step</name></name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>cur_gid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>min_gid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>max_gid</name></name> <operator>=</operator> <literal type="number">0x7FFFFFFFFFFFFFFFllu</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>GID_STORE</name><operator>*</operator><operator>)</operator> <call><name>acl_fhandle_open</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GID_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>oflags</name></expr></argument>,
			<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>gid_store_on_open</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>gid_store_on_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>store</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* »ñµÃµ±Ç°±¾µØÊ±¼ä */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>logtime_fmt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type>  <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>local_time</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>time</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%Y/%m/%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>local_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ¼ÇÂ¼ÈÕÖ¾ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gid_logger</name><parameter_list>(<parameter><decl><type><name>GID_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>logger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logtime_fmt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>, <argument><expr><literal type="string">"%s|%s %lld\r\n"</literal></expr></argument>,
		<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fprintf to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>logger</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>gid_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag_in</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>gid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>tag</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GID_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>

	<comment type="block">/* ÐèÒª´Ó tag ´®ÖÐ·ÖÀë³ö sid ´® */</comment>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>sid</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>sid</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>gid_store_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>sid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>sid</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>sid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: input sid(%s) invalid"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><ternary><condition><expr><name>sid</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>sid</name></expr> ?</condition><then> <expr><name>sid</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_SID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* ¹Ø±ÕÎÄ¼þ¾ä±ú£¬ÑÓ³Ù 60 Ãëºó¹Ø±Õ */</comment>
			<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÒÑ¾­´ïµ½×î´óÖµ£¬Ôò±ÀÀ£ÁË! */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>max_gid</name></name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>store</name><operator>-&gt;</operator><name>step</name></name> <operator>&lt;=</operator> <name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: %s Override!!, max_gid: %lld,"</literal>
			<literal type="string">" step: %d, cur_gid: %lld"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>max_gid</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>step</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_OVERRIDE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* ¹Ø±ÕÎÄ¼þ¾ä±ú£¬ÑÓ³Ù 60 Ãëºó¹Ø±Õ */</comment>
		<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name> <operator>+=</operator> <name><name>store</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>cur_gid</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__sync_gid</name> <operator>&amp;&amp;</operator> <call><name>gid_store_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_SAVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: save %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>fh</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ¹Ø±ÕÎÄ¼þ¾ä±ú£¬ÑÓ³Ù 60 Ãëºó¹Ø±Õ */</comment>
		<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÇÈÕÖ¾ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>logger</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gid_logger</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ¹Ø±ÕÎÄ¼þ¾ä±ú£¬ÑÓ³Ù 60 Ãëºó¹Ø±Õ */</comment>
	<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>fh</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>gid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid_serror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
		<decl_stmt><decl><type><name>int</name></type>  <name>err</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	}</block> <decl><name><name>errors</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{ <expr><name>GID_OK</name></expr>, <expr><literal type="string">"ok"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_SID</name></expr>, <expr><literal type="string">"sid invalid"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_OVERRIDE</name></expr>, <expr><literal type="string">"gid override"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_SAVE</name></expr>, <expr><literal type="string">"gid save error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
	}</block></expr></init></decl>;</struct>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unknown</name> <init>= <expr><literal type="string">"unkown error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name><name>errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><name>unknown</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gid_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fh_limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync_gid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_section</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sync_gid</name> <operator>=</operator> <name>sync_gid</name></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>acl_fhandle_init</name><argument_list>(<argument><expr><name>fh_limit</name></expr></argument>, <argument><expr><name>debug_section</name></expr></argument>, <argument><expr><name>ACL_FHANDLE_F_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gid_finish</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_fhandle_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
