<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/gid/gid_server/src/service_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gid_oper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmdline_service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<comment type="block">/* ÅäÖÃÎÄ¼þÏî */</comment>

<comment type="block">/* TODO: you can add configure items here */</comment>

<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_debug_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_loop_enable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_sync_gid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_BOOL_TABLE</name></type> <name><name>service_conf_bool_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of (bool) type here */</comment>
	<expr><block>{ <expr><literal type="string">"debug_mem"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_debug_mem</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"loop_enable"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_loop_enable</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sync_gid"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_sync_gid</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_debug_section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_gid_step</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_gid_test</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_fh_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_io_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_INT_TABLE</name></type> <name><name>service_conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>
	<expr><block>{ <expr><literal type="string">"debug_section"</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_fh_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"gid_step"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_gid_step</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"gid_test"</literal></expr>, <expr><literal type="number">50000</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_gid_test</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"fh_limit"</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_fh_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"io_timeout"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_io_timeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_gid_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_proto_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_proto_default</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_STR_TABLE</name></type> <name><name>service_conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of (char *) type here */</comment>
	<expr><block>{ <expr><literal type="string">"gid_path"</literal></expr>, <expr><literal type="string">"./var"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_gid_path</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"proto_list"</literal></expr>, <expr><literal type="string">"http|127.0.0.1:7070|127.0.0.1:7071, cmdline|127.0.0.1:7072|127.0.0.1:7073"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_proto_list</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"proto_default"</literal></expr>, <expr><literal type="string">"http"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_proto_default</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>PROTO</name> <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>service</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>PROTO</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>__proto_map</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>__default_service</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proto_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>service</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROTO</name> <modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"invalid proto: %s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"cmdline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <name>cmdline_service</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <name>http_service</name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"invalid service name: %s"</literal></expr></argument>, <argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>(</operator>struct <name>PROTO</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>PROTO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proto</name><operator>-&gt;</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>proto</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>proto</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>proto</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>proto</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proto</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>proto</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>__proto_map</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_proto_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name>var_cfg_proto_list</name></expr></argument>, <argument><expr><literal type="string">",; \t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__proto_map</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>tokens</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><call><name>proto_add</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ³õÊ¼»¯º¯Êý */</comment>
<function><type><name>void</name></type> <name>service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_memory_debug_stack</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var_cfg_proto_default</name></expr></argument>, <argument><expr><literal type="string">"cmdline"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__default_service</name> <operator>=</operator> <name>cmdline_service</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>__default_service</name> <operator>=</operator> <name>http_service</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>parse_proto_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gid_init</name><argument_list>(<argument><expr><name>var_cfg_fh_limit</name></expr></argument>, <argument><expr><name>var_cfg_sync_gid</name></expr></argument>, <argument><expr><name>var_cfg_debug_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__proto_map</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>__proto_map</name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>gid_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>service_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>service</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROTO</name> <modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getsockname</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"can't get local addr from fd: %d"</literal></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__proto_map</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>(</operator><name>PROTO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_strrncasecmp</name><argument_list>(<argument><expr><name><name>proto</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>proto</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>service</name> <operator>=</operator> <name><name>proto</name><operator>-&gt;</operator><name>service</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>service</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <name>__default_service</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"user default service for %s"</literal></expr></argument>, <argument><expr><name>var_cfg_proto_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_loop_enable</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>service</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>service</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
