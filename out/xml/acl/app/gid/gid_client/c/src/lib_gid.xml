<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/gid/gid_client/c/src/lib_gid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_gid.h"</cpp:file></cpp:include>

<comment type="block">/* Ê¹ÓÃÏß³Ì¾Ö²¿±äÁ¿£¬µ«×¢Òâ´Ë¿â²»µÃ±àÒë³É¶¯Ì¬¿âXXX */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>__client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>acl_int64</name></type> <name>gid_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>gid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>err</name></decl>, <decl><type ref="prev"/><name>nretry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>var_gid_server_addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__client</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>var_gid_server_addr</name></expr></argument>,
					<argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><name>var_gid_conn_timeout</name></expr></argument>,
					<argument><expr><name>var_gid_rw_timeout</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>__client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_CONN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>var_gid_proto</name> <operator>==</operator> <name>GID_PROTO_JSON</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>gid_json_next</name><argument_list>(<argument><expr><name>__client</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>var_gid_proto</name> <operator>==</operator> <name>GID_PROTO_XML</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>gid_xml_next</name><argument_list>(<argument><expr><name>__client</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>gid_cmdline_next</name><argument_list>(<argument><expr><name>__client</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>gid</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>!=</operator> <name>GID_ERR_IO</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nretry</name><operator>++</operator> <operator>&gt;=</operator> <name>var_gid_retry_limit</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>var_gid_keepalive</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>__client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__client</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>gid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
#define GID_OK			200
#define GID_ERR_INIT		400
#define GID_ERR_CONN		401
#define GID_ERR_IO		402
#define GID_ERR_PROTO		403       
#define GID_ERR_SERVER		404

#define GID_ERR_SID		500
#define GID_ERR_OVERRIDE	501
#define GID_ERR_SAVE		502
*/</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid_client_serror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
		<decl_stmt><decl><type><name>int</name></type>  <name>err</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	}</block> <decl><name><name>errors</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{ <expr><name>GID_OK</name></expr>, <expr><literal type="string">"ok"</literal></expr> }</block></expr>,

		<comment type="block">/* ¿Í»§¶ËÏà¹Ø´íÎó */</comment>
		<expr><block>{ <expr><name>GID_ERR_INIT</name></expr>, <expr><literal type="string">"gid_client_init should called first"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_CONN</name></expr>, <expr><literal type="string">"connect server error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_IO</name></expr>, <expr><literal type="string">"readwrite from server error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_PROTO</name></expr>, <expr><literal type="string">"gid protocol error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_SERVER</name></expr>, <expr><literal type="string">"gid server internal error"</literal></expr> }</block></expr>,

		<comment type="block">/* ·þÎñ¶Ë·µ»ØµÄ´íÎó */</comment>
		<expr><block>{ <expr><name>GID_ERR_SID</name></expr>, <expr><literal type="string">"sid invalid"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_OVERRIDE</name></expr>, <expr><literal type="string">"gid override"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>GID_ERR_SAVE</name></expr>, <expr><literal type="string">"gid save error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
	}</block></expr></init></decl>;</struct>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unknown</name> <init>= <expr><literal type="string">"unknown error number"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name><name>errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><name>unknown</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
