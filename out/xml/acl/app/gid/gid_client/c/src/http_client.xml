<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/app/gid/gid_client/c/src/http_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_gid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_client.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>http_client_post_request</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keepalive</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid_fmt</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_REQ</name><modifier>*</modifier></type> <name>hdr_req</name> <init>= <expr><call><name>http_hdr_req_create</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"POST"</literal></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>vector</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* Êý¾ÝÊý×é */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* ÔÚÇëÇóÍ·ÖÐÉèÖÃÇëÇóÌåµÄÊý¾Ý³¤¶È */</comment>
	<expr_stmt><expr><call><name>http_hdr_put_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>keepalive</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>gid_fmt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>gid_fmt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"x-gid-format"</literal></expr></argument>, <argument><expr><name>gid_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>http_hdr_build_request</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ¹¹½¨ HTTP ÇëÇóÍ·Êý¾Ý */</comment>

	<comment type="block">/* ÉèÖÃ HTTP Í· */</comment>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ HTTP Ìå */</comment>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>body</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writevn</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ·¢ËÍÇëÇóÍ·¼°ÇëÇóÌå */</comment>
	<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·Å HTTP ÇëÇóÍ·¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·Å»º³åÇø */</comment>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_IO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·¢ËÍHTTPÇëÇó³É¹¦ */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_client_get_respond</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type> <name>client</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>dump</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name><modifier>*</modifier></type> <name>hdr_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_RES</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>json</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>xml</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hdr_res</name> <operator>=</operator> <call><name>http_hdr_res_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ´´½¨HTTP ÏìÓ¦Í·¶ÔÏó */</comment>
	<comment type="block">/* ¶ÁÈ¡ HTTP ·þÎñÆ÷ÏìÓ¦Í· */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_hdr_res_get_sync</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><name>var_gid_rw_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ÊÍ·Å HTTP ÏìÓ¦Í·¶ÔÏó */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* ½âÎö HTTP ÏìÓ¦Í· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_res_parse</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* ½âÎö³ö´í */</comment>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	http_hdr_print(&amp;hdr_res-&gt;hdr, "---respond---");
	*/</comment>

	<comment type="block">/* ÐèÒªÏÈ¸ù¾Ý HTTP ÏìÓ¦Í·ÅÐ¶ÏÊÇ·ñÓÐÊý¾ÝÌå */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal>  <operator>||</operator>
		<operator>(</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name>  
		<operator>&amp;&amp;</operator> <name><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&gt;</operator> <literal type="number">300</literal>  <operator>&amp;&amp;</operator> <name><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&lt;</operator> <literal type="number">400</literal><operator>)</operator></expr>)</condition> 
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>  
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>http_res_new</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* ´´½¨ HTTP ÏìÓ¦Ìå¶ÔÏó */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¶ÁÊý¾ÝÌåÊý¾Ý */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_res_body_get_sync</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_json_update</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_xml_update</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* ÒòÎª res ÖÐº¬ÓÐ hdr_res ËùÒÔ»áÒ»Í¬Á¬ hdr_res ÊÍ·Å */</comment>
	<expr_stmt><expr><call><name>http_res_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
