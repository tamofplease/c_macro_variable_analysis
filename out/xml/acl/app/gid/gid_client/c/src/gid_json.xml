<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/gid/gid_client/c/src/gid_json.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_gid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gid.h"</cpp:file></cpp:include>

<function><type><name>acl_int64</name></type> <name>gid_json_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>,
			<argument><expr><name>var_gid_rw_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>gid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>gid_json_next</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>gid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>gid_json_next</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1204</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gid</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tag_ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>tag</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"{ cmd: '%s', tag: '%s' }\r\n"</literal></expr></argument>,
			<argument><expr><name>GID_CMD_NEXT</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"{ cmd: '%s' }\r\n"</literal></expr></argument>, <argument><expr><name>GID_CMD_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* ·¢ËÍ HTTP JSON ÇëÇó */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_client_post_request</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>var_gid_url</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
		<argument><expr><literal type="string">"json"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errnum</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_IO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>acl_json_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ·ÖÅä JSON ¶ÔÏó */</comment>

	<comment type="block">/* ½ÓÊÕ HTTP JSON ÏìÓ¦ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_client_get_respond</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_IO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

	<comment type="block">/* Êý¾Ý¸ñÊ½: { status: 'ok|error', gid: xxx, tag: 'xxx', msg: 'xxx', err: 'xxx' } */</comment>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>json</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"STATUS"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GID"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>gid</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TAG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tag_ptr</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"MSG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ERR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_PROTO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_SERVER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gid</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>errnum</name> <operator>=</operator> <name>GID_ERR_PROTO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>acl_int64</name></type> <name>ngid</name> <init>= <expr><call><name>atoll</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ngid</name><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
