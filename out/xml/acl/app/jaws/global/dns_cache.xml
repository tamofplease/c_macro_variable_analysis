<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/global/dns_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dns.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__thread_safe</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>CACHE</name> <block>{
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>tm_timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type> <name>ring_entry</name></decl>;</decl_stmt>
}</block></struct></type> <name>CACHE</name>;</typedef>

<struct>struct <name>DNS_CACHE</name> <block>{
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>cache_mutex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>cache_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name></type>  <name>cache_ring</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__use_trylock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__cache_timeout</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* 300 seconds */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_lock</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"cache_lock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_safe</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: pthread_mutex_lock error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_trylock</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_safe</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_unlock</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"cache_unlock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thread_safe</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: pthread_mutex_lock error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_cache_fn</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_timer_fn</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>current</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr></argument>)</argument_list></call></expr>;</init>
		<condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>CACHE</name></expr></argument>, <argument><expr><name>ring_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>tm_timeout</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_cache_fn</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dns_cache_push_one</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dns_cache_push_one"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dns_db</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): host name empty"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): size(%d) &lt;= 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): size(%d) != array size(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
			<argument><expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__use_trylock</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>cache_trylock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>cache_lock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>, <argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): calloc error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>,
			<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cache</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add to htable error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* override the old cache */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>tm_timeout</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>=</operator> <call><name>acl_netdb_clone</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free_cache_fn</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dns_cache_push</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dns_cache_push_one</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>, <argument><expr><name>dns_db</name></expr></argument>, <argument><expr><name>__cache_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dns_cache_push2</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DNS_CTX</name> <modifier>*</modifier></type><name>dns_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dns_cache_push2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dns_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns_ctx</name><operator>-&gt;</operator><name>domain_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): domain_key empty"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns_ctx</name><operator>-&gt;</operator><name>ip_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): size(%d) &lt;= 0"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dns_ctx</name><operator>-&gt;</operator><name>ip_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_netdb_new</name><argument_list>(<argument><expr><name><name>dns_ctx</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dns_ctx</name><operator>-&gt;</operator><name>ip_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_netdb_addip</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><name><name>dns_ctx</name><operator>-&gt;</operator><name>ip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	
	<if_stmt><if>if <condition>(<expr><name>__use_trylock</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>cache_trylock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>cache_lock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>, <argument><expr><name><name>dns_ctx</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): calloc error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>,
			<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cache</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add to htable error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* override the old cache */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>tm_timeout</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>__cache_timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>=</operator> <name>dns_db</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_cache_lookup</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dns_cache_lookup"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__use_trylock</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>cache_trylock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>cache_lock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>cache_timer_fn</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ÏÈÆô¶¯¶¨Ê±ÇåÀíÆ÷£¬½«¹ýÆÚµÄDNS½âÎöÈ¥µô */</comment>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>	<comment type="block">/* XXX */</comment>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): dns_db null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_cache_fn</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if the dns cache has been timeout ? */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>tm_timeout</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free_cache_fn</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* clone the ACL_DNS_DB object */</comment>

	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_netdb_clone</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dns_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dns_db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>dns_db</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dns_cache_del_host</name><parameter_list>(<parameter><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cache_lock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free_cache_fn</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>cache_unlock</name><argument_list>(<argument><expr><name>dns_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thread_safe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dns_cache_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DNS_CACHE</name> <modifier>*</modifier></type><name>dns_cache</name> <init>= <expr><operator>(</operator><name>DNS_CACHE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DNS_CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__cache_timeout</name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>thread_safe</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: pthread_mutex_init error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>__use_trylock</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>__thread_safe</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>__thread_safe</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: create htable error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dns_cache</name><operator>-&gt;</operator><name>cache_ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>dns_cache</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
