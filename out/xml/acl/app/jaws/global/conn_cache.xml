<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/app/jaws/global/conn_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_cache.h"</cpp:file></cpp:include>

<comment type="block">/* ¶ÔÓ¦Ä³¸ö IP:PORT ¼üÖµµÄÁ¬½Ó³Ø½á¹¹ÀàÐÍ¶¨Òå */</comment>

<typedef>typedef <type><struct>struct <name>CONN_POOL</name> <block>{
	<decl_stmt><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>conn_cache</name></decl>;</decl_stmt>	<comment type="block">/* Ëù´ÓÊôµÄÄ³¸öÁ¬½Ó³Ø»º´æ¶ÔÏó */</comment>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>		<comment type="block">/* ¸ÃÁ¬½Ó³ØËù´ÓÊôµÄÒì²½IO¶ÔÏó */</comment>
	<decl_stmt><decl><type><name>ACL_FIFO</name></type> <name>conns</name></decl>;</decl_stmt>		<comment type="block">/* ¸ÃÁ¬½Ó³ØÖÐµÄÁ¬½Ó¶ÔÏó(CONN)¶ÓÁÐ */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* ¸ÃÁ¬½Ó³Ø¶ÔÏóËù¶ÔÓ¦µÄ´æ´¢ÓÚÁ¬½Ó³Ø»º´æÖÐµÄ´æ´¢¼ü */</comment>
}</block></struct></type> <name>CONN_POOL</name>;</typedef>

<comment type="block">/* Á¬½Ó³ØÖÐµÄÄ³¸öÁ¬½Ó¶ÔÏóÀàÐÍ¶¨Òå */</comment>

<struct>struct <name>CONN</name> <block>{
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conn_pool</name></decl>;</decl_stmt>	<comment type="block">/* Ëù´ÓÊôµÄµÄÁ¬½Ó³Ø¶ÔÏó */</comment>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>	<comment type="block">/* ¸ÃÁ¬½ÓµÄÒì²½Á÷¶ÔÏó */</comment>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* ÊÍ·Å¸ÃÁ¬½ÓÊ±µÄ»Øµ÷º¯Êý */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>		<comment type="block">/* free_fn ¶Ô²ÎÊýÖ®Ò» */</comment>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>	<comment type="block">/* ¸ÃÁ¬½Ó¶ÔÏó´æ´¢ÓÚÁ¬½Ó³Ø(conn_pool)µÄ¶ÓÁÐÖÐµÄ¶ÔÏóÖ¸Õë */</comment>
}</block>;</struct>

<comment type="block">/* ½öÊÍ·ÅÁ¬½Ó¶ÔÏóËùÕ¼ÓÃµÄÄÚ´æ£¬µ«²¢²»¹Ø±ÕÁ¬½ÓÁ÷ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_free</name><parameter_list>(<parameter><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>conn_pool</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÏÈ´ÓÁ¬½Ó³Ø¶ÓÁÐÖÐÉ¾³ý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fifo_delete_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conns</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* µ÷ÓÃÓÃ»§×Ô¶¨Òå»Øµ÷º¯Êý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* ÊÍ·ÅÄÚ´æ¿Õ¼ä */</comment>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÁ¬½Ó¶ÔÏó²¢¹Ø±ÕÁ¬½ÓÁ÷ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_close</name><parameter_list>(<parameter><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ±ØÐëÊ×ÏÈ½ûÖ¹Òì²½Á÷µÄ¶Á¼àÌý */</comment>
	<expr_stmt><expr><call><name>acl_aio_disable_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Òì²½¹Ø±Õ¸ÃÁ¬½Ó, È»ºóÓÉÒì²½¿ò¼Ü×Ô¶¯´¥·¢ read_close_callback */</comment>
	<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* µ±Á¬½Ó³Ø¶ÔÏó±»ÊÍ·ÅÊ±µ÷ÓÃ´Ë»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_pool_free</name><parameter_list>(<parameter><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<comment type="block">/* ÐèÒª°ÑÁ¬½Ó³ØÖÐµÄËùÓÐÁ¬½Ó¶¼ÊÍ·Å */</comment>

	<while>while <condition>(<expr><operator>(</operator><name>conn</name> <operator>=</operator> <call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conns</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÁ¬½Ó³Ø¶¨Ê±Æ÷»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_pool_free_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><operator>(</operator><name>CONN_POOL</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>conn_pool_free</name><argument_list>(<argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÉèÖÃÊÍ·ÅÁ¬½Ó³ØµÄ¶¨Ê±Æ÷, Ö®ËùÒÔ²ÉÓÃ¶¨Ê±Æ÷À´ÊÍ·ÅÁ¬½Ó³Ø¶ÔÏóÊÇÎªÁË
 * Ê¹ÊÍ·Å¹ý³Ì²»ÔÚÊÂÎñµÄµÝ¹é´¦Àí¹ý³ÌÖÐ±»ÌáÇ°ÊÍ·Å
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_conn_pool_free_timer</name><parameter_list>(<parameter><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>conns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>conn_pool_free_timer</name></expr></argument>, <argument><expr><name>conns</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>conn_pool_stat_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"conn_pool_stat_timer"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CONN_CACHE</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* only for test */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): nset: %d, nget: %d, nclose: %d, inter: %d"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>nset</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>nget</name></name></expr></argument>,
		<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>nclose</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>nset</name></name> <operator>-</operator> <name><name>cache</name><operator>-&gt;</operator><name>nget</name></name> <operator>-</operator> <name><name>cache</name><operator>-&gt;</operator><name>nclose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_conn_pool_stat_timer</name><parameter_list>(<parameter><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÉèÖÃ¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>conn_pool_stat_timer</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>conn_cache_create</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"conn_cache_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CONN_CACHE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CONN_CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>conn_limit</name></name> <operator>=</operator> <name>conn_limit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ok, conn_limit: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>conn_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃÁ¬½Ó³Ø»º´æ×´Ì¬ÐÅÏ¢µÄ¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>set_conn_pool_stat_timer</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>cache</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Á÷¿É¶ÁÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><name>data</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>dlen</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_callback"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: can read connection from server, dlen(%d), data(%s)"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÒòÎª¸ÃÁ¬½ÓÎª¿ÕÏÐÁ¬½Ó£¬²»Ó¦ÓÐÊý¾Ý¿É¶Á£¬Èç¹ûÓÐÊý¾Ý¿É¶Á£¬ÔòÒòÎª
	 * ÎÞ·¨ÖªµÀÈçºÎ´¦ÀíÕâÐ©Êý¾Ý¶øÐèÒª¹Ø±Õ¸ÃÁ¬½Ó
	 */</comment>

	<comment type="block">/* ·µ»Ø -1 ´Ó¶ø´¥·¢¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Á÷¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_close_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>CONN</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>conn_pool</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÊÍ·Å¸ÃÁ¬½Ó¶ÔÏóµÄÄÚ´æ¿Õ¼ä£¬µ«²¢²»¹Ø±Õ¸ÃÁ¬½Ó£¬
	 * ¹Ø±Õ¹ý³ÌÓÉÒì²½¿ò¼Ü×Ô¶¯¹Ø±Õ
	 */</comment>
	<expr_stmt><expr><call><name>conn_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÁ¬½Ó³ØÎª¿ÕÔòÊÍ·Å¸ÃÁ¬½Ó³Ø */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fifo_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conns</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>conns</name><operator>-&gt;</operator><name>conn_cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>conns</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_conn_pool_free_timer</name><argument_list>(<argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>conns</name><operator>-&gt;</operator><name>conn_cache</name><operator>-&gt;</operator><name>nclose</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* ´¥·¢ acl_aio_iocp_close ¹ý³Ì */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Á÷¶Á³¬Ê±Ê±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ·µ»Ø -1 ´Ó¶ø´¥·¢¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
	
<function><type><name>void</name></type> <name>conn_cache_push_stream</name><parameter_list>(<parameter><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	acl_aio_clean_hooks(stream);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ²é¿´¸ÃKEYµÄÁ¬½Ó³Ø¾ä±úÊÇ·ñ´æÔÚ£¬Èç¹û´æÔÚÔò¸´ÓÃ£¬·ñÔò´´½¨ÐÂµÄ */</comment>

	<expr_stmt><expr><name>conns</name> <operator>=</operator> <operator>(</operator><name>CONN_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conns</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>conns</name> <operator>=</operator> <operator>(</operator><name>CONN_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CONN_POOL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conns</name><operator>-&gt;</operator><name>conn_cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conns</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <call><name>acl_aio_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conns</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>conns</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>conns</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* Èç¹û¸ÃÁ¬½Ó³ØÖÐµÄÁ¬½ÓÁ÷³¬¹ýÏÞÖÆ£¬ÔòÓÅÏÈÊÍ·Å×î¾ÉµÄÁ¬½Ó¶ÔÏó */</comment>
	if (acl_fifo_size(&amp;conns-&gt;conns) &gt;= cache-&gt;conn_limit) {
		conn = acl_fifo_pop(&amp;conns-&gt;conns);
		if (conn) {
			conn-&gt;info = NULL;
			conn_close(conn);
		}
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>nset</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨ÐÂµÄÒì²½Á÷Á¬½Ó»º´æ¶ÔÏó */</comment>
	<expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><name>CONN</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CONN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>

	<comment type="block">/* ¼ÓÈëÁ÷Á¬½Ó³ØÖÐ */</comment>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conns</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>conn_pool</name></name> <operator>=</operator> <name>conns</name></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ¸ÃÁ÷µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_close_callback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_timeout_callback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ¿ªÊ¼¶Á¸ÃÁ÷µÄÊý¾Ý */</comment>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>CONN</name> <modifier>*</modifier></type><name>conn_cache_get_conn</name><parameter_list>(<parameter><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>

	<comment type="block">/* ÏÈ²é¿´¸ÃKEYµÄÁ¬½Ó³Ø¶ÔÏóÊÇ·ñ´æÔÚ£¬Èç¹û²»´æÔÚÔò·µ»ØNULL */</comment>

	<expr_stmt><expr><name>conns</name> <operator>=</operator> <operator>(</operator><name>CONN_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conns</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´Ó¸ÃKEYµÄÁ¬½Ó³ØÖÐÈ¡³öÒ»¸öÁ¬½Ó£¬Èç¹ûÈ¡³öÎªNULLÔòÊÍ·Å¸ÃÁ¬½Ó³Ø¶ÔÏó */</comment>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conns</name><operator>-&gt;</operator><name>conns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÏÈ´ÓÁ¬½Ó³Ø»º´æÖÐÉ¾³ý */</comment>
		<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>conns</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃÊÍ·Å¿ÕµÄÁ¬½Ó³Ø¶ÔÏóµÄ¶¨Ê±Æ÷ */</comment>
		<expr_stmt><expr><call><name>set_conn_pool_free_timer</name><argument_list>(<argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÏÈÈ¡Ïû¸ÃÁ÷Ö®Ç°ÉèÖÃµÄ»Øµ÷º¯Êý */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>acl_aio_del_read_hook</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_del_close_hook</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>read_close_callback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_del_timeo_hook</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>read_timeout_callback</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* È¡Ïû¶Á¼àÌý */</comment>
	<expr_stmt><expr><call><name>acl_aio_disable_read</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>nget</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>conn</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>conn_cache_get_stream</name><parameter_list>(<parameter><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx_pptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>conn_cache_get_conn</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ctx_pptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ctx_pptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ctx_pptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>ctx_pptr</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>stream</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÒòÎªÒÑ¾­È¡³öÁ÷¶ÔÏó£¬ËùÒÔ¿ÉÒÔÊÍ·Å CONN ¶ÔÏó */</comment>
	<return>return <expr><operator>(</operator><name>stream</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>conn_cache_delete_key</name><parameter_list>(<parameter><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>conns</name> <operator>=</operator> <operator>(</operator><name>CONN_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ±éÀúÁ¬½Ó³ØÖÐµÄÁ¬½ÓÁ÷²¢Ò»Ò»¹Ø±Õ */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;conns-&gt;conns</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>CONN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* ½«¸ÃÁ¬½Ó³Ø´ÓÁ¬½Ó³Ø»º´æÖÐÉ¾³ý */</comment>
	<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name><name>conns</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃÊÍ·Å³Ø¶ÔÏóµÄ¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>set_conn_pool_free_timer</name><argument_list>(<argument><expr><name>conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>conn_cache_delete_conn</name><parameter_list>(<parameter><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÊÍ·Å²¢¹Ø±Õ¸ÃÁ¬½Ó¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>conn_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>conn_cache_delete_stream</name><parameter_list>(<parameter><decl><type><name>CONN_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN_POOL</name> <modifier>*</modifier></type><name>conns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CONN</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>conns</name> <operator>=</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<comment type="block">/* ±éÀúÁ¬½Ó³Ø¶ÓÁÐÖÐµÄËùÓÐÁ¬½Ó */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;conns-&gt;conns</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>conn</name> <operator>=</operator> <operator>(</operator><name>CONN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>stream</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÊÍ·Å²¢¹Ø±Õ¸ÃÁ¬½Ó¶ÔÏó */</comment>
			<expr_stmt><expr><call><name>conn_close</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
