<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/global/service_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>__service_modules</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SERVICE</name> <modifier>*</modifier></type><name>__service</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>module_service_main_fn</name></type> <name>__service_callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_DLL_ENV</name></type>  <name>__dll_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ACL_MEM_SLICE</name> <modifier>*</modifier></type><name>var_mem_slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SERVICE</name> <modifier>*</modifier></type><name>service_create</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>,
	<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>service_modules</name></decl></parameter>, <parameter><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>ip_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>services</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>curr_service</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<comment type="block">/* ¹Ø±Õ³ÖÐø¶Á¹¦ÄÜ */</comment>
	<expr_stmt><expr><call><name>acl_aio_set_keep_read</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>services</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¼ÓÔØËùÓÐµÄ·þÎñÄ£¿é */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>service_modules</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>MODULE_SERVICE</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><operator>(</operator><name>MODULE_SERVICE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name><name>module</name><operator>-&gt;</operator><name>mod_create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>service</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>module</name></name> <operator>=</operator> <name>module</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>conn_timeout</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>service_set_dns</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>,
				<argument><expr><name>var_cfg_dns_list</name></expr></argument>,
				<argument><expr><name>var_cfg_dns_lookup_timeout</name></expr></argument>,
				<argument><expr><name>var_cfg_dns_cache_limit</name></expr></argument>,
				<argument><expr><name>var_cfg_hosts_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ´´½¨Á¬½Ó³Ø»º´æ¶ÔÏó */</comment>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>conn_cache</name></name> <operator>=</operator> <call><name>conn_cache_create</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>var_cfg_server_conn_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ip_argv</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter2</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator>
				<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name><name>ip_argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<macro><name>acl_foreach</name><argument_list>(<argument>iter2</argument>, <argument>ip_argv</argument>)</argument_list></macro> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter2</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>services</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fifo_size</name><argument_list>(<argument><expr><name>service_modules</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no service available"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ÉèÖÃÐ­Òé´¦Àí·½Ê½ */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>services</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>SERVICE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var_cfg_proto_name</name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>curr_service</name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>__service_callback</name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>module</name><operator>-&gt;</operator><name>mod_main</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_fifo_free</name><argument_list>(<argument><expr><name>services</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>curr_service</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown protocol name(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>var_cfg_proto_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>__service_callback</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __service_callback null"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>curr_service</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><operator>(</operator><name>ACL_AIO</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_mem_slice_delay_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_init</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>modules</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>ip_argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_bind_ip_list</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>var_cfg_bind_ip_list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ip_argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>var_cfg_bind_ip_list</name></expr></argument>, <argument><expr><literal type="string">",\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_aio_buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_aio_set_rbuf_size</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>var_cfg_aio_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__dll_env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DLL_ENV</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	__dll_env.logfp = acl_log_fp();
	*/</comment>
	<expr_stmt><expr><name><name>__dll_env</name><operator>.</operator><name>mem_slice</name></name> <operator>=</operator> <name>var_mem_slice</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>var_mem_slice</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Éè¶¨¶¨Ê±Æ÷¶¨Ê±ÇåÀíÀ¬»ø»ØÊÕÆ÷ */</comment>
		<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>gc_timer</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__dll_env</name><operator>.</operator><name>mem_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): use mem_slice"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no use mem_slice"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_mem</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_memory_debug_stack</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>var_cfg_debug_mem</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>__dll_env</name><operator>.</operator><name>mmd</name></name> <operator>=</operator> <call><name>acl_debug_malloc_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"service_log.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>var_cfg_debug_mem</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_memory_debug_stack</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__dll_env</name><operator>.</operator><name>mmd</name></name> <operator>=</operator> <call><name>acl_debug_malloc_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"service_log.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>JAWS_STATIC</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>modules</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): modules null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__service_modules</name> <operator>=</operator> <name>modules</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>modules</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__service_modules</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>service_load_all</name><argument_list>(<argument><expr><name>__service_modules</name></expr></argument>, <argument><expr><name>var_cfg_service_dlnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ³õÊ¼»¯ËùÓÐ¼ÓÔØÄ£¿é */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__service_modules</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>MODULE_SERVICE</name> <modifier>*</modifier></type><name>module</name> <init>= <expr><operator>(</operator><name>MODULE_SERVICE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>module</name><operator>-&gt;</operator><name>mod_init</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>__dll_env</name></expr></argument>, <argument><expr><name>var_cfg_service_cfgdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_nthreads</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>event_mode</name> <init>= <expr><call><name>acl_aio_event_mode</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

		<comment type="block">/* ³õÊ¼»¯ IPC Í¨µÀ */</comment>
		<expr_stmt><expr><call><name>service_ipc_init</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>var_cfg_nthreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>var_cfg_nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio_thr</name></decl>;</decl_stmt>

			<comment type="block">/* ´´½¨µ¥¶ÀÔËÐÐµÄÏß³ÌÊµÀýµÄÒì²½¾ä±ú */</comment>
			<expr_stmt><expr><name>aio_thr</name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>var_cfg_aio_buf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_aio_set_rbuf_size</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>var_cfg_aio_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>service_create</name><argument_list>(<argument><expr><name>aio_thr</name></expr></argument>, <argument><expr><name>__service_modules</name></expr></argument>, <argument><expr><name>ip_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>service_ipc_add_service</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>__service_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>__service</name> <operator>=</operator> <call><name>service_create</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>__service_modules</name></expr></argument>, <argument><expr><name>ip_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ip_argv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ip_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ÄÚ´æÀ¬»ø»ØÊÕ¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>service_set_gctimer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_exit"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* XXX: ÔÚÊ¹ÓÃÄÚ´æÇÐÆ¬·½Ê½Ê±£¬Èç¹ûÐ¶ÔØ¶¯Ì¬¼ÓÔØµÄ¿â»á³öÏÖ core ÎÄ¼þ£¬Ææ¹Ö:) */</comment>
	<comment type="block">/*
	 * service_unload_all();
	 */</comment>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): jaws exit now"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>service_main</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_mem</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"total alloc: %d"</literal></expr></argument>, <argument><expr><call><name>acl_mempool_total_allocated</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>var_cfg_nthreads</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¶àÏß³ÌÄ£Ê½ÏÂ£¬Ïò¸÷¸öÊµÀýÏß³Ì·¢ËÍÐÂµÄÁ¬½Ó */</comment>
		<expr_stmt><expr><call><name>service_ipc_add</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>vstream</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>

		<comment type="block">/* ÔÚµ¥Ïß³ÌÄ£Ê½ÏÂ´ò¿ªÒì²½Á÷ */</comment>
		<expr_stmt><expr><name>vstream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>var_cfg_aio_buf_size</name></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>astream</name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>vstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__service_callback</name><argument_list>(<argument><expr><name>__service</name></expr></argument>, <argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
