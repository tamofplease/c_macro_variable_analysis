<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/global/service_ipc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_ipc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
}</block></struct></type> <name>IPC_THREAD</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
}</block></struct></type> <name>IPC_CTX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MSG_LISTENER_ACCEPT</name></cpp:macro>	<cpp:value>(ACL_MSGIO_USER + 100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MSG_IPC_ACCEPT</name></cpp:macro>		<cpp:value>(ACL_MSGIO_USER + 101)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>IPC_THREAD</name> <modifier>*</modifier></type><name>__ipc_threads</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__ipc_nthread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__ipc_ithread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MSGIO</name> <modifier>*</modifier></type><name>__ipc_listener</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>__ipc_addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>module_service_main_fn</name></type> <name>__service_callback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Ä³¸öÏß³Ì·þÎñÊµÀý½ÓÊÕµ½Ò»¸öÐÂµÄÔ¶³Ì¿Í»§¶ËÁ¬½ÓÇëÇó */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msg_ipc_accept</name><parameter_list>(<parameter><decl><type><name>int</name> <name>msg_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier><name>mio</name></type> <name>acl_unused</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>ACL_MSGIO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IPC_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><operator>(</operator><name>SERVICE</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´ò¿ªÒì²½Á÷ */</comment>
	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>var_cfg_aio_buf_size</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>aio</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¿ªÊ¼´¦Àí¸Ã¿Í»§¶ËÁ¬½Ó */</comment>
	<expr_stmt><expr><call><name>__service_callback</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* µ¥Ïß³ÌÊµÀý·Ç×èÈû´¦Àí¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>service_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>ipc_client</name> <init>= <expr><operator>(</operator><name>ACL_MSGIO</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><call><name>acl_msgio_aio</name><argument_list>(<argument><expr><name>ipc_client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÄÚ´æÀ¬»ø»ØÊÕ¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>service_set_gctimer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½øÈëÊÂ¼þÑ­»· */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_loop</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Ö÷Ïß³ÌÊÕµ½ÐÂµÄÁ¬½Óµ½´ïÏûÏ¢ */</comment>

<function><type><name>void</name></type> <name>service_ipc_init</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_ipc_init"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>__ipc_nthread</name> <operator>=</operator> <name>nthreads</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__ipc_threads</name> <operator>=</operator> <operator>(</operator><name>IPC_THREAD</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC_THREAD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__ipc_listener</name> <operator>=</operator> <call><name>acl_msgio_listen</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__ipc_listener</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): acl_msgio_listen error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_msgio_addr</name><argument_list>(<argument><expr><name>__ipc_listener</name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__ipc_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_ipc_add_service</name><parameter_list>(<parameter><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,
	<parameter><decl><type><name>module_service_main_fn</name></type> <name>service_callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_ipc_add_service"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><name><name>service</name><operator>-&gt;</operator><name>aio</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>ipc_client</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>service_callback</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): service_callback null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__service_callback</name> <operator>=</operator> <name>service_callback</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__ipc_ithread</name> <operator>&gt;=</operator> <name>__ipc_nthread</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __ipc_ithread(%d) &gt;= __ipc_nthread(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__ipc_ithread</name></expr></argument>, <argument><expr><name>__ipc_nthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ´´½¨·Ç×èÈûÏß³Ì³ØÊµÀý£¬Ã¿¸öÏß³ÌÎªÒ»¸öµ¥¶ÀµÄ·Ç×èÈûÊµÀý */</comment>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Á¬½ÓÏûÏ¢·þÎñÆ÷ */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	<expr_stmt><expr><name>ipc_client</name> <operator>=</operator> <call><name>acl_msgio_connect</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ipc_client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): connect server(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ipc_client</name> <operator>=</operator> <call><name>acl_msgio_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ipc_client</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): connect server(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* ÉèÎª·Ç×èÈûÄ£Ê½ */</comment>
	<expr_stmt><expr><call><name>acl_msgio_set_noblock</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>ipc_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* ×¢²áÏûÏ¢ÊÂ¼þ */</comment>
	<expr_stmt><expr><call><name>acl_msgio_reg</name><argument_list>(<argument><expr><name>ipc_client</name></expr></argument>, <argument><expr><name>MSG_IPC_ACCEPT</name></expr></argument>, <argument><expr><name>msg_ipc_accept</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¼ÇÂ¼·þÎñ¶ËIPCÍ¨µÀ */</comment>
	<expr_stmt><expr><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>mio</name> <operator>=</operator> <call><name>acl_msgio_accept</name><argument_list>(<argument><expr><name>__ipc_listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>aio</name> <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>service</name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_msgio_vstream</name><argument_list>(<argument><expr><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>mio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ´´½¨µ¥Ïß³Ì·Ç×èÈûÊµÀý */</comment>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>,
		<argument><expr><name>service_thread</name></expr></argument>, <argument><expr><name>ipc_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__ipc_ithread</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_ipc_add</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IPC_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

	<comment type="block">/* ÂÖÑ­ÏÂÒ»¸öÊµÀýÏß³Ì */</comment>
	<if_stmt><if>if <condition>(<expr><name>__ipc_ithread</name> <operator>&gt;=</operator> <name>__ipc_nthread</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__ipc_ithread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ¹¹ÔìÏûÏ¢Êý¾Ý */</comment>

	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>aio</name></name> <operator>=</operator> <name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>aio</name></expr>;</expr_stmt>

	<comment type="block">/* ·¢ËÍÏûÏ¢ */</comment>
	<expr_stmt><expr><call><name>acl_msgio_send</name><argument_list>(<argument><expr><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>mio</name></expr></argument>,
		<argument><expr><name>MSG_IPC_ACCEPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>__ipc_threads</name><index>[<expr><name>__ipc_ithread</name></expr>]</index></name><operator>.</operator><name>n</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>__ipc_ithread</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
