<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/global/forward.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>connect_close_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>connect_timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>connect_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>forward_complete</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ³¢ÊÔ´ÓÁ¬½Ó³ØÖÐ»ñµÃÒ»¸öÁ¬½ÓÁ÷ */</comment>

<function><type><specifier>static</specifier> <name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>peek_server_conn</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>conn_cache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>port</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
				?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>port</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>conn_cache_get_stream</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>conn_cache</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>stream</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* È¡µÃÄ³ÓòÃûµÄÏÂÒ»¸ö·þÎñÆ÷ IP:PORT µØÖ· */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next_server_addr</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"next_server_addr"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>service</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ÊÔ×Å¶àÁ¬Ò»´Î */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_ntry</name></name><operator>++</operator> <operator>&gt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): domain(%s), ip_ntry(%d) &gt;= ip_cnt(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ip_ntry</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s@%s:%d"</literal></expr></argument>,
				<argument><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name><index>[<expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_index</name></name><operator>++</operator></expr>]</index></name></expr></argument>,
				<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>port</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
					?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>port</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_list</name><index>[<expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_index</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>bind_ip_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
				<argument><expr><ternary><condition><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>port</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
					?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>port</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): domain(%s), addr(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>forward_connect_next</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>myname</name> <init>= <expr><literal type="string">"forward_connect_next"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>service</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name><modifier>*</modifier></type> <name>server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>next_server_addr</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_addr</name></name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>acl_aio_connect</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>,
				<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_addr</name></name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>conn_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>server</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: connect server addr(%s), domain(%s), i=%d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_addr</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_close_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>myname</name> <init>= <expr><literal type="string">"connect_close_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>CLIENT_ENTRY</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ð¶ÔØ»Øµ÷º¯Êý£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_DEL</name></expr></argument>, <argument><expr><name>connect_timeout_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flag_has_replied</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name><modifier>*</modifier></type> <name>server</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): begin to connect next ip(%s:%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name></expr>]</index></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ¶Ï¿ªÓë·þÎñ¶ËµÄÁ¬½Ó£¬µ«±£³ÖÓëä¯ÀÀÆ÷¶ËµÄÁ¬½Ó
		 * XXX: ÒòÎª¸Ãº¯Êý½«Çå³ýÒ»Ð©¹Ø±Õ»Øµ÷º¯Êý£¬²»ÖªÊÇ·ñ»áÔì³ÉÄ³Ð©ÄÚ´æÐ¹Â©£¿
		 * ×¢£¬´Ë´¦²¢²»¹Ø±Õ·þÎñ¶ËÁ¬½Ó£¬ÐèÒªµ÷ÓÃÕß×Ô¼ºÀ´¹Ø±Õ
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name> <operator>&amp;&amp;</operator> <call><name>client_entry_detach</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): entry's freed"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>forward_connect_next</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>CONNECT_ERROR</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>client_entry_set_server</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>server</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CONNECT_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_close_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_timeout_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Í¨¹ý·µ»Ø-1£¬Ê¹Òì²½Á÷¿ò¼Ü¹Ø±Õ·þÎñ¶ËÁ¬½Ó */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<label><name>CONNECT_ERROR</name>:</label>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>connect</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>stamp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): internal error, ip_idx=%d, domain(%s:%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): connect error, addr(%s:%d), domain(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>flag_has_replied</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>connect_error_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>connect_error_fn</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>myname</name> <init>= <expr><literal type="string">"connect_timeout_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>CLIENT_ENTRY</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ð¶ÔØ»Øµ÷º¯Êý£¬·ÀÖ¹±»ÖØ¸´µ÷ÓÃ */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_DEL</name></expr></argument>, <argument><expr><name>connect_timeout_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flag_has_replied</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>&lt;</operator> <name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): begin to connect next ip(%s:%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name></expr>]</index></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ¶Ï¿ªÓë·þÎñ¶ËµÄÁ¬½Ó£¬µ«±£³ÖÓëä¯ÀÀÆ÷¶ËµÄÁ¬½Ó
		 * XXX: ÒòÎª¸Ãº¯Êý½«Çå³ýÒ»Ð©¹Ø±Õ»Øµ÷º¯Êý£¬²»ÖªÊÇ·ñ»áÔì³ÉÄ³Ð©ÄÚ´æÐ¹Â©£¿
		 * ×¢£¬´Ë´¦²¢²»¹Ø±Õ·þÎñ¶ËÁ¬½Ó£¬ÐèÒªµ÷ÓÃÕß×Ô¼ºÀ´¹Ø±Õ
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): entry is freed"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>forward_connect_next</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>CONNECT_ERROR</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>client_entry_set_server</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>server</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CONNECT_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_close_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_timeout_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Í¨¹ý·µ»Ø-1£¬Ê¹Òì²½Á÷¿ò¼Ü¹Ø±Õ·þÎñ¶ËÁ¬½Ó */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<label><name>CONNECT_ERROR</name>:</label>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>connect</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>stamp</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): internal error, ip_idx=0, domain(%s:%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): connect timeout, addr(%s:%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>dns_ctx</name><operator>.</operator><name>ip</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>ip_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>flag_has_replied</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>connect_timeout_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>connect_timeout_fn</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>CLIENT_ENTRY</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>connect</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>entry</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>stamp</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name><name>entry</name><operator>-&gt;</operator><name>connect_notify_fn</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>forward_start</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"forward_start"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>

	<comment type="block">/* ÏÈ´ÓÁ¬½Ó³ØÖÐ³¢ÊÔÒ»¸öÁ¬½ÓÁ÷ */</comment>
	<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>peek_server_conn</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÁ¬½Ó³ØÖÐÃ»ÓÐ¿ÉÀûÓÃµÄÁ¬½ÓÁ÷£¬Ôò¿ªÊ¼Á¬½Ó·þÎñ¶Ë */</comment>
		<expr_stmt><expr><name>server</name> <operator>=</operator> <call><name>forward_connect_next</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: connect server_addr(%s:%d) error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server_port</name></name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>connect_error_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>connect_error_fn</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>forward_complete</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>flag_conn_reuse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>client_entry_set_server</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>server</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CONNECT_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_callback</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_close_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>connect_timeout_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ¸´ÓÃÁ¬½Ó³ØÖÐµÄÁ¬½Ó */</comment>

		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>flag_conn_reuse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>client_entry_set_server</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>connect_callback</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
