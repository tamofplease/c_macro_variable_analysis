<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/global/service_load.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_DLL_HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
}</block></struct></type> <name>DLL_HANDLE</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>__handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>service_load</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>service_modules</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_load"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DLL_HANDLE</name> <modifier>*</modifier></type><name>dll_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DLL_HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MODULE_SERVICE</name> <modifier>*</modifier></type><name>module_ptr</name></decl>, <decl><type ref="prev"/><name>module</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dlname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): begin load %s now ..."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_dlopen</name><argument_list>(<argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): load %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): load %s ok."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ìí¼ÓÇëÇó¹ýÂËÆ÷ */</comment>

	<expr_stmt><expr><name><name>module</name><operator>.</operator><name>mod_init</name></name> <operator>=</operator> <operator>(</operator><name>module_service_init_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"module_service_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>.</operator><name>mod_create</name></name> <operator>=</operator> <operator>(</operator><name>module_service_create_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"module_service_create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>.</operator><name>mod_main</name></name> <operator>=</operator> <operator>(</operator><name>module_service_main_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"module_service_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>module</name><operator>.</operator><name>mod_create</name></name> <operator>&amp;&amp;</operator> <name><name>module</name><operator>.</operator><name>mod_main</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>module_ptr</name> <operator>=</operator> <operator>(</operator><name>MODULE_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MODULE_SERVICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>module_ptr</name><operator>-&gt;</operator><name>mod_init</name></name> <operator>=</operator> <name><name>module</name><operator>.</operator><name>mod_init</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>module_ptr</name><operator>-&gt;</operator><name>mod_create</name></name> <operator>=</operator> <name><name>module</name><operator>.</operator><name>mod_create</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>module_ptr</name><operator>-&gt;</operator><name>mod_main</name></name> <operator>=</operator> <name><name>module</name><operator>.</operator><name>mod_main</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>service_modules</name></expr></argument>, <argument><expr><name>module_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dll_handle</name> <operator>=</operator> <operator>(</operator><name>DLL_HANDLE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DLL_HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dll_handle</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__handles</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>__handles</name></expr></argument>, <argument><expr><name>dll_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_load_all</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>service_modules</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlnames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlnames</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dlnames</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>dlnames</name></expr></argument>, <argument><expr><literal type="string">" \t;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlname</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>service_load</name><argument_list>(<argument><expr><name>service_modules</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_unload_all</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>DLL_HANDLE</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>DLL_HANDLE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_dlclose</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_fifo_free</name><argument_list>(<argument><expr><name>__handles</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__handles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
