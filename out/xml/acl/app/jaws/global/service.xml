<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/app/jaws/global/service.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>service_free</name><parameter_list>(<parameter><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>dns_server</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dns_server_close</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>dns_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>dns_table</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>dns_table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SERVICE</name> <modifier>*</modifier></type><name>service_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service_name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_alloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SERVICE</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): size(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>SERVICE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃ·þÎñÃû³Æ */</comment>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>service_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>service</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_set_dns</name><parameter_list>(<parameter><decl><type><name>SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dns_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dns_lookup_timeout</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>dns_cache_limit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hosts_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_set_dns"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<comment type="block">/* ´´½¨DNSÓòÃû²éÑ¯¶ÔÏó£ºÍâ¹ÒÊ½²éÑ¯»ò·Ç×èÈûÊ½²éÑ¯ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dns_list</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>dns_list</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>, <decl><type ref="prev"/><name>idle</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ´´½¨Íâ¹ÒÊ½DNS²éÑ¯¶ÔÏó */</comment>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>dns_server</name></name> <operator>=</operator> <call><name>dns_server_create</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>dns_table</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ´´½¨°ë×¤ÁôÏß³Ì³Ø¶ÔÏó */</comment>
		<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>wq</name></name> <operator>=</operator> <call><name>acl_thread_pool_create</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ²ÉÓÃÖ±½Ó·¢ËÍDNSÐ­Òé·½Ê½½øÐÐ²éÑ¯µÄ¶ÔÏó */</comment>

	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>dns_list</name></expr></argument>, <argument><expr><literal type="string">",; \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>dns_handle</name></name> <operator>=</operator> <call><name>acl_dns_create</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>dns_lookup_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dns_cache_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dns_open_cache</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>dns_handle</name></name></expr></argument>, <argument><expr><name>dns_cache_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Ìí¼ÓDNS·þÎñÆ÷µØÖ· */</comment>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr1</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>  <name>port</name></decl>, <decl><type ref="prev"/><name>netmask</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>ptr1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr1</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ptr2</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr2</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>netmask</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>netmask</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>netmask</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>netmask</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;=</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">53</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">53</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add dns addr (%s:%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_dns_add_dns</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>dns_handle</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ìí¼Ó hosts ÖÐµÄ¾²Ì¬ÅäÖÃÓòÃû */</comment>
	<if_stmt><if>if <condition>(<expr><name>hosts_list</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>hosts_list</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dns_hosts_load</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>dns_handle</name></name></expr></argument>, <argument><expr><name>hosts_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__timer</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>service_gc_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><operator>(</operator><name>ACL_AIO</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_mem_slice_gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_set_gctimer</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__timer</name> <operator>=</operator> <name>timer</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>service_gc_timer</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
