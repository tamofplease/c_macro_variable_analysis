<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/global/dns_hosts.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dns.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>group_add</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns_handle</name></decl></parameter>, <parameter><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"group_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>line</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>label</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>group</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>refer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv_excepts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv_ips</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>excepts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): data(%s) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>argv_excepts</name> <operator>=</operator> <call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>argv_ips</name> <operator>=</operator> <call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>refer</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>refer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><call><name>acl_fgets_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"#@group_end"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): line(%s) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): line(%s) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"#@refer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>refer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>refer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"#@except"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argv_excepts</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"#@ip"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argv_ips</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv_ips</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ip_list</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ip_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv_excepts</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>excepts</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>excepts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_dns_add_group</name><argument_list>(<argument><expr><name>dns_handle</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>refer</name></expr></argument>, <argument><expr><name>ip_list</name></expr></argument>, <argument><expr><name>excepts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv_excepts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>host_add</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns_handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>line</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_dns_add_host</name><argument_list>(<argument><expr><name>dns_handle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hosts_load</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"hosts_load"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fopen(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><call><name>acl_fgets_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"@group_name"</literal></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"@group_name"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>group_add</name><argument_list>(<argument><expr><name>dns_handle</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>host_add</name><argument_list>(<argument><expr><name>dns_handle</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dns_hosts_load</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hosts_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dns_handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hosts_list</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>hosts_list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>hosts_list</name></expr></argument>, <argument><expr><literal type="string">";, \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>hosts_load</name><argument_list>(<argument><expr><name>dns_handle</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
