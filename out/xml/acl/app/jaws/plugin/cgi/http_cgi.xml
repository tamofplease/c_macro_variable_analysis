<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/plugin/cgi/http_cgi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_plugin.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>cgi</name></decl>;</decl_stmt>
}</block></struct></type> <name>CGI_MAP</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>__table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CGI_MAP</name> <modifier>*</modifier></type><name>cgi_map_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cgi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CGI_MAP</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>(</operator><name>CGI_MAP</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CGI_MAP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>cgi</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>cgi</name></name></expr></argument>, <argument><expr><name>var_cfg_cgi_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>cgi</name></name></expr></argument>, <argument><expr><name>cgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>map</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgi_map_free</name><parameter_list>(<parameter><decl><type><name>CGI_MAP</name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>cgi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_cgi_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__table</name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_cgi_end</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name>__table</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>cgi_map_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_cgi_add2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cgi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CGI_MAP</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>map</name> <operator>=</operator> <operator>(</operator><name>CGI_MAP</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name>__table</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): alias(%s) already exist"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>cgi_map_new</name><argument_list>(<argument><expr><name>alias</name></expr></argument>, <argument><expr><name>cgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>__table</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_cgi_add1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): argc(%d) &lt; 2"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>http_cgi_add2</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>CGI</name> <modifier>*</modifier></type><name>http_cgi_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CGI</name> <modifier>*</modifier></type><name>cgi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CGI_MAP</name> <modifier>*</modifier></type><name>map</name> <init>= <expr><operator>(</operator><name>CGI_MAP</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name>__table</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cgi</name> <operator>=</operator> <operator>(</operator><name>CGI</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CGI</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cgi</name><operator>-&gt;</operator><name>alias</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cgi</name><operator>-&gt;</operator><name>cgi</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>cgi</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>cgi</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cgi_free</name><parameter_list>(<parameter><decl><type><name>CGI</name> <modifier>*</modifier></type><name>cgi</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cgi</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_req</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>req</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>cgi</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_req_free</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_res</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>cgi</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>cgi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>alias</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_cgi</name><parameter_list>(<parameter><decl><type><name>CGI</name> <modifier>*</modifier></type><name>cgi</name></decl></parameter>, <parameter><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name><name>cgi</name><operator>-&gt;</operator><name>cgi</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>cgi_hdrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>errnum</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl>;</decl_stmt>

	<comment type="block">/* ´ò¿ªÓëCGI³ÌÐòµÄ¹ÜµÀÊý¾ÝÁ÷ */</comment>
	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_popen</name><argument_list>(<argument><expr><name>O_RDWR</name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_POPEN_COMMAND</name></expr></argument>, <argument><expr><name>command</name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_POPEN_ENV</name></expr></argument>, <argument><expr><name><name>env</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_POPEN_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open command(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>cgi</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <call><name>http_req_new</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>http_req_body_get_sync</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
					<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * http_hdr_set_keepalive(cgi-&gt;hdr_req, cgi-&gt;hdr_res);
	 */</comment>

	<expr_stmt><expr><name>cgi_hdrs</name> <operator>=</operator> <call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¶ÁCGI·¢ËÍµÄÏìÓ¦Í· */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): cgi exit exception"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>errnum</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">":\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): cgi reply hdr(%s) invalid"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>cgi_hdrs</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>vbuf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <call><name>http_hdr_res_static</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>cpp</name> <operator>=</operator> <name><name>cgi_hdrs</name><operator>-&gt;</operator><name>argv</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cpp</name></expr>;</condition> <incr><expr><name>cpp</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cgi</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>cpp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cpp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>http_hdr_entry_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cgi</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cgi</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¶ÁCGIµÄÏìÓ¦Êý¾ÝÌå²¢·¢ËÍÖÁä¯ÀÀÆ÷ */</comment>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_pclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_cgi_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CGI</name> <modifier>*</modifier></type><name>cgi</name> <init>= <expr><operator>(</operator><name>CGI</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name> <init>= <expr><name><name>cgi</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
		<literal type="string">"Date: Sun, 15 Nov 2009 07:06:22 GMT\r\n"</literal>
		<literal type="string">"Server: Apache/2.2.9 (Unix)\r\n"</literal>
		<literal type="string">"Connection: close\r\n"</literal>
		<literal type="string">"Content-Type: text/html\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>hdr_req-&gt;hdr.entry_lnk</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>HTTP_HDR_ENTRY</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>run_cgi</name><argument_list>(<argument><expr><name>cgi</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name><name>cgi</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>reply</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cgi_free</name><argument_list>(<argument><expr><name>cgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
