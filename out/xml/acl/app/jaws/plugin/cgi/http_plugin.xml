<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/plugin/cgi/http_plugin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_plugin.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_DLL_ENV</name></type> <name>__dll_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>__thrpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* ³õÊ¼»¯¸Ã²å¼þµÄ»·¾³ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>plugin_init</name><parameter_list>(<parameter><decl><type><name>ACL_DLL_ENV</name> <modifier>*</modifier></type><name>dll_env</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>dll_env</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__dll_env</name></expr></argument>, <argument><expr><name>dll_env</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DLL_ENV</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__dll_env</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DLL_ENV</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>__dll_env</name><operator>.</operator><name>logfp</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>acl_msg_open2</name><argument_list>(<argument><expr><name><name>__dll_env</name><operator>.</operator><name>logfp</name></name></expr></argument>, <argument><expr><literal type="string">"http-gb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): logger opened, %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
                        <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_PATH</name><argument_list>(<argument><expr><name><name>__dll_env</name><operator>.</operator><name>logfp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û mem_slice ·Ç¿ÕÔòÉèÖÃÄÚ´æ·ÖÅä²ÉÓÃÇÐÆ¬·ÖÅä·½Ê½ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>__dll_env</name><operator>.</operator><name>mem_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_mem_slice_set</name><argument_list>(<argument><expr><name><name>__dll_env</name><operator>.</operator><name>mem_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_init</name><parameter_list>(<parameter><decl><type><name>ACL_DLL_ENV</name> <modifier>*</modifier></type><name>dll_env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfg_dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>plugin_init</name><argument_list>(<argument><expr><name>dll_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_conf_load</name><argument_list>(<argument><expr><name>cfg_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_pool_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threads_limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threads_idle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_plugin_pool_create"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__thrpool</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): thread pool has been created!"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* ´´½¨Ïß³Ì³Ø */</comment>
	<expr_stmt><expr><name>__thrpool</name> <operator>=</operator> <call><name>acl_thread_pool_create</name><argument_list>(<argument><expr><name>threads_limit</name></expr></argument>, <argument><expr><name>threads_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_pool_append</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_pool_add</name><argument_list>(<argument><expr><name>__thrpool</name></expr></argument>, <argument><expr><name>start_routine</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_debug_memory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÊÇ·ñµ÷ÊÔ²å¼þµÄÄÚ´æ·ÖÅäÇé¿ö */</comment>

	<switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">1</literal></expr>:</case>
		<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_memory_debug_stack</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">2</literal></expr>:</case>
		<expr_stmt><expr><name><name>__dll_env</name><operator>.</operator><name>mmd</name></name> <operator>=</operator> <call><name>acl_debug_malloc_init</name><argument_list>(<argument><expr><name><name>__dll_env</name><operator>.</operator><name>mmd</name></name></expr></argument>,
					<argument><expr><literal type="string">"access_log.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">3</literal></expr>:</case>
		<expr_stmt><expr><name><name>__dll_env</name><operator>.</operator><name>mmd</name></name> <operator>=</operator> <call><name>acl_debug_malloc_init</name><argument_list>(<argument><expr><name><name>__dll_env</name><operator>.</operator><name>mmd</name></name></expr></argument>,
					<argument><expr><literal type="string">"access_log.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_memory_debug_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_memory_debug_stack</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
