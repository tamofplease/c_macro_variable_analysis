<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/main/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_module.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_AIO</name> <modifier>*</modifier></type><name>var_aio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>var_cfg_event_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>var_cfg_master_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>var_cfg_listen_addr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>__service_conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of (char *) type here */</comment>
	<comment type="block">/* example: { "mysql_dbaddr", "127.0.0.1:3306", &amp;var_cfg_mysql_dbaddr }, */</comment>

	<expr><block>{ <expr><literal type="string">"aio_event_mode"</literal></expr>, <expr><literal type="string">"poll"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_event_mode</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_log"</literal></expr>, <expr><literal type="string">"jaws.log"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_master_log</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_service"</literal></expr>, <expr><literal type="string">"127.0.0.1:8808"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_listen_addr</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>listen_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>acl_inet_accept</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"accept error(%s)\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>service_main</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>var_aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><operator>(</operator><name>ACL_AIO</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_mem_slice_delay_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_loop</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>listen_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"run_loop"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name> <init>= <expr><call><name>acl_vstream_listen</name><argument_list>(<argument><expr><name>listen_addr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): listen(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>listen_addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): listen %s ok, (fd=%d)."</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>listen_addr</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>astream</name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_LISTEN_FN</name></expr></argument>, <argument><expr><name>listen_callback</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_listen</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Éè¶¨¶¨Ê±Æ÷¶¨Ê±ÇåÀíÀ¬»ø»ØÊÕÆ÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>gc_timer</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_loop</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MS_WINDOWS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>onexit_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>procname</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: exit now"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>exec_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>exe_path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>  
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>exeFullPath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>  
	<decl_stmt><decl><type><name>char</name></type>	<name><name>szDriver</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>  
	<decl_stmt><decl><type><name>char</name></type>	<name><name>szDir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>  
	<decl_stmt><decl><type><name>char</name></type>	<name><name>szFile</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>  
	<decl_stmt><decl><type><name>char</name></type>	<name><name>szExt</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>   

	<expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>exeFullPath</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_splitpath</name><argument_list>(<argument><expr><name>exeFullPath</name></expr></argument>, <argument><expr><name>szDriver</name></expr></argument>, <argument><expr><name>szDir</name></expr></argument>, <argument><expr><name>szFile</name></expr></argument>, <argument><expr><name>szExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
	<expr_stmt><expr><call><name>_snprintf</name><argument_list>(<argument><expr><name>exe_path</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>szDriver</name></expr></argument>, <argument><expr><name>szDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>change_path</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>exec_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_chdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>get_modules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>modules</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>JAWS_STATIC</name></cpp:ifdef>
	<decl_stmt><decl><type><name>MODULE_SERVICE</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>modules</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>module</name> <operator>=</operator> <operator>(</operator><name>MODULE_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MODULE_SERVICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>mod_init</name></name> <operator>=</operator> <name>module_service_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>mod_create</name></name> <operator>=</operator> <name>module_service_create</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>mod_main</name></name> <operator>=</operator> <name>module_service_main</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>modules</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><name>modules</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_AIO</name> <modifier>*</modifier></type><name>init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_slice</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>open_log</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>event_mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XINETD_CFG_PARSER</name> <modifier>*</modifier></type><name>cfg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>modules</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>change_path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_slice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>var_mem_slice</name> <operator>=</operator> <call><name>acl_mem_slice_init</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">10240</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>,
			<argument><expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name> <operator>|</operator> <name>ACL_SLICE_FLAG_LP64_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>var_mem_slice</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* ³õÊ¼»¯ acl ¿â */</comment>
	<expr_stmt><expr><call><name>acl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¼ÓÔØÅäÖÃÎÄ¼þ */</comment>
	<expr_stmt><expr><name>cfg</name> <operator>=</operator> <call><name>acl_xinetd_cfg_load</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"load cfg(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_xinetd_params_str_table</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>service_conf_str_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xinetd_params_str_table</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>__service_conf_str_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xinetd_params_bool_table</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>service_conf_bool_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xinetd_params_int_table</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>service_conf_int_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xinetd_cfg_free</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>open_log</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_open</name><argument_list>(<argument><expr><name>var_cfg_master_log</name></expr></argument>, <argument><expr><literal type="string">"jaws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var_cfg_event_mode</name></expr></argument>, <argument><expr><literal type="string">"kernel"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <name>ACL_EVENT_KERNEL</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var_cfg_event_mode</name></expr></argument>, <argument><expr><literal type="string">"poll"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <name>ACL_EVENT_POLL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <name>ACL_EVENT_SELECT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>var_aio</name> <operator>=</operator> <name>aio</name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>modules</name> <operator>=</operator> <call><name>get_modules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>service_init</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>modules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_proctl_child</name><argument_list>(<argument><expr><name>procname</name></expr></argument>, <argument><expr><name>onexit_fn</name></expr></argument>, <argument><expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>procname</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><name>aio</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>service_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h[help] -m[use mem slice] -l[open log] -c conf_file\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>conf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">"conf/jaws.cf"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>, <decl><type ref="prev"/><name>use_slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>open_log</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hc:ml"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'m'</literal></expr>:</case>
			<expr_stmt><expr><name>use_slice</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'l'</literal></expr>:</case>
			<expr_stmt><expr><name>open_log</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	
	<expr_stmt><expr><name>aio</name> <operator>=</operator> <call><name>init</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>use_slice</name></expr></argument>, <argument><expr><name>open_log</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>run_loop</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>var_cfg_listen_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
