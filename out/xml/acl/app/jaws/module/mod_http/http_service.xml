<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/module/mod_http/http_service.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dns_lookup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MS_WINDOWS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:pragma># <cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name><cpp:literal>"ws2_32"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>getpid</name></cpp:macro> <cpp:value>_getpid</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>http_service_start</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>http_filter_type</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>HTTP_FILTER_PROXY</name></expr>:</case>
		<expr_stmt><expr><call><name>http_proxy_start</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>HTTP_FILTER_HTTPD</name></expr>:</case>
		<expr_stmt><expr><call><name>http_server_start</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>forward_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_service_main</name><parameter_list>(<parameter><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>http_client_new</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_service_start</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_service_free</name><parameter_list>(<parameter><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>http_plugin_unload_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>service_free</name><argument_list>(<argument><expr><operator>(</operator><name>SERVICE</name><operator>*</operator><operator>)</operator> <name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>http_service_new</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>HTTP_SERVICE</name> <operator>*</operator><operator>)</operator> <call><name>service_alloc</name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_SERVICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>file_path</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¶¯Ì¬²å¼þµÄ»Øµ÷º¯Êý¸³¸ø·þÎñ¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>http_plugin_set_callback</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Õë¶ÔHTTP·þÎñÆ÷ÔËÐÐÄ£Ê½£¬³õÊ¼»¯ÎÄ¼þ»º´æ */</comment>
	<expr_stmt><expr><call><name>file_cache_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>service</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
