<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/module/mod_http/tcp_proxy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>io_close_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"io_close_fn"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>CLIENT_ENTRY</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: error to stream"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"not connected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>forward_complete</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>io_timeout_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"io_timeout_fn"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: timeout to stream"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"not connected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int write_callback(ACL_ASTREAM *stream, void *context)
{
	const char *myname = "write_callback";

	if (acl_aio_iswset(stream)) {
		acl_msg_fatal("%s: acl_aio_iswset return true", myname);
	}

	return (0);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>CLIENT_ENTRY</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
	if (acl_aio_isrset(astream)) {
		acl_msg_fatal("%s: acl_aio_isrset return true", myname);
	}
*/</comment>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: dlen(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>astream</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: server null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>astream</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: client null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: stream invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tcp_start</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>io_close_fn</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>io_timeout_fn</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>io_close_fn</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>io_timeout_fn</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
