<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/module/mod_http/http_proxy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dns_lookup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"conn_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_module.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MS_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getpid</name></cpp:macro> <cpp:value>_getpid</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_proxy_next</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_req_get</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<comment type="block">/* µ±Ç°ÇëÇó´¦ÀíÍê±Ï, ÊÇ·ñ¼ÌÐøÏÂÒ»¸ö¿Í»§¶ËÇëÇó? */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_server_complete</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_alive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><operator>(</operator><name>HTTP_SERVICE</name><operator>*</operator><operator>)</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_res_free</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>server</name> <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr>;</expr_stmt>
	<comment type="block">/* ÊÇ·ñÓ¦Óë·þÎñ¶Ë±£³Ö³¤Á¬½Ó? */</comment>
	<if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÏÈ½ûÖ¹¶Ô¸ÃÒì²½Á÷¼ÌÐø¼àÌý */</comment>
	<expr_stmt><expr><call><name>acl_aio_disable_readwrite</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Çå³ýÒì²½Á÷µÄËùÓÐ¹´×Ó»Øµ÷º¯Êý£¬·ÀÖ¹ÔÚÁ÷½áÊøºó»Øµ÷±»µ÷ÓÃ */</comment>
	<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sstream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>keep_alive</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>timeout</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Óë·þÎñ¶ËÁ÷·ÖÀë */</comment>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>server</name><operator>-&gt;</operator><name>strbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ½«Óë·þÎñ¶ËµÄÁ¬½ÓÁ÷ÖÃÈëÁ¬½Ó³ØÖÐ */</comment>
		<expr_stmt><expr><call><name>conn_cache_push_stream</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>service</name><operator>.</operator><name>conn_cache</name></name></expr></argument>,
				<argument><expr><name>server</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ¹Ø±ÕÒì²½Á÷ */</comment>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_client_complete</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keep_alive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

	<comment type="block">/* ÖØÖÃÖØÊÔ´ÎÊý */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nretry_on_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>ip_ntry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Çå³ý±¾´Î»á»°Íê³É±êÖ¾Î» */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>client</name> <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Çå³ýÒì²½Á÷µÄËùÓÐ¹´×Ó»Øµ÷º¯Êý£¬·ÀÖ¹ÔÚÁ÷½áÊøºó»Øµ÷±»µ÷ÓÃ */</comment>
	<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÊÇ·ñÓ¦Óë¿Í»§¶Ë±£³Ö³¤Á¬½Ó? */</comment>
	<if_stmt><if>if <condition>(<expr><name>keep_alive</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>http_client_req_free</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>http_proxy_next</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>cstream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>http_client_req_free</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_aio_disable_readwrite</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Óë¿Í»§¶ËÁ÷·ÖÀë */</comment>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ¹Ø±ÕÀÏµÄÒì²½Á÷ */</comment>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_complete</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error_happen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÐèÒªÌáÇ°ÖªµÀ·þÎñ¶ËÁ÷ºÍ¿Í»§¶ËÁ÷ÊÇ·ñÒÑ¾­±»·ÖÀë£¬ÒòÎªÏÂÃæ¾­¹ý
	 * http_proxy_server_complete »ò http_proxy_client_complte ºó
	 * http_client ËùÕ¼ÄÚ´æ¿ÉÄÜÒÑ¾­±»ÊÍ·Å£¬ÕâÑùÌáÇ°ÖªµÀ·þÎñ¶Ë/¿Í»§
	 * ¶ËÁ÷µÄ×´Ì¬¿ÉÒÔ±ÜÃâÄÚ´æ·Ç·¨·ÃÎÊ
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>  <name>server_null</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>client_null</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÅÐ¶¨·þÎñ¶ËÁ÷ÊÇ·ñÓ¦±£³Ö³¤Á¬½Ó */</comment>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_http_server_keepalive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error_happen</name>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_SERVER_KEEP_ALIVE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÅÐ¶¨¿Í»§¶ËÁ÷ÊÇ·ñÓ¦±£³Ö³¤Á¬½Ó */</comment>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_http_client_keepalive</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>error_happen</name>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_SERVER_KEEP_ALIVE</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_KEEP_ALIVE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_KEEP_ALIVE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Èç¹û·þÎñ¶ËÁ÷´¦ÓÚËø¶¨×´Ì¬Ôò²»Á¢¼´¹Ø±Õ·þÎñ¶ËÁ÷ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server_null</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_SERVER_LOCKED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_proxy_server_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>,
			<argument><expr><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_SERVER_KEEP_ALIVE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û¿Í»§¶ËÁ÷´¦ÓÚËø¶¨×´Ì¬Ôò²»Á¢¼´¹Ø±Õ¿Í»§¶ËÁ÷ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>client_null</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_proxy_client_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>,
			<argument><expr><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_CLIENT_KEEP_ALIVE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<comment type="block">/* ·¢ËÍÏìÓ¦Êý¾ÝÖÁ¿Í»§¶Ë£¬ÎªÁË¼õÉÙIO´ÎÊý£¬ºÏ²¢ÏìÓ¦Í·Í¬ÏìÓ¦ÌåÊý¾ÝÒ»Æð·¢ËÍ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_to_client</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>hdr_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÊÇ·ñÁ¬Í¬HTTPÏìÓ¦Í·Ò»Æð·¢ËÍ? */</comment>
	<if_stmt><if>if <condition>(<expr><name>hdr_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ½«HTTPÏìÓ¦Í·ºÍÒ»²¿·ÖÊý¾ÝÌåÒ»Æð·¢ËÍ,
		 * ÕâÑù¿ÉÒÔ¼õÉÙ IO Ð´´ÎÊý
		 */</comment>

		<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <name>hdr_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>

		<comment type="block">/* ±ØÐëÌá½»½«»º³åÇøÌáÇ°¸´Î»£¬µ«²»Ó°ÏìÄÚ²¿Êý¾Ý */</comment>
		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ½«¿Í»§¶ËÁ÷¼ÓËø£¬·ÀÖ¹±»ÌáÇ°¹Ø±Õ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writev</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ÏìÓ¦Í·ÒÑ¾­·¢ËÍ£¬´Ë´¦½ö·¢ËÍÏìÓ¦Ìå²¿·ÖÊý¾Ý */</comment>

		<comment type="block">/* ½«¿Í»§¶ËÁ÷¼ÓËø£¬·ÀÖ¹±»ÌáÇ°¹Ø±Õ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* »ñµÃ·þÎñÆ÷HTTPÊý¾ÝÌå²¢·¢ËÍÖÁä¯ÀÀÆ÷ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_respond_body_data</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data_saved</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_ptr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>plugin_dat_free_fn</name></type> <name>last_plugin_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>last_plugin_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>plugin_res_ctx</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>plugin_res_ctx</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><operator>(</operator><name>HTTP_SERVICE</name><operator>*</operator><operator>)</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ±éÀúËùÓÐµÄÊý¾ÝÌå¹ýÂËÆ÷ */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;service-&gt;respond_dat_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>  <name>stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name><name>tmp</name><operator>-&gt;</operator><name>data_filter</name></name><argument_list>(<argument><expr><name>data_ptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stop</name></expr></argument>, <argument><expr><name>plugin_res_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÊÍ·ÅÇ°Ò»¸ö¹ýÂËÆ÷·ÖÅäµÄ¶¯Ì¬ÄÚ´æ */</comment>
		<if_stmt><if>if <condition>(<expr><name>last_plugin_buf</name> <operator>&amp;&amp;</operator> <name>last_plugin_buf</name> <operator>!=</operator> <name>data_saved</name> <operator>&amp;&amp;</operator> <name>last_plugin_free</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>last_plugin_free</name><argument_list>(<argument><expr><name>last_plugin_buf</name></expr></argument>, <argument><expr><name>plugin_res_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <name>data_ptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_plugin_buf</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_plugin_free</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>data_free</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stop</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* Ïò¿Í»§¶ËÐ´Êý¾Ý */</comment>
	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>data</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>send_to_client</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ÊÍ·ÅÇ°Ò»¸ö¹ýÂËÆ÷·ÖÅäµÄ¶¯Ì¬ÄÚ´æ */</comment>
	<if_stmt><if>if <condition>(<expr><name>last_plugin_buf</name> <operator>&amp;&amp;</operator> <name>last_plugin_buf</name> <operator>!=</operator> <name>data_saved</name> <operator>&amp;&amp;</operator> <name>last_plugin_free</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>last_plugin_free</name><argument_list>(<argument><expr><name>last_plugin_buf</name></expr></argument>, <argument><expr><name>plugin_res_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ³É¹¦´Ó·þÎñÆ÷¶Áµ½ÏìÓ¦ÌåÊý¾ÝµÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_respond_body_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* only for test */</comment>
	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* È¡Ïû·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃ»á»°Íê³É±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>total_size</name></name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>

	<comment type="block">/* client Á÷ÓÐ¿ÉÄÜ±»ÌáÇ°¹Ø±ÕÁË */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* È¡Ïû·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃ»á»°Íê³É±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <name>HTTP_CHAT_ERR_MIN</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* È¡Ïû·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃ»á»°Íê³É±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃ»á»°Íê³É±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
		<comment type="block">/* È¡Ïû·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û HTTP_FLAG_FINISH ±êÖ¾ÉèÖÃ£¬Ôò»áÔÚ forward_respond_body_data Ö®ºó
	 * »Øµ÷º¯Êý send_respond_body_complete µ÷ÓÃ http_proxy_complete
	 */</comment>
	<expr_stmt><expr><call><name>forward_respond_body_data</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (status == HTTP_CHAT_OK) {
		<comment type="block">/* È¡Ïû·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		http_client-&gt;flag &amp;= ~HTTP_FLAG_SERVER_LOCKED;
		http_proxy_complete(http_client, 0);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ·¢ËÍÏìÓ¦ÌåÊý¾ÝÖÁ¿Í»§¶Ë, Èç¹ûÈ·¶¨ÒÑ¾­·¢ËÍÍê×îºóÒ»ÅúÊý¾ÝÔò´¥·¢½áÊø¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_respond_body_complete</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>client</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû¿Í»§¶ËÁ÷µÄËø¶¨×´Ì¬, ´Ó¶øÔÊÐíµ±·þÎñÁ÷Òì³£¹Ø±ÕÊ±¿ÉÒÔÔÚ
	 * on_close_server µÈº¯ÊýÀïµ÷ÓÃ http_proxy_complete Ê±Àï¹Ø±Õ¿Í»§Á÷!
	 */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÊÇ×îºóµÄÊý¾ÝÔòÍê³É±¾´Î»á»°¹ý³Ì */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_FINISH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_SERVER_CLOSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ´«Êä·þÎñÆ÷ÏìÓ¦HTTPÊý¾ÝÌåÖÁä¯ÀÀÆ÷
 * µ÷ÓÃ¸Ã¹ý³ÌµÄº¯ÊýÐèÒª×¢ÒâÁ÷¹Ø±Õ±£»¤´ëÊ©
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_respond_hdr_body</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ´´½¨HTTPÏìÓ¦Ìå¶ÔÏó */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>http_res_new</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÏò¿Í»§Á÷·¢ËÍÏìÓ¦ÌåÊ§°Ü»á×Ô¶¯µ÷ÓÃÔÚ send_request_hdr_complete
	 * ÀïÕë¶Ô¿Í»§Á÷ÉèÖÃµÄ»Øµ÷º¯Êý on_close_clinet
	 */</comment>

	<comment type="block">/* ÉèÖÃÏò¿Í»§Á÷·¢ËÍÊý¾Ý³É¹¦µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_add_write_hook</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>send_respond_body_complete</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«·þÎñ¶ËÁ÷ÖÃÓÚËø¶¨×´Ì¬, ´Ó¶ø·ÀÖ¹±»ÌáÇ°¹Ø±Õ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* only for test */</comment>
	<comment type="block">/* ¿ªÊ¼´Ó·þÎñÆ÷¶ÁÈ¡HTTPÊý¾ÝÌåÊý¾Ý */</comment>
	<expr_stmt><expr><call><name>http_res_body_get_async</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>res</name></name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>read_respond_body_ready</name></expr></argument>,
		<argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ·¢ËÍ·þÎñÆ÷ÏìÓ¦Í·ÖÁä¯ÀÀÆ÷ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_respond_hdr_complete</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>client</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"send_respond_hdr_complete"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû¿Í»§¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): http_client-&gt;hdr_res null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÒòÎª½øÈë´Ëº¯Êýºó client µÄÒýÓÃÖµÒÑ¾­±» acl_aio_xxx ×Ô¶¯¼Ó1ÁË£¬
	 * ËùÒÔÒ²Ðí²»±Øµ£ÐÄÖØ¸´¹Ø±ÕÁ÷µÄÏÖÏó·¢Éú
	 */</comment>
	<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ½ö forward ÏìÓ¦Í·£¬ÒòÎªÃ»ÓÐÏìÓ¦Ìå */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_respond_hdr</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_add_write_hook</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>send_respond_hdr_complete</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Éè¶¨¿Í»§¶ËÁ÷ÎªËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>start_forward_respond</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÊÇ·ñÓë·þÎñ¶Ë±£³Ö³¤Á¬½Ó? */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_cfg_http_client_keepalive</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_entry_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
			<argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_entry_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
			<argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_entry_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
			<argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_entry_replace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
			<argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÖØÐÂ×é³ÉHTTPÏìÓ¦Í· */</comment>
	<expr_stmt><expr><call><name>http_hdr_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¶ÔÓÚ 3xx, 4xx µÄ·þÎñÆ÷ÏìÓ¦£¬²»Ó¦ÓÐÊý¾ÝÌå²¿·Ö */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal>
	    <operator>||</operator> <operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
		<operator>&amp;&amp;</operator> <operator>!</operator><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&gt;</operator> <literal type="number">300</literal>
		<operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&lt;</operator> <literal type="number">400</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Èç¹ûÃ»ÓÐÊý¾ÝÌå£¬Ôò½ö·µ»ØÊý¾ÝÍ· */</comment>
		<expr_stmt><expr><call><name>forward_respond_hdr</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«Êý¾ÝÍ·Á¬Í¬Ò»²¿·ÖÊý¾ÝÌåÒ»Æð·¢ËÍ¸ø¿Í»§¶Ë£¬´Ó¶ø¼õÉÙio´ÎÊý */</comment>

	<comment type="block">/* xxx: ¶ÔÓÚÃ»ÓÐ content-length »ò content-length &gt; 0
	 * ¼°·þÎñÆ÷ÏìÓ¦×´Ì¬Âë²»Îª 3xx, 4xx µÄÇé¿ö
	 */</comment>
	<expr_stmt><expr><call><name>forward_respond_hdr_body</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Õë¶ÔHTTPÏìÓ¦Í·µÄ¹ýÂËÆ÷´¦Àí¹ý³Ì£¬Èç¹û¸ù¾Ý¸ÃÏìÓ¦Í·¹ýÂËÆ÷¾ö¶¨ÍêÈ«½Ó¹Ü
 * ¸ÃÏìÓ¦ÔòÖ÷³ÌÐò²»ÔÙ´¦Àí¸Ã·þÎñ¶ËÁ÷¼°¿Í»§¶ËÁ÷
 * ·µ»Ø 0 ±íÊ¾ËùÓÐ¹ýÂËÆ÷¾ù²»½Ó¹Ü¸ÃÏìÓ¦, ·ñÔò±íÊ¾½Ó¹Ü
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>reply_plugin_takeover</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"reply_plugin_takeover"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><operator>(</operator><name>HTTP_SERVICE</name><operator>*</operator><operator>)</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<comment type="block">/* xxx: plugin_res_ctx ¸Ã²ÎÊýÔÚÃ¿´ÎÇëÇó¶¼ÓÐ¿ÉÄÜ²»Ò»Ñù, Íâ¹ÒÄ£¿éÓ¦¸Ã×ÔÐÐ¹ÜÀí */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>plugin_res_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* ±éÀúËùÓÐµÄ²å¼þ»Øµ÷´¦Àíº¯Êý */</comment>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;service-&gt;respond_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client_stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>server_stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>tmp</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>respond</name></name><argument_list>(<argument><expr><name>client_stream</name></expr></argument>, <argument><expr><name>server_stream</name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>plugin_res_ctx</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>plugin</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>&amp;&amp;</operator> <name><name>plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>respond</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client_stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>server_stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>plugin_res_ctx</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>plugin_res_ctx</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ½« http_client ÖÐµÄ hdr_req/hdr_res ÖÃ¿Õ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>hdr_req</name> <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>req</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): req_curr null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* XXX: can't reach here just avoid compiling warning */</comment>
			<expr_stmt><expr><name>hdr_req</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>hdr_res</name> <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/* ½«¿Í»§¶ËÊý¾ÝÁ÷Óë¸Ã´úÀí¶ÔÏó·ÖÀë */</comment>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>client_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ½«·þÎñ¶ËÊý¾ÝÓë¸Ã´úÀí¶ÔÏó·ÖÀë */</comment>
		<comment type="block">/* ÒòÎª entry ´úÀí¶ÔÏóµÄÒýÓÃ¼ÆÊýÎª0£¬ËùÒÔÆä»áÔÚ¸Ã·ÖÀëº¯Êý
		 * ÖÐ×Ô¶¯±»ÊÍ·Å
		 */</comment>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>server_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ½ûÖ¹Òì²½Á÷µÄ¶Á/Ð´¼à¿Ø */</comment>
		<expr_stmt><expr><call><name>acl_aio_disable_readwrite</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_disable_readwrite</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Çå³ý»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ½«¿Í»§¶ËÒì²½Á÷µÄÊý¾ÝÁ÷ÖÃ¿Õ */</comment>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_STREAM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ½«·þÎñ¶ËÒì²½Á÷µÄÊý¾ÝÁ÷ÖÃ¿Õ */</comment>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_STREAM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* xxx: Òì²½¹Ø±Õ client/server Òì²½Á÷ */</comment>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ±ØÐëÁ÷ÓÉ·Ç×èÈûÄ£Ê½×ª»»Îª×èÈûÄ£Ê½ */</comment>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>server_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* µ÷ÓÃÔÚ·Ç×èÈûÍ¨ÐÅÊ±ÉèÖÃµÄ¹Ø±Õ»Øµ÷º¯Êý²¢Çå³ýÖ® */</comment>
		<expr_stmt><expr><call><name>acl_vstream_call_close_handles</name><argument_list>(<argument><expr><name>client_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_call_close_handles</name><argument_list>(<argument><expr><name>server_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÖÁ´Ë£¬ÒÑ¾­½«¿Í»§¶ËÊý¾ÝÁ÷ÓÉ·Ç×èÈûÄ£Ê½×ª»»Îª×èÈûÄ£Ê½£¬Í¬Ê±¹Ø±Õ
		 * ÁËÓë·þÎñ¶ËµÄÁ¬½ÓÁ÷£¬½«¸ÃÁ¬½ÓÇëÇó×ª¸øÏà¹Ø´úÀíÄ£¿é´¦Àí£¬Òì²½
		 * ´úÀí²»ÔÙ´úÀí¸Ã¿Í»§¶ËµÄÇëÇó¼°·þÎñ¶ËµÄÏìÓ¦
		 * ×¢Òâ£ºclient_stream, hdr_res, hdr_res ´Ë´¦²¢Î´ÊÍ·Å£¬
		 * ÐèÒªÏÂÔØ´úÀíÄ£¿éÏÂÔØÍê±Ïºó×Ô¼ºµ¥¶ÀÊÍ·Å
		 */</comment>
		<expr_stmt><expr><call><name><name>plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>respond</name></name><argument_list>(<argument><expr><name>client_stream</name></expr></argument>, <argument><expr><name>server_stream</name></expr></argument>,
				<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>hdr_res</name></expr></argument>, <argument><expr><name>plugin_res_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http_request_reforward</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_respond_hdr_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_respond_hdr_error</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* »ñµÃ·þÎñÆ÷ÏìÓ¦Í· */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>begin_read_respond</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_respond_hdr_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"get_respond_hdr_ready"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></init></decl>;</decl_stmt>
 
	<comment type="block">/* È¡Ïû·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* xxx: sanity check */</comment>

	<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: client null(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_FINISH</name></expr>
			?</condition><then> <expr><literal type="string">"finished"</literal></expr> </then><else>: <expr><literal type="string">"not finished"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÐèÒª¹Ø±ÕÁ½¸ö»Øµ÷º¯Êý£¬·ÀÖ¹´¥·¢ read_respond_hdr_error
	 * ºÍ read_respond_hdr_timeout ¹ý³Ì(read_respond_hdr_timeout »á´¥·¢
	 * read_respond_hdr_error), ¶øÔÚ read_respond_hdr_error Àï»áµ÷ÓÃ
	 * http_request_reforward
	 */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>server</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_DEL</name></expr></argument>, <argument><expr><name>read_respond_hdr_error</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_DEL</name></expr></argument>, <argument><expr><name>read_respond_hdr_timeout</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* only for test */</comment>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û¶ÁÏìÓ¦Í·³öÏÖ´íÎóÔòÐèÒªÖØÊÔ */</comment>

		<comment type="block">/* ½øÐÐÖØÊÔ */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>http_request_reforward</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Èç¹ûÒÑ¾­¿ªÊ¼ÖØÊÔ¹ý³Ì£¬ÔòÖ±½Ó·µ»Ø */</comment>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* xxx: Ó¦¸Ã·µ»Ø 5xx ÐÅÏ¢¸ø¿Í»§¶Ë */</comment>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ÖÎö HTTP ÏìÓ¦Í· */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_res_parse</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û·ÖÎöÏìÓ¦Í·Ê§°ÜÔòÐèÒªÖØÊÔ */</comment>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: parse hdr_res error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ½øÐÐÖØÊÔ */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>http_request_reforward</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Èç¹ûÒÑ¾­¿ªÊ¼ÖØÊÔ¹ý³Ì£¬ÔòÖ±½Ó·µ»Ø */</comment>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* xxx: Ó¦¸Ã·µ»Ø 5xx ÐÅÏ¢¸ø¿Í»§¶Ë */</comment>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ºöÂÔ 100 continue µÄ»ØÓ¦ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>begin_read_respond</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÅÐ¶ÏÊÇ·ñÐèÒªÓÉÆäËü´úÀíÄ£¿é½Ó¹Ü */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>reply_plugin_takeover</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¿ªÊ¼×ª·¢·þÎñÆ÷·µ»ØµÄÊý¾Ý¸ø¿Í»§¶Ë */</comment>
	<expr_stmt><expr><call><name>start_forward_respond</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_respond_hdr_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_respond_hdr_timeout"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* È¡Ïû HTTP ÏìÓ¦Í·µÄ¶Á¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_clean_close_hooks</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): client null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ³¬Ê±»Øµ÷º¯Êý */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½øÐÐÖØÊÔ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_request_reforward</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÒÑ¾­¿ªÊ¼ÖØÊÔ¹ý³Ì£¬ÔòÖ±½Ó·µ»Ø */</comment>
		<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ³¬Ê±»Øµ÷º¯Êý */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ëø¶¨¿Í»§¶ËÁ÷ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* ·µ»Ø¸ø¿Í»§¶Ë¶Á·þÎñ¶ËÏìÓ¦³¬Ê±ÐÅÏ¢ */</comment>
	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>HTTP_REPLY_TIMEOUT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REPLY_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½âËø¿Í»§¶ËÁ÷ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ³¬Ê±»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_respond_hdr_error</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>server</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_respond_hdr_error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): client null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½øÐÐÖØÊÔ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_request_reforward</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÒÑ¾­¿ªÊ¼ÖØÊÔ¹ý³Ì£¬ÔòÖ±½Ó·µ»Ø */</comment>
		<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ëø¶¨¿Í»§¶ËÁ÷ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* ·µ»Ø¸ø¿Í»§¶Ë¶Á·þÎñ¶ËÏìÓ¦³ö´íÐÅÏ¢ */</comment>
	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>HTTP_REPLY_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REPLY_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½âËø¿Í»§¶ËÁ÷ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* XXX: ¸Ãº¯ÊýÐèÒª´¦ÓÚ¹Ø±Õ±£»¤×´Ì¬£¬¼´µ÷ÓÃ´Ëº¯ÊýµÄº¯ÊýÐèÒª¶Ô·þÎñ¶ËÁ÷¼Ó±£»¤´ëÊ© */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>begin_read_respond</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Éú³ÉÒ»¸ö HTTP ÏìÓ¦Í· */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <call><name>http_hdr_res_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Éè¶¨·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ´Ó·þÎñÆ÷µÄ¶Á´íÎó¼°¶Á³¬Ê±µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_respond_hdr_error</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_respond_hdr_timeout</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¿ªÊ¼¶Á·þÎñ¶ËµÄ HTTP ÏìÓ¦Í· */</comment>
	<expr_stmt><expr><call><name>http_hdr_res_get_async</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>get_respond_hdr_ready</name></expr></argument>,
		<argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* ·¢ËÍ×îºóÇëÇóÊý¾ÝÖÁ·þÎñÆ÷µÄ»Øµ÷º¯Êý, ÖÁ´Ëº¯Êý£¬Í¨ÐÅ·½Ïò·¢Éú
 * ¸Ä±ä£¬ÓÉÔ­À´µÄ´Ó¿Í»§Á÷¶ÁÊý¾Ý¡¢Ïò·þÎñÁ÷Ð´Êý¾Ý±äÎª´Ó·þÎñÁ÷¶Á
 * Êý¾Ý¡¢Ïò¿Í»§Á÷Ð´Êý¾Ý
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_request_body_complete</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* xxx: sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÇëÇóÌåÊý¾Ý·¢ËÍÍê±ÏÔò¿ªÊ¼¶ÁÈ¡·þÎñÆ÷ÏìÓ¦ */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_FLAG_REQEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* È¡ÏûÖ®Ç°ÉèÖÃµÄ·¢ËÍÇëÇóÌå³É¹¦µÄ»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><call><name>acl_aio_del_write_hook</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>send_request_body_complete</name></expr></argument>,
				<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_REQEND</name></expr>;</expr_stmt>
		<comment type="block">/* ¿ªÊ¼¶ÁÈ¡·þÎñ¶ËµÄÏìÓ¦Êý¾Ý */</comment>
		<expr_stmt><expr><call><name>begin_read_respond</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¶Áµ½Ò»Ð©HTTPÇëÇóÌåÊý¾Ý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_request_body_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_request_body_ready"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): data: %s, dlen: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* È¡Ïû¿Í»§Á÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃÇëÇó¹ý³ÌÍê±Ï±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_REQEND</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÓÐ¿ÉÄÜÔÚÏò·þÎñ¶ËÐ´Êý¾ÝÊ±³ö´í¶ø´¥·¢ÁË on_close_server ¹ý³Ì,
		 * ´Ó¶øµ¼ÖÂ http_proxy_complete ¹ý³Ì±»µ÷ÓÃ
		 */</comment>

		<comment type="block">/* È¡Ïû¿Í»§Á÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃÇëÇó¹ý³ÌÍê±Ï±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_REQEND</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <name>HTTP_CHAT_ERR_MIN</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* È¡Ïû¿Í»§¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃÇëÇó¹ý³ÌÍê±Ï±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_REQEND</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÒÑ¾­¶ÁÍêÁËä¯ÀÀÆ÷±¾´Î»á»°µÄÇëÇóÊý¾Ý */</comment>

		<comment type="block">/* ÒòÎªÒÑ¾­´Ó¿Í»§¶Ë¶ÁÍêÁË±¾´Î»á»°µÄÇëÇóÊý¾Ý£¬ËùÒÔ´Ë´¦¿ÉÒÔ
		 * È¡Ïû¿Í»§¶ËÁ÷Ëø¶¨×´Ì¬, ÒÔÔÊÐíµ±Ïò·þÎñ¶ËÐ´Êý¾Ý³ö´íÊ±¿ÉÒÔÔÚ
		 * on_close_server ÖÐ¹Ø±Õ¿Í»§¶ËÁ÷
		 */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<comment type="block">/* ÉèÖÃÇëÇó¹ý³ÌÍê±Ï±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_REQEND</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Éè¶¨·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>
	<comment type="block">/* ½«À´×ÔÓÚä¯ÀÀÆ÷µÄÊý¾ÝÌå²¿·Ö·¢ËÍÖÁ·þÎñÆ÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Èç¹ûÓÐÇëÇóÌåÔò×ª·¢ÇëÇóÌåÊý¾ÝÖÁ·þÎñÆ÷ */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>forward_request_body</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ¸ù¾ÝÇëÇóÍ·¶ÔÏóÉú³ÉÇëÇóÌå¶ÔÏó */</comment>
 	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>req</name></name> <operator>=</operator> <call><name>http_req_new</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ·¢ËÍÇëÇóÌå³É¹¦µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_add_write_hook</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>send_request_body_complete</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¿Í»§¶ËÁ÷ÖÃÓÚËø¶¨×´Ì¬, ´Ó¶ø·ÀÖ¹±»ÌáÇ°¹Ø±Õ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	 <comment type="block">/* ¿ªÊ¼¶Á¿Í»§¶ËÇëÇóÌåÊý¾Ý */</comment>
	<expr_stmt><expr><call><name>http_req_body_get_async</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>req</name></name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>read_request_body_ready</name></expr></argument>,
		<argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ·¢ËÍÇëÇóÍ·ÖÁ·þÎñÆ÷Ê±³ö´íµÄ»Øµ÷º¯Êý */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>send_request_hdr_complete</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_request_hdr_error</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>server</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û½öÊÇ´«ÊäÇëÇóÍ·Ê±³ö´í£¬Ôò¿ÉÒÔ½øÐÐÖØÊÔ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_request_reforward</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÒÑ¾­¿ªÊ¼ÖØÊÔ¹ý³Ì£¬ÔòÖ±½Ó·µ»Ø */</comment>
		<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ÀÖ¹Ïò¿Í»§Á÷Ð´Êý¾Ý³ö´íÊ±ÌáÇ°¹Ø±Õ¿Í»§Á÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_refer</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ·µ»Ø¸ø¿Í»§¶Ë¶Á·þÎñ¶ËÏìÓ¦³ö´íÐÅÏ¢ */</comment>
	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>HTTP_SEND_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_SEND_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* »Ö¸´¿Í»§Á÷Îª¿É¹Ø±Õ×´Ì¬ */</comment>
	<expr_stmt><expr><call><name>acl_aio_unrefer</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¸Ã»á»°Íê±Ï */</comment>
	<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ·¢ËÍÇëÇóÍ·ÖÁ·þÎñÆ÷³É¹¦Ê±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_request_hdr_complete</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>server</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû·þÎñÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* ¹Ø±ÕÉÏ´Î×¢²áµÄÐ´Íê³É¼°³ö´íµÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_DEL</name></expr></argument>, <argument><expr><name>send_request_hdr_complete</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_DEL</name></expr></argument>, <argument><expr><name>send_request_hdr_error</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÓÐÇëÇóÌå£¬Ôò¶ÁÈ¡¿Í»§¶ËÇëÇóÌåÊý¾Ý */</comment>
		<expr_stmt><expr><call><name>forward_request_body</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Ã»ÓÐÇëÇóÌå£¬Ôò¿ªÊ¼¶Á·þÎñ¶ËµÄ·µ»ØÊý¾Ý */</comment>
		<expr_stmt><expr><call><name>begin_read_respond</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÖØÐÂ¹¹½¨HTTPÇëÇóÍ· */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rebuild_request</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* XXX: nginx ÓÐÊ±¶Ôº¬ÓÐ Proxy-Connection µÄÇëÇóÓÐÊ±»áÓÐÑÓ³Ù? */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	http_hdr_entry_off(&amp;hdr_req-&gt;hdr, "Proxy-Connection");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	acl_vstring_sprintf(buf, "%s http://%s%s HTTP/%d.%d\r\n",
		hdr_req-&gt;method, hdr_req-&gt;host,
		acl_vstring_str(hdr_req-&gt;url_part),
		hdr_req-&gt;hdr.version.major,
		hdr_req-&gt;hdr.version.minor);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s %s HTTP/%d.%d\r\n"</literal></expr></argument>,
		<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>method</name></name></expr></argument>,
		<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>url_part</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>version</name><operator>.</operator><name>major</name></name></expr></argument>,
		<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>version</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>hdr_req-&gt;hdr.entry_lnk</argument>)</argument_list></macro> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Á¬½Ó·þÎñÆ÷³É¹¦£¬¿ªÊ¼Ïò·þÎñÆ÷·¢ËÍHTTPÇëÇóÍ· */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>start_forward_request</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ·ÖÅä¶¯Ì¬ÄÚ´æ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>HTTP_HDRLEN_DEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_http_proxy_connection_off</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ö÷ÒªÊÇÒ»Ð©±È½ÏÈõµÄÀàËÆGFWµÄ¶«¶«ËÆºõ´¦Àí¸Ã×Ö¶ÎÓÐÎÊÌâ£¬»áÓÐÑÓ³Ù */</comment>
		<expr_stmt><expr><call><name>http_hdr_entry_off</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÖØÐÂ´´½¨ HTTP ÇëÇóÍ·ÖÁ http_client-&gt;buf ÖÐ */</comment>
	<expr_stmt><expr><call><name>rebuild_request</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>, <argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_request_hdr_complete</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_request_hdr_error</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ëø¶¨·þÎñ¶Ë */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>

	<comment type="block">/* Ïò·þÎñÆ÷×ª·¢¿Í»§¶ËµÄHTTPÇëÇóÍ·Êý¾Ý */</comment>
	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* ½«¿Í»§¶ËÇëÇóÊý¾ÝÖØÐÂÏòºó¶ËÆäËü·þÎñÆ÷·¢ËÍ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_request_reforward</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_request_reforward"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Èç¹û²»ÊÇ´ÓÁ¬½Ó³ØÖÐÈ¡µÃµÄÁ¬½ÓÔò½«ÖØÊÔ´ÎÊý¼Ó 1 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>flag_conn_reuse</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nretry_on_error</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¶Ï¿ªÓë·þÎñ¶ËµÄÁ¬½Ó£¬µ«±£³ÖÓëä¯ÀÀÆ÷¶ËµÄÁ¬½Ó */</comment>
	<if_stmt><if>if <condition>(<expr><name>server</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ê¹·þÎñÁ÷Óë¸Ã»á»°·ÖÀë */</comment>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* È¡Ïû HTTP ÏìÓ¦Í·µÄ»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* only for test */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_aio_iswset</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): defer free(%d)\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not defer free(%d)\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block">/* ½öÒì²½¹Ø±Õ·þÎñ¶ËÁ÷ */</comment>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÖØÊÔ´ÎÊý³¬¹ý¸ÃÓòÃûËù¶ÔÓ¦µÄIPÖ÷»ú¸öÊýÔò·µ»Ø´íÎó£¬²»ÔÙÖØÊÔ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nretry_on_error</name></name> <operator>&gt;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): has retried before(%d,%d), reuse connecion %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nretry_on_error</name></name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>dns_ctx</name><operator>.</operator><name>ip_cnt</name></name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>flag_conn_reuse</name></name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÖØÊÔ´ÎÊý³¬¹ý·§Öµ£¬Ôò²»ÔÙÖØÊÔÖ±½Ó·µ»Ø´íÎó */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nretry_on_error</name></name> <operator>&gt;=</operator> <name>MAX_RETRIED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): has retried before(%d,%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nretry_on_error</name></name></expr></argument>,
			<argument><expr><name>MAX_RETRIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¿ªÊ¼ÖØÊÔÁ¬½ÓÏÂÒ»¸öIP */</comment>
	<expr_stmt><expr><call><name>forward_start</name><argument_list>(<argument><expr><operator>(</operator><name>CLIENT_ENTRY</name><operator>*</operator><operator>)</operator> <name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>HTTP_CONNECT_FIRST</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.0 200 Connection established\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* µ±·þÎñ¶ËÁ÷¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_close_server</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>server</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû·þÎñ¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_LOCKED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_SERVER_CLOSED</name> <operator>|</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_proxy_connect_complete</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>method</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ìí¼Ó·þÎñÁ÷¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_add_close_hook</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>server</name></name></expr></argument>,
		<argument><expr><name>on_close_server</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* CONNECT ÇëÇó, ×ªÏò´¿ TCP ´úÀíÄ£Ê½, ´Ó¶ø·½±ãÖ§³Ö SSL */</comment>
	<if_stmt><if>if <condition>(<expr><name>var_cfg_http_method_connect_enable</name> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"CONNECT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): client null"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>HTTP_CONNECT_FIRST</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_CONNECT_FIRST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>server</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>tcp_start</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"POST"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): client null"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>HTTP_REQUEST_INVALID</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REQUEST_INVALID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): method(%s) invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> <comment type="block">/* ·µ»Ø£­1ÒÔÊ¹Òì²½¿ò¼Ü¹Ø±Õ¸ÃÒì²½Á÷ */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´¦Àí GET¡¢POST ÇëÇó */</comment>
	<expr_stmt><expr><call><name>start_forward_request</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_connect_timeout</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_proxy_connect_timeout"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): client null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): connect(%s, %s) timeout"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_refer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>HTTP_CONNECT_TIMEOUT</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_unrefer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_connect_error</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_proxy_connect_error"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): client null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): connect(%s, %s) error"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_key</name></name></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>domain_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_refer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>HTTP_CONNECT_ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_CONNECT_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_unrefer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>nslookup_complete_fn</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>NSLOOKUP_OK</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃÁ¬½Ó³É¹¦ºóµÄ»Øµ÷º¯Êý */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>connect_notify_fn</name></name> <operator>=</operator> <name>http_proxy_connect_complete</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>connect_timeout_fn</name></name> <operator>=</operator> <name>http_proxy_connect_timeout</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>connect_error_fn</name></name> <operator>=</operator> <name>http_proxy_connect_error</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>forward_start</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_refer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>HTTP_REPLY_DNS_ERR</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REPLY_DNS_ERR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_unrefer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_one</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>  <comment type="block">/* ÉèÖÃµ±Ç°¿ÉÒÔ´¦ÀíµÄÇëÇó */</comment>

	<comment type="block">/* ÏÈ¼ì²éÓÃ»§×Ô¶¨Òå¹ýÂËÆ÷ */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>http_client_req_filter</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û·µ»Ø·Ç0ÖµÔò±íÊ¾ÇëÇó¹ýÂËÆ÷½Ó¹ÜÁË¸ÃÇëÇó */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÉèÖÃDNS²éÑ¯»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>nslookup_notify_fn</name></name> <operator>=</operator> <name>nslookup_complete_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>dns_errmsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* ´Óä¯ÀÀÆ÷µÄÇëÇóÍ·ÖÐ»ñÈ¡·þÎñ¶ËµÄ¶Ë¿ÚºÅ */</comment>
	<expr_stmt><expr><call><name>dns_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ³É¹¦¶Áµ½HTTPÇëÇóÍ·ºóµÄ»Øµ÷º¯Êý
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>request_header_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"request_header_ready"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT_REQ</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>http_client</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>via</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>via_static</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>via_max</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* È¡Ïû¿Í»§¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_req_parse3</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: parse hdr_req error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>via_static</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>via_static</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>via_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>via_static</name></expr></argument>, <argument><expr><name>via_max</name></expr></argument>, <argument><expr><literal type="string">"jaws-%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ì²éÊÇ·ñ²úÉú»ØÂ·ÏÖÏó */</comment>

	<expr_stmt><expr><name>via</name> <operator>=</operator> <call><name>http_hdr_entry_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"x-via-jaws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>via</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"x-via-jaws"</literal></expr></argument>, <argument><expr><name>via_static</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>via</name></expr></argument>, <argument><expr><name>via_static</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): loop tested, via(%s), url(http://%s%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>via</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>host</name></name></expr></argument>,
			<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_part</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Ëø¶¨¿Í»§¶ËÁ÷ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
			<argument><expr><name>HTTP_REQUEST_LOOP</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REQUEST_LOOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* È¡Ïû¿Í»§¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¸ÃÇëÇóÒÑ¾­Íê³É£¬È¡ÏûÆäµÈ´ý×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CLIENT_READ_WAIT</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÇ°Ò»¸öÇëÇó»¹Î´´¦ÀíÍê±Ï£¬Ôò·µ»Ø */</comment>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°Ã»ÓÐÕýÔÚ´¦ÀíµÄÇëÇó¹ý³Ì£¬ËùÒÔ¿ªÊ¼´¦Àí¸ÃÇëÇó */</comment>

	<comment type="block">/* ´Ó¶ÓÁÐÖÐµ¯³ö¸ÃÇëÇó£¬ÒÔÃâ±»ÖØ¸´Ê¹ÓÃ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>req</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): request invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>handle_one</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_proxy_next</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>acl_fifo_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>CLIENT_READ_WAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>handle_one</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>http_proxy_req_get</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ·¢ËÍÏìÓ¦ÌåÖÁ¿Í»§¶ËÊ§°ÜÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_close_client</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>client</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	acl_msg_info("%s(%d): close client(%lx, fd=%d) now, server %s",
		__FUNCTION__, __LINE__, (long) client,
		ACL_VSTREAM_SOCK(client-&gt;stream),
		http_client-&gt;entry.server ? "not null" : "null");
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* È¡Ïû¿Í»§¶ËÁ÷µÄËø¶¨×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃ¿Í»§Á÷µÄ¹Ø±Õ×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_CLOSED</name> <operator>|</operator> <name>HTTP_FLAG_FINISH</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_proxy_complete</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ±ØÐë·µ»Ø -1, ÒòÎª²»Ï£Íû¼ÌÐøµ÷ÓÃÆäËüµÄ¹Ø±Õ»Øµ÷º¯Êý */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_proxy_req_get</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>http_client_req_new</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>CLIENT_READ_WAIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>=</operator> <call><name>http_hdr_req_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ´Ó¿Í»§Á÷¶ÁÊý¾ÝÊ§°Ü»ò³öÏÖÆäËü´íÎóÊ±µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_add_close_hook</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>on_close_client</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ëø¶¨¿Í»§¶ËÁ÷ */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_FLAG_CLIENT_LOCKED</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_CLIENT_KEEP_ALIVE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_FLAG_SERVER_KEEP_ALIVE</name></expr>;</expr_stmt>

	<comment type="block">/* ¿ªÊ¼¶ÁÈ¡HTTPÇëÇóÍ· */</comment>
	<expr_stmt><expr><call><name>http_hdr_req_get_async</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>request_header_ready</name></expr></argument>,
		<argument><expr><name>req</name></expr></argument>,
		<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_proxy_start</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* only for test */</comment>
	<expr_stmt><expr><call><name>http_proxy_req_get</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
