<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/module/mod_http/http_server.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_server_keep_alive_next</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>http_client_reset</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_service_start</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_reply_error</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>tmpl_error</name> <init>= <expr><call><name>http_tmpl_get</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <call><name>http_hdr_res_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>tmpl_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>WRITE_TO_CLIENT</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_reply_file</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* only for test */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		acl_msg_info("200 http://%s/%s", client-&gt;hdr_req-&gt;host,
			acl_vstring_str(client-&gt;hdr_req-&gt;url_path));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>sent_size</name></name> <operator>!=</operator> <name><name>client</name><operator>-&gt;</operator><name>total_size</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>file_cache_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>http_server_keep_alive_next</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>file_cache_push</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>sent_size</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>WRITE_TO_CLIENT</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_file_ready</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><call><name>http_reply_file</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_file_hdr_ready</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_file_ready</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name>http_reply_file</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_doc_file</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_doc_file"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>HTTP_HDRLEN_DEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): file(%s) no exist, error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>http_reply_error</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">403</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EISDIR</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>http_reply_error</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>http_reply_error</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fstat file(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><call><name>http_reply_error</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>total_size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>sent_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>use_cache</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <call><name>file_cache_new</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <call><name>http_hdr_res_static</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_set_keepalive</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Last-Modified"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>sbuf</name><operator>.</operator><name>st_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_hdr_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* xxx: only for test: ACL_AIO_CTL_CLOSE_FN */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_file_hdr_ready</name></expr></argument>, <argument><expr><name>client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* write http respond header */</comment>
	<expr_stmt><expr><call><name>WRITE_TO_CLIENT</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_doc_cache_send</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>UIO_MAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>UIO_MAX</name></cpp:macro>	<cpp:value>512</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>chunks</name><index>[<expr><name>UIO_MAX</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hdr</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chunks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <call><name>LEN</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>UIO_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>file_cache_next_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>cache_iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* only for test */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		acl_msg_info("200 http://%s/%s", client-&gt;hdr_req-&gt;host,
			acl_vstring_str(client-&gt;hdr_req-&gt;url_path));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>http_server_keep_alive_next</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>WRITEV_TO_CLIENT</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>chunks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_cache_ready</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><call><name>http_doc_cache_send</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_doc_cache</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>FILE_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>file_cache_iter</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>cache_iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <call><name>http_hdr_res_static</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_set_keepalive</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Last-Modified"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>tm_mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>HTTP_HDRLEN_DEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>http_hdr_build</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* only for test */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        acl_aio_disable_read(client-&gt;entry.client);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_cache_ready</name></expr></argument>, <argument><expr><name>client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><call><name>http_doc_cache_send</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**     
 * ³É¹¦¶Áµ½HTTPÇëÇóÍ·ºóµÄ»Øµ÷º¯Êý
 */</comment>                     
<function><type><specifier>static</specifier> <name>int</name></type> <name>request_header_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"request_header_ready"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT_REQ</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>http_client</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>HTTP_VHOST</name> <modifier>*</modifier></type><name>vhost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>HTTP_VPATH</name> <modifier>*</modifier></type><name>vpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>file_path</name> <init>= <expr><operator>(</operator><operator>(</operator><name>HTTP_SERVICE</name><operator>*</operator><operator>)</operator>
			<name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name></name><operator>)</operator><operator>-&gt;</operator><name>file_path</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<comment type="block">/* ÏÈ½ûÖ¹¶Á²Ù×÷£¬ÒòÎªÄ¿Ç°»¹²»Ö§³Ö pipeline Ä£Ê½ */</comment>
	<expr_stmt><expr><call><name>acl_aio_disable_read</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: status(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_req_parse</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: parse hdr_req error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>vhost</name> <operator>=</operator> <call><name>http_vhost_find</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>vhost</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): host(%s) not found"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>vpath</name> <operator>=</operator> <call><name>http_vpath_find</name><argument_list>(<argument><expr><name>vhost</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>vpath</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): vpath(%s) not found"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>vpath</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>HTTP_TYPE_DOC</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): type(%d) not supported yet"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>vpath</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: url_path(%s)'s len(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÇ°Ò»¸öÇëÇó»¹Î´´¦ÀíÍê±Ï£¬Ôò·µ»Ø */</comment>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>req</name></expr>;</expr_stmt>  <comment type="block">/* ÉèÖÃµ±Ç°¿ÉÒÔ´¦ÀíµÄÇëÇó */</comment>

	<comment type="block">/* ÏÈ¼ì²éÓÃ»§×Ô¶¨Òå¹ýÂËÆ÷ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>http_client_req_filter</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ·µ»Ø -1 ½öÊÇÎªÁËÈÃÒì²½¿ò¼Ü×Ô¶¯¹Ø±Õ¸ÃÒì²½Á÷¶ÔÏó£¬
		 * ÒòÎª¸ÃÒì²½Á÷ÒÑ¾­ÓëÊý¾ÝÁ÷·ÖÀë£¬ËùÒÔµ±¹Ø±ÕÒì²½Á÷
		 * Ê±£¬²¢²»ÕæÕý¹Ø±ÕÓëä¯ÀÀÆ÷Ö®¼äµÄÊý¾ÝÁ÷£¬Ò²²»¹Ø±Õ
		 * Óë·þÎñÆ÷Ö®¼äµÄÊý¾ÝÁ÷
		 */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>vpath</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><call><name>acl_vstring_end</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>url_path</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>vhost</name><operator>-&gt;</operator><name>default_page</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>use_cache</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>file_cache_find</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cache</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>http_doc_cache</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><call><name>http_doc_file</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_server_start</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>http_client_req_new</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>=</operator> <call><name>http_hdr_req_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>http_hdr_req_get_async</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr></argument>,
			<argument><expr><name>request_header_ready</name></expr></argument>,
			<argument><expr><name>req</name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
