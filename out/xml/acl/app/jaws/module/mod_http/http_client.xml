<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/app/jaws/module/mod_http/http_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>http_client_free</name><parameter_list>(<parameter><decl><type><name>CLIENT_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>=<expr><operator>(</operator><name>HTTP_CLIENT_REQ</name><operator>*</operator><operator>)</operator>
			<call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>http_client_req_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_client_req_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_res_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>client_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client_new</name><parameter_list>(<parameter><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>client</name> <operator>=</operator> <operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <call><name>client_entry_new</name><argument_list>(<argument><expr><operator>(</operator><name>SERVICE</name><operator>*</operator><operator>)</operator> <name>service</name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_CLIENT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>free_fn</name></name> <operator>=</operator> <name>http_client_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>client</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_client_reset</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>=<expr><operator>(</operator><name>HTTP_CLIENT_REQ</name><operator>*</operator><operator>)</operator>
			<call><name>acl_fifo_pop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>client</name><operator>-&gt;</operator><name>req_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>http_client_req_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>res</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_res_free</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>http_client_req_new</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT_REQ</name><operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_CLIENT_REQ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>http_client</name></name> <operator>=</operator> <name>http_client</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>req</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_client_req_free</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT_REQ</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_req_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_client_req_filter</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><operator>(</operator><name>HTTP_SERVICE</name><operator>*</operator><operator>)</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>service</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>plugin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>plugin_req_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* xxx: plugin_req_ctx ¸Ã²ÎÊýÔÚÃ¿´ÎÇëÇó¶¼ÓÐ¿ÉÄÜ²»Ò»Ñù, Íâ¹ÒÄ£¿éÓ¦¸Ã×ÔÐÐ¹ÜÀí */</comment>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>plugin_req_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* ¼ì²éÓÃ»§×Ô¶¨Òå¹ýÂËÆ÷ */</comment>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;service-&gt;request_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>astream</name>  <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name><name>tmp</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>request</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>plugin_req_ctx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>plugin</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* ·µ»Ø 0 ±íÊ¾ÓÃ»§×Ô¶¨Òå¹ýÂËÆ÷²»×¼±¸½Ó¹Ü¸ÃÇëÇó */</comment>
	<if_stmt><if>if <condition>(<expr><name>plugin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>astream</name>  <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>client</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ·µ»Ø¸ºÖµ±íÊ¾½ûÖ¹¸ÃÇëÇó£¬¿ÉÒÔÎª£º-4xx, -5xx */</comment>

		<expr_stmt><expr><call><name>acl_aio_refer</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><operator>-</operator><name>ret</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="number">403</literal></expr>:</case>
			<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_DENY</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REQUEST_DENY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">404</literal></expr>:</case>
			<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_NOFOUND</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_REQUEST_NOFOUND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">500</literal></expr>:</case>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>HTTP_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>acl_aio_unrefer</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>http_client_req_free</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_disable_readwrite</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>hdr_req</name> <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>req_curr</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>plugin_req_ctx</name> <operator>=</operator> <name><name>http_client</name><operator>-&gt;</operator><name>plugin_req_ctx</name></name></expr>;</expr_stmt>

	<comment type="block">/* ÊÍ·ÅµôÒì²½Á÷Ïà¹ØµÄ¶ÔÏó, ½«¿Í»§¶ËÊý¾ÝÁ÷Óë¸Ã´úÀí¶ÔÏó·ÖÀë,
	 * ÒòÎª´ËÊ±ÎªÇëÇóÊ±µÄ¹ýÂËÆ÷£¬ËùÒÔÖ»ÓÐÇëÇó¶ËÃ»ÓÐÏìÓ¦¶Ë£¬Ôò
	 * µ÷ÓÃ client_entry_detach ºó»áÒòÎªÒýÓÃ¼ÆÊýÎª0¶ø×Ô¶¯½«
	 * http_client ÊÍ·Å
	 */</comment>
	<expr_stmt><expr><call><name>client_entry_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>http_client</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¹Ø±Õ¶Á¼àÌýÊÂ¼þ */</comment>
	<expr_stmt><expr><call><name>acl_aio_disable_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Çå³ý»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_clean_hooks</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¿Í»§¶ËÒì²½Á÷µÄÊý¾ÝÁ÷ÖÃ¿Õ */</comment>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_STREAM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* xxx: Òì²½¹Ø±Õ astream Òì²½Á÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ±ØÐëÁ÷ÓÉ·Ç×èÈûÄ£Ê½×ª»»Îª×èÈûÄ£Ê½ */</comment>
	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ×ª¸øÓÃ»§×Ô¶¨Òå´¦Àí¹ý³Ì */</comment>
	<expr_stmt><expr><call><name><name>plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>request</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>plugin_req_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
