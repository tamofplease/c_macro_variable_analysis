<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/module/mod_http/http_plugin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>__handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name></type> <name>__request_plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name></type> <name>__request_dat_plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name></type> <name>__respond_plugins</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name></type> <name>__respond_dat_plugins</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>http_plugin_load</name><parameter_list>(<parameter><decl><type><name>ACL_DLL_ENV</name> <modifier>*</modifier></type><name>dll_env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plugin_cfgdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_plugin_load"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DLL_HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>http_plugin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_PLUGIN</name></type>  <name>plugin</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dlname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): begin load %s now ..."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>acl_dlopen</name><argument_list>(<argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): load %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): load %s ok."</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__handles</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>__handles</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ³õÊ¼»¯ */</comment>
	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>init</name></name> <operator>=</operator> <operator>(</operator><name>plugin_init_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_plugin_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>.</operator><name>init</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>plugin</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>dll_env</name></expr></argument>, <argument><expr><name>plugin_cfgdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ìí¼ÓÇëÇóÍ·¹ýÂËÆ÷ */</comment>

	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>filter</name><operator>.</operator><name>request</name></name> <operator>=</operator> <operator>(</operator><name>plugin_filter_request_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_request_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>forward</name><operator>.</operator><name>request</name></name> <operator>=</operator> <operator>(</operator><name>plugin_forward_request_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_request_forward"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>.</operator><name>filter</name><operator>.</operator><name>request</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>filter</name><operator>.</operator><name>request</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>forward</name><operator>.</operator><name>request</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__request_plugins</name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ìí¼ÓÇëÇóÌå¹ýÂËÆ÷ */</comment>

	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>data_free</name></name> <operator>=</operator> <operator>(</operator><name>plugin_dat_free_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_request_dat_free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>data_filter</name></name> <operator>=</operator> <operator>(</operator><name>plugin_dat_filter_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_request_dat_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>.</operator><name>data_filter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_filter</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>data_filter</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_free</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>data_free</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__request_dat_plugins</name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ìí¼ÓÏìÓ¦Í·¹ýÂËÆ÷ */</comment>

	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>filter</name><operator>.</operator><name>respond</name></name> <operator>=</operator> <operator>(</operator><name>plugin_filter_respond_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_respond_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>forward</name><operator>.</operator><name>respond</name></name> <operator>=</operator> <operator>(</operator><name>plugin_forward_respond_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_respond_forward"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>.</operator><name>filter</name><operator>.</operator><name>respond</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>respond</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>filter</name><operator>.</operator><name>respond</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>respond</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>forward</name><operator>.</operator><name>respond</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__respond_plugins</name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ìí¼ÓÏìÓ¦Ìå¹ýÂËÆ÷ */</comment>

	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>data_filter</name></name> <operator>=</operator> <operator>(</operator><name>plugin_dat_filter_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_respond_dat_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plugin</name><operator>.</operator><name>data_free</name></name> <operator>=</operator> <operator>(</operator><name>plugin_dat_free_fn</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator>
		<call><name>acl_dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><literal type="string">"http_respond_dat_free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>plugin</name><operator>.</operator><name>data_filter</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_filter</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>data_filter</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_free</name></name> <operator>=</operator> <name><name>plugin</name><operator>.</operator><name>data_free</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__respond_dat_plugins</name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_load_all</name><parameter_list>(<parameter><decl><type><name>ACL_DLL_ENV</name> <modifier>*</modifier></type><name>dll_env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlnames</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>plugin_cfgdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__request_plugins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__request_dat_plugins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__respond_plugins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__respond_dat_plugins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dlnames</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>dlnames</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>dlnames</name></expr></argument>, <argument><expr><literal type="string">" \t,;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dlname</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>http_plugin_load</name><argument_list>(<argument><expr><name>dll_env</name></expr></argument>, <argument><expr><name>dlname</name></expr></argument>, <argument><expr><name>plugin_cfgdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_unload_all</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__handles</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>__handles</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_plugin_set_callback</name><parameter_list>(<parameter><decl><type><name>HTTP_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_PLUGIN</name> <modifier>*</modifier></type><name>http_plugin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>plugin</name></decl>;</decl_stmt>

	<comment type="block">/* ³õÊ¼»¯¹ýÂËÆ÷¶ÓÁÐ¼¯ºÏ */</comment>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>request_plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>respond_plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>request_dat_plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>respond_dat_plugins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;__request_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>request</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>request</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>request_plugins</name></name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;__request_dat_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_filter</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>data_filter</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_free</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>data_free</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>request_dat_plugins</name></name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;__respond_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>respond</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>respond</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>respond</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>forward</name><operator>.</operator><name>respond</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>respond_plugins</name></name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;__respond_dat_plugins</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>http_plugin</name> <operator>=</operator> <operator>(</operator><name>HTTP_PLUGIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_PLUGIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_filter</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>data_filter</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>http_plugin</name><operator>-&gt;</operator><name>data_free</name></name> <operator>=</operator> <name><name>plugin</name><operator>-&gt;</operator><name>data_free</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>respond_dat_plugins</name></name></expr></argument>, <argument><expr><name>http_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
