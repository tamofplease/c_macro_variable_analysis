<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/app/jaws/master_main/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"app_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__use_slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__slice_base</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__slice_gc</name> <init>= <expr><name>ACL_SLICE_FLAG_GC2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__nslice</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__nalloc_gc</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__rtgc_off</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>env_argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_ENV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>env_argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">",\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>env_argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>env_argv</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STREQ</name></cpp:macro>	<cpp:value>!strcasecmp</cpp:value></cpp:define>

		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"use_slice"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__use_slice</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>__use_slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"slice_base"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__slice_base</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>__slice_base</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__slice_base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"nslice"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__nslice</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>__nslice</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__nslice</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"nalloc_gc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__nalloc_gc</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>__nalloc_gc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__nalloc_gc</name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"slice_gc"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"gc1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__slice_gc</name> <operator>=</operator> <name>ACL_SLICE_FLAG_GC1</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"gc3"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__slice_gc</name> <operator>=</operator> <name>ACL_SLICE_FLAG_GC3</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>__slice_gc</name> <operator>=</operator> <name>ACL_SLICE_FLAG_GC2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"rtgc_off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__rtgc_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>__rtgc_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>__slice_gc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__use_slice</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>get_modules</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>modules</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>JAWS_STATIC</name></cpp:ifdef>
	<decl_stmt><decl><type><name>MODULE_SERVICE</name> <modifier>*</modifier></type><name>module</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>modules</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>module</name> <operator>=</operator> <operator>(</operator><name>MODULE_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MODULE_SERVICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>mod_init</name></name> <operator>=</operator> <name>module_service_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>mod_create</name></name> <operator>=</operator> <name>module_service_create</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>module</name><operator>-&gt;</operator><name>mod_main</name></name> <operator>=</operator> <name>module_service_main</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>modules</name></expr></argument>, <argument><expr><name>module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><name>modules</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>init_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><call><name>acl_aio_server_handle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>modules</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>modules</name> <operator>=</operator> <call><name>get_modules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>service_init</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>exit_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>service_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__service_main</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>run_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><call><name>acl_aio_server_handle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><call><name>service_main</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>parse_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__use_slice</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"use mem slice, slice_base(%d), nslice(%d),"</literal>
			<literal type="string">" nalloc_gc(%d), rtgc_off(%s)"</literal></expr></argument>, <argument><expr><name>__slice_base</name></expr></argument>,
			<argument><expr><name>__nslice</name></expr></argument>, <argument><expr><name>__nalloc_gc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>__rtgc_off</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var_mem_slice</name> <operator>=</operator> <call><name>acl_mem_slice_init</name><argument_list>(<argument><expr><name>__slice_base</name></expr></argument>, <argument><expr><name>__nslice</name></expr></argument>,
			<argument><expr><name>__nalloc_gc</name></expr></argument>, <argument><expr><ternary><condition><expr><name>__rtgc_off</name></expr> ?</condition><then>
			<expr><name>__slice_gc</name> <operator>|</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name></expr> </then><else>: <expr><name>__slice_gc</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>var_mem_slice</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* acl_debug_malloc_init("log.txt"); */</comment>
	<expr_stmt><expr><call><name>acl_aio_app2_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>__service_main</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>ACL_APP_CTL_INIT_FN</name></expr></argument>, <argument><expr><name>__service_init</name></expr></argument>,
		<argument><expr><name>ACL_APP_CTL_EXIT_FN</name></expr></argument>, <argument><expr><name>__service_exit</name></expr></argument>,
		<argument><expr><name>ACL_APP_CTL_CFG_BOOL</name></expr></argument>, <argument><expr><name>service_conf_bool_tab</name></expr></argument>,
		<argument><expr><name>ACL_APP_CTL_CFG_INT</name></expr></argument>, <argument><expr><name>service_conf_int_tab</name></expr></argument>,
		<argument><expr><name>ACL_APP_CTL_CFG_STR</name></expr></argument>, <argument><expr><name>service_conf_str_tab</name></expr></argument>,
<comment type="block">/*
		ACL_APP_CTL_OPEN_LOG, app_set_libcore_log,
		ACL_APP_CTL_CLOSE_LOG, app_libcore_log_end,
*/</comment>
		<argument><expr><name>ACL_APP_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
