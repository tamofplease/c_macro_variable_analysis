<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_protocol/samples/http/url_get1/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>proxy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dump</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ´´½¨ HTTP ÇëÇóÍ· */</comment>
	<decl_stmt><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name> <init>= <expr><call><name>http_hdr_req_create</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_RES</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* Êä³ö HTTP ÇëÇóÍ·ÄÚÈÝ */</comment>

	<expr_stmt><expr><call><name>http_hdr_print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"---request hdr---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÉè¶¨´úÀí·þÎñÆ÷£¬ÔòÁ¬½Ó´úÀí·þÎñÆ÷µØÖ·£¬
	 * ·ñÔòÊ¹ÓÃ HTTP ÇëÇóÍ·ÀïÖ¸¶¨µÄµØÖ·
	 */</comment>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>proxy</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>http_hdr_req_host</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* »ñµÃÔ¶³Ì HTTP ·þÎñÆ÷µÄÁ¬½ÓµØÖ· */</comment>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_vstring_memchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">":80"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>port</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>port</name> <operator>&gt;=</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"http server's addr(%s) invalid\n"</literal></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Á¬½ÓÔ¶³Ì http ·þÎñÆ÷ */</comment>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ·þÎñÆ÷µØÖ· */</comment>,
			<argument><expr><name>ACL_BLOCKING</name></expr></argument> <comment type="block">/* ²ÉÓÃ×èÈû·½Ê½ */</comment>,
			<argument><expr><literal type="number">10</literal></expr></argument> <comment type="block">/* Á¬½Ó³¬Ê±Ê±¼äÎª 10 Ãë */</comment>,
			<argument><expr><literal type="number">10</literal></expr></argument> <comment type="block">/* ÍøÂç IO ²Ù×÷³¬Ê±Ê±¼äÎª 10 Ãë */</comment>,
			<argument><expr><literal type="number">4096</literal></expr></argument> <comment type="block">/* stream Á÷»º³åÇø´óÐ¡Îª 4096 ×Ö½Ú */</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"connect addr(%s) error(%s)\n"</literal></expr></argument>,
			<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¹¹½¨ HTTP ÇëÇóÍ·Êý¾Ý */</comment>

	<expr_stmt><expr><call><name>http_hdr_build_request</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ïò HTTP ·þÎñÆ÷·¢ËÍÇëÇó */</comment>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write to server error(%s)\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´´½¨Ò»¸ö HTTP ÏìÓ¦Í·¶ÔÏó */</comment>

	<expr_stmt><expr><name>hdr_res</name> <operator>=</operator> <call><name>http_hdr_res_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¶ÁÈ¡ HTTP ·þÎñÆ÷ÏìÓ¦Í·*/</comment>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>http_hdr_res_get_sync</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> <comment type="block">/* IO ³¬Ê±Ê±¼äÎª 10 Ãë */</comment>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"get http reply header error(%s)\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_res_parse</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"parse http reply header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"--- reply http header ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÐèÒª×ª´¢ÖÁ´ÅÅÌÔòÐèÒªÏÈ´ò¿ªÎÄ¼þ */</comment>

	<if_stmt><if>if <condition>(<expr><name>dump</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_fopen</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"open file(%s) error(%s)\n"</literal></expr></argument>,
				<argument><expr><name>dump</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û HTTP ÏìÓ¦Ã»ÓÐÊý¾ÝÌåÔò½öÊä³ö HTTP ÏìÓ¦Í·¼´¿É */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal>
		<operator>||</operator> <operator>(</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal>
			<operator>&amp;&amp;</operator> <operator>!</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name>
			<operator>&amp;&amp;</operator> <name><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&gt;</operator> <literal type="number">300</literal>
			<operator>&amp;&amp;</operator> <name><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&lt;</operator> <literal type="number">400</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>http_hdr_fprint</name><argument_list>(<argument><expr><call><name>ACL_FSTREAM</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
				<argument><expr><literal type="string">"--- reply http header ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>http_hdr_fprint</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
				<argument><expr><literal type="string">"--- reply http header ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>http_hdr_res_free</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Êä³ö HTTP ÏìÓ¦Í· */</comment>

	<expr_stmt><expr><call><name>http_hdr_print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"--- reply http header ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨ HTTP ÏìÓ¦Ìå¶ÔÏó */</comment>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>http_res_new</name><argument_list>(<argument><expr><name>hdr_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûÓÐÊý¾ÝÌåÔò¿ªÊ¼¶ÁÈ¡ HTTP ÏìÓ¦Êý¾ÝÌå²¿·Ö */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>http_off_t</name></type>  <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>buf2</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>http_res_body_get_sync</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_fwrite</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write to dump file(%s) error(%s)\n"</literal></expr></argument>,
					<argument><expr><name>dump</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>http_res_free</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·Å HTTP ÏìÓ¦¶ÔÏó, hdr_res »áÔÚ´Ëº¯ÊýÄÚ²¿×Ô¶¯±»ÊÍ·Å */</comment>
	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ¹Ø±ÕÍøÂçÁ÷ */</comment>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·ÅÄÚ´æÇø */</comment>
	<expr_stmt><expr><call><name>http_hdr_req_free</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·Å HTTP ÇëÇóÍ·¶ÔÏó */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h[help] -t method -r url -f dump_file -X proxy_addr\n"</literal>
		<literal type="string">"example: %s -t GET -r http://www.sina.com.cn/ -f url_dump.txt\n"</literal></expr></argument>,
		<argument><expr><name>procname</name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>url</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dump</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>proxy</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>method</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/*
	const char *url1 = "http://127.0.0.1:80/";
	HTTP_UTIL *req = http_util_req_new(url1, "POST");
	printf("&gt;&gt;&gt;host: %s\n", http_hdr_req_host(req-&gt;hdr_req));
	acl_assert(req);
	return (0);
	*/</comment>

	<expr_stmt><expr><call><name>acl_lib_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ³õÊ¼»¯ acl ¿â */</comment>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dump</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proxy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hr:t:f:X:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'r'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>dump</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'X'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>url</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>get_url</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>dump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
