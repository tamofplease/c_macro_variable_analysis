<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_protocol/samples/ping/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__delay</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_ip_list</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>domain_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type> <name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pdomain</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pip</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name><modifier>*</modifier></type> <name>ip_list</name> <init>= <expr><call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>domain_list</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_gethostbyname</name><argument_list>(<argument><expr><name><name>domain_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dns_db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"Can't find domain %s"</literal></expr></argument>, <argument><expr><name><name>domain_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>acl_netdb_size</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_netdb_index_ip</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>ip_list</name></expr></argument>, <argument><expr><name><name>domain_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ip_list</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pdomain</name> <operator>=</operator> <name><name>ip_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pip</name> <operator>=</operator> <name><name>ip_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pdomain</name></expr></argument>, <argument><expr><name>pip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>icmp_ping_one</name><argument_list>(<argument><expr><name>chat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pip</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>, <argument><expr><name>__delay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>icmp_ping_one</name><argument_list>(<argument><expr><name>chat</name></expr></argument>, <argument><expr><name>pdomain</name></expr></argument>, <argument><expr><name>pip</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>, <argument><expr><name>__delay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ICMP_CHAT</name> <modifier>*</modifier></type><name>__chat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_res2</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>chat</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÏÔÊ¾ PING µÄ½á¹û×Ü½á */</comment>
		<expr_stmt><expr><call><name>icmp_stat</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;max pkts: %d\r\n"</literal></expr></argument>, <argument><expr><call><name>icmp_chat_seqno</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>display_res</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__chat</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>display_res2</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÊÍ·Å ICMP ¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>icmp_chat_free</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__chat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* µ¥Ïß³ÌÒì²½ PING ¶à¸öµØÖ·µÄº¯ÊýÈë¿Ú */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ping_main_async</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>ip_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>

	<comment type="block">/* ´´½¨·Ç×èÈûÒì²½Í¨ÐÅ¾ä±ú */</comment>
	<expr_stmt><expr><name>aio</name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>ACL_EVENT_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_set_keep_read</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨ ICMP ¶ÔÏó */</comment>
	<expr_stmt><expr><name>__chat</name> <operator>=</operator> <call><name>icmp_chat_create</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ìí¼ÓÐèÒª PING µÄµØÖ·ÁÐ±í */</comment>
	<expr_stmt><expr><call><name>add_ip_list</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>, <argument><expr><name>ip_list</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û PING ½áÊø£¬ÔòÍË³öÑ­»· */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>icmp_chat_finish</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"over now!, hosts' size=%d, count=%d\r\n"</literal></expr></argument>,
				<argument><expr><call><name>icmp_chat_size</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>icmp_chat_count</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Òì²½ÊÂ¼þÑ­»·¹ý³Ì */</comment>
		<expr_stmt><expr><call><name>acl_aio_loop</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* ÏÔÊ¾ PING ½á¹û */</comment>
	<expr_stmt><expr><call><name>display_res</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ïú»Ù·Ç×èÈû¾ä±ú */</comment>
	<expr_stmt><expr><call><name>acl_aio_free</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* µ¥Ïß³Ì PING µ¥¸öµØÖ·µÄº¯ÊýÈë¿Ú */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ping_main_sync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type> <name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl>;</decl_stmt>

	<comment type="block">/* ´´½¨ ICMP ¶ÔÏó */</comment>
	<expr_stmt><expr><name>__chat</name> <operator>=</operator> <call><name>icmp_chat_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÓÉÓòÃû½âÎö³ö IP µØÖ· */</comment>
	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_gethostbyname</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dns_db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"Can't find domain %s"</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>acl_netdb_index_ip</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"ip invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ¿ªÊ¼ PING Ò»¸ö IP µØÖ· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_ping_one</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>, <argument><expr><name>__delay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_ping_one</name><argument_list>(<argument><expr><name>__chat</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>, <argument><expr><name>__delay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* ÊÍ·Å DNS ²éÑ¯½á¹û */</comment>
	<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÏÔÊ¾ PING ½á¹ûÐ¡½á */</comment>
	<expr_stmt><expr><call><name>display_res</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* PING Ïß³ÌÈë¿Ú */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__npkt</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>ping_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type> <name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl>;</decl_stmt>

	<comment type="block">/* Í¨¹ýÓòÃû½âÎö³öIPµØÖ· */</comment>
	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_gethostbyname</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dns_db</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"Can't find domain %s"</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ö»È¡³öÓòÃûµÚÒ»¸ö IP µØÖ· PING */</comment>
	<expr_stmt><expr><name>ip</name> <operator>=</operator> <call><name>acl_netdb_index_ip</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"ip invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´´½¨ ICMP ¶ÔÏó */</comment>
	<expr_stmt><expr><name>chat</name> <operator>=</operator> <call><name>icmp_chat_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¿ªÊ¼ PING */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_ping_one</name><argument_list>(<argument><expr><name>chat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>__npkt</name></expr></argument>, <argument><expr><name>__delay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_ping_one</name><argument_list>(<argument><expr><name>chat</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>__npkt</name></expr></argument>, <argument><expr><name>__delay</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·ÅÓòÃû½âÎö¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>display_res2</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÏÔÊ¾ PING ½á¹û */</comment>
	<expr_stmt><expr><call><name>icmp_chat_free</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÊÍ·Å ICMP ¶ÔÏó */</comment>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¶àÏß³Ì·½Ê½ PING ¶à¸öÄ¿±êµØÖ·£¬Ã¿¸öÏß³Ì²ÉÓÃÍ¬²½ PING ·½Ê½ */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ping_main_threads</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>ip_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>npkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name><name>tids</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__npkt</name> <operator>=</operator> <name>npkt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÏÞ¶¨Ã¿´Î×î´óµÄÏß³ÌÊý£¬·ÀÖ¹ÏµÍ³¿ªÏúÌ«´ó */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name><name>ip_list</name><operator>-&gt;</operator><name>argc</name></name> <operator>&gt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">128</literal></expr> </then><else>: <expr><name><name>ip_list</name><operator>-&gt;</operator><name>argc</name></name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<comment type="block">/* ´´½¨ PING Ïß³Ì */</comment>
		<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>ping_thread</name></expr></argument>, <argument><expr><name><name>ip_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<comment type="block">/* »ØÊÕÏß³Ì×´Ì¬ */</comment>
		<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name><name>tids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s [-h help] -s [sync] -d delay -t [use thread mode] [-n npkt] [\"dest1 dest2 dest3...\"]\r\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"example: %s -n 10 www.sina.com.cn www.baidu.com www.qq.com\r\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"example: %s -s -n 10 www.sina.com.cn\r\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"please enter any key to exit\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* µ±ÊÕµ½ SIGINT ÐÅºÅ(¼´ÔÚ PING ¹ý³ÌÖÐÓÃ»§°´ÏÂ ctrl + c)Ê±µÄÐÅºÅ´¦Àíº¯Êý */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>OnSigInt</name><parameter_list>(<parameter><decl><type><name>int</name> <name>signo</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>display_res</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>npkt</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>syn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>thread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name><modifier>*</modifier></type> <name>dest_list</name> <init>= <expr><call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>OnSigInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÓÃ»§°´ÏÂ ctr + c Ê±ÖÐ¶Ï PING ³ÌÐò */</comment>
	<expr_stmt><expr><call><name>acl_socket_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÔÚ WIN32 ÏÂÐèÒª³õÊ¼»¯È«¾ÖÌ×½Ó×Ö¿â */</comment>
	<expr_stmt><expr><call><name>acl_msg_stdout_enable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ÔÊÐí acl_msg_xxx ¼ÇÂ¼µÄÐÅÏ¢Êä³öÖÁÆÁÄ» */</comment>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"htsl:n:d:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name>syn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name>thread</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>npkt</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<expr_stmt><expr><name>__delay</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>==</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>optind</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>dest_list</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>npkt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>npkt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Í¬²½ PING ·½Ê½£¬¶ÔÓÚ¶à¸öÄ¿±êµØÖ·£¬²ÉÓÃÒ»¸öÏß³Ì PING Ò»¸öµØÖ· */</comment>
	<if_stmt><if>if <condition>(<expr><name>thread</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ping_main_threads</name><argument_list>(<argument><expr><name>dest_list</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Í¬²½ PING ·½Ê½£¬Ö»ÄÜÍ¬Ê± PING Ò»¸öµØÖ· */</comment>
	<if type="elseif">else if <condition>(<expr><name>syn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ping_main_sync</name><argument_list>(<argument><expr><name><name>dest_list</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Òì²½ PING ·½Ê½£¬¿ÉÒÔÔÚÒ»¸öÏß³ÌÖÐÍ¬Ê± PING ¶à¸öµØÖ· */</comment>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ping_main_async</name><argument_list>(<argument><expr><name>dest_list</name></expr></argument>, <argument><expr><name>npkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>dest_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"please enter any key to exit\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_socket_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
