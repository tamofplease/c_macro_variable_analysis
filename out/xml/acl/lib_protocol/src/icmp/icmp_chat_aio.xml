<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_protocol/src/icmp/icmp_chat_aio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp/lib_icmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_private.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delay_send_pkt</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_close_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_ready_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"check_timer"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><operator>(</operator><name>ICMP_HOST</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name></name></expr></init></decl>;</decl_stmt> 

	<if_stmt><if>if <condition>(<expr><name>chat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): chat null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>(</operator><name>ICMP_PKT</name><operator>*</operator><operator>)</operator> <call><name><name>chat</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>popup</name></name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* »ã±¨ÇëÇó°ü³¬Ê± */</comment>
		<expr_stmt><expr><call><name>icmp_stat_timeout</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name> <operator>&gt;=</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Èç¹û¶Ô¸ÃÖ÷»úµÄ°ü·¢ËÍÍê±Ï£¬Ôò»Øµ÷×´Ì¬»ã±¨º¯Êý */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* ÒÑÍê³ÉÖ÷»ú¼ì²âÊý¼Ó1 */</comment>
			<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ¶¨Ê±·¢ËÍÏÂÒ»¸öÇëÇóÊý¾Ý°ü */</comment>
		<expr_stmt><expr><call><name>delay_send_pkt</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Æô¶¯ÏÂÒ»´Î¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>check_timer</name></expr></argument>,
		<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>chat</name><operator>-&gt;</operator><name>check_inter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_pkt</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_CHAT</name>   <modifier>*</modifier></type><name>chat</name>    <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name> <init>= <expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>astream</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>vstream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* ×é½¨·¢ËÍÊý¾Ý°ü */</comment>
	<expr_stmt><expr><call><name>icmp_pkt_build</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>chat</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ö¸¶¨µ±Ç°°üÄ¿µÄÖ÷»úµØÖ· */</comment>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>dest</name></name></expr>;</expr_stmt>
	<comment type="block">/* ²ÉÓÃÍ¬²½·¢ËÍµÄÄ£Ê½ */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>pkt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pkt</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>nsent</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* »ã±¨Ö÷»ú²»¿É´ïÐÅÏ¢ */</comment>
		<expr_stmt><expr><call><name>icmp_stat_unreach</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name> <operator>&gt;=</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ICMP_HOST ¶ÔÏóµÄ ICMP °üÒÑ·¢Íê, ½« count Öµ¼Ó 1 */</comment>
			<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/* »ã±¨¸Ã ICMP_HOST ¶ÔÏóµÄ ICMP °ü¿É´ï×´Ì¬ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt_next</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* ÑÓ³Ù·¢ËÍÏÂÒ»¸öÊý¾Ý°ü */</comment>
			<expr_stmt><expr><call><name>delay_send_pkt</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt_next</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ½«¸Ã°üÖÃÈë³¬Ê±¶ÓÁÐÖÐ */</comment>
		<expr_stmt><expr><call><name><name>chat</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>request</name></name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat_aio</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name> <operator>&gt;=</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ·¢ËÍµÄµÚÒ»¸öÇëÇó°ü²»ÐèÒªÆô¶¯Ð´¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>send_pkt</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Ä³¸ö°üµÄ·¢ËÍ¶¨Ê±Æ÷µ½´ïµÄ»Øµ÷º¯Êý */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>delay_send_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>(</operator><name>ICMP_PKT</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ·¢ËÍ¸Ã ICMP °ü */</comment>
	<expr_stmt><expr><call><name>send_pkt</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delay_send_pkt</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"delay_send_pkt"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pkt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pkt null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Æô¶¯Ð´¶¨Ê±Æ÷£¬ÒòÎª´«ÈëµÄ delay ÊÇºÁÃë¼¶£¬¶ø acl_aio_request_timer
	 * µÄÊ±¼äµ¥Î»ÊÇÎ¢Ãë, ËùÒÔÐèÒª½« dely ÓÉºÁÃë×ªÎªÎ¢Ãë
	 */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>delay_send_timer</name></expr></argument>,
		<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>delay</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_close_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_close_fn"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name> <init>= <expr><operator>(</operator><name>ICMP_CHAT</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* µ±¸Ãº¯Êý±»µ÷ÓÃÊ±£¬¾ÍÒÑ¾­±íÃ÷¸ÃÌ×½Ó×ÖÓÐÎÊÌâ£¬ËùÒÔÐèÒªÖØÆôÒ»¸öÁ÷ */</comment>

	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sock read error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>icmp_stream_reopen</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÖØÐÂÆô¶¯Òì²½¶Á¹ý³Ì£¬×¢£º´ËÊ±chat-&gt;is-&gt;astream ÒÑ¾­²»Í¬ÓÚ
	 * ¸Ãº¯ÊýµÄ²ÎÊý astream ÁË!
	 */</comment>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ·µ»Ø-1£¬Ê¹±¾Òì²½Á÷±»×Ô¶¯¹Ø±Õ */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_ready_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"read_ready_fn"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><operator>(</operator><name>ICMP_HOST</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_PKT</name>  <modifier>*</modifier></type><name>pkt_src</name></decl>, <decl><type ref="prev"/><name>pkt</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>READ_RETURN</name><parameter_list>(<parameter><type><name>_x_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	acl_aio_read(astream); \
	return(_x_); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>chat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): chat null"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>icmp_pkt_unpack</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name><name>chat</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>ICMP_TYPE_ECHOREPLY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>chat</name><operator>-&gt;</operator><name>check_id</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>body</name><operator>.</operator><name>gid</name></name> <operator>!=</operator> <name><name>chat</name><operator>-&gt;</operator><name>gid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ¶Áµ½ËùÐèÊý¾Ý£¬È¡Ïû¸Ã·¢ËÍ°üµÄ¶Á³¬Ê±¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><name>pkt_src</name> <operator>=</operator> <call><name><name>chat</name><operator>-&gt;</operator><name>timer</name><operator>-&gt;</operator><name>find_delete</name></name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pkt_src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): seq(%d) not found"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>icmp_pkt_save_status</name><argument_list>(<argument><expr><name>pkt_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* »ã±¨×´Ì¬ */</comment>
	<expr_stmt><expr><call><name>icmp_stat_report</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name> <operator>&gt;=</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¶¨Ê±·¢ËÍÏÂÒ»¸öÇëÇóÊý¾Ý°ü */</comment>
	<expr_stmt><expr><call><name>delay_send_pkt</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>READ_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timeout_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"timeout_fn"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): be called"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* not reached */</comment>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_ready_fn</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"write_ready_fn"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): be called"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat_aio_add</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>, <parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_set_delay_sec</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_set_delay_usec</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_ready_fn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>write_ready_fn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_close_fn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>timeout_fn</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <comment type="block">/* ³õÊ¼»¯Ê±ÏÈÉèÖÃ¶Á³¬Ê±Îª 0 */</comment>
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>timer</name></name> <operator>=</operator> <call><name>icmp_timer_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>check_inter</name></name> <operator>=</operator> <literal type="number">2000000</literal></expr>;</expr_stmt>	<comment type="block">/* one second check timer */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>check_timer</name></expr></argument>, <argument><expr><name>host</name></expr></argument>,
		<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>check_inter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¿ªÊ¼Òì²½¶Á¸Ã°üµÄÏìÓ¦Êý¾Ý */</comment>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>icmp_rset</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>RING_TO_HOST</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>icmp_host_free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat_aio_free</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_rset</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>icmp_timer_free</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>icmp_stream_close</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
