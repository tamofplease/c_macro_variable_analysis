<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_protocol/src/icmp/icmp_stream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp/lib_icmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_private.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icmp_read</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_STREAM</name><modifier>*</modifier></type> <name>is</name> <init>= <expr><operator>(</operator><name>ICMP_STREAM</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* must reset read_ready flag in aio mode -- zsx, 2017.8.15 */</comment>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>,
		<argument><expr><operator>(</operator><name>socklen_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>from_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>from_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): recvfrom error(%s)"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>icmp_write</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier> <name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_STREAM</name><modifier>*</modifier></type> <name>is</name> <init>= <expr><operator>(</operator><name>ICMP_STREAM</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>icmp_vstream</name><parameter_list>(<parameter><decl><type><name>ICMP_STREAM</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stream_from</name><parameter_list>(<parameter><decl><type><name>ICMP_STREAM</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stream_dest</name><parameter_list>(<parameter><decl><type><name>ICMP_STREAM</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>is</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stream_set_dest</name><parameter_list>(<parameter><decl><type><name>ICMP_STREAM</name> <modifier>*</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stream_close</name><parameter_list>(<parameter><decl><type><name>ICMP_STREAM</name><modifier>*</modifier></type> <name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>astream</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ICMP_STREAM</name><modifier>*</modifier></type> <name>icmp_stream_open</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name><modifier>*</modifier></type> <name>aio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>myname</name> <init>= <expr><literal type="string">"icmp_stream_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_STREAM</name><modifier>*</modifier></type> <name>is</name> <init>= <expr><operator>(</operator><name>ICMP_STREAM</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ICMP_STREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>from_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨Í¨ÐÅÁ÷ */</comment>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>IPPROTO_ICMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): socket create error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>, <argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>icmp_read</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>icmp_write</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr></argument>,
		<argument><expr><name>is</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û²ÉÓÃÒì²½·½Ê½£¬Ôò´ò¿ªÒì²½Á÷ */</comment>
	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>astream</name></name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>is</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stream_reopen</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name><modifier>*</modifier></type> <name>aio</name></decl></parameter>, <parameter><decl><type><name>ICMP_STREAM</name><modifier>*</modifier></type> <name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call> <operator>=</operator>
		<name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt> <comment type="block">/* ·ÀÖ¹Ô­SOCKET±»¹Ø±Õ:) */</comment>

	<expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(
		<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>, <argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>icmp_read</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>icmp_write</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr></argument>,
		<argument><expr><name>is</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>aio</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>is</name><operator>-&gt;</operator><name>astream</name></name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
