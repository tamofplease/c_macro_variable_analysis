<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_protocol/src/icmp/icmp_pkt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp/lib_icmp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>checksum</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <operator>*</operator><name>buffer</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cksum</name> <operator>=</operator> <operator>(</operator><name>cksum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>cksum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <operator>(</operator><name>cksum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><operator>~</operator><name>cksum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>icmp_pkt_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><operator>(</operator><name>ICMP_PKT</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ICMP_PKT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>pkt</name></name>  <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<return>return <expr><name>pkt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_free</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>ipkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ipkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>icmp_hdr_pack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ICMP_HDR</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>type</name></name>  <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>code</name></name>  <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>id</name></name>    <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>cksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>seq</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_pack</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>code</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>payload_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>payload_len</name> <operator>&lt;</operator> <name>ICMP_MIN_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <name>ICMP_MIN_PACKET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>payload_len</name> <operator>&gt;</operator> <name>ICMP_MAX_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>payload_len</name> <operator>=</operator> <name>ICMP_MAX_PACKET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>payload_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>icmp_hdr_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* icmp body data */</comment>
	<comment type="block">/* in some mobile router the data in body should be set to 0 ---zsx */</comment>
	<comment type="block">/* memset(pkt-&gt;body.data, 'E', payload_len); */</comment>

	<if_stmt><if>if <condition>(<expr><name>payload</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>icmp_pkt_set_extra</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name>  <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>ICMP_CODE_EXTRA</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name>   <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_client</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>payload_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_pkt_pack</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
		<argument><expr><name>payload</name></expr></argument>, <argument><expr><name>payload_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name>    <operator>=</operator> <literal type="number">65535</literal></expr>;</expr_stmt> <comment type="block">/* large enough ? */</comment>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ICMP_STATUS_INIT</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>gid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>host</name></name>     <operator>=</operator> <name>host</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_build</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name>   <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cksum</name></name>  <operator>=</operator> <call><name>checksum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <name>pkt</name></expr></argument>,
			<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ICMP_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>wlen</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ICMP_HDR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>icmp_pkt_unpack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>IP_HDR</name>   <modifier>*</modifier></type><name>iphdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICMP_HDR</name> <modifier>*</modifier></type><name>icmphdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>icmppkt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>  <name>iphdrlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>iphdr</name>    <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>IP_HDR</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>iphdrlen</name> <operator>=</operator> <name><name>iphdr</name><operator>-&gt;</operator><name>h_len</name></name> <operator>*</operator> <literal type="number">4</literal></expr> ;</expr_stmt> <comment type="block">/* number of 32-bit words * 4 = bytes */</comment>

	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <name>iphdrlen</name> <operator>+</operator> <name>ICMP_MIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"Too few bytes from %s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>icmppkt</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>ICMP_PKT</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <name>iphdrlen</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>icmphdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>icmppkt</name><operator>-&gt;</operator><name>hdr</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <operator>(</operator><name>iphdrlen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ICMP_HDR</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name> <operator>&lt;</operator> <name>ICMP_MIN_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name>  <operator>=</operator> <name><name>icmphdr</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>code</name></name>  <operator>=</operator> <name><name>icmphdr</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cksum</name></name> <operator>=</operator> <name><name>icmphdr</name><operator>-&gt;</operator><name>cksum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>id</name></name>    <operator>=</operator> <name><name>icmphdr</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name>   <operator>=</operator> <name><name>icmphdr</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name>  <operator>=</operator> <name><name>icmppkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>reply_len</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name>    <operator>=</operator> <name>ICMP_STATUS_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>seq</name></name>       <operator>=</operator> <name><name>icmphdr</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>ttl</name></name>       <operator>=</operator> <name><name>iphdr</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>from_ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>from_ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <name>iphdrlen</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ICMP_HDR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>ICMP_MAX_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>ICMP_MAX_PACKET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>icmppkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>dlen</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_save_status</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>reply_len</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>reply_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>ttl</name></name>       <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>ttl</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>dlen</name></name>      <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>dlen</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>from_ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>from_ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>from_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>icmp_pkt_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>seq</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>seq</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>seq</name> <operator>&gt;=</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"invalid seq %d, discard!"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name>seq</name></expr>]</index></name><operator>-&gt;</operator><name><name>pkt_status</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ICMP_STATUS_INIT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name>seq</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name></type> <name>icmp_pkt_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name></type> <name>icmp_pkt_code</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>icmp_pkt_cksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cksum</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>icmp_pkt_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>icmp_pkt_seq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>icmp_pkt_gid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>icmp_pkt_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>icmp_pkt_wlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>wlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>icmp_pkt_peer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>peer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ICMP_PKT_STATUS</name> <modifier>*</modifier></type><name>icmp_pkt_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>icmp_pkt_payload</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>dlen</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Èç¹û¼ì²â code ÖµÊÇË½ÓÐÖµ£¬Ôò½öÈ¡³ý git ÍâµÄÊý¾Ý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>ICMP_CODE_EXTRA</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>dlen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name>  <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_set_type</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_set_code</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_set_cksum</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>cksum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>cksum</name></name> <operator>=</operator> <name>cksum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_set_id</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_set_seq</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>seq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name> <operator>=</operator> <name>seq</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_pkt_set_data</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>ICMP_MAX_PACKET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>ICMP_MAX_PACKET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
