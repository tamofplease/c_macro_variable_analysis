<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_protocol/src/icmp/icmp_stat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp/lib_icmp.h"</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>stamp_sub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>res</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <name><name>sub</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>--</operator><name><name>res</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>res</name><operator>.</operator><name>tv_sec</name></name> <operator>-=</operator> <name><name>sub</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>res</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>+</operator> <name><name>res</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>icmp_rtt_compute</name><parameter_list>(<parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name> <operator>=</operator> <call><name>stamp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>stamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stat_timeout</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_rtt_compute</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ICMP_STATUS_TIMEOUT</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>enable_log</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s Ping timeout, icmp_seq %d"</literal></expr></argument>,
			<argument><expr><name><name>host</name><operator>-&gt;</operator><name>dest_ip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_timeout</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_timeout</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name></name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stat_unreach</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_rtt_compute</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ICMP_STATUS_UNREACH</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>enable_log</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s Destination host unreachable."</literal></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>dest_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_unreach</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_unreach</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name></name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stat_report</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_rtt_compute</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>ICMP_STATUS_OK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>enable_log</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Reply from %s: bytes=%d time=%.3fms TTL=%d icmp_seq=%d status=%d"</literal></expr></argument>,
			<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>from_ip</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>reply_len</name></name></expr></argument>,
			<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>ttl</name></name></expr></argument>,
			<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>seq</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_respond</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_respond</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name></name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>icmp_status</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>    <name>nok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>Minimun</name> <init>= <expr><literal type="number">65535</literal></expr></init></decl>, <decl><type ref="prev"/><name>Maximum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>ICMP_STATUS_OK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>nok</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name> <operator>&lt;</operator> <name>Minimun</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>Minimun</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name> <operator>&gt;</operator> <name>Maximum</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>Maximum</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>Total</name> <operator>+=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pkt_status</name><operator>.</operator><name>rtt</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>nsent</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>nsent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>nreceived</name></name> <operator>=</operator> <name>nok</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>loss</name></name> <operator>=</operator> <ternary><condition><expr><name><name>host</name><operator>-&gt;</operator><name>nsent</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
		<expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>host</name><operator>-&gt;</operator><name>nsent</name></name> <operator>-</operator> <name>nok</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>host</name><operator>-&gt;</operator><name>nsent</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tmax</name></name> <operator>=</operator> <name>Maximum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tmin</name></name> <operator>=</operator> <name>Minimun</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tsum</name></name> <operator>=</operator> <name>Total</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tave</name></name> <operator>=</operator> <ternary><condition><expr><name>nok</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tsum</name></name><operator>/</operator><name>nok</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Ping statistics for %s: %s"</literal></expr></argument>,
		<argument><expr><name><name>host</name><operator>-&gt;</operator><name>dest_ip</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>host</name><operator>-&gt;</operator><name>domain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>host</name><operator>-&gt;</operator><name>domain</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"\tPackets: Sent = %d, Received = %d, Lost = %d (%.2f%% loss),"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>nsent</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>nreceived</name></name></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>nsent</name></name> <operator>-</operator> <name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>nreceived</name></name><operator>)</operator></expr></argument>,
		<argument><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>loss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nok</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Approximate round trip times in milli-seconds:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"\tMinimum = %.3f ms, Maximum = %.3f ms, Average = %.3f ms"</literal></expr></argument>,
			<argument><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tmin</name></name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tmax</name></name></expr></argument>,
			<argument><expr><name><name>host</name><operator>-&gt;</operator><name>icmp_stat</name><operator>.</operator><name>tave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stat_host</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_status</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>show_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stat_finish</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_status</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_stat</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"\r\n&gt;&gt;&gt;hosts' size=%d"</literal></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>ICMP_HOST_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>host</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>icmp_stat_host</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>ICMP_HOST_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>host</name><operator>-&gt;</operator><name>host_ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
