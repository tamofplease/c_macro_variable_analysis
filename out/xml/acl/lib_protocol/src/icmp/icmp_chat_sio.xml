<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_protocol/src/icmp/icmp_chat_sio.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp/lib_icmp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_private.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>read_pkt</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt_src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_CHAT</name>   <modifier>*</modifier></type><name>chat</name>   <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICMP_PKT</name></type> <name>pkt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>cost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>pkt_src</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>gid</name></name> <operator>==</operator> <name><name>chat</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>pkt_src</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>acl_read_poll_wait</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>host</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>acl_read_select_wait</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>host</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* »ã±¨ÇëÇó°ü³¬Ê± */</comment>
			<expr_stmt><expr><call><name>icmp_stat_timeout</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"read error(%s)"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>icmp_pkt_unpack</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>ICMP_TYPE_ECHOREPLY</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>hdr</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name><name>chat</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>chat</name><operator>-&gt;</operator><name>check_id</name></name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>.</operator><name>body</name><operator>.</operator><name>gid</name></name> <operator>!=</operator> <name><name>chat</name><operator>-&gt;</operator><name>gid</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="line">//if (0)</comment>
			<comment type="line">//printf("seq%d,src%d,chat%d,gid%d,chat%d,\r\n",</comment>
			<comment type="line">//	(int) pkt.hdr.seq, (int)pkt_src-&gt;hdr.seq,</comment>
			<comment type="line">//	(int) chat-&gt;seq,</comment>
			<comment type="line">//	(int) pkt.body.gid, (int) chat-&gt;gid);</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>icmp_pkt_check</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>pkt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>stamp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <name><name>host</name><operator>-&gt;</operator><name>timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_stat_timeout</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>icmp_pkt_save_status</name><argument_list>(<argument><expr><name>pkt_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pkt_src</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <operator>&amp;</operator><name>pkt</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>icmp_stat_report</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_pkt</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_CHAT</name>   <modifier>*</modifier></type><name>chat</name>   <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>vstream</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* Ö¸¶¨µ±Ç°°üµÄÄ¿µÄÖ÷»ú */</comment>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name><operator>-&gt;</operator><name>dest</name></name> <operator>=</operator> <name><name>host</name><operator>-&gt;</operator><name>dest</name></name></expr>;</expr_stmt>

	<comment type="block">/* ×é½¨·¢ËÍÊý¾Ý°ü */</comment>
	<expr_stmt><expr><call><name>icmp_pkt_build</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>chat</name><operator>-&gt;</operator><name>seq</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>stamp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ²ÉÓÃÍ¬²½·¢ËÍµÄÄ£Ê½ */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>pkt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pkt</name><operator>-&gt;</operator><name>wlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>nsent</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* »ã±¨Ö÷»ú²»¿É´ïÐÅÏ¢ */</comment>
		<expr_stmt><expr><call><name>icmp_stat_unreach</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat_sio</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init> <condition><expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name> <operator>&lt;</operator> <name><name>host</name><operator>-&gt;</operator><name>npkt</name></name></expr>;</condition> <incr><expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ICMP_PKT</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>host</name><operator>-&gt;</operator><name>pkts</name><index>[<expr><name><name>host</name><operator>-&gt;</operator><name>ipkt</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>send_pkt</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>read_pkt</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_doze</name><argument_list>(<argument><expr><name><name>host</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>host</name><operator>-&gt;</operator><name>stat_finish</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>host</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat_sio_free</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>icmp_stream_close</name><argument_list>(<argument><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></function>
</unit>
