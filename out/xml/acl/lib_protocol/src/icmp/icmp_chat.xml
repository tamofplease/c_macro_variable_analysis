<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_protocol/src/icmp/icmp_chat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icmp/lib_icmp.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>__unique_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>__unique_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>proc_on_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__unique_lock</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name>__unique_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__unique_lock</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>icmp_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__unique_lock</name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name>__unique_lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__unique_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
	<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>proc_on_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>icmp_chat_create</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name><modifier>*</modifier></type> <name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>check_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>icmp_once</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"acl_pthread_once failed %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>chat</name> <operator>=</operator> <operator>(</operator><name>ICMP_CHAT</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ICMP_CHAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name>  <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>is</name></name>   <operator>=</operator> <call><name>icmp_stream_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>seq</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>pid</name></name>  <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>pid</name></name>  <operator>=</operator> <call><name>_getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>pid</name></name> <operator>&amp;=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>gid</name></name>  <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>acl_atomic_int64_fetch_add</name><argument_list>(<argument><expr><name>__unique_lock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chat</name><operator>-&gt;</operator><name>check_id</name></name> <operator>=</operator> <name>check_id</name></expr>;</expr_stmt>

	<return>return <expr><name>chat</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat_free</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_chat_aio_free</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_chat_sio_free</name><argument_list>(<argument><expr><name>chat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>short</name></type> <name>icmp_chat_seqno</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>chat</name><operator>-&gt;</operator><name>seq</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp_chat</name><parameter_list>(<parameter><decl><type><name>ICMP_HOST</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>host</name><operator>-&gt;</operator><name>chat</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_chat_aio</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>icmp_chat_sio</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>icmp_chat_count</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>icmp_chat_size</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>icmp_chat_finish</name><parameter_list>(<parameter><decl><type><name>ICMP_CHAT</name> <modifier>*</modifier></type><name>chat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>chat</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chat</name><operator>-&gt;</operator><name>host_head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
