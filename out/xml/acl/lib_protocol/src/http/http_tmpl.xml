<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_protocol/src/http/http_tmpl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http/lib_http.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>HTTP_TMPL</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>HTTP_TMPL</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTTP_TMPL</name></type> <name><name>__tmpl_1xx_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* 1xx */</comment>
	<expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><literal type="string">"Continue"</literal></expr>, <expr><literal type="string">"100.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">101</literal></expr>, <expr><literal type="string">"Switching Protocols"</literal></expr>, <expr><literal type="string">"101.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">102</literal></expr>, <expr><literal type="string">"Processing"</literal></expr>, <expr><literal type="string">"102.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,  <comment type="block">/* RFC2518 section 10.1 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTTP_TMPL</name></type> <name><name>__tmpl_2xx_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* 2xx */</comment>
	<expr><block>{ <expr><literal type="number">200</literal></expr>, <expr><literal type="string">"OK"</literal></expr>, <expr><literal type="string">"200.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">201</literal></expr>, <expr><literal type="string">"Created"</literal></expr>, <expr><literal type="string">"201.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">202</literal></expr>, <expr><literal type="string">"Accepted"</literal></expr>, <expr><literal type="string">"202.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">203</literal></expr>, <expr><literal type="string">"Non Authoritative Information"</literal></expr>, <expr><literal type="string">"203.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">204</literal></expr>, <expr><literal type="string">"No Content"</literal></expr>, <expr><literal type="string">"204.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">205</literal></expr>, <expr><literal type="string">"Reset Content"</literal></expr>, <expr><literal type="string">"205.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">206</literal></expr>, <expr><literal type="string">"Partial Content"</literal></expr>, <expr><literal type="string">"206.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">207</literal></expr>, <expr><literal type="string">"Multi Status"</literal></expr>, <expr><literal type="string">"207.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,  <comment type="block">/* RFC2518 section 10.2 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTTP_TMPL</name></type> <name><name>__tmpl_3xx_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* 3xx */</comment>
	<expr><block>{ <expr><literal type="number">300</literal></expr>, <expr><literal type="string">"Multiple Choices"</literal></expr>, <expr><literal type="string">"300.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">301</literal></expr>, <expr><literal type="string">"Moved Permanently"</literal></expr>, <expr><literal type="string">"301.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">302</literal></expr>, <expr><literal type="string">"Moved Temporarily"</literal></expr>, <expr><literal type="string">"302.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">303</literal></expr>, <expr><literal type="string">"See Other"</literal></expr>, <expr><literal type="string">"303.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">304</literal></expr>, <expr><literal type="string">"Not Modified"</literal></expr>, <expr><literal type="string">"304.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">305</literal></expr>, <expr><literal type="string">"Use Proxy"</literal></expr>, <expr><literal type="string">"305.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">307</literal></expr>, <expr><literal type="string">"Temporary Redirect"</literal></expr>, <expr><literal type="string">"307.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTTP_TMPL</name></type> <name><name>__tmpl_4xx_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* 4xx */</comment>
	<expr><block>{ <expr><literal type="number">400</literal></expr>, <expr><literal type="string">"Bad Request"</literal></expr>, <expr><literal type="string">"400.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">401</literal></expr>, <expr><literal type="string">"Authorization Required"</literal></expr>, <expr><literal type="string">"401.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">402</literal></expr>, <expr><literal type="string">"Payment Required"</literal></expr>, <expr><literal type="string">"402.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">403</literal></expr>, <expr><literal type="string">"Forbidden"</literal></expr>, <expr><literal type="string">"403.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">404</literal></expr>, <expr><literal type="string">"Not Found"</literal></expr>, <expr><literal type="string">"404.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">405</literal></expr>, <expr><literal type="string">"Method Not Allowed"</literal></expr>, <expr><literal type="string">"405.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">406</literal></expr>, <expr><literal type="string">"Not Acceptable"</literal></expr>, <expr><literal type="string">"406.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">407</literal></expr>, <expr><literal type="string">"Proxy Authentication Required"</literal></expr>, <expr><literal type="string">"407.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">408</literal></expr>, <expr><literal type="string">"Request Time-out"</literal></expr>, <expr><literal type="string">"408.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">409</literal></expr>, <expr><literal type="string">"Conflict"</literal></expr>, <expr><literal type="string">"409.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">410</literal></expr>, <expr><literal type="string">"Gone"</literal></expr>, <expr><literal type="string">"410.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">411</literal></expr>, <expr><literal type="string">"Length Required"</literal></expr>, <expr><literal type="string">"411.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">412</literal></expr>, <expr><literal type="string">"Precondition Failed"</literal></expr>, <expr><literal type="string">"412.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">413</literal></expr>, <expr><literal type="string">"Request Entity Too Large"</literal></expr>, <expr><literal type="string">"413.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">414</literal></expr>, <expr><literal type="string">"Request-URI Too Large"</literal></expr>, <expr><literal type="string">"414.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">415</literal></expr>, <expr><literal type="string">"Unsupported Media Type"</literal></expr>, <expr><literal type="string">"415.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">416</literal></expr>, <expr><literal type="string">"Requested Range Not Satisfiable"</literal></expr>, <expr><literal type="string">"416.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">417</literal></expr>, <expr><literal type="string">"Expectation Failed"</literal></expr>, <expr><literal type="string">"417.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">418</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">419</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">420</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">421</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">422</literal></expr>, <expr><literal type="string">"Unprocessable Entity"</literal></expr>, <expr><literal type="string">"422.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">423</literal></expr>, <expr><literal type="string">"Locked"</literal></expr>, <expr><literal type="string">"423.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">424</literal></expr>, <expr><literal type="string">"Failed Dependency"</literal></expr>, <expr><literal type="string">"424.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">425</literal></expr>, <expr><literal type="string">"No code"</literal></expr>, <expr><literal type="string">"425.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">426</literal></expr>, <expr><literal type="string">"Upgrade Required"</literal></expr>, <expr><literal type="string">"426.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTTP_TMPL</name></type> <name><name>__tmpl_5xx_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* 5xx */</comment>
	<expr><block>{ <expr><literal type="number">500</literal></expr>, <expr><literal type="string">"Internal Server Error"</literal></expr>, <expr><literal type="string">"500.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">501</literal></expr>, <expr><literal type="string">"Method Not Implemented"</literal></expr>, <expr><literal type="string">"501.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">502</literal></expr>, <expr><literal type="string">"Bad Gateway"</literal></expr>, <expr><literal type="string">"502.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">503</literal></expr>, <expr><literal type="string">"Service Temporarily Unavailable"</literal></expr>, <expr><literal type="string">"503.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">504</literal></expr>, <expr><literal type="string">"Gateway Time-out"</literal></expr>, <expr><literal type="string">"504.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">505</literal></expr>, <expr><literal type="string">"HTTP Version Not Supported"</literal></expr>, <expr><literal type="string">"505.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">506</literal></expr>, <expr><literal type="string">"Variant Also Negotiates"</literal></expr>, <expr><literal type="string">"506.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">507</literal></expr>, <expr><literal type="string">"Insufficient Storage"</literal></expr>, <expr><literal type="string">"507.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">508</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">509</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">510</literal></expr>, <expr><literal type="string">"Not Extended"</literal></expr>, <expr><literal type="string">"508.html"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>TMPL_MAP</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>level</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_TMPL</name> <modifier>*</modifier></type><name>tmpl</name></decl>;</decl_stmt>
}</block></struct></type> <name>TMPL_MAP</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TMPL_MAP</name></type> <name><name>__tmpl_maps</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="number">100</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_1xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>__tmpl_1xx_tab</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">200</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_2xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>__tmpl_2xx_tab</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">300</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_3xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>__tmpl_3xx_tab</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">400</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_4xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>__tmpl_4xx_tab</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">500</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_5xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name>__tmpl_5xx_tab</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>__unknown_tmpl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__unknown_status</name> <init>= <expr><literal type="string">"unknow status"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__load_tmpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmpl_path</name></decl></parameter>, <parameter><decl><type><name>HTTP_TMPL</name> <modifier>*</modifier></type><name>tmpl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__load_tmpl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>tbuf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>tmpl_path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>tmpl</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tmpl</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0660</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"%d %s"</literal></expr></argument>, <argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_gets</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name><name>tmpl</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_tmpl_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmpl_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_tmpl_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>tmpl_path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): tmpl_path invalid"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__unknown_tmpl</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__unknown_tmpl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): alloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>__unknown_tmpl</name></expr></argument>, <argument><expr><literal type="string">"500 unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_1xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tmpl_1xx_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>__load_tmpl</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__tmpl_1xx_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_2xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tmpl_2xx_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>__load_tmpl</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__tmpl_2xx_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_3xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tmpl_3xx_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>__load_tmpl</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__tmpl_3xx_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_4xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tmpl_4xx_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>__load_tmpl</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__tmpl_4xx_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>__tmpl_5xx_tab</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_TMPL</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__tmpl_5xx_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>title</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>__load_tmpl</name><argument_list>(<argument><expr><name>tmpl_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__tmpl_5xx_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>http_tmpl_get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>status</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>__unknown_tmpl</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>status</name> <operator>-</operator> <name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>__unknown_tmpl</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmpl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>__unknown_tmpl</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmpl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_tmpl_title</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>status</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>__unknown_status</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>status</name> <operator>-</operator> <name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>__unknown_status</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmpl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>__unknown_status</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmpl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>title</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_tmpl_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>status</name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>__unknown_tmpl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>status</name> <operator>-</operator> <name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>__unknown_tmpl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmpl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>__unknown_tmpl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>__tmpl_maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tmpl</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
