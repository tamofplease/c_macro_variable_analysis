<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_protocol/src/http/http_chat_sync.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http/lib_http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>HTTP_CHAT_CTX</name> <block>{
	<decl_stmt><decl><type><name>HTTP_HDR</name>  <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl>;</decl_stmt>                  <comment type="block" format="doxygen">/**&lt;¡¡¼Ì³ÐµÄ±êÖ¾Î», defined as HTTP_CHAT_FLAG_XXX */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type> <name>chunked</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>chunk_len</name></decl>;</decl_stmt>             <comment type="block" format="doxygen">/**&lt; µ±Ç°Êý¾Ý¿éËùÐèÒª¶ÁµÄÊý¾Ý³¤¶È(×Ö½Ú) */</comment>
	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>read_cnt</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; µ±Ç°Êý¾Ý¿éËù¶ÁÊý¾Ý³¤¶È(×Ö½Ú) */</comment>
	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>body_len</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; Ëù¶Áµ½Êý¾ÝÌå×Ü³¤¶È(×Ö½Ú) */</comment>
	<union>union <block>{
		<decl_stmt><decl><type><name>HTTP_HDR_NOTIFY</name></type>  <name>hdr_notify</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>body_notify</name></decl>;</decl_stmt>
	}</block> <decl><name>notify</name></decl>;</union>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
	<struct>struct <block>{
		<decl_stmt><decl><type><name>int</name></type>   <name>chunk_oper</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_OPER_HEAD</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_OPER_BODY</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_OPER_LINE</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_OPER_TAIL</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
	}</block> <decl><name>chunk</name></decl>;</struct>
}</block></struct></type> <name>HTTP_CHAT_CTX</name>;</typedef>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>new_ctx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"new_ctx"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>HTTP_CHAT_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_CHAT_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_ctx</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<comment type="block">/* ·ÖÎöÒ»ÐÐÊý¾Ý, ÊÇ·ñÊÇÒ»¸öÍêÕûµÄHTTPÐ­ÒéÍ· */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hdr_ready</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>cur_lines</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>max_lines</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>cur_lines</name></name> <operator>&gt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>max_lines</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>HTTP_CHAT_ERR_TOO_MANY_LINES</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>valid_lines</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>valid_lines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>HTTP_CHAT_OK</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>HTTP_CHAT_CONTINUE</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_new</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* ignore invalid entry line */</comment>
		<return>return <expr><name>HTTP_CHAT_CONTINUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>HTTP_CHAT_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Í¬²½¶ÁÈ¡Ò»¸öÍêÕûµÄHTTPÐ­ÒéÍ· */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hdr_get</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>HTTP_CHAT_ERR_IO</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hdr_ready</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>HTTP_CHAT_CONTINUE</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*  ret: HTTP_CHAT_OK or error */</comment>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_req_get_sync</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>hdr_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_CHAT_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_res_get_sync</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>hdr_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_CHAT_OK</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*------------------------ read http body data -------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>http_off_t</name></type> <name>chunked_data_get</name><parameter_list>(<parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>http_off_t</name></type> <name>ntotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ntotal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>ntotal</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>ntotal</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HTTP_CHAT_FLAG_BUFFED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<return>return <expr><name>ntotal</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>http_off_t</name></type>   <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_hdr_get</name><parameter_list>(<parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"chunked_hdr_get"</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ext</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><name>HTTP_BSIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>chunk_len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_gets</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* reset the len to be read */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal></expr></cpp:if>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf_s</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%X %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>chunk_len</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%X %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>chunk_len</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%X %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>chunk_len</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>chunk_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): chunked hdr(%s) invalid, dlen(%d), "</literal>
			<literal type="string">"'\\n': %d, %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_sep_gets</name><parameter_list>(<parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"chunked_sep_gets2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><name>HTTP_BSIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_gets</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): gets sep line error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_trailer_get</name><parameter_list>(<parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"chunked_tailer_get2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><name>HTTP_BSIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_gets</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get line error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>http_off_t</name></type> <name>body_get</name><parameter_list>(<parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"body_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* Transfer-Encoding: chunked µÄÓÅÏÈ¼¶Òª¸ßÓÚ Conteng-Length */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>chunked_data_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>==</operator> <name>CHUNK_OPER_HEAD</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_hdr_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>=</operator> <name>CHUNK_OPER_TAIL</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>=</operator> <name>CHUNK_OPER_BODY</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>==</operator> <name>CHUNK_OPER_BODY</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_data_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>chunked_sep_gets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>=</operator> <name>CHUNK_OPER_HEAD</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>ret</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>==</operator> <name>CHUNK_OPER_TAIL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_trailer_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ret</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown oper status(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>http_off_t</name></type> <name>http_req_body_get_sync</name><parameter_list>(<parameter><decl><type><name>HTTP_REQ</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* À©Õ¹ÁËHTTPÇëÇóÐ­Òé²¿·Ö, ÔÊÐíÇëÇóÊý¾ÝÎª¿é´«Êä */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ctx</name>            <operator>=</operator> <call><name>new_ctx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name>       <operator>=</operator> <operator>&amp;</operator><name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name>    <operator>=</operator> <name>stream</name></expr>;</expr_stmt>

		<comment type="block">/* À©Õ¹ÁËHTTPÇëÇóÐ­Òé²¿·Ö, ÔÊÐíÇëÇóÊý¾ÝÎª¿é´«Êä */</comment>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name>   <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>=</operator> <name>CHUNK_OPER_HEAD</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>free_ctx</name></name> <operator>=</operator> <name>free_ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>HTTP_CHAT_CTX</name><operator>*</operator><operator>)</operator> <name><name>request</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
	<return>return <expr><call><name>body_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>http_off_t</name></type> <name>http_res_body_get_sync</name><parameter_list>(<parameter><decl><type><name>HTTP_RES</name> <modifier>*</modifier></type><name>respond</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>==</operator> <literal type="number">204</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û·þÎñÆ÷ÏìÓ¦×´Ì¬ÂëÎª 204 Ôò±íÊ¾Ã»ÓÐÊý¾ÝÌå */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¿é´«ÊäÐ­ÒéÓÅÏÈÓÚ content-length */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>respond</name><operator>-&gt;</operator><name>ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ctx</name>            <operator>=</operator> <call><name>new_ctx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name>       <operator>=</operator> <operator>&amp;</operator><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name>    <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name>   <operator>=</operator> <name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chunked</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>=</operator> <name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>content_length</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk</name><operator>.</operator><name>chunk_oper</name></name> <operator>=</operator> <name>CHUNK_OPER_HEAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>respond</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>respond</name><operator>-&gt;</operator><name>free_ctx</name></name> <operator>=</operator> <name>free_ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>HTTP_CHAT_CTX</name><operator>*</operator><operator>)</operator> <name><name>respond</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>respond</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
	<return>return <expr><call><name>body_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_chat_sync_reqctl</name><parameter_list>(<parameter><decl><type><name>HTTP_REQ</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_chat_sync_reqctl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>HTTP_CHAT_SYNC_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>HTTP_CHAT_CTL_BUFF_ONOFF</name></expr>:</case>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_CHAT_FLAG_BUFFED</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_CHAT_FLAG_BUFFED</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): bad name %d"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_chat_sync_resctl</name><parameter_list>(<parameter><decl><type><name>HTTP_RES</name> <modifier>*</modifier></type><name>respond</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_chat_sync_resctl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>HTTP_CHAT_SYNC_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>HTTP_CHAT_CTL_BUFF_ONOFF</name></expr>:</case>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>respond</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HTTP_CHAT_FLAG_BUFFED</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>respond</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HTTP_CHAT_FLAG_BUFFED</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): bad name %d"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
</unit>
