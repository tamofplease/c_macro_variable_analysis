<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_protocol/src/http/http_hdr_res.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http/lib_http.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__hdr_init</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_cache_free</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>http_hdr_res_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>cache_key</name> <init>= <expr><operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>USE_TLS_EX</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>main_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_cache_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>main_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>main_cache</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>http_hdr_res_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ÐèÒª½«¸ÃÈ«¾ÖÖµÉèÎª NULL£¬ÒÔ±ãÓÚ http_hdr_res_free ÖÐµÄÅÐ¶Ï */</comment>
		<expr_stmt><expr><name>main_cache</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_cache_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_key</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>thread_cache_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Éú³ÉÒ»¸öÐÂµÄ HTTP_HDR_RES Êý¾Ý½á¹¹ */</comment>

<function><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>http_hdr_res_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_http_tls_cache</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>hh</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_RES</name> <operator>*</operator><operator>)</operator> <call><name>http_hdr_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_HDR_RES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>hh</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_TLS_EX</name></cpp:ifdef>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_ARRAY</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>cache_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
			<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>thread_cache_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_ARRAY</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hh</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_RES</name><operator>*</operator><operator>)</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>pop_back</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hh</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_reset</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_HDR</name> <operator>*</operator><operator>)</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>hh</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>thread_cache_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_ARRAY</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>cache_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>main_cache</name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_cache_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>hh</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_RES</name><operator>*</operator><operator>)</operator> <call><name><name>pool</name><operator>-&gt;</operator><name>pop_back</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hh</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_reset</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_HDR</name> <operator>*</operator><operator>)</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>hh</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>hh</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_RES</name> <operator>*</operator><operator>)</operator> <call><name>http_hdr_new</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_HDR_RES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>hh</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>http_hdr_res_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hh</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hh</name> <operator>=</operator> <call><name>http_hdr_res_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>=</operator> <name><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>hh</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__hdr_free_member</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier><name>hh</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÒ»¸ö HTTP_HDR_RES ½á¹¹ */</comment>

<function><type><name>void</name></type> <name>http_hdr_res_free</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block" format="doxygen">/**
	 * bugfix: Ôö¼ÓÅÐ¶Ï main_cache ÊÇ·ñÎª NULL£¬ÔÚ lib_acl_cpp ÖÐ²ÉÓÃ
	 * µ¥ÀýÄ£Ê½ÏÂ£¬µ¥ÀýµÄÊÍ·Å»á±È main_cache_free µ÷ÓÃ¹ý³Ì¸üÍí£¬ËùÒÔ
	 * »áÔì³ÉÄÚ´æ³åÍ» --- zsx, 2015.11.6
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>var_http_tls_cache</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>main_cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>__hdr_free_member</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_free</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_HDR</name> <operator>*</operator><operator>)</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_TLS_EX</name></cpp:ifdef>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_ARRAY</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_ARRAY</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>cache_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>var_http_tls_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>__hdr_free_member</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_free</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_HDR</name> <operator>*</operator><operator>)</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_res_reset</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>http_hdr_reset</name><argument_list>(<argument><expr><operator>(</operator><name>HTTP_HDR</name> <operator>*</operator><operator>)</operator> <name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__hdr_free_member</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_res_status_parse</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"http_hdr_res_status_parse"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>status_argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* data: HTTP/1.1 XXX info */</comment>

	<expr_stmt><expr><name>status_argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><literal type="string">"\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>status_argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid reply status line=%s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>status_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_argv_index</name><argument_list>(<argument><expr><name>status_argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_parse_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>status_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_argv_index</name><argument_list>(<argument><expr><name>status_argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): null value, idx=1, argc=%d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>status_argv</name><operator>-&gt;</operator><name>argc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid status(%d)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>hh</name><operator>-&gt;</operator><name>reply_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>status_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>status_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_res_parse</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_res_parse"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><operator>(</operator><name>HTTP_HDR</name> <operator>*</operator><operator>)</operator> <name>hdr_res</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* 2xx, 3xx, 4xx, 5xx */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hdr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: hdr_res null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>entry_lnk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: entry_lnk null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: entry_lnk's size %d invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* data format: xxx info */</comment>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: status empty"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (hdr_res-&gt;reply_status &lt; 100 || hdr_res-&gt;reply_status &gt;= 600) {
		acl_msg_error("%s: status(%s) invalid", myname, buf);
		return (-1);
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><call><name>http_hdr_parse</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_res_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl></parameter>, <parameter><decl><type><name>http_off_t</name> <modifier>*</modifier></type><name>range_from</name></decl></parameter>,
	<parameter><decl><type><name>http_off_t</name> <modifier>*</modifier></type><name>range_to</name></decl></parameter>, <parameter><decl><type><name>http_off_t</name> <modifier>*</modifier></type><name>total_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>myname</name> <init>= <expr><literal type="string">"http_hdr_res_range"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pfrom</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pto</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hdr_res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): hdr_res null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>range_from</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): range_from null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>range_to</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): range_to null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>http_hdr_entry_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÏìÓ¦µÄ Range Êý¾Ý¸ñÊ½£ºContent-Range: bytes {range_from}-{range_to}/{total_length}
	 * ÆäÖÐ: {range_from}, {range_to} µÄÏÂ±êÊÇ´Ó0¿ªÊ¼µÄ
	 */</comment>
	<comment type="block">/* Content-Range: bytes 2250000-11665200/11665201 */</comment>
	<comment type="block">/* value: bytes 2250000-11665200/11665201 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ptr: 2250000-11665200/11665201 */</comment>
	<expr_stmt><expr><name>pfrom</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pto</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pfrom</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pto</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pto</name> <operator>==</operator> <name>pfrom</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>pto</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* pto: 11665200/11665201 */</comment>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pto</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>pto</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* pto: 11665200; ptr: 11665201 */</comment>

	<expr_stmt><expr><operator>*</operator><name>range_from</name> <operator>=</operator> <call><name>acl_atoi64</name><argument_list>(<argument><expr><name>pfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>range_from</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>range_to</name> <operator>=</operator> <call><name>acl_atoi64</name><argument_list>(<argument><expr><name>pto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>range_to</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ¿ÉÑ¡Ïî */</comment>
	<if_stmt><if>if <condition>(<expr><name>total_length</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>total_length</name> <operator>=</operator> <call><name>acl_atoi64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>total_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
