<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_protocol/src/http/http_hdr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http/lib_http.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__http_hdr_def_entry</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__http_hdr_max_lines</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*-------------------------- for general http header -------------------------*/</comment>
<comment type="block">/* Éú³ÉÒ»¸öÐÂµÄ HTTP_HDR Êý¾Ý½á¹¹ */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__hdr_init</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>max_lines</name></name>      <operator>=</operator> <name>__http_hdr_max_lines</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>cur_lines</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>valid_lines</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>chunked</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>keep_alive</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ·ÖÅäÒ»¸öHTTPÐ­ÒéÍ·µÄ»ù´¡½á¹¹ */</comment>

<function><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>http_hdr_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_new"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_HDR_REQ</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_HDR_RES</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): size(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hh</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><name>__http_hdr_def_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>hh</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¿ËÂ¡Ò»¸öHTTPÐ­ÒéÍ·µÄ»ù´¡½á¹¹ */</comment>

<function><type><name>void</name></type> <name>http_hdr_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARRAY</name>  <modifier>*</modifier></type><name>entry_lnk_saved</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* ÏÈ±£ÁôÔ­Ö¸Õë */</comment>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entry_from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>entry_lnk</name></name> <operator>=</operator> <name>entry_lnk_saved</name></expr>;</expr_stmt>  <comment type="block">/* »Ö¸´Ô­Ê¼Ö¸Õë */</comment>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>chat_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* bugfix, 2008.10.7 , zsx */</comment>
	<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>chat_free_ctx_fn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="block">/* bugfix, 2008.10.7 , zsx */</comment>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>entry_from</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name><name>entry_from</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry_from</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·Å HTTP_HDR */</comment>

<function><type><name>void</name></type> <name>http_hdr_free</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>chat_free_ctx_fn</name></name> <operator>&amp;&amp;</operator> <name><name>hh</name><operator>-&gt;</operator><name>chat_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>hh</name><operator>-&gt;</operator><name>chat_free_ctx_fn</name></name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>chat_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_reset</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>__hdr_init</name><argument_list>(<argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>http_hdr_entry_build</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n0</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_HDR_ENTRY</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl><type ref="prev"/><name>n1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>n2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>n0</name> <operator>+</operator> <name>n1</name> <operator>+</operator> <name>n2</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>entry</name> <operator>+</operator> <name>n0</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>n1</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>n1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>n2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¸ù¾Ý´«ÈëµÄÒ»ÐÐÊý¾Ý½øÐÐ·ÖÎö, Éú³ÉÒ»¸ö HTTP_HDR_ENTRY */</comment>

<function><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>http_hdr_entry_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* data format: Content-Length: 245 */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf_fixed</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf_fixed</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>buf_fixed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>name</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <name>name</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>value</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>value</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>http_hdr_entry_head</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* data format: GET / HTTP/1.1 or 200 OK */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_entry_head"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>psep</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid data=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>psep</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>psep</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid data=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>http_hdr_entry_new2</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* data format: Content-Length: 245 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_entry_new2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>psep</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid data=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>psep</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>psep</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid data=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ½« HTTP_HDR_ENTRY ·ÅÈë HTTP_HDR ÖÐ */</comment>

<function><type><name>void</name></type> <name>http_hdr_append_entry</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_append_entry"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): acl_array_append error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_parse_version</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_parse_version"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): hh null"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"HTTP/"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>sscanf_s</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>proto</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>proto</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* ¸ù¾Ý±äÁ¿ÃûÈ¡µÃºóÃæµÄÕû¸öÊý¾ÝÏî */</comment>

<function><type><specifier>static</specifier> <name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>__get_hdr_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__get_hdr_entry"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): entry_lnk null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>hh-&gt;entry_lnk</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>entry</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>http_hdr_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>__get_hdr_entry</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>http_hdr_entry_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>hdr_entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hdr_entry</name> <operator>=</operator> <call><name>http_hdr_entry</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hdr_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>hdr_entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_entry_replace</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_entry_replace"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>__get_hdr_entry</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>force</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_delete_obj</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_entry_replace2</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ignore_case</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>once</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>find_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"Set-Cookie"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>once</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>once</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ignore_case</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>find_fn</name> <operator>=</operator> <name>acl_strcasestr</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>find_fn</name> <operator>=</operator> <name>strstr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr_prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name><operator>*</operator><operator>)</operator> <name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ptr_prev</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>*</operator><name>ptr_prev</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>find_fn</name><argument_list>(<argument><expr><name>ptr_prev</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ptr_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>ptr_prev</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_vstring_strncat</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ptr_prev</name></expr></argument>,
					<argument><expr><name>ptr</name> <operator>-</operator> <name>ptr_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr_prev</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
					<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_entry_off</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_entry_off"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>__get_hdr_entry</name><argument_list>(<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* xxx: ÌÚÑ¶µÄÊÓÆµWEB·þÎñÆ÷²»Ö§³Ö´ËÖÖ·½Ê½ -- 2008-7-23, zsx */</comment>
	<comment type="block">/* entry-&gt;name[0] = '_'; */</comment>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_parse</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	const char *myname = "http_hdr_parse";
	*/</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>keep_alive</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<struct>struct <name>HEADER_LIST</name> <block>{
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	static const struct HEADER_LIST header_list[] = {
		{ "Accept-Ranges" },
		{ "Age" },
		{ "Cache-Control" },
		{ "Connection" },
		{ "Content-Encoding" },
		{ "Content-Length" },
		{ "Content-Type" },
		{ "Date" },
		{ "ETag" },
		{ "Last-Modified" },
		{ "Server" },
		{ "Transfer-Encoding" },
	};
	int care_size = sizeof(header_list)/sizeof(struct HEADER_LIST);
	int care_cnt = 0, i, n;

	n = acl_array_size(hh-&gt;entry_lnk);
	for (i = 0; i &lt; n; i++) {
		if (care_cnt &gt;= care_size)
			break;

		entry = (HTTP_HDR_ENTRY *) acl_array_index(hh-&gt;entry_lnk, i);

		if (strcasecmp(entry-&gt;name, "Accept-Ranges") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Age") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Cache-Control") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Connection") == 0) {
			care_cnt++;
			if (strcasecmp(entry-&gt;value, "keep-alive") == 0)
				keep_alive = 1;
			else
				keep_alive = 0;
		} else if (strcasecmp(entry-&gt;name, "Proxy-Connection") == 0) {
			care_cnt++;
			if (strcasecmp(entry-&gt;value, "keep-alive") == 0)
				keep_alive = 1;
			else
				keep_alive = 0;
		} else if (strcasecmp(entry-&gt;name, "Content-Encoding") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Content-Length") == 0) {
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_VC6</name></cpp:ifdef>
			hh-&gt;content_length = acl_atoui64(entry-&gt;value);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			hh-&gt;content_length = acl_atoui64(entry-&gt;value) * 1ll;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			if (hh-&gt;content_length &lt; 0) {
				acl_msg_error("%s: content_length(%s) invalid",
						myname, entry-&gt;value);
				return (-1);
			}
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Content-Type") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Date") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "ETag") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Last-Modified") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Server") == 0) {
			care_cnt++;
		} else if (strcasecmp(entry-&gt;name, "Transfer-Encoding") == 0) {
			if (strcasecmp(entry-&gt;value, "chunked") == 0)
				hh-&gt;chunked = 1;
			care_cnt++;
		}
	}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>HEADER_LIST</name></name></type> <name><name>header_list</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{ <expr><literal type="string">"Connection"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"Proxy-Connection"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"Content-Length"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="string">"Transfer-Encoding"</literal></expr> }</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>care_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>header_list</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>HEADER_LIST</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>care_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>hh-&gt;entry_lnk</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>keep_alive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>keep_alive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>care_cnt</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Proxy-Connection"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>keep_alive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>keep_alive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>care_cnt</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MS_VC6</name></cpp:ifdef>
			<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <call><name>acl_atoui64</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <call><name>acl_atoui64</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1ll</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/*
				acl_msg_error("%s: content_length(%s) invalid",
					myname, entry-&gt;value);
				return (-1);
				*/</comment>
				<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>content_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>care_cnt</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"Transfer-Encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"chunked"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>chunked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>care_cnt</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>care_cnt</name> <operator>&gt;=</operator> <name>care_size</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (hh-&gt;chunked) {
		if (keep_alive != 0)
			hh-&gt;keep_alive = 1;
		else
			hh-&gt;keep_alive = 0;
	} else if (keep_alive == 1) {
		hh-&gt;keep_alive = 1;
	} else {
		hh-&gt;keep_alive = 0;
	}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* ÔÊÐí keep_alive ´æÔÚÈýÖÖ¿ÉÄÜÐÔ£º
	 * 0£º²»±£³Ö³¤Á¬½Ó£»1£º±£³Ö³¤Á¬½Ó£¬-1£ºÃ»ÓÐ¸Ã×Ö¶Î
	 * --zsx, 2019.7.4
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>keep_alive</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>keep_alive</name></name> <operator>=</operator> <name>keep_alive</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>hh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>hh</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>keep_alive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>hh</name><operator>-&gt;</operator><name>keep_alive</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_print"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid input"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): array empty"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------------- in %s - msg=(%s)----------------\r\n"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>msg</name></expr> ?</condition><then> <expr><name>msg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\r\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------- end -----------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_fprint</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_fprint"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): array empty"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"---------- in %s - (%s) -------\r\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s %s\r\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>,
				<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"------------ end -------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_sprint</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>bf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_hdr_fprint"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>hh</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): array empty"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><literal type="string">"----------- in %s - (%s)-------\r\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><literal type="string">"%s %s\r\n"</literal></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>hh</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>,
				<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>bf</name></expr></argument>, <argument><expr><literal type="string">"------------- end -------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
