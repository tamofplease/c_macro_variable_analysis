<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_protocol/src/http/http_chat_async.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http/lib_http.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http.h"</cpp:file></cpp:include>

<comment type="block">/* ±êÊ¶ÊÇÇëÇó»¹ÊÇÏìÓ¦ */</comment>
<typedef>typedef <type><enum>enum <block>{ <decl><name>CTX_TYPE_REQ</name></decl>, <decl><name>CTX_TYPE_RES</name></decl> }</block></enum></type> <name>ctx_type</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HTTP_CHAT_CTX</name> <block>{
	<decl_stmt><decl><type><name>HTTP_HDR</name>  <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>                     <comment type="block" format="doxygen">/**&lt; Í¨ÓÃHTTPÍ·(ÇëÇóÍ·»òÏìÓ¦Í·) */</comment>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>                <comment type="block" format="doxygen">/**&lt; Á÷Ö¸Õë */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>timeout</name></decl>;</decl_stmt>                      <comment type="block" format="doxygen">/**&lt; ¶ÁÐ´³¬Ê±Ê±¼ä£¬Ãë */</comment>
	<decl_stmt><decl><type><name>short</name></type> <name>chunked</name></decl>;</decl_stmt>                      <comment type="block" format="doxygen">/**&lt; ÊÇ·ñÊÇ¿é´«ÊäÄ£Ê½ */</comment>
	<decl_stmt><decl><type><name>ctx_type</name></type> <name>type</name></decl>;</decl_stmt>                      <comment type="block" format="doxygen">/**&lt; ½öÎªÁËµ÷ÊÔ·½±ã */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>                       <comment type="block" format="doxygen">/**&lt; µ±Ç°Ëù´¦IO×´Ì¬ */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHAT_S_HDR</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>    <comment type="block" format="doxygen">/**&lt; ¶Á HTTP Í· */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHAT_S_CHUNK_HDR</name></cpp:macro>        <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>    <comment type="block" format="doxygen">/**&lt; ¶Á chunk Í· */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHAT_S_CHUNK_DAT</name></cpp:macro>        <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>    <comment type="block" format="doxygen">/**&lt; ¶Á chunk Ìå */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHAT_S_CHUNK_SEP</name></cpp:macro>        <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>    <comment type="block" format="doxygen">/**&lt; ¶Á chunk Ìå·Ö¸ôÐÐ */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHAT_S_CHUNK_TAL</name></cpp:macro>        <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>    <comment type="block" format="doxygen">/**&lt; ¶Á½áÊøÎ² */</comment>

	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>chunk_len</name></decl>;</decl_stmt>             <comment type="block" format="doxygen">/**&lt; µ±Ç°Êý¾Ý¿éËùÐèÒª¶ÁµÄÊý¾Ý³¤¶È(×Ö½Ú) */</comment>
	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>read_cnt</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; µ±Ç°Êý¾Ý¿éËù¶ÁÊý¾Ý³¤¶È(×Ö½Ú) */</comment>
	<decl_stmt><decl><type><name>http_off_t</name></type>   <name>body_len</name></decl>;</decl_stmt>              <comment type="block" format="doxygen">/**&lt; Ëù¶Áµ½Êý¾ÝÌå×Ü³¤¶È(×Ö½Ú) */</comment>
	<union>union <block>{
		<decl_stmt><decl><type><name>HTTP_HDR_NOTIFY</name></type>  <name>hdr_notify</name></decl>;</decl_stmt>    <comment type="block" format="doxygen">/**&lt; Êý¾ÝÍ·»Øµ÷º¯Êý */</comment>
		<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>body_notify</name></decl>;</decl_stmt>   <comment type="block" format="doxygen">/**&lt; Êý¾ÝÌå»Øµ÷º¯Êý */</comment>
	}</block> <decl><name>notify</name></decl>;</union>                           <comment type="block" format="doxygen">/**&lt; »Øµ÷º¯Êý */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>                          <comment type="block" format="doxygen">/**&lt; »Øµ÷²ÎÊý */</comment>
}</block></struct></type> <name>HTTP_CHAT_CTX</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>HTTP_LEN_ROUND</name><parameter_list>(<parameter><type><name>_ctx</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>(_ctx-&gt;chunk_len &gt; 0 ? \
        (_ctx-&gt;chunk_len &gt; _ctx-&gt;read_cnt + var_http_buf_size ? \
            var_http_buf_size : _ctx-&gt;chunk_len - _ctx-&gt;read_cnt) \
        : var_http_buf_size)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DISABLE_READ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	acl_aio_disable_read((x)); \
} while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>DISABLE_READ</name></cpp:macro>	<cpp:value>(void)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>new_ctx</name><parameter_list>(<parameter><decl><type><name>ctx_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__new_ctx"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>HTTP_CHAT_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_CHAT_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ctx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_ctx_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* ·ÖÎöÒ»ÐÐÊý¾Ý, ÊÇ·ñÊÇÒ»¸öÍêÕûµÄHTTPÐ­ÒéÍ· */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hdr_ready</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"hdr_ready"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>cur_lines</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>max_lines</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>cur_lines</name></name> <operator>&gt;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>max_lines</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): cur_lines(%d) &gt; max_lines(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>cur_lines</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>max_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>HTTP_CHAT_ERR_TOO_MANY_LINES</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>valid_lines</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>valid_lines</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>HTTP_CHAT_OK</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>HTTP_CHAT_CONTINUE</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>valid_lines</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_head</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_new2</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <comment type="block">/* ignore invalid entry line */</comment>
		<return>return <expr><name>HTTP_CHAT_CONTINUE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>HTTP_CHAT_CONTINUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Òì²½¶ÁÈ¡Ò»ÐÐÊý¾ÝµÄ»Øµ÷º¯Êý  */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int hdr_gets_ready(ACL_ASTREAM *astream, void *context,
	char *data, int dlen)
{
	HTTP_CHAT_CTX *ctx = (HTTP_CHAT_CTX *) context;
	HTTP_HDR *hdr = ctx-&gt;hdr;
	HTTP_HDR_NOTIFY notify = ctx-&gt;notify.hdr_notify;
	void *arg = ctx-&gt;arg;
	ACL_VSTRING *sbuf;
	int   ret;

	while (1) {
		ret = hdr_ready(hdr, data, dlen);
		switch (ret) {
		case HTTP_CHAT_CONTINUE:
			break;
		case HTTP_CHAT_OK:
			acl_aio_del_read_hook(astream, hdr_gets_ready, context);
			if (notify(ret, arg) &lt; 0) {
				return (-1);
			}
			return (0);
		default:
			acl_aio_del_read_hook(astream, hdr_gets_ready, context);
			(void) notify(ret, arg);
			return (-1);
		}
		sbuf = acl_aio_gets_nonl_peek(astream);
		if (sbuf == NULL)
			break;
		data = acl_vstring_str(sbuf);
		dlen = (int) ACL_VSTRING_LEN(sbuf);
		ACL_VSTRING_RESET(sbuf);
	}

	acl_aio_gets_nonl(astream);
	return (0);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hdr_can_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>HTTP_CHAT_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_NOTIFY</name></type> <name>notify</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>hdr_notify</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>sbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_aio_can_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_ERR_IO</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_gets_nonl_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hdr_ready</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>HTTP_CHAT_CONTINUE</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>HTTP_CHAT_OK</name></expr>:</case>
			<expr_stmt><expr><call><name>DISABLE_READ</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>DISABLE_READ</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_aio_enable_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>hdr_can_read</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Òì²½¶ÁÈ¡Ò»¸öÍêÕûµÄHTTPÐ­ÒéÍ· */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hdr_get_async</name><parameter_list>(<parameter><decl><type><name>ctx_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>HTTP_HDR_NOTIFY</name></type> <name>notify</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"hdr_get_async"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hdr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>astream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>notify</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* bug fix, --zsx, 2007.7.7 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>chat_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>chat_ctx</name></name> <operator>=</operator> <call><name>new_ctx</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>chat_free_ctx_fn</name></name> <operator>=</operator> <name>free_ctx_fn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ctx</name>                    <operator>=</operator> <operator>(</operator><name>HTTP_CHAT_CTX</name><operator>*</operator><operator>)</operator> <name><name>hdr</name><operator>-&gt;</operator><name>chat_ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name>               <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>timeout</name></name>           <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>hdr_notify</name></name> <operator>=</operator> <name>notify</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name>               <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name>            <operator>=</operator> <name>CHAT_S_HDR</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    acl_aio_ctl(astream,
        ACL_AIO_CTL_READ_HOOK_ADD, hdr_gets_ready, ctx,
        ACL_AIO_CTL_TIMEOUT, timeout,
        ACL_AIO_CTL_END);
    acl_aio_gets_nonl(astream);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>,
        <argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_aio_enable_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>hdr_can_read</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_req_get_async</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>HTTP_HDR_NOTIFY</name></type> <name>notify</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>hdr_get_async</name><argument_list>(<argument><expr><name>CTX_TYPE_REQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>astream</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_res_get_async</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
		<parameter><decl><type><name>HTTP_HDR_NOTIFY</name></type> <name>notify</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>hdr_get_async</name><argument_list>(<argument><expr><name>CTX_TYPE_RES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><name>astream</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*------------------------ read http body data -------------------------------*/</comment>

<comment type="block">/* µ±¶Áµ½¿éÊý¾ÝÌåÖÐµÄ×îºóÒ»¸ö·Ö¸ôÐÐÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_data_endl</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>sbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_gets_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_CHUNK_DATA_ENDL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CHAT_S_CHUNK_HDR</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_data</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>sbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>HTTP_LEN_ROUND</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_readn_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_read_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>HTTP_LEN_ROUND</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ËµÃ÷±¾´Î HTTP Êý¾ÝÒÑ¾­¶ÁÍêÇÒÓöµ½¶Ô·½¹Ø±Õ
			 * »ò¶Ô·½·¢À´ÁË¶àÓàµÄÊý¾Ý£¬ËùÒÔÐèÒª·µ»Ø -1
			 */</comment>
			<expr_stmt><expr><call><name>DISABLE_READ</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_OK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_readn_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Èç¹û¶Áµ½ÍêÁËÕû¿éÊý¾ÝÇÒ·Ç CHUNK ´«Êä£¬
			 * ÔòÈÏÎª¶ÁÍê HTTP ÏìÓ¦
			 */</comment>
			<comment type="block">/* xxx: ½ûÖ¹Á¬Ðø¶Á */</comment>
			<expr_stmt><expr><call><name>DISABLE_READ</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_OK</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ¶ÔÓÚ chunk ´«Êä£¬¶ÁÍê±¾Êý¾Ý¿é */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_DATA</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block" format="doxygen">/**
		 * printf("&gt;&gt;%s: chunk_len=%d, read=%d\r\n", __FUNCTION__,
		 *	(int) ctx-&gt;chunk_len, (int) ctx-&gt;read_cnt);
		 */</comment>
		<comment type="block">/* ÉèÖÃ±êÖ¾Î»¿ªÊ¼¶ÁÈ¡¿éÊý¾ÝÌåµÄ·Ö¸ôÐÐÊý¾Ý */</comment>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CHAT_S_CHUNK_SEP</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_DATA</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_trailer</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>sbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_gets_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>DISABLE_READ</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dlen</name> <operator>=</operator> <call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_OK</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_CHUNK_TRAILER</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>chunked_hdr</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>sbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sbuf</name> <operator>=</operator> <call><name>acl_aio_gets_peek</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_CHUNK_HDR</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CHAT_S_CHUNK_TAL</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CHAT_S_CHUNK_DAT</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>body_can_read</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"body_can_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>HTTP_CHAT_CTX</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_aio_can_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>notify</name><argument_list>(<argument><expr><name>HTTP_CHAT_ERR_IO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>CHAT_S_CHUNK_HDR</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_hdr</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHAT_S_CHUNK_DAT</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_data</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHAT_S_CHUNK_SEP</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_data_endl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHAT_S_CHUNK_TAL</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chunked_trailer</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown status(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></switch>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_aio_enable_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>body_can_read</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>body_get</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CHAT_S_CHUNK_HDR</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CHAT_S_CHUNK_DAT</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_enable_read</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>body_can_read</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_req_body_get_async</name><parameter_list>(<parameter><decl><type><name>HTTP_REQ</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	 <parameter><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_req_body_get_async"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>request</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>astream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>notify</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: hdr null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name></name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: content_length(%lld)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name>                     <operator>=</operator> <name><name>request</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chat_ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name>                <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name>             <operator>=</operator> <name>astream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>timeout</name></name>            <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name>            <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name>          <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name>           <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name>           <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name> <operator>=</operator> <name>notify</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name>                <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>body_get</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_res_body_get_async</name><parameter_list>(<parameter><decl><type><name>HTTP_RES</name> <modifier>*</modifier></type><name>respond</name></decl></parameter>, <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>,
	<parameter><decl><type><name>HTTP_BODY_NOTIFY</name></type> <name>notify</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_res_body_get_async"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_CHAT_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>respond</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>astream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>notify</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: hdr null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;&amp;</operator> <name><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hdr</name><operator>-&gt;</operator><name>chunked</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): content_length(%lld), status(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name></expr></argument>,
			<argument><expr><name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>reply_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name>                     <operator>=</operator> <name><name>respond</name><operator>-&gt;</operator><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>chat_ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hdr</name></name>                <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stream</name></name>             <operator>=</operator> <name>astream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>timeout</name></name>            <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunked</name></name>            <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>chunked</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>chunk_len</name></name>          <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>content_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>read_cnt</name></name>           <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>body_len</name></name>           <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>body_notify</name></name> <operator>=</operator> <name>notify</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>arg</name></name>                <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>body_get</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
</unit>
