<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_protocol/src/http/http_hdr_build.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http/lib_http.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>http_hdr_put_str</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_put_int</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_put_fmt</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"http_hdr_put_fmt"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>  <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>strbuf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>strbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_vsprintf_append</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_put_time</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>http_mkrfc1123</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>http_hdr_entry_build</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_append_entry</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>http_hdr_set_keepalive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	int   left;

	if (req-&gt;hdr.keep_alive == 0
	    || req-&gt;server == NULL
	    || req-&gt;server-&gt;keep_alive_timeout &lt;= 0) {
		http_hdr_put_str(&amp;res-&gt;hdr, "Connection", "close");
		return (0);
	}

	left = req-&gt;server-&gt;keep_alive_max - req-&gt;nkeepalive;

	if (req-&gt;server-&gt;keep_alive_max &gt; 0)
		http_hdr_put_fmt(&amp;res-&gt;hdr,
				"Keep-Alive",
				"timeout=%d, max=%d",
				req-&gt;server-&gt;keep_alive_timeout,
				left);
	else
		http_hdr_put_int(&amp;res-&gt;hdr,
				"Keep-Alive",
				req-&gt;server-&gt;keep_alive_timeout);

	http_hdr_put_str(&amp;res-&gt;hdr, "Connection", "Keep-Alive");

	return (1);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>int</name></type> <name>keep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>http_hdr_entry_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"keep-alive"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>version</name><operator>.</operator><name>major</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>version</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>keep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"Keep-Alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_res_init</name><parameter_list>(<parameter><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>hdr_res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>http_status_line</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr_res</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Server"</literal></expr></argument>, <argument><expr><literal type="string">"acl_httpd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>http_hdr_res_static</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>res_hdr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res_hdr</name> <operator>=</operator> <call><name>http_hdr_res_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_res_init</name><argument_list>(<argument><expr><name>res_hdr</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res_hdr</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Date"</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res_hdr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>http_hdr_res_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_RES</name> <modifier>*</modifier></type><name>res_hdr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res_hdr</name> <operator>=</operator> <call><name>http_hdr_res_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_res_init</name><argument_list>(<argument><expr><name>res_hdr</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res_hdr</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Date"</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res_hdr</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res_hdr</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>http_tmpl_size</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_put_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>res_hdr</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res_hdr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_build</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>strbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>entry_lnk</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"%s %s\r\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_hdr_build_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>strbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_ENTRY</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entries</name> <operator>=</operator> <name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>entry_lnk</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	acl_vstring_sprintf(strbuf, "%s %s\r\n", entry-&gt;name, entry-&gt;value);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"%s %s HTTP/%d.%d\r\n"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
		<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>url_part</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>version</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>version</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>HTTP_HDR_ENTRY</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf_append</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\r\n"</literal></expr></argument>,
			<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
