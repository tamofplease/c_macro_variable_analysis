<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/token_tree/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>token_tree_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test_tab</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token_tree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psaved</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>token_tree</name> <operator>=</operator> <call><name>acl_token_tree_create</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_token_tree_print</name><argument_list>(<argument><expr><name>token_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>test_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>psaved</name> <operator>=</operator> <name><name>test_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_tree_match</name><argument_list>(<argument><expr><name>token_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_token_name</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"match %s %s, token's name: %s\n"</literal></expr></argument>, <argument><expr><name>psaved</name></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_DENY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"DENY"</literal></expr>
				</then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_PASS</name></expr> ?</condition><then> <expr><literal type="string">"PASS"</literal></expr> </then><else>: <expr><literal type="string">"NONE"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
				<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"match %s none\n"</literal></expr></argument>, <argument><expr><name>psaved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_token_tree_destroy</name><argument_list>(<argument><expr><name>token_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>__test_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"ÖÐ¹ú"</literal></expr>,
	<expr><literal type="string">"ÖÐ¹úÈËÃñ"</literal></expr>,
	<expr><literal type="string">"ÖÐ¹úÈËÃñÒøÐÐ"</literal></expr>,
	<expr><literal type="string">"ÖÐ¹úÈËÃñ½â·Å¾ü"</literal></expr>,
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><literal type="string">"ÖÐ¹ú|p ÖÐ¹úÈË|p ÖÐ¹úÈËÃñ|p ÖÐ¹úÈËÃñÒøÐÐ|p"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>token_tree_test</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>__test_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><literal type="string">"Ãû³Æ1"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n2</name> <init>= <expr><literal type="string">"Ãû³Æ2"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n3</name> <init>= <expr><literal type="string">"Ãû³Æ3"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v1</name> <init>= <expr><literal type="string">"±äÁ¿1"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v2</name> <init>= <expr><literal type="string">"±äÁ¿2"</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v3</name> <init>= <expr><literal type="string">"±äÁ¿3"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">"ÖÐ¹úÈËÃñÃû³Æ1£¬ÔÚÕâ¸öÊÀ½çÉÏ£¬ÄãÔÚÄÄ¶ùÃû³Æ2? "</literal>
		<literal type="string">"ÎÒ²»ÖªµÀÄãµÄÃû³Æ£¬ÄãÄÜ¸æËßÎÒÂð£¿ÎÒµÄÃû³Æ3ÊÇ..."</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>acl_token_tree_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n1</name></expr></argument>, <argument><expr><name>ACL_TOKEN_F_STOP</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>, <argument><expr><name>ACL_TOKEN_F_STOP</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><name>ACL_TOKEN_F_STOP</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>acl_token_tree_create</name><argument_list>(<argument><expr><literal type="string">"Ãû³Æ1|p Ãû³Æ2|p Ãû³Æ3|p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-----------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_token_tree_print</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_tree_word_match</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="string">"Ãû³Æ1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"find, %s: %s\n"</literal></expr></argument>, <argument><expr><call><name>acl_token_name1</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>token</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"no find\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-----------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_tree_match</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><call><name>acl_token_name1</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name><name>token</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-----------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_token_tree_destroy</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>token_word_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test_tab</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token_tree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>token_tree</name> <operator>=</operator> <call><name>acl_token_tree_create</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_token_tree_print</name><argument_list>(<argument><expr><name>token_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>test_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>test_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"match %s %s\n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>,
			<argument><expr><ternary><condition><expr><call><name>acl_token_tree_word_match</name><argument_list>(<argument><expr><name>token_tree</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>acl_token_tree_destroy</name><argument_list>(<argument><expr><name>token_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tokens1</name> <init>= <expr><literal type="string">"hello world he is a man he"</literal>
		<literal type="string">" ÖÐ ÖÐ»ª ÖÐ»ªÈË ÖÐ»ªÈËÃñ ÖÐ»ªÈËÃñ¹² ÖÐ»ªÈËÃñ¹²ºÍ ÖÐ»ªÈËÃñ¹²ºÍ¹ú"</literal>
		<literal type="string">" ÖÐ»ªÈËÃñ¹²ºÍ¹úÍòËê ÖÐ»ªÈËÃñ¹²ºÍ¹úÍòËêÍòÍòËê"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tokens2</name> <init>= <expr><literal type="string">"±ÈÀûÊ±|d ÖÐ¹ú|p ËµµÄ|d"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test1_tab</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"ÖÐ»ª"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈË"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ¹²"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ¹²ºÍ"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ¹²ºÍ¹ú"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ¹²ºÍ¹úÍòËê"</literal></expr>,
		<expr><literal type="string">"ÎÒÃÇÖÐ»ªÈËÃñ¹²ºÍ¹úÍòËê"</literal></expr>,
		<expr><literal type="string">"ÎÒÃÇÖÐ»ªÈËÃñ¹²ºÍ¹úÍòËêÍòÍòËê"</literal></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test2_tab</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"hello"</literal></expr>,
		<expr><literal type="string">"shello"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ¹²ºÍ¹ú"</literal></expr>,
		<expr><literal type="string">"ÖÐ»ªÈËÃñ"</literal></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>test3_tab</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"ÖÐ¹ú"</literal></expr>,
		<expr><literal type="string">"±ÈÀûÊ±"</literal></expr>,
		<expr><literal type="string">"ÖÐ¹ú±ÈÀûÊ±"</literal></expr>,
		<expr><literal type="string">"ÎÒËµµÄ¹ÊÊÂ"</literal></expr>,
		<expr><literal type="string">"ÒËµµÄÖÐ¹"</literal></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>token_tree_test</name><argument_list>(<argument><expr><name>tokens1</name></expr></argument>, <argument><expr><name>test1_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>token_word_test</name><argument_list>(<argument><expr><name>tokens1</name></expr></argument>, <argument><expr><name>test2_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>token_tree_test</name><argument_list>(<argument><expr><name>tokens2</name></expr></argument>, <argument><expr><name>test3_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><literal type="number">0</literal></expr></cpp:if>
	acl_token_tree_test();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>test2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"enter any key to exit ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
