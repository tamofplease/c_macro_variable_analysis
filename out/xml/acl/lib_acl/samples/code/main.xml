<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/code/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entity</name></decl>;</decl_stmt>
}</block> <decl><name><name>html_charset</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{   <expr><literal type="number">32</literal></expr>, <expr><literal type="string">"&amp;nbsp;"</literal></expr>    }</block></expr>, <expr><block>{  <expr><literal type="number">34</literal></expr>, <expr><literal type="string">"&amp;quot;"</literal></expr>    }</block></expr>, <expr><block>{  <expr><literal type="number">34</literal></expr>, <expr><literal type="string">"&amp;quot;"</literal></expr>    }</block></expr>, <expr><block>{  <expr><literal type="number">38</literal></expr>, <expr><literal type="string">"&amp;amp;"</literal></expr>     }</block></expr>,
    <expr><block>{   <expr><literal type="number">38</literal></expr>, <expr><literal type="string">"&amp;amp;"</literal></expr>     }</block></expr>, <expr><block>{  <expr><literal type="number">39</literal></expr>, <expr><literal type="string">"&amp;apos;"</literal></expr>    }</block></expr>, <expr><block>{  <expr><literal type="number">60</literal></expr>, <expr><literal type="string">"&amp;lt;"</literal></expr>      }</block></expr>, <expr><block>{  <expr><literal type="number">60</literal></expr>, <expr><literal type="string">"&amp;lt;"</literal></expr>      }</block></expr>,
    <expr><block>{   <expr><literal type="number">62</literal></expr>, <expr><literal type="string">"&amp;gt;"</literal></expr>      }</block></expr>, <expr><block>{  <expr><literal type="number">62</literal></expr>, <expr><literal type="string">"&amp;gt;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">160</literal></expr>, <expr><literal type="string">"&amp;nbsp;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">161</literal></expr>, <expr><literal type="string">"&amp;iexcl;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">162</literal></expr>, <expr><literal type="string">"&amp;cent;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">163</literal></expr>, <expr><literal type="string">"&amp;pound;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">164</literal></expr>, <expr><literal type="string">"&amp;curren;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">165</literal></expr>, <expr><literal type="string">"&amp;yen;"</literal></expr>     }</block></expr>,
    <expr><block>{  <expr><literal type="number">166</literal></expr>, <expr><literal type="string">"&amp;brvbar;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">167</literal></expr>, <expr><literal type="string">"&amp;sect;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">168</literal></expr>, <expr><literal type="string">"&amp;uml;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">169</literal></expr>, <expr><literal type="string">"&amp;copy;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">170</literal></expr>, <expr><literal type="string">"&amp;ordf;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">171</literal></expr>, <expr><literal type="string">"&amp;laquo;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">172</literal></expr>, <expr><literal type="string">"&amp;not;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">173</literal></expr>, <expr><literal type="string">"&amp;shy;"</literal></expr>     }</block></expr>,
    <expr><block>{  <expr><literal type="number">174</literal></expr>, <expr><literal type="string">"&amp;reg;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">175</literal></expr>, <expr><literal type="string">"&amp;macr;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">176</literal></expr>, <expr><literal type="string">"&amp;deg;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">177</literal></expr>, <expr><literal type="string">"&amp;plusmn;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">178</literal></expr>, <expr><literal type="string">"&amp;sup2;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">179</literal></expr>, <expr><literal type="string">"&amp;sup3;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">180</literal></expr>, <expr><literal type="string">"&amp;acute;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">181</literal></expr>, <expr><literal type="string">"&amp;micro;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">182</literal></expr>, <expr><literal type="string">"&amp;para;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">183</literal></expr>, <expr><literal type="string">"&amp;middot;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">184</literal></expr>, <expr><literal type="string">"&amp;cedil;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">185</literal></expr>, <expr><literal type="string">"&amp;sup1;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">186</literal></expr>, <expr><literal type="string">"&amp;ordm;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">187</literal></expr>, <expr><literal type="string">"&amp;raquo;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">188</literal></expr>, <expr><literal type="string">"&amp;frac14;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">189</literal></expr>, <expr><literal type="string">"&amp;frac12;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">190</literal></expr>, <expr><literal type="string">"&amp;frac34;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">191</literal></expr>, <expr><literal type="string">"&amp;iquest;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">192</literal></expr>, <expr><literal type="string">"&amp;Agrave;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">193</literal></expr>, <expr><literal type="string">"&amp;Aacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">194</literal></expr>, <expr><literal type="string">"&amp;Acirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">195</literal></expr>, <expr><literal type="string">"&amp;Atilde;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">196</literal></expr>, <expr><literal type="string">"&amp;Auml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">197</literal></expr>, <expr><literal type="string">"&amp;Aring;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">198</literal></expr>, <expr><literal type="string">"&amp;AElig;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">199</literal></expr>, <expr><literal type="string">"&amp;Ccedil;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">200</literal></expr>, <expr><literal type="string">"&amp;Egrave;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">201</literal></expr>, <expr><literal type="string">"&amp;Eacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">202</literal></expr>, <expr><literal type="string">"&amp;Ecirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">203</literal></expr>, <expr><literal type="string">"&amp;Euml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">204</literal></expr>, <expr><literal type="string">"&amp;Igrave;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">205</literal></expr>, <expr><literal type="string">"&amp;Iacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">206</literal></expr>, <expr><literal type="string">"&amp;Icirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">207</literal></expr>, <expr><literal type="string">"&amp;Iuml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">208</literal></expr>, <expr><literal type="string">"&amp;ETH;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">209</literal></expr>, <expr><literal type="string">"&amp;Ntilde;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">210</literal></expr>, <expr><literal type="string">"&amp;Ograve;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">211</literal></expr>, <expr><literal type="string">"&amp;Oacute;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">212</literal></expr>, <expr><literal type="string">"&amp;Ocirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">213</literal></expr>, <expr><literal type="string">"&amp;Otilde;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">214</literal></expr>, <expr><literal type="string">"&amp;Ouml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">215</literal></expr>, <expr><literal type="string">"&amp;times;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">216</literal></expr>, <expr><literal type="string">"&amp;Oslash;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">217</literal></expr>, <expr><literal type="string">"&amp;Ugrave;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">218</literal></expr>, <expr><literal type="string">"&amp;Uacute;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">219</literal></expr>, <expr><literal type="string">"&amp;Ucirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">220</literal></expr>, <expr><literal type="string">"&amp;Uuml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">221</literal></expr>, <expr><literal type="string">"&amp;Yacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">222</literal></expr>, <expr><literal type="string">"&amp;THORN;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">223</literal></expr>, <expr><literal type="string">"&amp;szlig;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">224</literal></expr>, <expr><literal type="string">"&amp;agrave;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">225</literal></expr>, <expr><literal type="string">"&amp;aacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">226</literal></expr>, <expr><literal type="string">"&amp;acirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">227</literal></expr>, <expr><literal type="string">"&amp;atilde;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">228</literal></expr>, <expr><literal type="string">"&amp;auml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">229</literal></expr>, <expr><literal type="string">"&amp;aring;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">230</literal></expr>, <expr><literal type="string">"&amp;aelig;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">231</literal></expr>, <expr><literal type="string">"&amp;ccedil;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">232</literal></expr>, <expr><literal type="string">"&amp;egrave;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">233</literal></expr>, <expr><literal type="string">"&amp;eacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">234</literal></expr>, <expr><literal type="string">"&amp;ecirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">235</literal></expr>, <expr><literal type="string">"&amp;euml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">236</literal></expr>, <expr><literal type="string">"&amp;igrave;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">237</literal></expr>, <expr><literal type="string">"&amp;iacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">238</literal></expr>, <expr><literal type="string">"&amp;icirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">239</literal></expr>, <expr><literal type="string">"&amp;iuml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">240</literal></expr>, <expr><literal type="string">"&amp;eth;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">241</literal></expr>, <expr><literal type="string">"&amp;ntilde;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">242</literal></expr>, <expr><literal type="string">"&amp;ograve;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">243</literal></expr>, <expr><literal type="string">"&amp;oacute;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">244</literal></expr>, <expr><literal type="string">"&amp;ocirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">245</literal></expr>, <expr><literal type="string">"&amp;otilde;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">246</literal></expr>, <expr><literal type="string">"&amp;ouml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">247</literal></expr>, <expr><literal type="string">"&amp;divide;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">248</literal></expr>, <expr><literal type="string">"&amp;oslash;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">249</literal></expr>, <expr><literal type="string">"&amp;ugrave;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">250</literal></expr>, <expr><literal type="string">"&amp;uacute;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">251</literal></expr>, <expr><literal type="string">"&amp;ucirc;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">252</literal></expr>, <expr><literal type="string">"&amp;uuml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">253</literal></expr>, <expr><literal type="string">"&amp;yacute;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">254</literal></expr>, <expr><literal type="string">"&amp;thorn;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="string">"&amp;yuml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">338</literal></expr>, <expr><literal type="string">"&amp;OElig;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">339</literal></expr>, <expr><literal type="string">"&amp;oelig;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">352</literal></expr>, <expr><literal type="string">"&amp;Scaron;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">353</literal></expr>, <expr><literal type="string">"&amp;scaron;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">376</literal></expr>, <expr><literal type="string">"&amp;Yuml;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">402</literal></expr>, <expr><literal type="string">"&amp;fnof;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">710</literal></expr>, <expr><literal type="string">"&amp;circ;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">732</literal></expr>, <expr><literal type="string">"&amp;tilde;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">913</literal></expr>, <expr><literal type="string">"&amp;Alpha;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">914</literal></expr>, <expr><literal type="string">"&amp;Beta;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">915</literal></expr>, <expr><literal type="string">"&amp;Gamma;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">916</literal></expr>, <expr><literal type="string">"&amp;Delta;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">917</literal></expr>, <expr><literal type="string">"&amp;Epsilon;"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">918</literal></expr>, <expr><literal type="string">"&amp;Zeta;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">919</literal></expr>, <expr><literal type="string">"&amp;Eta;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">920</literal></expr>, <expr><literal type="string">"&amp;Theta;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">921</literal></expr>, <expr><literal type="string">"&amp;Iota;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">922</literal></expr>, <expr><literal type="string">"&amp;Kappa;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">923</literal></expr>, <expr><literal type="string">"&amp;Lambda;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">924</literal></expr>, <expr><literal type="string">"&amp;Mu;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">925</literal></expr>, <expr><literal type="string">"&amp;Nu;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">926</literal></expr>, <expr><literal type="string">"&amp;Xi;"</literal></expr>      }</block></expr>,
    <expr><block>{  <expr><literal type="number">927</literal></expr>, <expr><literal type="string">"&amp;Omicron;"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">928</literal></expr>, <expr><literal type="string">"&amp;Pi;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">929</literal></expr>, <expr><literal type="string">"&amp;Rho;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">931</literal></expr>, <expr><literal type="string">"&amp;Sigma;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">932</literal></expr>, <expr><literal type="string">"&amp;Tau;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">933</literal></expr>, <expr><literal type="string">"&amp;Upsilon;"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">934</literal></expr>, <expr><literal type="string">"&amp;Phi;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">935</literal></expr>, <expr><literal type="string">"&amp;Chi;"</literal></expr>     }</block></expr>,
    <expr><block>{  <expr><literal type="number">936</literal></expr>, <expr><literal type="string">"&amp;Psi;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">937</literal></expr>, <expr><literal type="string">"&amp;Omega;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">945</literal></expr>, <expr><literal type="string">"&amp;alpha;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">946</literal></expr>, <expr><literal type="string">"&amp;beta;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">947</literal></expr>, <expr><literal type="string">"&amp;gamma;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">948</literal></expr>, <expr><literal type="string">"&amp;delta;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">949</literal></expr>, <expr><literal type="string">"&amp;epsilon;"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">950</literal></expr>, <expr><literal type="string">"&amp;zeta;"</literal></expr>    }</block></expr>,
    <expr><block>{  <expr><literal type="number">951</literal></expr>, <expr><literal type="string">"&amp;eta;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">952</literal></expr>, <expr><literal type="string">"&amp;theta;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">953</literal></expr>, <expr><literal type="string">"&amp;iota;"</literal></expr>    }</block></expr>, <expr><block>{ <expr><literal type="number">954</literal></expr>, <expr><literal type="string">"&amp;kappa;"</literal></expr>   }</block></expr>,
    <expr><block>{  <expr><literal type="number">955</literal></expr>, <expr><literal type="string">"&amp;lambda;"</literal></expr>  }</block></expr>, <expr><block>{ <expr><literal type="number">956</literal></expr>, <expr><literal type="string">"&amp;mu;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">957</literal></expr>, <expr><literal type="string">"&amp;nu;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">958</literal></expr>, <expr><literal type="string">"&amp;xi;"</literal></expr>      }</block></expr>,
    <expr><block>{  <expr><literal type="number">959</literal></expr>, <expr><literal type="string">"&amp;omicron;"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">960</literal></expr>, <expr><literal type="string">"&amp;pi;"</literal></expr>      }</block></expr>, <expr><block>{ <expr><literal type="number">961</literal></expr>, <expr><literal type="string">"&amp;rho;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">962</literal></expr>, <expr><literal type="string">"&amp;sigmaf;"</literal></expr>  }</block></expr>,
    <expr><block>{  <expr><literal type="number">963</literal></expr>, <expr><literal type="string">"&amp;sigma;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">964</literal></expr>, <expr><literal type="string">"&amp;tau;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">965</literal></expr>, <expr><literal type="string">"&amp;upsilon;"</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">966</literal></expr>, <expr><literal type="string">"&amp;phi;"</literal></expr>     }</block></expr>,
    <expr><block>{  <expr><literal type="number">967</literal></expr>, <expr><literal type="string">"&amp;chi;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">968</literal></expr>, <expr><literal type="string">"&amp;psi;"</literal></expr>     }</block></expr>, <expr><block>{ <expr><literal type="number">969</literal></expr>, <expr><literal type="string">"&amp;omega;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">977</literal></expr>, <expr><literal type="string">"&amp;thetasym"</literal></expr> }</block></expr>,
    <expr><block>{  <expr><literal type="number">978</literal></expr>, <expr><literal type="string">"&amp;upsih;"</literal></expr>   }</block></expr>, <expr><block>{ <expr><literal type="number">982</literal></expr>, <expr><literal type="string">"&amp;piv;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8194</literal></expr>, <expr><literal type="string">"&amp;ensp;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8195</literal></expr>, <expr><literal type="string">"&amp;emsp;"</literal></expr>    }</block></expr>,
    <expr><block>{ <expr><literal type="number">8201</literal></expr>, <expr><literal type="string">"&amp;thinsp;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8204</literal></expr>, <expr><literal type="string">"&amp;zwnj;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8205</literal></expr>, <expr><literal type="string">"&amp;zwj;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8206</literal></expr>, <expr><literal type="string">"&amp;lrm;"</literal></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="number">8207</literal></expr>, <expr><literal type="string">"&amp;rlm;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8211</literal></expr>, <expr><literal type="string">"&amp;ndash;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8212</literal></expr>, <expr><literal type="string">"&amp;mdash;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8216</literal></expr>, <expr><literal type="string">"&amp;lsquo;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8217</literal></expr>, <expr><literal type="string">"&amp;rsquo;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8218</literal></expr>, <expr><literal type="string">"&amp;sbquo;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8220</literal></expr>, <expr><literal type="string">"&amp;ldquo;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8221</literal></expr>, <expr><literal type="string">"&amp;rdquo;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8222</literal></expr>, <expr><literal type="string">"&amp;bdquo;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8224</literal></expr>, <expr><literal type="string">"&amp;dagger;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8225</literal></expr>, <expr><literal type="string">"&amp;Dagger;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8226</literal></expr>, <expr><literal type="string">"&amp;bull;"</literal></expr>    }</block></expr>,
    <expr><block>{ <expr><literal type="number">8230</literal></expr>, <expr><literal type="string">"&amp;hellip;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8240</literal></expr>, <expr><literal type="string">"&amp;permil;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8242</literal></expr>, <expr><literal type="string">"&amp;prime;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8243</literal></expr>, <expr><literal type="string">"&amp;Prime;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8249</literal></expr>, <expr><literal type="string">"&amp;lsaquo;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8250</literal></expr>, <expr><literal type="string">"&amp;rsaquo;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8254</literal></expr>, <expr><literal type="string">"&amp;oline;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8260</literal></expr>, <expr><literal type="string">"&amp;frasl;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8364</literal></expr>, <expr><literal type="string">"&amp;euro;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8465</literal></expr>, <expr><literal type="string">"&amp;image;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8472</literal></expr>, <expr><literal type="string">"&amp;weierp;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8476</literal></expr>, <expr><literal type="string">"&amp;real;"</literal></expr>    }</block></expr>,
    <expr><block>{ <expr><literal type="number">8482</literal></expr>, <expr><literal type="string">"&amp;trade;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8501</literal></expr>, <expr><literal type="string">"&amp;alefsym;"</literal></expr> }</block></expr>, <expr><block>{<expr><literal type="number">8592</literal></expr>, <expr><literal type="string">"&amp;larr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8593</literal></expr>, <expr><literal type="string">"&amp;uarr;"</literal></expr>    }</block></expr>,
    <expr><block>{ <expr><literal type="number">8594</literal></expr>, <expr><literal type="string">"&amp;rarr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8595</literal></expr>, <expr><literal type="string">"&amp;darr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8596</literal></expr>, <expr><literal type="string">"&amp;harr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8629</literal></expr>, <expr><literal type="string">"&amp;crarr;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8656</literal></expr>, <expr><literal type="string">"&amp;lArr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8657</literal></expr>, <expr><literal type="string">"&amp;uArr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8658</literal></expr>, <expr><literal type="string">"&amp;rArr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8659</literal></expr>, <expr><literal type="string">"&amp;dArr;"</literal></expr>    }</block></expr>,
    <expr><block>{ <expr><literal type="number">8660</literal></expr>, <expr><literal type="string">"&amp;hArr;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8704</literal></expr>, <expr><literal type="string">"&amp;forall;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8706</literal></expr>, <expr><literal type="string">"&amp;part;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8707</literal></expr>, <expr><literal type="string">"&amp;exist;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8709</literal></expr>, <expr><literal type="string">"&amp;empty;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8711</literal></expr>, <expr><literal type="string">"&amp;nabla;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8712</literal></expr>, <expr><literal type="string">"&amp;isin;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8713</literal></expr>, <expr><literal type="string">"&amp;notin;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8715</literal></expr>, <expr><literal type="string">"&amp;ni;"</literal></expr>      }</block></expr>, <expr><block>{<expr><literal type="number">8719</literal></expr>, <expr><literal type="string">"&amp;prod;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8721</literal></expr>, <expr><literal type="string">"&amp;sum;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8722</literal></expr>, <expr><literal type="string">"&amp;minus;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8727</literal></expr>, <expr><literal type="string">"&amp;lowast;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8730</literal></expr>, <expr><literal type="string">"&amp;radic;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8733</literal></expr>, <expr><literal type="string">"&amp;prop;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8734</literal></expr>, <expr><literal type="string">"&amp;infin;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8736</literal></expr>, <expr><literal type="string">"&amp;ang;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8743</literal></expr>, <expr><literal type="string">"&amp;and;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8744</literal></expr>, <expr><literal type="string">"&amp;or;"</literal></expr>      }</block></expr>, <expr><block>{<expr><literal type="number">8745</literal></expr>, <expr><literal type="string">"&amp;cap;"</literal></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="number">8746</literal></expr>, <expr><literal type="string">"&amp;cup;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8747</literal></expr>, <expr><literal type="string">"&amp;int;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8756</literal></expr>, <expr><literal type="string">"&amp;there4;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8764</literal></expr>, <expr><literal type="string">"&amp;sim;"</literal></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="number">8773</literal></expr>, <expr><literal type="string">"&amp;cong;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8776</literal></expr>, <expr><literal type="string">"&amp;asymp;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8800</literal></expr>, <expr><literal type="string">"&amp;ne;"</literal></expr>      }</block></expr>, <expr><block>{<expr><literal type="number">8801</literal></expr>, <expr><literal type="string">"&amp;equiv;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8804</literal></expr>, <expr><literal type="string">"&amp;le;"</literal></expr>      }</block></expr>, <expr><block>{<expr><literal type="number">8805</literal></expr>, <expr><literal type="string">"&amp;ge;"</literal></expr>      }</block></expr>, <expr><block>{<expr><literal type="number">8834</literal></expr>, <expr><literal type="string">"&amp;sub;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">8835</literal></expr>, <expr><literal type="string">"&amp;sup;"</literal></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="number">8836</literal></expr>, <expr><literal type="string">"&amp;nsub;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8838</literal></expr>, <expr><literal type="string">"&amp;sube;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8839</literal></expr>, <expr><literal type="string">"&amp;supe;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8853</literal></expr>, <expr><literal type="string">"&amp;oplus;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8855</literal></expr>, <expr><literal type="string">"&amp;otimes;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8869</literal></expr>, <expr><literal type="string">"&amp;perp;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8901</literal></expr>, <expr><literal type="string">"&amp;sdot;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">8968</literal></expr>, <expr><literal type="string">"&amp;lceil;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">8969</literal></expr>, <expr><literal type="string">"&amp;rceil;"</literal></expr>   }</block></expr>, <expr><block>{<expr><literal type="number">8970</literal></expr>, <expr><literal type="string">"&amp;lfloor;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">8971</literal></expr>, <expr><literal type="string">"&amp;rfloor;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">9001</literal></expr>, <expr><literal type="string">"&amp;lang;"</literal></expr>    }</block></expr>,
    <expr><block>{ <expr><literal type="number">9002</literal></expr>, <expr><literal type="string">"&amp;rang;"</literal></expr>    }</block></expr>, <expr><block>{<expr><literal type="number">9674</literal></expr>, <expr><literal type="string">"&amp;loz;"</literal></expr>     }</block></expr>, <expr><block>{<expr><literal type="number">9824</literal></expr>, <expr><literal type="string">"&amp;spades;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">9827</literal></expr>, <expr><literal type="string">"&amp;clubs;"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><literal type="number">9829</literal></expr>, <expr><literal type="string">"&amp;hearts;"</literal></expr>  }</block></expr>, <expr><block>{<expr><literal type="number">9830</literal></expr>, <expr><literal type="string">"&amp;diams;"</literal></expr>   }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_map2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>html_charset</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>html_charset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr> ;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>h</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"id: %d = 0\n"</literal></expr></argument>, <argument><expr><name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_map2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>html_charset</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>html_charset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entity</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>html_charset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>entity</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>html_charset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>entity</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>html_charset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>entity</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#ifndef	__HTML_CHARSET_INCLUDE_H__\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#define	__HTML_CHARSET_INCLUDE_H__\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const char *html_charmap[] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">65535</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">",\n\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>html_charset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>entity</name> <operator>&amp;&amp;</operator> <name><name>html_charset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name><name>html_charset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\ntypedef struct {\n"</literal>
		<literal type="string">"\tunsigned short  ch;\n"</literal>
		<literal type="string">"\tconst char *txt;\n"</literal>
		<literal type="string">"\tsize_t  len;\n"</literal>
		<literal type="string">"} HTML_SPEC;\n"</literal>
		<literal type="string">"\n"</literal>
		<literal type="string">"static const HTML_SPEC html_tab[] = {\n"</literal></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entity</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t{ %u, \"%s\", sizeof(\"%s\") - 1 },\n"</literal></expr></argument>,
			<argument><expr><name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entity</name></expr></argument>, <argument><expr><name><name>html_charset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<typedef>typedef <type><struct>struct <name>HTML_SPEC_TBL</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type>  <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
}</block></struct></type> <name>HTML_SPEC_TBL</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>HTML_SPEC_TBL</name></type> <name><name>__tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="char">'&lt;'</literal></expr>, <expr><literal type="string">"&amp;lt;"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="char">'&gt;'</literal></expr>, <expr><literal type="string">"&amp;gt;"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="char">'&amp;'</literal></expr>, <expr><literal type="string">"&amp;amp;"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="char">'\''</literal></expr>, <expr><literal type="string">"&amp;apos;"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="char">'\"'</literal></expr>, <expr><literal type="string">"&amp;quot;"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_map1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">",\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ch</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>__tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ch</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>__tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ch</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name><name>__tab</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><literal type="string">"%E4%B8%AD%E5%9B%BD%0A%E4%B8%AD%E5%9B%BD%0A%E4%B8%AD%E5%9B%BD"</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*
	char  buf[256], *dst;
*/</comment>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>create_map1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>create_map2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_map2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"src(%s)\n"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>acl_url_decode</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dst(%s)\n"</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
	if (acl_utf8_to_gb2312(dst, strlen(dst), buf, sizeof(buf)) &gt; 0)
		printf("ok, buf(%s)\n", buf);
	else
		printf("error\n");

	src = "ä¸­å½";
	if (acl_utf8_to_gb2312(src, strlen(src), buf, sizeof(buf)) &gt; 0)
		printf("ok, buf(%s)\n", buf);
	else
		printf("error\n");
*/</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
