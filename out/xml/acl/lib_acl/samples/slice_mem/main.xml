<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/slice_mem/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<comment type="block">/* Ïß³Ì³ØÖÐÄ³Ïß³ÌµÄÈÎÎñ´¦Àí¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ÊÍ·ÅÖ÷Ïß³Ì·ÖÅäµÄÄÚ´æ */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_pool_tls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nthread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nalloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"thread_pool_tls"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>thr_pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ´´½¨Ïß³Ì³Ø */</comment>
	<expr_stmt><expr><name>thr_pool</name> <operator>=</operator> <call><name>acl_thread_pool_create</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nalloc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* Ö÷Ïß³Ì·ÖÅäÄÚ´æ */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block">/* ÏòÏß³Ì³ØÖÐÌí¼ÓÈÎÎñ, ½«ÐÂÄÚ´æ´«µÝ¸øÏß³Ì³Ø´¦Àí */</comment>
		<comment type="block">/*
		 * ACL_METER_TIME("--31--");
		 */</comment>
		<expr_stmt><expr><call><name>acl_pthread_pool_add</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>, <argument><expr><name>run_thread</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">100000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s: i=%d\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/*
		 * ACL_METER_TIME("--32--");
		 */</comment>
	</block_content>}</block></for>

	<comment type="block">/* ÊÍ·ÅÏß³Ì³Ø */</comment>
	<expr_stmt><expr><call><name>acl_pthread_pool_destroy</name><argument_list>(<argument><expr><name>thr_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s: time cost: %ld\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__use_base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>test_tls_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX</name></cpp:macro>	<cpp:value>30</cpp:value></cpp:define>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"test_tls_thread"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>ptr</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nalloc</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>, <decl><type ref="prev"/><name>nloop1</name></decl>, <decl><type ref="prev"/><name>nloop2</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>nalloc</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr> ?</condition><then> <expr><literal type="number">10000</literal></expr> </then><else>: <expr><operator>*</operator><name>nalloc</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>nloop1</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nloop2</name> <operator>=</operator> <name>n</name> <operator>/</operator> <name>nloop1</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__use_base</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nloop1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nloop2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nloop1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nloop2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(%d)(tid=%ld): time cose %d seconds\n"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_tls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nthread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nalloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name> <modifier>*</modifier></type><name>tids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; test_tls: begin running(thread=%ld) ...\n"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tids</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_t</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>test_tls_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name><name>tids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; test_tls: thread(%ld) over now\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>tids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h[help] -s[use slice] -t nthread -n nalloc -g nalloc_gc -b[use malloc/free] -p[use thread pool]\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>nslice</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>, <decl><type ref="prev"/><name>nalloc_gc</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>, <decl><type ref="prev"/><name>use_thrpool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>use_slice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nthread</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>nalloc</name> <init>= <expr><literal type="number">10000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slice_flag</name> <init>= <expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name>ch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hst:n:g:bp"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name>use_slice</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name>nthread</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nthread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nthread</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>nalloc</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nalloc</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nalloc</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'g'</literal></expr>:</case>
			<expr_stmt><expr><name>nalloc_gc</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nalloc_gc</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nalloc_gc</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<expr_stmt><expr><name>__use_base</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<expr_stmt><expr><name>use_thrpool</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_lib_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>use_slice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_mem_slice_init</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nslice</name></expr></argument>, <argument><expr><name>nalloc_gc</name></expr></argument>, <argument><expr><name>slice_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>use_thrpool</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>thread_pool_tls</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>, <argument><expr><name>nalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>test_tls</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>, <argument><expr><name>nalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>use_slice</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_mem_slice_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* È¡ÏûÄÚ´æ¹ÜÀíµÄ¹´×Óº¯Êý£¬»Ö¸´ÎªÈ±Ê¡×´Ì¬ */</comment>
		<expr_stmt><expr><call><name>acl_mem_unhook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* È±Ê¡µÄÄÚ´æ·ÖÅäÓëÊÍ·Å */</comment>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Input any key to exit ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
