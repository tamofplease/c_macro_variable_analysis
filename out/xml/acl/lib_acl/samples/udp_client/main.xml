<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/samples/udp_client/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>double</name></type> <name>stamp_sub</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>sub_by</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>res</name><operator>.</operator><name>tv_usec</name></name> <operator>-=</operator> <name><name>sub_by</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>.</operator><name>tv_usec</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>--</operator><name><name>res</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>.</operator><name>tv_usec</name></name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>res</name><operator>.</operator><name>tv_sec</name></name> <operator>-=</operator> <name><name>sub_by</name><operator>-&gt;</operator><name>tv_sec</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>res</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>+</operator> <name><name>res</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000.0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>local_addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peer_addr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_read</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>spent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>acl_vstream_bind</name><argument_list>(<argument><expr><name>local_addr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="block">/* °ó¶¨ UDP Ì×½Ó¿Ú */</comment>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"acl_vstream_bind %s error %s\r\n"</literal></expr></argument>,
			<argument><expr><name>local_addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>data</name><index>[<expr><name>dlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>peer_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTREAM_SET_RWTIMO</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* Èç¹û·þÎñ¶ËµÄµØÖ·ÊÇ±ä»¯µÄ£¬ÔòÓ¦¸ÃÔÚÐ´Ã¿´ÎÇ°¶¼ÐèÒªµ÷ÓÃ
		 * acl_vstream_set_peer
		 */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"acl_vtream_write error %s\r\n"</literal></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>need_read</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timeout read\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"acl_vstream_read error %s\r\n"</literal></expr></argument>,
						<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>inter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"result: %s\r\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <name>inter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"total: %d, curr: %d"</literal></expr></argument>,
				<argument><expr><name>count</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>spent</name> <operator>=</operator> <call><name>stamp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thread: %lu, total: %d, curr: %d, spent: %.2f, speed: %.2f\r\n"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>spent</name></expr></argument>,
		<argument><expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>spent</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>spent</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thread: %lu, local addr: %s, peer addr: %s\r\n"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_LOCAL</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>ACL_VSTREAM_PEER</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>quit</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>local</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>peer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>inter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>need_read</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>quit</name></decl>;</decl_stmt>
}</block></struct></type> <name>THREAD_CTX</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>THREAD_CTX</name> <modifier>*</modifier></type><name>tc</name> <init>= <expr><operator>(</operator><name>THREAD_CTX</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>,
		<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>inter</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>need_read</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>quit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help]\r\n"</literal>
		<literal type="string">"	-s server_addr [default: 127.0.0.1:8888]\r\n"</literal>
		<literal type="string">"	-l local_addr [default: 127.0.0.1:0]\r\n"</literal>
		<literal type="string">"	-t thread_count [default: 1]\r\n"</literal>
		<literal type="string">"	-i print_per_loop [default: 1000]\r\n"</literal>
		<literal type="string">"	-N data_len [default: 100]\r\n"</literal>
		<literal type="string">"	-r if_need_read [default: false]\r\n"</literal>
		<literal type="string">"	-q if_send_quit when over [default: false]\r\n"</literal>
		<literal type="string">"	-n loop_count [default: 1]\r\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>peer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>local</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dlen</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>, <decl><type ref="prev"/><name>inter</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>, <decl><type ref="prev"/><name>nthreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>quit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>need_read</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_lib_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_stdout_enable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:8888"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hl:s:n:N:i:t:rq"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><literal type="char">'l'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'N'</literal></expr>:</case>
			<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'i'</literal></expr>:</case>
			<expr_stmt><expr><name>inter</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'r'</literal></expr>:</case>
			<expr_stmt><expr><name>need_read</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'q'</literal></expr>:</case>
			<expr_stmt><expr><name>quit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>peer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>local</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>acl_pthread_pool_t</name> <modifier>*</modifier></type><name>threads</name> <init>=
			<expr><call><name>acl_thread_pool_create</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>THREAD_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>THREAD_CTX</name><operator>*</operator><operator>)</operator>
				<call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>THREAD_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>local</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>local</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>inter</name></name> <operator>=</operator> <name>inter</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>need_read</name></name> <operator>=</operator> <name>need_read</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quit</name></name> <operator>=</operator> <name>quit</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_pool_add</name><argument_list>(<argument><expr><name>threads</name></expr></argument>, <argument><expr><name>thread_run</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>acl_pthread_pool_destroy</name><argument_list>(<argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>inter</name></expr></argument>, <argument><expr><name>need_read</name></expr></argument>, <argument><expr><name>quit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\nlocal: %s, peer: %s, count: %d, dlen: %d, inter: %d\r\n"</literal></expr></argument>,
		<argument><expr><name>local</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_lib_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
