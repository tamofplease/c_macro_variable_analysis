<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/thread/thread1/main.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define_unix.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive>	<name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>THREAD_CTX</name> <block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
}</block></struct></type> <name>THREAD_CTX</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
typedef volatile int pthread_spinlock_t;
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared);
extern int pthread_spin_lock (pthread_spinlock_t *__lock);
extern int pthread_spin_unlock (pthread_spinlock_t *__lock);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>test_thread_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>THREAD_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>THREAD_CTX</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"current tid is: %lu\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ctx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_spinlock_t</name></type> <name>__spin_lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>thread_nested_mutex</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><operator>(</operator><name>acl_pthread_mutex_t</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>m</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %lu, begin spin lock\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__spin_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__spin_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %lu, lock over, spin, time: %ld\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %lu, begin lock mutex\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_thread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_thread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %lu, lock mutex ok, nested: %d, sleep %d seconds, time: %ld\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_thread_mutex_nested</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %lu, wakeup, begin unlock\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_thread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %lu, time: %ld, exit now\n"</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_nested_mutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_spin_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__spin_lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>ACL_PTHREAD_CREATE_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>thread_nested_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>thread_nested_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>mutex_init1</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>mutex_init2</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>THREAD_CTX</name></type> <name>ctx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>return_arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_init1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"lock mutex_init1 ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mutex_init2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"lock mutex_init2 ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>test_thread_fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>return_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pctx</name> <operator>=</operator> <operator>(</operator><name>THREAD_CTX</name><operator>*</operator><operator>)</operator> <name>return_arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ctx.i=%d, pctx-&gt;i=%d, the thread id is: %u\r\n"</literal></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>pctx</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vstring</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"free_vstring"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: tid=%d, free vstring ok\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>test_tls_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"test_tls_thread"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>key</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): last serror: %s, %p\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(%d)(tid=%d): key = %d\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(%d)(tid=%d): key = %d\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(tid=%d): buf null, key = %d\n"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>free_vstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(%d)(tid=%d): time cose %d seconds, tid: %ld\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s, tid=%lu"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s: buf=%s\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(%d)(tid=%d): time cose %d seconds\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_tls</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>test_tls_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>test_tls_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; test_tls: over now\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__init_once_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"init_once"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>__init_once_key</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d, tid=%d): __init_once_key=%d\n"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>__init_once_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;&gt;%s(tid=%d): free vstring ok\n"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vbuf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;&gt;%s(tid=%d): free vstring ok\n"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>test_once_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>buf_key</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>__vbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>init_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__vbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__vbuf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>__vbuf</name></expr></argument>, <argument><expr><name>free_vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>buf_key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>free_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(tid=%d) buf null\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s(tid=%d) buf not null\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;%s: in thread %d, last error: %s\n"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_pthread_once</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_setstacksize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">10240000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>test_once_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>test_once_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; test_pthread_once: over now, enter any key to exit...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name><name>argv</name><index>[]</index></name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_pthread_once</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): last serror: %s, %p\n"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test_tls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>test_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;&gt;main tid: %u\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>test_nested_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
