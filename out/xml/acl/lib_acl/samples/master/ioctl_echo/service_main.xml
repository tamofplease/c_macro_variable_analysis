<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/master/ioctl_echo/service_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<comment type="block">/* ÅäÖÃÎÄ¼þÏî */</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_mysql_dbaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_mysql_dbuser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_mysql_dbpass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_mysql_dbname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_mysql_dbmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_mysql_dbping</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_mysql_dbtimeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_mysql_auto_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_debug_mem</name></decl>;</decl_stmt>

<comment type="block">/* configure info */</comment>

<comment type="block">/* TODO: you can add configure items here */</comment>

<decl_stmt><decl><type><name>ACL_CONFIG_BOOL_TABLE</name></type> <name><name>service_conf_bool_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>
	<expr><block>{ <expr><literal type="string">"debug_mem"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_debug_mem</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_INT_TABLE</name></type> <name><name>service_conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>
	<expr><block>{ <expr><literal type="string">"mysql_dbmax"</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbmax</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"mysql_dbping"</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbping</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"mysql_dbtimeout"</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbtimeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"mysql_auto_commit"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_auto_commit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_STR_TABLE</name></type> <name><name>service_conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{

	<comment type="block">/* TODO: you can add configure variables of (char *) type here */</comment>
	<expr><block>{ <expr><literal type="string">"mysql_dbaddr"</literal></expr>, <expr><literal type="string">"127.0.0.1:3306"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbaddr</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"mysql_dbname"</literal></expr>, <expr><literal type="string">"ioctl_db"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbname</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"mysql_dbuser"</literal></expr>, <expr><literal type="string">"ioctl_user"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbuser</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"mysql_dbpass"</literal></expr>, <expr><literal type="string">"111111"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_mysql_dbpass</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ³õÊ¼»¯º¯Êý */</comment>
<function><type><name>void</name></type> <name>service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>init_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	const char *ptr = getenv("MASTER_ENV");

	if (ptr)
		acl_msg_info("env=%s", ptr);
	else
		acl_msg_info("no env");
	*/</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<comment type="block">/* Ð­Òé´¦Àíº¯ÊýÈë¿Ú */</comment>
<function><type><name>int</name></type> <name>service_main</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>run_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTREAM_SET_RWTIMO</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">1200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_mem</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"total alloc: %d"</literal></expr></argument>, <argument><expr><call><name>acl_mempool_total_allocated</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Please input: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"waiting ......"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"Your input: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"wakeup now, ret=%d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"over now\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
