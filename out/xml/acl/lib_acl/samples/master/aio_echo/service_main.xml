<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/master/aio_echo/service_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<comment type="block">/* configure info */</comment>

<comment type="block">/* TODO: you can add configure items here */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>var_cfg_debug_mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_BOOL_TABLE</name></type> <name><name>service_conf_bool_tab</name><index>[]</index></name> <init>= <expr><block>{
        <comment type="block">/* TODO: you can add configure variables of int type here */</comment>
        <expr><block>{ <expr><literal type="string">"debug_mem"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_debug_mem</name></expr> }</block></expr>,

        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>var_cfg_io_idle_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>var_cfg_debug_mem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_INT_TABLE</name></type> <name><name>service_conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>

	<expr><block>{ <expr><literal type="string">"io_idle_limit"</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_io_idle_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ACL_CONFIG_STR_TABLE</name></type> <name><name>service_conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{

	<comment type="block">/* TODO: you can add configure variables of (char *) type here */</comment>
	<comment type="block">/* example: { "mysql_dbaddr", "127.0.0.1:3306", &amp;var_cfg_mysql_dbaddr }, */</comment>

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>init_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>exist_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>service_main</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>run_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>read_callback</name></expr></argument>, <argument><expr><name>run_ctx</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_gets</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
