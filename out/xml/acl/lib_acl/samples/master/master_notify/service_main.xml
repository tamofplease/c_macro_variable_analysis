<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/master/master_notify/service_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"notify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CACHE</name> <modifier>*</modifier></type><name>var_smtp_notify_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CACHE</name> <modifier>*</modifier></type><name>var_sms_notify_cache</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CACHE_INFO</name> <modifier>*</modifier><name>info</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ³õÊ¼»¯º¯Êý */</comment>
<function><type><name>void</name></type> <name>service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>init_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>service_var_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>var_smtp_notify_cache</name> <operator>=</operator> <call><name>acl_cache_create</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>var_cfg_smtp_notify_cache_timeout</name></expr></argument>,
			<argument><expr><name>cache_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>var_sms_notify_cache</name> <operator>=</operator> <call><name>acl_cache_create</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>var_cfg_sms_notify_cache_timeout</name></expr></argument>,
			<argument><expr><name>cache_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: init ok ..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>var_cfg_host_ip</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>var_cfg_host_ip</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_host_ip</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>var_cfg_host_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>var_cfg_host_ip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ifconf</name> <operator>=</operator> <call><name>acl_get_ifaddrs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>ifconf</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>ifaddr</name> <operator>=</operator> <operator>(</operator><name>ACL_IFADDR</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;ip: %s"</literal></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ÍâÍøIPÓÅÏÈ */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><literal type="string">"10."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><literal type="string">"192."</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>var_cfg_host_ip</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>var_cfg_host_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>var_cfg_host_ip</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>var_cfg_host_ip</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>var_cfg_host_ip</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* ½ø³ÌÍË³öÇ°µ÷ÓÃµÄº¯Êý */</comment>
<function><type><name>void</name></type> <name>service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_exit"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_cache_free</name><argument_list>(<argument><expr><name>var_smtp_notify_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_cache_free</name><argument_list>(<argument><expr><name>var_sms_notify_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>service_var_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: exit now ..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Ð­Òé´¦Àíº¯ÊýÈë¿Ú */</comment>
<function><type><name>int</name></type> <name>service_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>run_ctx</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	int   ret, ready;
	ACL_VSTRING *buf = acl_vstring_alloc(1024);

	while (1) {
		ready = 0;
		ACL_VSTRING_RESET(buf);
		ret = acl_vstream_gets_peek(client, buf, &amp;ready);
		if (ret == ACL_VSTREAM_EOF) {
			acl_vstring_free(buf);
			return (-1);  <comment type="block">/* ·µ»Ø¸ºÖµÒÔÊ¹¿ò¼ÜÄÚ²¿¹Ø±Õ client Êý¾ÝÁ÷ */</comment>
		} else if (!ready)
			break;
		if (notify(acl_vstring_str(buf)) &lt; 0) {
			acl_vstring_free(buf);
			return (-1);
		}
	}
	acl_vstring_free(buf);
	return (0);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): gets error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>notify</name><argument_list>(<argument><expr><name>var_smtp_notify_cache</name></expr></argument>, <argument><expr><name>var_sms_notify_cache</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
