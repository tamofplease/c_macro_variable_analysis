<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/samples/master/ioctl_echo3/service_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_var.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>s</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>MY_CTX</name>;</typedef>

<comment type="block">/* ³õÊ¼»¯º¯Êý */</comment>
<function><type><name>void</name></type> <name>service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>init_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_init"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: init ok ..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ½ø³ÌÍË³öÇ°µ÷ÓÃµÄº¯Êý */</comment>
<function><type><name>void</name></type> <name>service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_exit"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: exit now ..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_close</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MY_CTX</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"stream close now, n: %d, rw_timeout: %d"</literal></expr></argument>,
		<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>service_on_accept</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MY_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MY_CTX</name><operator>*</operator><operator>)</operator> <name><name>client</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"hello, you're welcome!\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>MY_CTX</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MY_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"hello world!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>on_close</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Ð­Òé´¦Àíº¯ÊýÈë¿Ú */</comment>
<function><type><name>int</name></type> <name>service_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>run_ctx</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"service_main"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>ready</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;one coonected!, rw_timeout: %d"</literal></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ready</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets_peek</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_enable</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: close client now, (%s), timeout: %d"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>var_cfg_debug_msg</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>  <comment type="block">/* ·µ»Ø¸ºÖµÒÔÊ¹¿ò¼ÜÄÚ²¿¹Ø±Õ client Êý¾ÝÁ÷ */</comment>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ready</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_enable</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: write to client error, close now(%s)"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>var_cfg_debug_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>  <comment type="block">/* ·µ»Ø¸ºÖµÒÔÊ¹¿ò¼ÜÄÚ²¿¹Ø±Õ client Êý¾ÝÁ÷ */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_keep_alive</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>var_cfg_debug_enable</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: keep alive, wait client..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>  <comment type="block">/* ·µ»Ø 0 ÒÔÊ¹¿ò¼ÜÄÚ²¿×Ô¶¯¼àÌý¸ÃÊý¾ÝÁ÷´Ó¶ø±£³Ö³¤Á¬½Ó */</comment>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ¿ÉÒÔÔÚ´Ë´¦·µ»Ø =1, Ê¹¿ò¼ÜÄÚ²¿×Ô¶¯¹Ø±Õ client Êý¾ÝÁ÷,
		 * Ò²¿ÉÒÔÔÚ´Ë´¦Ö±½Ó¹Ø±Õ client Êý¾ÝÁ÷£¬Í¬Ê±·µ»Ø 1 ¸æËß¿ò¼Ü
		 * ¸ÃÁ÷ÒÑ¾­±»ÓÃ»§¹Ø±ÕÁË²»±ØÔÙ¹ØÐÄ¸Ã client Êý¾ÝÁ÷.
		 */</comment>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
