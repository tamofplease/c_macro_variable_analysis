<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/master/listener_server/spool_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spool_main.h"</cpp:file></cpp:include>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>SPOOL</name> <modifier>*</modifier></type><name>spool_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_threads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idle_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"spool_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPOOL</name> <modifier>*</modifier></type><name>spool</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>spool</name> <operator>=</operator> <operator>(</operator><name>SPOOL</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SPOOL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>spool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): calloc error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>spool</name><operator>-&gt;</operator><name>h_spool</name></name> <operator>=</operator> <call><name>acl_spool_create</name><argument_list>(<argument><expr><name>max_threads</name></expr></argument>, <argument><expr><name>idle_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>spool</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>int</name></type> <name>spool_start</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SPOOL</name> <modifier>*</modifier></type><name>spool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>acl_spool_start</name><argument_list>(<argument><expr><name><name>spool</name><operator>-&gt;</operator><name>h_spool</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>__read_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>,
				<parameter><decl><type><name>ACL_SPOOL</name> <modifier>*</modifier></type><name>h_spool</name></decl></parameter>,
				<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>cstream</name></decl></parameter>,
				<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"__read_notify_callback"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SPOOL</name> <modifier>*</modifier></type><name>spool</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>spool</name> <operator>=</operator> <operator>(</operator><name>SPOOL</name> <operator>*</operator><operator>)</operator> <name>context</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>event_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_READ</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>protocol</name><argument_list>(<argument><expr><name>spool</name></expr></argument>, <argument><expr><name>cstream</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_spool_enable_read</name><argument_list>(<argument><expr><name>h_spool</name></expr></argument>,
						<argument><expr><name>cstream</name></expr></argument>,
						<argument><expr><name>var_cfg_client_idle_limit</name></expr></argument>,
						<argument><expr><name>__read_notify_callback</name></expr></argument>,
						<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_RW_TIMEOUT</name></expr>:</case>
	<case>case <expr><name>ACL_EVENT_XCPT</name></expr>:</case>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unknown event type(%d)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* not reached */</comment>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>spool_add_worker</name><parameter_list>(<parameter><decl><type><name>SPOOL</name> <modifier>*</modifier></type><name>spool</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>cstream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"spool_add_worker"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cstream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>spool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<comment type="block">/* ½«¿Í»§¶ËÊý¾ÝÁ÷µÄ×´Ì¬ÖÃÈëÊÂ¼þ¼à¿Ø¼¯ºÏÖÐ */</comment>
	<expr_stmt><expr><call><name>acl_spool_enable_read</name><argument_list>(<argument><expr><name><name>spool</name><operator>-&gt;</operator><name>h_spool</name></name></expr></argument>,
				<argument><expr><name>cstream</name></expr></argument>,
				<argument><expr><name>var_cfg_client_idle_limit</name></expr></argument>,
				<argument><expr><name>__read_notify_callback</name></expr></argument>,
				<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>

</unit>
