<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/master/listener_server/main.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"global.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"spool_main.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ARG_UNUSE</name><parameter_list>(<parameter><type><name>_x_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_x_ = _x_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>VAR_LISTENER_BANNER</name></cpp:macro>		<cpp:value>"listener_banner"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>VAR_LISTENER_TMOUT</name></cpp:macro>		<cpp:value>"listener_timeout"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_listener_banner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_listener_tmout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_max_threads</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_cfg_client_idle_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_cfg_access_allow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>SPOOL</name> <modifier>*</modifier></type><name>__spool_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT_TABLE</name></type> <name><name>__conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>VAR_LISTENER_TMOUT</name></expr>, <expr><literal type="number">600</literal></expr>, <expr><operator>&amp;</operator><name>var_listener_tmout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>	}</block></expr>,

	<expr><block>{ <expr><name>VAR_CFG_MAX_THREADS</name></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_max_threads</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>		}</block></expr>,
	<expr><block>{ <expr><name>VAR_CFG_CLIENT_IDLE_LIMIT</name></expr>, <expr><literal type="number">60</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_client_idle_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>__conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>VAR_LISTENER_BANNER</name></expr>, <expr><literal type="string">"welcome"</literal></expr>, <expr><operator>&amp;</operator><name>var_listener_banner</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>VAR_CFG_ACCESS_ALLOW</name></expr>, <expr><literal type="string">"access_allow"</literal></expr>, <expr><operator>&amp;</operator><name>var_cfg_access_allow</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"__service"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ip</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check. This service takes no command-line arguments.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unexpected command-line argument: %s, service=%s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>service</name></expr> ?</condition><then> <expr><name>service</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_watchdog_pat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): can't get socket's ip"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>acl_access_permit</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ip(%s) be denied"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"You are not welcome here!\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>spool_add_worker</name><argument_list>(<argument><expr><name>__spool_handle</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__pre_accept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ARG_UNUSE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ARG_UNUSE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__pre_jail_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ARG_UNUSE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ARG_UNUSE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__post_jail_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"__post_jail_init"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ARG_UNUSE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ARG_UNUSE</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_access_add</name><argument_list>(<argument><expr><name>var_cfg_access_allow</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__spool_handle</name> <operator>=</operator> <call><name>spool_create</name><argument_list>(<argument><expr><name>var_cfg_max_threads</name></expr></argument>, <argument><expr><name>var_cfg_client_idle_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__spool_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): spool_create error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>spool_start</name><argument_list>(<argument><expr><name>__spool_handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): spool start error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: starting..."</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_listener_server_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>__service</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_INT_TABLE</name></expr></argument>, <argument><expr><name>__conf_int_tab</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_STR_TABLE</name></expr></argument>, <argument><expr><name>__conf_str_tab</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_PRE_INIT</name></expr></argument>, <argument><expr><name>__pre_jail_init</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_PRE_ACCEPT</name></expr></argument>, <argument><expr><name>__pre_accept</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_POST_INIT</name></expr></argument>, <argument><expr><name>__post_jail_init</name></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
