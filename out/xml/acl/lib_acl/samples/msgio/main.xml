<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/msgio/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
}</block></struct></type> <name>IPC_CTX</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>stop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
}</block></struct></type> <name>IPC</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>IPC</name> <modifier>*</modifier></type><name>ipc</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>local_mio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>local_stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>IPC_CLIENT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MSG_IPC_ACCEPT</name></cpp:macro>	<cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MSG_IPC_STOP</name></cpp:macro>	<cpp:value>101</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>USE_IPC_SYNC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MSGIO</name> <modifier>*</modifier></type><name>__ipc_listener</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>IPC_CLIENT</name> <modifier>*</modifier></type><name>__ipc_clients</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_AIO</name> <modifier>*</modifier></type><name>__aio_listener</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>__ipc_addr</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msg_ipc_stop</name><parameter_list>(<parameter><decl><type><name>int</name> <name>msg_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier><name>mio</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>ACL_MSGIO_INFO</name> <modifier>*</modifier><name>info</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IPC</name> <modifier>*</modifier></type><name>ipc</name> <init>= <expr><operator>(</operator><name>IPC</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ipc</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"close now(%s)\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>msg_ipc_accept</name><parameter_list>(<parameter><decl><type><name>int</name> <name>msg_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier><name>mio</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>ACL_MSGIO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IPC</name> <modifier>*</modifier></type><name>ipc</name> <init>= <expr><operator>(</operator><name>IPC</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IPC_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ipc</name><operator>-&gt;</operator><name>n</name></name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %ld, fd: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ipc</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_IPC_SYNC</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type>  <name>service_sync_loop_read</name><parameter_list>(<parameter><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>vstream</name> <init>= <expr><call><name>acl_msgio_vstream</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>acl_vstream_read</name><argument_list>(<argument><expr><name>vstream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %ld, read error(%s)\n"</literal></expr></argument>,
				<argument><expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %ld, i: %d\n"</literal></expr></argument>, <argument><expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>service_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IPC</name> <modifier>*</modifier></type><name>ipc</name> <init>= <expr><operator>(</operator><name>IPC</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MSGIO</name> <modifier>*</modifier></type><name>mio</name> <init>= <expr><name><name>ipc</name><operator>-&gt;</operator><name>mio</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><call><name>acl_msgio_aio</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

	<expr_stmt><expr><call><name>acl_tcp_set_rcvbuf</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_msgio_vstream</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_IPC_SYNC</name></cpp:ifdef>
	<expr_stmt><expr><call><name>service_sync_loop_read</name><argument_list>(<argument><expr><name>mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ½øÈëÊÂ¼þÑ­»· */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_loop</name><argument_list>(<argument><expr><name>aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ipc</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tid: %ld, stop now, n: %d\n"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ipc</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nthread</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_lib_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__ipc_clients</name> <operator>=</operator> <operator>(</operator><name>IPC_CLIENT</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC_CLIENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_attr_setdetachstate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__aio_listener</name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>ACL_EVENT_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__ipc_listener</name> <operator>=</operator> <call><name>acl_msgio_listen</name><argument_list>(<argument><expr><name>__aio_listener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__ipc_listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msgio_addr</name><argument_list>(<argument><expr><name>__ipc_listener</name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__ipc_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"listening on: %s\n"</literal></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ipc</name> <operator>=</operator> <operator>(</operator><name>IPC</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>ACL_EVENT_SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>mio</name></name> <operator>=</operator> <call><name>acl_msgio_connect</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>__ipc_addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		acl_msgio_set_noblock(__ipc_clients[i].ipc-&gt;aio, __ipc_clients[i].ipc-&gt;mio);
		*/</comment>
		<expr_stmt><expr><call><name>acl_msgio_reg</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>, <argument><expr><name>MSG_IPC_ACCEPT</name></expr></argument>,
			<argument><expr><name>msg_ipc_accept</name></expr></argument>, <argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ipc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msgio_reg</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>, <argument><expr><name>MSG_IPC_STOP</name></expr></argument>,
			<argument><expr><name>msg_ipc_stop</name></expr></argument>, <argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ipc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msgio_reg</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>mio</name></name></expr></argument>, <argument><expr><name>ACL_MSGIO_EXCEPT</name></expr></argument>,
			<argument><expr><name>msg_ipc_stop</name></expr></argument>, <argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ipc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>service_thread</name></expr></argument>, <argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ipc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_mio</name> <operator>=</operator> <call><name>acl_msgio_accept</name><argument_list>(<argument><expr><name>__ipc_listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_stream</name> <operator>=</operator> <call><name>acl_msgio_vstream</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_tcp_set_sndbuf</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_tcp_set_nodelay</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nthread</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nloop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IPC_CTX</name></type> <name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nloop</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_IPC_SYNC</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_vstream_write</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name> <operator>%</operator> <name>nthread</name></expr>]</index></name><operator>.</operator><name>local_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_msgio_send</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name> <operator>%</operator> <name>nthread</name></expr>]</index></name><operator>.</operator><name>local_mio</name></expr></argument>, <argument><expr><name>MSG_IPC_ACCEPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"run(tid=%ld): i=%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msgio_send</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_mio</name></expr></argument>, <argument><expr><name>MSG_IPC_STOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IPC_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ipc</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthread</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msgio_close</name><argument_list>(<argument><expr><name><name>__ipc_clients</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>local_mio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>__ipc_clients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;time cost: %ld\n"</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help] -c nthreads -n nloop\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>nthread</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>nloop</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_stdout_enable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hc:n:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>nloop</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>nthread</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>nthread</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nthread</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>nloop</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nloop</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>run</name><argument_list>(<argument><expr><name>nthread</name></expr></argument>, <argument><expr><name>nloop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
