<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/samples/xml/xml6/xml.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__data1</name> <init>=
  <expr><literal type="string">"&lt;?xml version=\"1.0\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;?xml-stylesheet type=\"text/xsl\"\r\n"</literal>
  <literal type="string">"\thref=\"http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\"?&gt;\r\n"</literal>
  <literal type="string">"\t&lt;!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.1.2//EN\"\r\n"</literal>
  <literal type="string">"\t\"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd\" [\r\n"</literal>
  <literal type="string">"	&lt;!ENTITY xmllint \"&lt;command&gt;xmllint&lt;/command&gt;\"&gt;\r\n"</literal>
  <literal type="string">"]&gt;\r\n"</literal>
  <literal type="string">"&lt;root name='root1' id='root_id_1'&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name='user11\"' value='zsx11' id='id11'&gt; user zsx11 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name='user12' value='zsx12' id='id12'&gt; user zsx12 \r\n"</literal>
  <literal type="string">"    &lt;age year='1972'&gt;my age&lt;/age&gt;\r\n"</literal>
  <literal type="string">"    &lt;other&gt;\r\n"</literal>
  <literal type="string">"      &lt;email name='zsxxsz@263.net'/&gt;"</literal>
  <literal type="string">"      &lt;phone&gt;"</literal>
  <literal type="string">"        &lt;mobile number='111111'&gt; mobile number &lt;/mobile&gt;"</literal>
  <literal type="string">"        &lt;office number='111111'&gt; mobile number &lt;/office&gt;"</literal>
  <literal type="string">"      &lt;/phone&gt;"</literal>
  <literal type="string">"    &lt;/other&gt;"</literal>
  <literal type="string">"  &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name='user13' value='zsx13' id='id13'&gt; user zsx13 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"&lt;/root&gt;\r\n"</literal>
  <literal type="string">"&lt;root name='root2' id='root_id_2'&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name='user21' value='zsx21' id='id21'&gt; user zsx21 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name='user22' value='zsx22' id='id22'&gt; user zsx22 \r\n"</literal>
  <literal type="string">"    &lt;!-- date should be the date of the latest change or the release version --&gt;\r\n"</literal>
  <literal type="string">"    &lt;age year='1972'&gt;my age&lt;/age&gt;\r\n"</literal>
  <literal type="string">"  &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name='user23' value='zsx23' id='id23'&gt; user zsx23 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"&lt;/root&gt;\r\n"</literal>
  <literal type="string">"&lt;root name = 'root3' id = 'root_id_3'&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name = 'user31' value = 'zsx31' id = 'id31'&gt; user zsx31 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name = 'user32' value = 'zsx32' id = 'id32'&gt; user zsx32 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name = 'user33' value = 'zsx33' id = 'id33'&gt; user zsx33 \r\n"</literal>
  <literal type="string">"    &lt;age year = '1978' month = '12' day = '11'&gt; bao bao &lt;/age&gt;\r\n"</literal>
  <literal type="string">"  &lt;/user&gt;\r\n"</literal>
  <literal type="string">"  &lt;!-- still a bit buggy output, will talk to docbook-xsl upstream to fix this --&gt;\r\n"</literal>
  <literal type="string">"  &lt;!-- &lt;releaseinfo&gt;This is release 0.5 of the xmllint Manual.&lt;/releaseinfo&gt; --&gt;\r\n"</literal>
  <literal type="string">"  &lt;!-- &lt;edition&gt;0.5&lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"  &lt;user name = 'user34' value = 'zsx34' id = 'id34'&gt; user zsx34 &lt;/user&gt;\r\n"</literal>
  <literal type="string">"&lt;/root&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__data2</name> <init>=
  <expr><literal type="string">"&lt;?xml version=\"1.0\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;?xml-stylesheet type=\"text/xsl\"\r\n"</literal>
  <literal type="string">"	href=\"http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.1.2//EN\"\r\n"</literal>
  <literal type="string">"  \"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd\" [\r\n"</literal>
  <literal type="string">"  &lt;!ENTITY xmllint \"&lt;command&gt;xmllint&lt;/command&gt;\"&gt;\r\n"</literal>
  <literal type="string">"]&gt;\r\n"</literal>
  <literal type="string">"&lt;root&gt;test\r\n"</literal>
  <literal type="string">"  &lt;!-- &lt;edition&gt; - &lt;!--0.5--&gt; - &lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"  &lt;user&gt;zsx\r\n"</literal>
  <literal type="string">"    &lt;age&gt;38&lt;/age&gt;\r\n"</literal>
  <literal type="string">"  &lt;/user&gt;\r\n"</literal>
  <literal type="string">"&lt;/root&gt;\r\n"</literal>
  <literal type="string">"&lt;!-- &lt;edition&gt;&lt;!-- 0.5 --&gt;&lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"&lt;!-- &lt;edition&gt;0.5&lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"&lt;!-- &lt;edition&gt; -- 0.5 -- &lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"&lt;root name='root' id='root_id'&gt;test&lt;/root&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__data3</name> <init>= \
  <expr><literal type="string">"&lt;root id='tt' &gt;hello &lt;root2&gt; hi &lt;/root2&gt;&lt;/root&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data4</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
  <literal type="string">"  &lt;tags1&gt;\r\n"</literal>
  <literal type="string">"    &lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tags1&gt;\r\n"</literal>
  <literal type="string">"  &lt;tags2&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags21/&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags22/&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags23/&gt;\r\n"</literal>
  <literal type="string">"    &lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tags2&gt;\r\n"</literal>
  <literal type="string">"  &lt;tag3&gt;\r\n"</literal>
  <literal type="string">"    &lt;module name=\"mail_ud_user\"&gt;&lt;/module&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tag3&gt;\r\n"</literal>
  <literal type="string">"  &lt;tag4&gt;\r\n"</literal>
  <literal type="string">"    &lt;module name=\"mail_ud_user\"/&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tag4&gt;\r\n"</literal>
  <literal type="string">"&lt;/request&gt;\r\n"</literal>
  <literal type="string">"&lt;!-- &lt;edition&gt; -- 0.5 -- &lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"&lt;!-- &lt;edition&gt; -- 0.5 -- &lt;/edition&gt; --&gt;\r\n"</literal>
  <literal type="string">"&lt;!-- &lt;edition&gt; -- 0.5 -- &lt;/edition&gt; --&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data5</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
  <literal type="string">"  &lt;tag3&gt;\r\n"</literal>
  <literal type="string">"    &lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tag3&gt;\r\n"</literal>
  <literal type="string">"  &lt;tag4&gt;\r\n"</literal>
  <literal type="string">"    &lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tag4&gt;\r\n"</literal>
  <literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data6</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
  <literal type="string">"  &lt;tags2&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags21&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags22&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags23 /&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags24 /&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags25&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags26/&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags27&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags28/&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags29&gt;\r\n"</literal>
  <literal type="string">"    &lt;tags30&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tags2&gt;\r\n"</literal>
  <literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data7</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
  <literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
  <literal type="string">"  &lt;tags2&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags22&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags23&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags24&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags25/&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags26/&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags27&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags28&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags29/&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags30&gt;\r\n"</literal>
  <literal type="string">"   &lt;tags31&gt;\r\n"</literal>
  <literal type="string">"  &lt;/tags2&gt;\r\n"</literal>
  <literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mmap_addr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>,
		<argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mmap error %s\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ummap_addr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_xml_benchmark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>acl_xml3_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_xml3_slash</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------bat begin--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_xml3_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_xml3_reset</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------bat end--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml3_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------benchmark_max: %d--------------\r\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_xml_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"open %s error %s\r\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>acl_vstream_fsize</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fsize %s error %s\r\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>mmap_addr</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"mmap_addr error %s\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name>acl_xml3_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------begin--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml3_update</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------end--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_xml3_is_complete</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Xml is complete OK, filepath: %s\r\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Xml is not complete, filepath: %s\r\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>acl_xml3_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ummap_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walk_xml</name><parameter_list>(<parameter><decl><type><name>ACL_XML3</name><modifier>*</modifier></type> <name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter1</name></decl>;</decl_stmt>

	<comment type="block">/* ´Ó¸ù½áµã¿ªÊ¼±éÀú xml ¶ÔÏóµÄËùÓÐ½áµã */</comment>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- walk_xml -----------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>xml</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML3_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag-&gt;%s, size: %ld\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>ltag_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ltag_size invalid\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ±éÀú xml ½áµãµÄÊôÐÔ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter2</argument>, <argument>node-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML3_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML3_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter2</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"attr-&gt;%s=\"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"text-&gt;%s, size: %ld\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>text_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- walk_xml end -------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_node_attrs</name><parameter_list>(<parameter><decl><type><name>ACL_XML3_NODE</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>node-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML3_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML3_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"attr-&gt;&lt;%s&gt;(size=%ld)=\"&lt;%s&gt;(size=%ld)\"\n"</literal></expr></argument>,
			<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name></expr></argument>,
			<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>name_size</name></name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): name_size invalid\r\n"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>value_size</name></name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): value_size invaid\r\n"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walk_xml_node</name><parameter_list>(<parameter><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<comment type="block">/* ±éÀú½áµãµÄ×Ó½áµã */</comment>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><operator>(</operator><name>ACL_XML3_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag-&gt;%s, size: %ld, %ld\n"</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>child</name><operator>-&gt;</operator><name>ltag_size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>ltag_size</name></name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ltag_size invalid\r\n"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>xml_node_attrs</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"text-&gt;%s, size: %ld, %ld\n"</literal></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>text</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>child</name><operator>-&gt;</operator><name>text_size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>text_size</name></name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>child</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): text_size invalid\r\n"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>walk_xml_node</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list_xml_tags</name><parameter_list>(<parameter><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- list xml's all tags --------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>xml</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML3_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;tag: %s\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- list xml's all tags end ----------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_getElementsByTagName</name><parameter_list>(<parameter><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- acl_xml3_getElementsByTagName ------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_xml3_getElementsByTagName</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ±éÀú½á¹û¼¯ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>a</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML3_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag-&gt;%s, text: %s\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>xml_node_attrs</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>walk_xml_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<comment type="block">/* ÊÍ·ÅÊý×é¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>acl_xml3_free_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; not exist, tag: %s\r\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- acl_xml3_getElementsByTagName end --------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>test_getElementById</name><parameter_list>(<parameter><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_xml3_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------- acl_xml3_getElementById ---------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;id: %s not found\r\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag-&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ±éÀú¸Ã xml ½áµãµÄÊôÐÔ */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>node-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML3_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML3_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr_name: %s, attr_value: %s\n"</literal></expr></argument>,
			<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------- the id2_2's next node is ------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_xml3_node_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- walk node ----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ±éÀú¸Ã xml ½áµãµÄÊôÐÔ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>node-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML3_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML3_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr_name: %s, attr_value: %s\n"</literal></expr></argument>,
				<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- null node ----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_XML3</name> <modifier>*</modifier></type><name>get_xml</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>multi_root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------------- xml data ------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{%s}\r\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------------- xml data end --------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name>acl_xml3_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml3_multi_root</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>multi_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml3_slash</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ò»´ÎÐÔµØ·ÖÎöÍêÕû xml Êý¾Ý */</comment>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------parse begin--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>acl_xml3_update</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------parse end----------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---------------- left data ----------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{%s}\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>left</name></expr> ?</condition><then> <expr><name>left</name></expr> </then><else>: <expr><literal type="string">"empty"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---------------- left data end ------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_xml3_is_complete</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt; Yes, the xml complete\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt; No, the xml not complete, root tag: %s\n"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>xml</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_xml</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>multi_root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>get_xml</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>multi_root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr></init></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

	<comment type="block">/* ±éÀúËùÓÐ xml ½Úµã */</comment>
	<expr_stmt><expr><call><name>walk_xml</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* µÝ¹é±éÀú root ½ÚµãµÄËùÓÐ×Ó½Úµã */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------------- walk root node -------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>walk_xml_node</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------------- walk root node end ---------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¸ù¾Ý±êÇ©Ãû»ñµÃ xml ½áµã¼¯ºÏ */</comment>

	<comment type="block">/* ²éÑ¯ÊôÐÔÃûÎª name, ÊôÐÔÖµÎª user µÄËùÓÐ xml ½áµãµÄ¼¯ºÏ */</comment>
	<expr_stmt><expr><call><name>test_getElementsByTagName</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ²éÑ¯ÊôÐÔÃûÎª name, ÊôÐÔÖµÎª user2_1 µÄËùÓÐ xml ½áµãµÄ¼¯ºÏ */</comment>
	<expr_stmt><expr><call><name>test_getElementsByTagName</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user2_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ²éÑ¯ÊôÐÔÃûÎª id, ÊôÐÔÖµÎª id2_2 µÄËùÓÐ xml ½áµã¼¯ºÏ */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>test_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"id2_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ²éÑ¯ÊôÐÔÃûÎª id, ÊôÐÔÖµÎª id2_3 µÄËùÓÐ xml ½áµã¼¯ºÏ */</comment>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>test_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"id2_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>ndel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>node_cnt</name></decl>;</decl_stmt>

		<comment type="block">/* É¾³ý¸Ã½áµã¼°Æä×Ó½áµã */</comment>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;before delete %s, total: %d\n"</literal></expr></argument>,
			<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ndel</name> <operator>=</operator> <call><name>acl_xml3_node_delete</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node_cnt</name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;after delete id2_3(%d deleted), total: %d\n"</literal></expr></argument>,
			<argument><expr><name>ndel</name></expr></argument>, <argument><expr><name>node_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>test_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"id2_3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>list_xml_tags</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÊÍ·Å xml ¶ÔÏó */</comment>
	<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>acl_xml3_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Free all node ok, total(%d), left is: %d\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;?xml-stylesheet type=\"text/xsl\"\r\n"</literal>
	<literal type="string">"\thref=\"http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.1.2//EN\"\r\n"</literal>
	<literal type="string">"\t\"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd\" [\r\n"</literal>
	<literal type="string">"	&lt;!ENTITY xmllint \"&lt;command&gt;xmllint&lt;/command&gt;\"&gt;\r\n"</literal>
	<literal type="string">"]&gt;\r\n"</literal>
	<literal type="string">"&lt;root name1 = \"value1\" name2 = \"val\\ue2\" name3 = \"v\\al'ue3\"&gt;hello world!&lt;/root&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML3_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>href</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name>acl_xml3_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---------------- xml data ----------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---------------- xml data end ------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_xml3_update</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------- walk_xml_node ------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>walk_xml_node</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------- walk_xml_node end --------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------------- lookup meta data -------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>acl_xml3_getEncoding</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>acl_xml3_getType</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_xml3_getElementMeta</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"xml-stylesheet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>href</name> <operator>=</operator> <call><name>acl_xml3_getElementAttrVal</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>href</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xml encoding: %s\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>encoding</name></expr> ?</condition><then> <expr><name>encoding</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xml type: %s\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><name>type</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xml href: %s\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>href</name></expr> ?</condition><then> <expr><name>href</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------------- lookup meta data end ---------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_getElementsByTagName</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_xml3_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h[help]\r\n"</literal>
		<literal type="string">" -b benchmark_max\r\n"</literal>
		<literal type="string">" -P [if parse one xml]\r\n"</literal>
		<literal type="string">" -f xml_file\r\n"</literal>
		<literal type="string">" -m[if enable  multiple root xml node, default: no]\r\n"</literal>
		<literal type="string">" -p[print] data1|data2|data3|data4|data5|data6|data7\r\n"</literal>
		<literal type="string">" -d[parse] data1|data2|data3|data4|data5|data6|data7\r\n"</literal></expr></argument>,
		<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>, <decl><type ref="prev"/><name>multi_root</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>benchmark_max</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>parse_one</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>__data1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><literal type="string">"root"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>filepath</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>filepath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>test1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hp:d:mb:f:P"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'m'</literal></expr>:</case>
			<expr_stmt><expr><name>multi_root</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<expr_stmt><expr><name>benchmark_max</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'P'</literal></expr>:</case>
			<expr_stmt><expr><name>parse_one</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data2</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"root"</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data3</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"root"</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data4</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"request"</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data5</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"request"</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data6</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"request"</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data7"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data7</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>root</name> <operator>=</operator> <literal type="string">"request"</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data7"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>benchmark_max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>parse_xml_benchmark</name><argument_list>(<argument><expr><name>benchmark_max</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>parse_one</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>parse_xml</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>multi_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>filepath</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>parse_xml_file</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ok, enter any key to exit ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
