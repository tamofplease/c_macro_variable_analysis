<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/xml/xml1/xml.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__data1</name> <init>=
	<expr><literal type="string">"&lt;?xml version=\"1.0\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;?xml-stylesheet type=\"text/xsl\"\r\n"</literal>
	<literal type="string">"\thref=\"http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\"?&gt;\r\n"</literal>
	<literal type="string">"\t&lt;!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.1.2//EN\"\r\n"</literal>
	<literal type="string">"\t\"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd\" [\r\n"</literal>
	<literal type="string">"	&lt;!ENTITY xmllint \"&lt;command&gt;xmllint&lt;/command&gt;\"&gt;\r\n"</literal>
	<literal type="string">"]&gt;\r\n"</literal>
	<literal type="string">"&lt;root name='root1' id='root_id_1'&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name='user11\"' value='zsx11' id='id11'&gt; user zsx11 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name='user12' value='zsx12' id='id12'&gt; user zsx12 \r\n"</literal>
	<literal type="string">"		&lt;age year='1972'&gt;my age&lt;/age&gt;\r\n"</literal>
	<literal type="string">"		&lt;other&gt;&lt;email name='zsxxsz@263.net'/&gt;"</literal>
	<literal type="string">"			&lt;phone&gt;"</literal>
	<literal type="string">"				&lt;mobile number='111111'&gt; mobile number &lt;/mobile&gt;"</literal>
	<literal type="string">"				&lt;office number='111111'&gt; mobile number &lt;/office&gt;"</literal>
	<literal type="string">"			&lt;/phone&gt;"</literal>
	<literal type="string">"		&lt;/other&gt;"</literal>
	<literal type="string">"	&lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name='user13' value='zsx13' id='id13'&gt; user zsx13 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"&lt;/root&gt;\r\n"</literal>
	<literal type="string">"&lt;root name='root2' id='root_id_2'&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name='user21' value='zsx21' id='id21'&gt; user zsx21 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name='user22' value='zsx22' id='id22'&gt; user zsx22 \r\n"</literal>
	<literal type="string">"		&lt;!-- date should be the date of the latest change or the release version --&gt;\r\n"</literal>
	<literal type="string">"		&lt;age year='1972'&gt;my age&lt;/age&gt;\r\n"</literal>
	<literal type="string">"	&lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name='user23' value='zsx23' id='id23'&gt; user zsx23 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"&lt;/root&gt;\r\n"</literal>
	<literal type="string">"&lt;root name = 'root3' id = 'root_id_3'&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name = 'user31' value = 'zsx31' id = 'id31'&gt; user zsx31 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name = 'user32' value = 'zsx32' id = 'id32'&gt; user zsx32 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name = 'user33' value = 'zsx33' id = 'id33'&gt; user zsx33 \r\n"</literal>
	<literal type="string">"		&lt;age year = '1978' month = '12' day = '11'&gt; bao bao &lt;/age&gt;\r\n"</literal>
	<literal type="string">"	&lt;/user&gt;\r\n"</literal>
	<literal type="string">"	&lt;!-- still a bit buggy output, will talk to docbook-xsl upstream to fix this --&gt;\r\n"</literal>
	<literal type="string">"	&lt;!-- &lt;releaseinfo&gt;This is release 0.5 of the xmllint Manual.&lt;/releaseinfo&gt; --&gt;\r\n"</literal>
	<literal type="string">"	&lt;!-- &lt;edition&gt;0.5&lt;/edition&gt; --&gt;\r\n"</literal>
	<literal type="string">"	&lt;user name = 'user34' value = 'zsx34' id = 'id34'&gt; user zsx34 &lt;/user&gt;\r\n"</literal>
	<literal type="string">"&lt;/root&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__data2</name> <init>=
	<expr><literal type="string">"&lt;?xml version=\"1.0\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;?xml-stylesheet type=\"text/xsl\"\r\n"</literal>
	<literal type="string">"	href=\"http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.1.2//EN\"\r\n"</literal>
	<literal type="string">"	\"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd\" [\r\n"</literal>
	<literal type="string">"	&lt;!ENTITY xmllint \"&lt;command&gt;xmllint&lt;/command&gt;\"&gt;\r\n"</literal>
	<literal type="string">"]&gt;\r\n"</literal>
	<literal type="string">"&lt;root&gt;test\r\n"</literal>
	<literal type="string">"	&lt;!-- &lt;edition&gt; - &lt;!--0.5--&gt; - &lt;/edition&gt; --&gt;\r\n"</literal>
	<literal type="string">"	&lt;user&gt;zsx\r\n"</literal>
	<literal type="string">"		&lt;age&gt;38&lt;/age&gt;\r\n"</literal>
	<literal type="string">"	&lt;/user&gt;\r\n"</literal>
	<literal type="string">"&lt;/root&gt;\r\n"</literal>
	<literal type="string">"&lt;!-- &lt;edition&gt;&lt;!-- 0.5 --&gt;&lt;/edition&gt; --&gt;\r\n"</literal>
	<literal type="string">"&lt;!-- &lt;edition&gt;0.5&lt;/edition&gt; --&gt;\r\n"</literal>
	<literal type="string">"&lt;!-- &lt;edition&gt; -- 0.5 -- &lt;/edition&gt; --&gt;\r\n"</literal>
	<literal type="string">"&lt;root name='root' id='root_id'&gt;test&lt;/root&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__data3</name> <init>= <expr><literal type="string">"&lt;root id='tt' &gt;hello &lt;root2&gt; hi &lt;/root2&gt;&lt;/root&gt;&lt;br/&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data4</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
	<literal type="string">"	&lt;tags1&gt;\r\n"</literal>
	<literal type="string">"		&lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tags1&gt;\r\n"</literal>
	<literal type="string">"	&lt;tags2&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags21&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags22&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags23&gt;\r\n"</literal>
	<literal type="string">"		&lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tags2&gt;\r\n"</literal>
	<literal type="string">"	&lt;tag3&gt;\r\n"</literal>
	<literal type="string">"		&lt;module name=\"mail_ud_user\"&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tag3&gt;\r\n"</literal>
	<literal type="string">"	&lt;tag4&gt;\r\n"</literal>
	<literal type="string">"		&lt;module name=\"mail_ud_user\"&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tag4&gt;\r\n"</literal>
	<literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data5</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
	<literal type="string">"	&lt;tag3&gt;\r\n"</literal>
	<literal type="string">"		&lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tag3&gt;\r\n"</literal>
	<literal type="string">"	&lt;tag4&gt;\r\n"</literal>
	<literal type="string">"		&lt;module name=\"mail_ud_user\" /&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tag4&gt;\r\n"</literal>
	<literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data6</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
	<literal type="string">"	&lt;tags2&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags21&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags22&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags23 /&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags24 /&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags25&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags26/&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags27&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags28/&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags29&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags30&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tags2&gt;\r\n"</literal>
	<literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>__data7</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;request action=\"get_location\" sid=\"YOU_CAN_GEN_SID\" user=\"admin@test.com\"&gt;\r\n"</literal>
	<literal type="string">"	&lt;tags2&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags22&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags23&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags24&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags25/&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags26/&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags27&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags28&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags29/&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags30&gt;\r\n"</literal>
	<literal type="string">"		&lt;tags31&gt;\r\n"</literal>
	<literal type="string">"	&lt;/tags2&gt;\r\n"</literal>
	<literal type="string">"&lt;/request&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_xml_benchmark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>once</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>acl_xml_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_xml_slash</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------bat begin--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_xml_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* Ã¿´Î½öÊäÈëÒ»¸ö×Ö½ÚÀ´·ÖÎö xml Êý¾Ý */</comment>
			<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type>  <name><name>ch2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>ch2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ch2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_xml_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- dump xml --------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_xml_dump</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- data src --------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- dump end --------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>


		<expr_stmt><expr><call><name>acl_xml_reset</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------bat end--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_xml</name><parameter_list>(<parameter><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_xml_build</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>acl_fopen</name><argument_list>(<argument><expr><literal type="string">"./build_xml.txt"</literal></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------in build_xml -------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fwrite</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------end in build_xml----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_xml</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>once</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>acl_xml_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>total</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>pnode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ò»´ÎÐÔµØ·ÖÎöÍêÕû xml Êý¾Ý */</comment>
		<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------once begin--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_xml_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Ã¿´Î½öÊäÈëÒ»¸ö×Ö½ÚÀ´·ÖÎö xml Êý¾Ý */</comment>
		<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------stream begin--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>  <name><name>ch2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>ch2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ch2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_xml_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-------------end--------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"enter any key to continue ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_xml_is_complete</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt; Yes, the xml complete\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt; No, the xml not complete\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>total</name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>

	<comment type="block">/* ±éÀú¸ù½áµãµÄÒ»¼¶×Ó½áµã */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>xml-&gt;root</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter2</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ±éÀúÒ»¼¶×Ó½áµãµÄ¶þ¼¶×Ó½áµã */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter2</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter3</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node2</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter2</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\ttag&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node2</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node2</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ±éÀú¶þ¼¶×Ó½áµãµÄÊôÐÔ */</comment>
			<macro><name>acl_foreach</name><argument_list>(<argument>iter3</argument>, <argument>node2-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
				<decl_stmt><decl><type><name>ACL_XML_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter3</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\tattr&gt; %s: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´Ó¸ù½áµã¿ªÊ¼±éÀú xml ¶ÔÏóµÄËùÓÐ½áµã */</comment>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>xml</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ±éÀú xml ½áµãµÄÊôÐÔ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter2</argument>, <argument>node-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter2</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>depth</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr&gt; %s: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block>

	<comment type="block">/* ¸ù¾Ý±êÇ©Ãû»ñµÃ xml ½áµã¼¯ºÏ */</comment>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- acl_xml_getElementsByTagName ----------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_xml_getElementsByTagName</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ±éÀú½á¹û¼¯ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>a</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<comment type="block">/* ÊÍ·ÅÊý×é¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>acl_xml_free_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<comment type="block">/* ²éÑ¯ÊôÐÔÃûÎª name, ÊôÐÔÖµÎª user2_1 µÄËùÓÐ xml ½áµãµÄ¼¯ºÏ */</comment>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------- acl_xml_getElementsByName ------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_xml_getElementsByName</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user2_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ±éÀú½á¹û¼¯ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>a</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<comment type="block">/* ÊÍ·ÅÊý×é¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>acl_xml_free_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ²éÑ¯ÊôÐÔÃûÎª id, ÊôÐÔÖµÎª id2_2 µÄËùÓÐ xml ½áµã¼¯ºÏ */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------- acl_xml_getElementById -------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pnode</name> <operator>=</operator> <call><name>acl_xml_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"id2_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pnode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag&gt; %s, text: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pnode</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pnode</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ±éÀú¸Ã xml ½áµãµÄÊôÐÔ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>pnode-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr_name: %s, attr_value: %s\n"</literal></expr></argument>,
				<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>pnode</name> <operator>=</operator> <call><name>acl_xml_node_next</name><argument_list>(<argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------------- the id2_2's next node is ---------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pnode</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- walk node -------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* ±éÀú¸Ã xml ½áµãµÄÊôÐÔ */</comment>
			<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>pnode-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
				<decl_stmt><decl><type><name>ACL_XML_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr_name: %s, attr_value: %s\n"</literal></expr></argument>,
						<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- null node -------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pnode</name> <operator>=</operator> <call><name>acl_xml_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"id12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pnode</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>ndel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>node_cnt</name></decl>;</decl_stmt>

		<comment type="block">/* É¾³ý¸Ã½áµã¼°Æä×Ó½áµã */</comment>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;before delete %s, total: %d\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pnode</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ndel</name> <operator>=</operator> <call><name>acl_xml_node_delete</name><argument_list>(<argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node_cnt</name> <operator>=</operator> <name><name>xml</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;after delete id12(%d deleted), total: %d\n"</literal></expr></argument>, <argument><expr><name>ndel</name></expr></argument>, <argument><expr><name>node_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter any key to continue ...\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>xml</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;tag: %s\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>pnode</name> <operator>=</operator> <call><name>acl_xml_getElementById</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"id12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pnode</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------------- walk %s node -------------------\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>pnode</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ±éÀú¸Ã xml ½áµãµÄÊôÐÔ */</comment>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter1</argument>, <argument>pnode-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML_ATTR</name><operator>*</operator><operator>)</operator> <name><name>iter1</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr_name: %s, attr_value: %s\n"</literal></expr></argument>,
					<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---- the id12 be deleted----\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>build_xml</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÊÍ·Å xml ¶ÔÏó */</comment>
	<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"free all node ok, total(%d), left is: %d\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_xml_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>acl_vstream_loadfile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>  <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨ xml ¶ÔÏó */</comment>
	<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name>acl_xml_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>once</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ò»´ÎÐÔµØ·ÖÎöÍêÕû xml Êý¾Ý */</comment>
		<expr_stmt><expr><call><name>acl_xml_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Ã¿´Î½öÊäÈëÒ»¸ö×Ö½ÚÀ´·ÖÎö xml Êý¾Ý */</comment>
		<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>  <name><name>ch2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>ch2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ch2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_xml_parse</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------ok, time: %ld seconds, %ld microseconds -------\r\n"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>end</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>begin</name><operator>.</operator><name>tv_sec</name></name></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>end</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>begin</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><literal type="string">"dump.txt"</literal></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½« xml ¶ÔÏó×ª´¢ÖÁÖ¸¶¨Á÷ÖÐ */</comment>
	<expr_stmt><expr><call><name>acl_xml_dump</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_xml2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>acl_xml_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node1</name> <operator>=</operator> <call><name>acl_xml_create_node</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="string">"text1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_child</name><argument_list>(<argument><expr><name><name>xml</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>node1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_xml_node_add_attr</name><argument_list>(<argument><expr><name>node1</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"users list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node2</name> <operator>=</operator> <call><name>acl_xml_create_node</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"text11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_child</name><argument_list>(<argument><expr><name>node1</name></expr></argument>, <argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_attrs</name><argument_list>(<argument><expr><name>node2</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"user11"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="string">"zsx11"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node3</name> <operator>=</operator> <call><name>acl_xml_create_node</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"age"</literal></expr></argument>, <argument><expr><literal type="string">"text111"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_child</name><argument_list>(<argument><expr><name>node2</name></expr></argument>, <argument><expr><name>node3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_attrs</name><argument_list>(<argument><expr><name>node3</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"user111"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="string">"zsx111"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node2</name> <operator>=</operator> <call><name>acl_xml_create_node</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"text2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_child</name><argument_list>(<argument><expr><name>node1</name></expr></argument>, <argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_attrs</name><argument_list>(<argument><expr><name>node2</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"value2"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="string">"zsx2"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>node2</name> <operator>=</operator> <call><name>acl_xml_create_node</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><literal type="string">"text3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_child</name><argument_list>(<argument><expr><name>node1</name></expr></argument>, <argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_node_add_attrs</name><argument_list>(<argument><expr><name>node2</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"value3"</literal></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><literal type="string">"zsx3"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_xml_build</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--------------------xml string-------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"gb2312\"?&gt;\r\n"</literal>
	<literal type="string">"&lt;?xml-stylesheet type=\"text/xsl\"\r\n"</literal>
	<literal type="string">"\thref=\"http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl\"?&gt;\r\n"</literal>
	<literal type="string">"\t&lt;!DOCTYPE refentry PUBLIC \"-//OASIS//DTD DocBook XML V4.1.2//EN\"\r\n"</literal>
	<literal type="string">"\t\"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd\" [\r\n"</literal>
	<literal type="string">"	&lt;!ENTITY xmllint \"&lt;command&gt;xmllint&lt;/command&gt;\"&gt;\r\n"</literal>
	<literal type="string">"]&gt;\r\n"</literal>
	<literal type="string">"&lt;root name1 = \"\\\"value1\\\"\" name2 = \"val\\ue2\" name3 = \"v\\al'u\'e3\" /&gt;\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML</name> <modifier>*</modifier></type><name>xml</name> <init>= <expr><call><name>acl_xml_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>node_it</name></decl>, <decl><type ref="prev"/><name>attr_it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>type</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>href</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"data: %s\r\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_update</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>node_it</argument>, <argument>xml</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_XML_NODE</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>ACL_XML_NODE</name><operator>*</operator><operator>)</operator> <name><name>node_it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tag: %s\r\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>acl_foreach</name><argument_list>(<argument>attr_it</argument>, <argument>tmp-&gt;attr_list</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_XML_ATTR</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>(</operator><name>ACL_XML_ATTR</name><operator>*</operator><operator>)</operator> <name><name>attr_it</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tattr_name: %s, attr_value: %s\r\n"</literal></expr></argument>,
				<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------------------------------------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>acl_xml_getEncoding</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>acl_xml_getType</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_xml_getElementMeta</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><literal type="string">"xml-stylesheet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>href</name> <operator>=</operator> <call><name>acl_xml_getElementAttrVal</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>href</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"xml encoding: %s, type: %s, href: %s\r\n"</literal></expr></argument>,
		<argument><expr><ternary><condition><expr><name>encoding</name></expr> ?</condition><then> <expr><name>encoding</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><name>type</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
		<argument><expr><ternary><condition><expr><name>href</name></expr> ?</condition><then> <expr><name>href</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_xml_free</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h[help]"</literal>
		<literal type="string">" -f {xml_file}\n"</literal>
		<literal type="string">" -s[parse once]\n"</literal>
		<literal type="string">" -M[use mempool]\n"</literal>
		<literal type="string">" -b[benchmark] -m benchmark_max\n"</literal>
		<literal type="string">" -p[print] data1|data2|data3|data4|data5|data6|data7\n"</literal>
		<literal type="string">" -d[which data] data1|data2|data3|data4|data5|data6|data7\n"</literal></expr></argument>,
		<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>, <decl><type ref="prev"/><name>once</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bench_max</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>filepath</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>benchmark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>use_mempool</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>__data1</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>test1</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"xmlcatalog_man.xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hf:sbm:Mp:d:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name>once</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<expr_stmt><expr><name>benchmark</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'M'</literal></expr>:</case>
			<expr_stmt><expr><name>use_mempool</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'m'</literal></expr>:</case>
			<expr_stmt><expr><name>bench_max</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data2</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data3</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data4</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data5</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data6</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data7"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>data</name> <operator>=</operator> <name>__data7</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data6"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"data7"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>use_mempool</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_mem_slice_init</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>,
				<argument><expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator>
				<name>ACL_SLICE_FLAG_RTGC_OFF</name> <operator>|</operator>
				<name>ACL_SLICE_FLAG_LP64_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>benchmark</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>parse_xml_benchmark</name><argument_list>(<argument><expr><name>once</name></expr></argument>, <argument><expr><name>bench_max</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>parse_xml</name><argument_list>(<argument><expr><name>once</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>parse_xml_file</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>build_xml2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ok, enter any key to exit ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
