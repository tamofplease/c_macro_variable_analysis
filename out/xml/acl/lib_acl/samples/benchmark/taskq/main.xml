<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/benchmark/taskq/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../stamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taskq.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>__counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__max</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>consumer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">//int *o = (int*) ctx;</comment>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name> <init>= <expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name>__counter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"thread: %ld, n=%lld\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="line">//free(o);</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>producer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TASKQ</name> <modifier>*</modifier></type><name>taskq</name> <init>= <expr><operator>(</operator><name>TASKQ</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>__max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="line">//int *o = (int*) malloc(sizeof(int));</comment>
		<comment type="line">//*o = i;</comment>
		<expr_stmt><expr><call><name>taskq_push</name><argument_list>(<argument><expr><name>taskq</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help]\r\n"</literal>
		<literal type="string">" -q qsize[default: 10]\r\n"</literal>
		<literal type="string">" -c nconsumers[default: 20]\r\n"</literal>
		<literal type="string">" -p nproducers[default: 5]\r\n"</literal>
		<literal type="string">" -n max_loop_per_thread[default: 10000]\r\n"</literal></expr></argument>
		, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>qsize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>nconsumers</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, <decl><type ref="prev"/><name>nproducers</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TASKQ</name><modifier>*</modifier></type> <name>taskq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name> <modifier>*</modifier></type><name>producers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>spent</name></decl>, <decl><type ref="prev"/><name>speed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hq:c:p:n:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		<case>case <expr><literal type="char">'q'</literal></expr>:</case>
			<expr_stmt><expr><name>qsize</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>nconsumers</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<expr_stmt><expr><name>nproducers</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>__max</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><name>taskq</name>     <operator>=</operator> <call><name>taskq_create</name><argument_list>(<argument><expr><name>qsize</name></expr></argument>, <argument><expr><name>nconsumers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>producers</name> <operator>=</operator> <operator>(</operator><name>acl_pthread_t</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>nproducers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__counter</name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name>__counter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_int64_set</name><argument_list>(<argument><expr><name>__counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproducers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>producers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>producer</name></expr></argument>, <argument><expr><name>taskq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nproducers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name><name>producers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>counter</name> <operator>=</operator> <name>nproducers</name> <operator>*</operator> <name>__max</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>counter</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>spent</name> <operator>=</operator> <call><name>stamp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>speed</name> <operator>=</operator> <operator>(</operator><name>counter</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>spent</name> <operator>&gt;=</operator> <literal type="number">1.0</literal></expr> ?</condition><then> <expr><name>spent</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"counter=%lld, loop=%lld, spent %.2f ms ,speed=%.2f\r\n"</literal></expr></argument>,
		<argument><expr><name>value</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>spent</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name>__counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>taskq_destroy</name><argument_list>(<argument><expr><name>taskq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>producers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
