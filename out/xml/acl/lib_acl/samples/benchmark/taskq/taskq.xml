<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/benchmark/taskq/taskq.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;semaphore.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taskq.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TASK</name> <block>{
	<function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>TASK</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TASKQ</name> <block>{
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TASK</name>    <modifier>*</modifier></type><name>tasks</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>qsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>slot_empty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>slot_full</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nthreads</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_t</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>path_empty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>path_full</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>sem_t</name> <modifier>*</modifier></type><name>sem_empty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sem_t</name> <modifier>*</modifier></type><name>sem_full</name></decl>;</decl_stmt>
}</block></struct></type> <name>TASKQ</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taskq_pop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>TASKQ</name> <modifier>*</modifier></type><name>taskq_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>qsize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nthreads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TASKQ</name> <modifier>*</modifier></type><name>taskq</name> <init>= <expr><operator>(</operator><name>TASKQ</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TASKQ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><literal type="string">"/tmp"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>qsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nthreads</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>tasks</name></name>    <operator>=</operator> <operator>(</operator><name>TASK</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>qsize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TASK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>qsize</name></name>    <operator>=</operator> <name>qsize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>nthreads</name></name> <operator>=</operator> <name>nthreads</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>threads</name></name>  <operator>=</operator> <operator>(</operator><name>acl_pthread_t</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>acl_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_empty</name></name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>, <argument><expr><literal type="string">"sem_empty"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name> <operator>=</operator> <call><name>sem_open</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_empty</name></name></expr></argument>, <argument><expr><name>O_CREAT</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>, <argument><expr><name>qsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name> <operator>!=</operator> <name>SEM_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name> <operator>=</operator> <operator>(</operator><name>sem_t</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sem_init</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_full</name></name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>, <argument><expr><literal type="string">"sem_full"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name> <operator>=</operator> <call><name>sem_open</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_full</name></name></expr></argument>, <argument><expr><name>O_CREAT</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name> <operator>!=</operator> <name>SEM_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name> <operator>=</operator> <operator>(</operator><name>sem_t</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sem_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sem_init</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_empty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_full</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>taskq_pop</name></expr></argument>, <argument><expr><name>taskq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>taskq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taskq_destroy</name><parameter_list>(<parameter><decl><type><name>TASKQ</name> <modifier>*</modifier></type><name>taskq</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>taskq</name><operator>-&gt;</operator><name>nthreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pthread_cancel</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_join</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>sem_close</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sem_close</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>sem_unlink</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_empty</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sem_unlink %s error %s\r\n"</literal></expr></argument>, <argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_empty</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>sem_unlink</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_full</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sem_unlink %s error %s\r\n"</literal></expr></argument>, <argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_full</name></name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>path_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sem_destroy</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>sem_destroy</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>tasks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>taskq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>taskq_pop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TASKQ</name> <modifier>*</modifier></type><name>taskq</name> <init>= <expr><operator>(</operator><name>TASKQ</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TASK</name></type>   <name>task</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sem_wait</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sem_wait error %s\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>task</name> <operator>=</operator> <name><name>taskq</name><operator>-&gt;</operator><name>tasks</name><index>[<expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_full</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>tasks</name><index>[<expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_full</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TASK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_full</name></name> <operator>=</operator> <operator>(</operator><name><name>taskq</name><operator>-&gt;</operator><name>slot_full</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>taskq</name><operator>-&gt;</operator><name>qsize</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sem_post</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></while>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taskq_push</name><parameter_list>(<parameter><decl><type><name>TASKQ</name> <modifier>*</modifier></type><name>taskq</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sem_wait</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_empty</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>tasks</name><index>[<expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_empty</name></name></expr>]</index></name><operator>.</operator><name>callback</name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>tasks</name><index>[<expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_empty</name></name></expr>]</index></name><operator>.</operator><name>ctx</name>      <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskq</name><operator>-&gt;</operator><name>slot_empty</name></name> <operator>=</operator> <operator>(</operator><name><name>taskq</name><operator>-&gt;</operator><name>slot_empty</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>taskq</name><operator>-&gt;</operator><name>qsize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskq</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sem_post</name><argument_list>(<argument><expr><name><name>taskq</name><operator>-&gt;</operator><name>sem_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
