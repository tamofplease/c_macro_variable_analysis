<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/aio/server/echo_server.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"echo_server.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>USE_GETS</name></cpp:macro></cpp:define>

<comment type="block">/* forward functions */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__dlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__echo_src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__line_length</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__read_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_write_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info2</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>default_fflush_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__write_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>default_write_fn</name></expr></init>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__write_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__fflush_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <init>= <expr><name>default_fflush_fn</name></expr></init>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__fflush_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>echo_server_log_fn</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>write_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
			<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>write_arg</name></decl></parameter>,
			<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fflush_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
			<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>fflush_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>write_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__write_fn</name> <operator>=</operator> <name>write_fn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__write_arg</name> <operator>=</operator> <name>write_arg</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fflush_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__fflush_fn</name> <operator>=</operator> <name>fflush_fn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__fflush_arg</name> <operator>=</operator> <name>fflush_arg</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__io_close</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__io_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>__write_fn</name><argument_list>(<argument><expr><name>__write_arg</name></expr></argument>, <argument><expr><literal type="string">"%s, %s(%d): client(%d) exception!"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__io_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__io_timeout"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>__write_fn</name><argument_list>(<argument><expr><name>__write_arg</name></expr></argument>, <argument><expr><literal type="string">"%s, %s(%d): client(%d) timeout!"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>__write_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>data</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>dlen</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_GETS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_aio_gets</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_GETS</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__n</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;gets: [%s]\r\n"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>__echo_src</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>__data</name></expr></argument>, <argument><expr><name>__dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__accept_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"connect from %s\r\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"can't get client addr %s\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>__read_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>__write_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>__io_close</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>__io_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_LINE_LENGTH</name></expr></argument>, <argument><expr><name>__line_length</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_GETS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_aio_gets</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__listen_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>cstream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><operator>(</operator><name>ACL_AIO</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>cstream</name> <operator>=</operator> <call><name>acl_vstream_accept</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"connect from %s\r\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"can't get client addr %s\r\n"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>cstream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>client</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>__read_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>__write_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>__io_close</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>__io_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_LINE_LENGTH</name></expr></argument>, <argument><expr><name>__line_length</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_GETS</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_aio_gets</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>echo_server_start</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>accept_auto</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"echo_start"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>h_aio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>event_mode</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_SELECT</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------- use select --------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_KERNEL</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------- use kernel --------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_POLL</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------- use  poll  --------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>h_aio</name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_set_keep_read</name><argument_list>(<argument><expr><name>h_aio</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>h_aio</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): acl_aio_create error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>astream</name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name>h_aio</name></expr></argument>, <argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>accept_auto</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_LISTEN_FN</name></expr></argument>, <argument><expr><name>__listen_callback</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>h_aio</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_listen</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>ACL_AIO_CTL_ACCEPT_FN</name></expr></argument>, <argument><expr><name>__accept_callback</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CTX</name></expr></argument>, <argument><expr><name>h_aio</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_accept</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>h_aio</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>echo_server_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>echo_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__dlen</name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__echo_src</name> <operator>=</operator> <name>echo_src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__line_length</name> <operator>=</operator> <name>line_length</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
