<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/samples/aio/client/echo_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"echo_client.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ECHO_COUNTER</name><block>{
	<decl_stmt><decl><type><name>int</name></type>   <name>nloop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>max_loop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>ECHO_COUNTER</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__nread</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__nwrite</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__nconnect_ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__nconn</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_AIO</name> <modifier>*</modifier></type><name>__aio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__server_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__max_connect</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__max_loop</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__timeout</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__dlen</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__nconn_per_sec</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* forward functions */</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__write_callback</name><parameter_list>( <parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__timeout_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timeout, sockfd=%d\r\n"</literal></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__close_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ECHO_COUNTER</name> <modifier>*</modifier></type><name>counter</name> <init>= <expr><operator>(</operator><name>ECHO_COUNTER</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"closed, sockfd=%d\r\n"</literal></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nconn</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__read_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>data</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>dlen</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ECHO_COUNTER</name> <modifier>*</modifier></type><name>counter</name> <init>= <expr><operator>(</operator><name>ECHO_COUNTER</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>__nread</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>nloop</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>counter</name><operator>-&gt;</operator><name>nloop</name></name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; nloop=%d, max_loop=%d\r\n"</literal></expr></argument>,
			<argument><expr><name><name>counter</name><operator>-&gt;</operator><name>nloop</name></name></expr></argument>, <argument><expr><name><name>counter</name><operator>-&gt;</operator><name>max_loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>counter</name><operator>-&gt;</operator><name>nloop</name></name> <operator>&gt;=</operator> <name><name>counter</name><operator>-&gt;</operator><name>max_loop</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; ok, nloop=%d, max_loop=%d\r\n"</literal></expr></argument>,
			<argument><expr><name><name>counter</name><operator>-&gt;</operator><name>nloop</name></name></expr></argument>, <argument><expr><name><name>counter</name><operator>-&gt;</operator><name>max_loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__write_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>data</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>dlen</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__nwrite</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_gets</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__connect_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__nconnect_ok</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_fprintf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>__data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>echo_client_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>event_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* init the variable */</comment>
	<expr_stmt><expr><name>__nread</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nwrite</name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nconnect_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nconn</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ECHO_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ECHO_CTL_SERV_ADDR</name></expr>:</case>
			<expr_stmt><expr><name>__server_addr</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECHO_CTL_MAX_CONNECT</name></expr>:</case>
			<expr_stmt><expr><name>__max_connect</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECHO_CTL_MAX_LOOP</name></expr>:</case>
			<expr_stmt><expr><name>__max_loop</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECHO_CTL_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><name>__timeout</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECHO_CTL_DATA_LEN</name></expr>:</case>
			<expr_stmt><expr><name>__dlen</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECHO_CTL_NCONN_PERSEC</name></expr>:</case>
			<expr_stmt><expr><name>__nconn_per_sec</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECHO_CTL_EVENT_MODE</name></expr>:</case>
			<expr_stmt><expr><name>event_mode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown arg(%d)"</literal></expr></argument>,
					<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__aio</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>event_mode</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_SELECT</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------- use select --------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_KERNEL</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------- use kernel --------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_POLL</name></expr>:</case>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------- use  poll  --------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown event(%d)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>__aio</name> <operator>=</operator> <call><name>acl_aio_create</name><argument_list>(<argument><expr><name>event_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_set_keep_read</name><argument_list>(<argument><expr><name>__aio</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__data</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>__dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>__data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__dlen</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>__data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>__dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>__data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__server_addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__server_addr</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1:30082"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>connect_pool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"connect_pool"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ECHO_COUNTER</name> <modifier>*</modifier></type><name>counter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__max_connect</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>ECHO_COUNTER</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ECHO_COUNTER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>nloop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>max_loop</name></name> <operator>=</operator> <name>__max_loop</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>counter</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>acl_aio_connect</name><argument_list>(<argument><expr><name>__aio</name></expr></argument>, <argument><expr><name>__server_addr</name></expr></argument>, <argument><expr><name>__timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>counter</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): acl_aio_connect(%s) error(%s)\r\n"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__server_addr</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>counter</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>__write_callback</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_READ_HOOK_ADD</name></expr></argument>, <argument><expr><name>__read_callback</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEO_HOOK_ADD</name></expr></argument>, <argument><expr><name>__timeout_callback</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>__close_callback</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_CONNECT_HOOK_ADD</name></expr></argument>, <argument><expr><name>__connect_callback</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_TIMEOUT</name></expr></argument>, <argument><expr><name>__timeout</name></expr></argument>,
			<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__nconn</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>__nconn_per_sec</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>%</operator> <name>__nconn_per_sec</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: connect-&gt;%d\r\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"prepare connect %d ok, __timeout=%d\r\n"</literal></expr></argument>, <argument><expr><name>__nconn</name></expr></argument>, <argument><expr><name>__timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gc_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name> <init>= <expr><operator>(</operator><name>ACL_AIO</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_mem_slice_delay_destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Éè¶¨¶¨Ê±Æ÷¶¨Ê±ÇåÀíÀ¬»ø»ØÊÕÆ÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name>aio</name></expr></argument>, <argument><expr><name>gc_timer</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>echo_client_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use_slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>;</decl_stmt>

	<comment type="block">/* ½¨Á¢Á¬½Ó³Ø */</comment>
	<expr_stmt><expr><call><name>connect_pool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Éè¶¨¶¨Ê±Æ÷¶¨Ê±ÇåÀíÀ¬»ø»ØÊÕÆ÷ */</comment>
	<if_stmt><if>if <condition>(<expr><name>use_slice</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name>__aio</name></expr></argument>, <argument><expr><name>gc_timer</name></expr></argument>, <argument><expr><name>__aio</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_loop</name><argument_list>(<argument><expr><name>__aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__nconn</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; OK, current thread number=0, exit now, nconn(%d)\r\n"</literal></expr></argument>, <argument><expr><name>__nconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; nconnect(%d), nread(%d), nwrite(%d), total time(%ld)\r\n"</literal></expr></argument>,
		<argument><expr><name>__nconnect_ok</name></expr></argument>, <argument><expr><name>__nread</name></expr></argument>, <argument><expr><name>__nwrite</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__server_addr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>__server_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__server_addr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__data</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>__data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"enter any key to quit now\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_free</name><argument_list>(<argument><expr><name>__aio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__aio</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
