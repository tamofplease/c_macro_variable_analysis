<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/samples/file_fmt/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FMT_ERR</name></cpp:macro>		<cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FMT_UNIX</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FMT_DOS</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>FMT_MAC</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__total_c_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__total_h_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__total_cpp_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__total_hpp_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fmt_change</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"fmt_change"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstream_loadfile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: loadfile(%s, %s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: open file(%s, %s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"samples"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
				    <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"unit_test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".c"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>__total_c_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".cpp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>__total_cpp_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"openssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"dist"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"bdb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"tc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"google"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"iconv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"polarssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"sqlite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"zlib"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
						<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"cdb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".h"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>__total_h_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".hpp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>__total_hpp_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"samples"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"unit_test"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".c"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>__total_c_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".cpp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>__total_cpp_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"openssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"dist"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"bdb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"tc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"google"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"iconv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"polarssl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"sqlite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"zlib"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
					<operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"cdb"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".h"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>__total_h_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>strrncasecmp</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">".hpp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>__total_hpp_line</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: write to %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fflush to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>scan_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to_fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>filepath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>fmt_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>info</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CP</name></cpp:macro>	<cpp:value>ACL_SAFE_STRNCPY</cpp:value></cpp:define>

	<switch>switch <condition>(<expr><name>to_fmt</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>FMT_UNIX</name></expr>:</case>
		<expr_stmt><expr><call><name>CP</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"UNIX"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CP</name><argument_list>(<argument><expr><name>fmt_buf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FMT_DOS</name></expr>:</case>
		<expr_stmt><expr><call><name>CP</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"DOS"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CP</name><argument_list>(<argument><expr><name>fmt_buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>FMT_MAC</name></expr>:</case>
		<expr_stmt><expr><call><name>CP</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"MAC"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CP</name><argument_list>(<argument><expr><name>fmt_buf</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unknown fmt(%d)"</literal></expr></argument>, <argument><expr><name>to_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>acl_scan_dir_open</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"open path(%s, %s)"</literal></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>acl_scan_dir_next_file</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
		    <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"cpp"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"hpp"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>acl_scan_dir_path</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"file(%s) no path"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
			<argument><expr><name>path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"filepath:%s\r\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmt_change</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>fmt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	
	<expr_stmt><expr><call><name>acl_scan_dir_close</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt; At last, %d files were changed to %s format\r\n"</literal>
		<literal type="string">"&gt;&gt;&gt; total_c_line: %d lines, total_h_line: %d, "</literal>
		<literal type="string">"total_cpp_line: %d, total_hpp_line: %d\r\n"</literal></expr></argument>,
		<argument><expr><name>n</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>__total_c_line</name></expr></argument>, <argument><expr><name>__total_h_line</name></expr></argument>,
		<argument><expr><name>__total_cpp_line</name></expr></argument>, <argument><expr><name>__total_hpp_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h help\r\n"</literal>
			<literal type="string">"-f file_format[unix|dos|mac]\r\n"</literal>
			<literal type="string">"-d dir_path\r\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src_path</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>to_fmt</name> <init>= <expr><name>FMT_UNIX</name></expr></init></decl>;</decl_stmt>


	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hf:d:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"unix"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>to_fmt</name> <operator>=</operator> <name>FMT_UNIX</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"dos"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>to_fmt</name> <operator>=</operator> <name>FMT_DOS</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"mac"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>to_fmt</name> <operator>=</operator> <name>FMT_MAC</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>to_fmt</name> <operator>=</operator> <name>FMT_ERR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<expr_stmt><expr><name>src_path</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	
	<if_stmt><if>if <condition>(<expr><name>to_fmt</name> <operator>==</operator> <name>FMT_ERR</name> <operator>||</operator> <name>src_path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>src_path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>src_path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>--</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>scan_dir</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>to_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
