<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/samples/mempool/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name><cpp:literal>"ws2_32"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>USE_ACL_MALLOC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_ACL_MALLOC</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>MALLOC</name></cpp:macro>	<cpp:value>acl_mymalloc</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>FREE</name></cpp:macro>	<cpp:value>acl_myfree</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>MALLOC</name></cpp:macro>	<cpp:value>malloc</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive>	<cpp:macro><name>FREE</name></cpp:macro>	<cpp:value>free</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MEM_TYPE_GROSS</name></cpp:macro>	<cpp:value>ACL_MEM_TYPE_MAX + 1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>__var_allocator</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>__max_size</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__var_allocator</name> <operator>=</operator> <call><name>acl_allocator_create</name><argument_list>(<argument><expr><name>__max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_prompt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"enter any key to continue.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help] -c bench|bench2|bench3\r\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MS_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mempool_bench_test2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__pool_inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_pool</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>__pool_inited</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_mempool_open</name><argument_list>(<argument><expr><name>__max_size</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>__pool_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_mempool_ctl</name><argument_list>(<argument><expr><name>ACL_MEMPOOL_CTL_MUTEX</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>,
					<argument><expr><name>ACL_MEMPOOL_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>__pool_inited</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_mempool_ctl</name><argument_list>(<argument><expr><name>ACL_MEMPOOL_CTL_DISABLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
					<argument><expr><name>ACL_MEMPOOL_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>use_pool</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: time cost is %ld seconds, count is %d, total pool alloc %d\r\n"</literal></expr></argument>,
			<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>, <argument><expr><call><name>acl_mempool_total_allocated</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: time cost is %ld seconds, count is %d\r\n"</literal></expr></argument>,
			<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<struct>struct <name>MEM_POOL_BENCH2</name> <block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>use_pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>mutex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>loop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_LOOP</name></cpp:macro>	<cpp:value>10000000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>MEM_POOL_BENCH2</name></name></type> <name><name>__pool_bench_tab2</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, no mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 2k, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 2k, pool, no mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 2k, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 8k, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 8k, pool, no mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 8k, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 64k, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64k, pool, no mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64k, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_bench2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__pool_bench_tab2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>mempool_bench_test2</name><argument_list>(<argument><expr><name><name>__pool_bench_tab2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>use_pool</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loop</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>end_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>MEM_POOL_BENCH2</name></name></type> <name><name>__pool_bench_tab3</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_bench3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__pool_bench_tab3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>mempool_bench_test2</name><argument_list>(<argument><expr><name><name>__pool_bench_tab3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>use_pool</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loop</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab3</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>end_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mempool_bench_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>MUTEX_INIT</name></cpp:ifdef>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTEX_INIT</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>mutex</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>MUTEX_INIT</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"lock and unkock, loop %d, time cost is %ld\r\n"</literal></expr></argument>, <argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>ACL_MEM_TYPE_NONE</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>ACL_MEM_TYPE_MAX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_allocator_mem_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_allocator_mem_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>MEM_TYPE_GROSS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_allocator_membuf_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_allocator_membuf_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>MUTEX_INIT</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>ACL_MEM_TYPE_NONE</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>ACL_MEM_TYPE_MAX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_allocator_mem_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_allocator_mem_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>MEM_TYPE_GROSS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_allocator_membuf_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_allocator_membuf_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>loop</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: time cost is %ld seconds, count is %d\r\n"</literal></expr></argument>,
		<argument><expr><name>label</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<struct>struct <name>MEM_POOL_BENCH</name> <block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>mutex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>loop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_mem_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_LOOP</name></cpp:macro>	<cpp:value>10000000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>MEM_POOL_BENCH</name></name></type> <name><name>__pool_bench_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"alloc vstring, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_VSTRING</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc vstring, pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_VSTRING</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc vstring, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_NONE</name></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 64, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_64_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_64_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_NONE</name></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 2K, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_2K_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 2K, pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_2K_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 2K, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_NONE</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 8K, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_8K_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 8K, pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_8K_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 8K, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_NONE</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="string">"alloc 64K, pool, mutex"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_64K_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64K, pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_64K_BUF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"alloc 64K, no pool, no mutex"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LOOP</name></expr>, <expr><name>ACL_MEM_TYPE_NONE</name></expr>, <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">64</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_bench</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__pool_bench_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>mempool_bench_test</name><argument_list>(<argument><expr><name><name>__pool_bench_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loop</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>,
				<argument><expr><name><name>__pool_bench_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>end_prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name>ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hc:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"bench"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mem_bench</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"bench2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mem_bench2</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"bench3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mem_bench3</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<default>default:</default>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
