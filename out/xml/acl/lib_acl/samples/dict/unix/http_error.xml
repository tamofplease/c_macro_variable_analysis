<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/samples/dict/unix/http_error.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>reply_error_fmt</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 %d %s\r\n"</literal>
	<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
	<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
	<literal type="string">"Content-type: text/html\r\n"</literal>
	<literal type="string">"Connection: close\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_error_reply</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>__buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_atexit_add</name><argument_list>(<argument><expr><name>__buf</name></expr></argument>, <argument><expr><name>free_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>http_tmpl_title</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>http_tmpl_get</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>msg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>__buf</name></expr></argument>, <argument><expr><name>reply_error_fmt</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>__buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>__buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>msg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_vstream_writevn</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
