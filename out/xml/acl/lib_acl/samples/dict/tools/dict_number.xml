<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/dict/tools/dict_number.c"><comment type="block">/*
 * Proof-of-concept test program. Create, update or read a database. When
 * the input is a name=value pair, the database is updated, otherwise the
 * program assumes that the input specifies a lookup key and prints the
 * corresponding value.
 */</comment>

<comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unescape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MS_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isatty</name></cpp:macro> <cpp:value>_isatty</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>dict_number_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	char   *dict_name = "btree:./var/test";
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><literal type="number">0</literal></expr></cpp:elif>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name> <init>= <expr><literal type="string">"tc:*#bnum=10000000"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><literal type="number">0</literal></expr></cpp:elif>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name> <init>= <expr><literal type="string">"tc:+#capnum=10000000"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><literal type="number">0</literal></expr></cpp:elif>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name> <init>= <expr><literal type="string">"tc:./var/test.tch"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><literal type="number">0</literal></expr></cpp:elif>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name> <init>= <expr><literal type="string">"tc:./var/test.tcb"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><literal type="number">0</literal></expr></cpp:elif>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name> <init>= <expr><literal type="string">"tc:./var/test.tct"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dict_name</name> <init>= <expr><literal type="string">"tc:./var/test.10000.tcf#width=12#limsiz=2684354560"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type>     <name>open_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>dict_flags</name> <init>= <comment type="block">/* DICT_FLAG_LOCK | */</comment> <expr><name>DICT_FLAG_DUP_REPLACE</name> <operator>|</operator> <name>DICT_FLAG_TRY0NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>key_buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>value_buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>value_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADD_BENCH1</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
    for (i = from; i &lt; to; i++) {  \
	acl_vstring_sprintf(key_buf, "%d:key", i);  \
	acl_vstring_sprintf(value_buf, "value:%d", i);  \
	dict_update(dict_name, STR(key_buf), STR(value_buf), LEN(value_buf));  \
    }  \
}while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADD_BENCH2</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
    const char *__key = "hello world";  \
    char  __buf[33];  \
    for (i = from; i &lt; to; i++) {  \
	acl_vstring_sprintf(key_buf, "%d:key", i);  \
	MD5String(STR(key_buf), __key, strlen(__key), __buf, sizeof(__buf));  \
	acl_vstring_sprintf(value_buf, "value:%d", i);  \
	dict_update(dict_name, __buf, STR(value_buf), LEN(value_buf));  \
    }  \
}while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADD_BENCH3</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
    for (i = from; i &lt; to; i++) {  \
	acl_vstring_sprintf(key_buf, "%d", i);  \
	acl_vstring_sprintf(value_buf, "value:%d:", i);  \
	dict_update(dict_name, STR(key_buf), STR(value_buf), LEN(value_buf));  \
    }  \
}while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADD_BENCH_DUMMY</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADD_BENCH</name></cpp:macro>	<cpp:value>ADD_BENCH3</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>acl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>open_flags</name> <operator>=</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_TRUNC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>dict_open</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>open_flags</name></expr></argument>, <argument><expr><name>dict_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_register</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- begin add ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">0</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 0 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">9</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 9 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">9</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 8 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 4 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 1 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 2 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">5</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 5 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 3 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 7 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADD_BENCH</name><argument_list>(<argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">6</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>*</operator> <literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"--- max * 6 / 10 over ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"---  end add, begin get  ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>dict_lookup</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"key: (%s) no exist"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>%</operator> <name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"--- get i=%d ok ---"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"--- end get i=%d ok ---"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>value_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unregister %s\n"</literal></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_unregister</name><argument_list>(<argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"close %s\n"</literal></expr></argument>, <argument><expr><name>dict_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
