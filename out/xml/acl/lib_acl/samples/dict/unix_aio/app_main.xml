<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/dict/unix_aio/app_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"app_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"app_main.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__mempool_limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__mempool_use_mutex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>APP_RUN_FN</name></type> <name>__run_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__run_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>APP_INIT_FN</name></type> <name>__app_init_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__app_init_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>APP_EXIT_FN</name></type> <name>__app_exit_fn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__app_exit_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block">/*
static APP_THREAD_INIT_FN __app_thread_init_fn = NULL;
static APP_THREAD_EXIT_FN __app_thread_exit_fn = NULL;
*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__default_deny_info</name> <init>= <expr><literal type="string">"You are not welcome!\r\n"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__deny_info</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>astream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>service</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"__service"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ip</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check. This service takes no command-line arguments.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): unexpected command-line argument: %s, service=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>service</name></expr> ?</condition><then> <expr><name>service</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_watchdog_pat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><call><name>acl_aio_vstream</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>__run_fn</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__run_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): can't get socket's ip"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>acl_access_permit</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ip(%s) be denied"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__deny_info</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>__deny_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>__run_fn</name><argument_list>(<argument><expr><name>astream</name></expr></argument>, <argument><expr><name>__run_ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name>astream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__pre_accept</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><name>name</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__pre_jail_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><name>name</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <comment type="block">/* ÊÇ·ñ²ÉÓÃ libcore µÄÈÕÖ¾¼ÇÂ¼ */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>HAS_LIB_CORE</name></cpp:ifdef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>USE_LIBCORE_LOG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>app_set_libcore_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__post_jail_init</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><name>name</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>acl_var_aio_access_allow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_access_add</name><argument_list>(<argument><expr><name>acl_var_aio_access_allow</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__app_init_fn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__app_init_fn</name><argument_list>(<argument><expr><name>__app_init_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__mempool_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"use mempool, size limit is %d, %s mutex"</literal></expr></argument>,
			<argument><expr><name>__mempool_limit</name></expr></argument>, <argument><expr><ternary><condition><expr><name>__mempool_use_mutex</name></expr> ?</condition><then> <expr><literal type="string">"use"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* TODO: you can add some init functions here */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__app_on_exit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><name>service</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>       
	<if_stmt><if>if <condition>(<expr><name>__app_exit_fn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__app_exit_fn</name><argument_list>(<argument><expr><name>__app_exit_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>HAS_LIB_CORE</name></cpp:ifdef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>USE_LIBCORE_LOG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>app_libcore_log_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>       

<comment type="block">/*
static void __thread_init(void *arg)
{
	if (__app_thread_init_fn)
		__app_thread_init_fn(arg);
}

static void __thread_exit(void *arg)
{       
	if (__app_thread_exit_fn)
		__app_thread_exit_fn(arg);
}
*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>app_main_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>env_argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_ENV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>env_argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">",\t "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>env_argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>env_argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>env_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name><name>env_argv</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <call><name>acl_argv_index</name><argument_list>(<argument><expr><name>env_argv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><literal type="string">"mempool_limit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__mempool_limit</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><literal type="string">"mempool_use_mutex"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__mempool_use_mutex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>env_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__mempool_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_mempool_open</name><argument_list>(<argument><expr><name>__mempool_limit</name></expr></argument>, <argument><expr><name>__mempool_use_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__deny_info</name> <operator>=</operator> <name>__default_deny_info</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_BOOL_TABLE</name></type> <name><name>null_conf_bool_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>      

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT_TABLE</name></type> <name><name>null_conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>      

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>null_conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* TODO: you can add configure variables of int type here */</comment>
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>app_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>APP_RUN_FN</name></type> <name>run_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>run_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"app_main"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CONFIG_BOOL_TABLE</name> <modifier>*</modifier></type><name>bool_tab</name> <init>= <expr><name>null_conf_bool_tab</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CONFIG_INT_TABLE</name> <modifier>*</modifier></type><name>int_tab</name> <init>= <expr><name>null_conf_int_tab</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CONFIG_STR_TABLE</name> <modifier>*</modifier></type><name>str_tab</name> <init>= <expr><name>null_conf_str_tab</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>app_main_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÌáÇ°½øÐÐÄ£°å³õÊ¼»¯£¬ÒÔÊ¹ÈÕÖ¾¾¡ÔçµØ´ò¿ª */</comment>
	<expr_stmt><expr><call><name>acl_master_log_open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>run_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: run_fn null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__run_fn</name> <operator>=</operator> <name>run_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__run_ctx</name> <operator>=</operator> <name>run_ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>APP_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>APP_CTL_INIT_FN</name></expr>:</case>
			<expr_stmt><expr><name>__app_init_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>APP_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>APP_CTL_INIT_CTX</name></expr>:</case>
			<expr_stmt><expr><name>__app_init_ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>APP_CTL_EXIT_FN</name></expr>:</case>
			<expr_stmt><expr><name>__app_exit_fn</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>APP_EXIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>APP_CTL_EXIT_CTX</name></expr>:</case> 
			<expr_stmt><expr><name>__app_exit_ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/*
		case APP_CTL_THREAD_INIT:
			__app_thread_init_fn = va_arg(ap, APP_THREAD_INIT_FN);
			break;
		case APP_CTL_THREAD_INIT_CTX:
			thread_init_ctx = va_arg(ap, void*);
			break;
		case APP_CTL_THREAD_EXIT:
			__app_thread_exit_fn = va_arg(ap, APP_THREAD_EXIT_FN);
			break;
		case APP_CTL_THREAD_EXIT_CTX:
			thread_exit_ctx = va_arg(ap, void*);
			break;
		*/</comment>
		<case>case <expr><name>APP_CTL_CFG_BOOL</name></expr>:</case>
			<expr_stmt><expr><name>bool_tab</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_BOOL_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>APP_CTL_CFG_INT</name></expr>:</case>
			<expr_stmt><expr><name>int_tab</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>APP_CTL_CFG_STR</name></expr>:</case>
			<expr_stmt><expr><name>str_tab</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_STR_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>APP_CTL_DENY_INFO</name></expr>:</case>
			<expr_stmt><expr><name>__deny_info</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: bad name(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_server_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>__service</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_BOOL_TABLE</name></expr></argument>, <argument><expr><name>bool_tab</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_INT_TABLE</name></expr></argument>, <argument><expr><name>int_tab</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_STR_TABLE</name></expr></argument>, <argument><expr><name>str_tab</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_PRE_INIT</name></expr></argument>, <argument><expr><name>__pre_jail_init</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_PRE_ACCEPT</name></expr></argument>, <argument><expr><name>__pre_accept</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_POST_INIT</name></expr></argument>, <argument><expr><name>__post_jail_init</name></expr></argument>,
				<argument><expr><name>ACL_MASTER_SERVER_EXIT</name></expr></argument>, <argument><expr><name>__app_on_exit</name></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
