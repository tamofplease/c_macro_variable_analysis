<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/dict/unix_aio/http_service.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"service_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_service.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_LEN</name></cpp:macro>	<cpp:value>(1024 * 8)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>__db_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>__partions</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"./cache1"</literal></expr>,     
        <expr><literal type="string">"./cache2"</literal></expr>,             
        <expr><literal type="string">"./cache3"</literal></expr>,     
        <expr><literal type="string">"./cache4"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>                      
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__partions_size</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* forward declare */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>http_service_start</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>http_service_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>init_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_service_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>has_default_db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_init</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dict_pool_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__db_table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): service_init been called more than once"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>__db_table</name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>var_cfg_dbnames</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>argv</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): db_names(%s) invalid"</literal></expr></argument>, <argument><expr><name>var_cfg_dbnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>argv</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dbname(%s) use one db"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"btree:%s/%s"</literal></expr></argument>, <argument><expr><name>var_cfg_dbpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>dict_pool_new</name><argument_list>(<argument><expr><name>__partions</name></expr></argument>, <argument><expr><name>__partions_size</name></expr></argument>, <argument><expr><literal type="string">"btree"</literal></expr></argument>,
				<argument><expr><name>var_cfg_dbpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>__db_table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>pool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add %s error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>has_default_db</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_default_db</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"btree:%s/default"</literal></expr></argument>, <argument><expr><name>var_cfg_dbpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>dict_pool_new</name><argument_list>(<argument><expr><name>__partions</name></expr></argument>, <argument><expr><name>__partions_size</name></expr></argument>, <argument><expr><literal type="string">"btree"</literal></expr></argument>,
				<argument><expr><name>var_cfg_dbpath</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>__db_table</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>pool</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add default error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dict_pool_free_fn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>DICT_POOL</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dict_pool_free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_service_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>exit_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__db_table</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name>__db_table</name></expr></argument>, <argument><expr><name>dict_pool_free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_ready</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>keep_alive</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name></name> <operator>&amp;&amp;</operator> <name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>keep_alive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>keep_alive</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>http_client_reset</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get next request */</comment>
	<if_stmt><if>if <condition>(<expr><name>keep_alive</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_service_start</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_to_db</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>dict_pool</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>reply_200_keep</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
		<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
		<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
		<literal type="string">"Content-Length: 9\r\n"</literal>
		<literal type="string">"Connection: keep-alive\r\n"</literal>
		<literal type="string">"\r\n"</literal>
		<literal type="string">"200 OK!\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>reply_200_close</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
		<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
		<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
		<literal type="string">"Content-Length: 9\r\n"</literal>
		<literal type="string">"Connection: close\r\n"</literal>
		<literal type="string">"\r\n"</literal>
		<literal type="string">"200 OK!\r\n"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dict_pool_set</name><argument_list>(<argument><expr><name>dict_pool</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_ready</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>reply_200_keep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_200_keep</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>reply_200_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_200_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_from_db</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>dict_pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>reply_404_close</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 404 not found\r\n"</literal>
		<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
		<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
		<literal type="string">"Content-Length: 15\r\n"</literal>
		<literal type="string">"Connection: close\r\n"</literal>
		<literal type="string">"\r\n"</literal>
		<literal type="string">"404 not found\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>reply_404_keep</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 404 not found\r\n"</literal>
		<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
		<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
		<literal type="string">"Content-Length: 15\r\n"</literal>
		<literal type="string">"Connection: keep-alive\r\n"</literal>
		<literal type="string">"\r\n"</literal>
		<literal type="string">"404 not found\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>reply_200_close</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
		<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
		<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
		<literal type="string">"Content-type: text/html\r\n"</literal>
		<literal type="string">"Connection: close\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>reply_200_keep</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 200 OK\r\n"</literal>
		<literal type="string">"Accept-Ranges: bytes\r\n"</literal>
		<literal type="string">"Server: dict_http/1.0.0 (Unix)\r\n"</literal>
		<literal type="string">"Content-type: text/html\r\n"</literal>
		<literal type="string">"Connection: Keep-Alive\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reply_length_fmt</name> <init>= <expr><literal type="string">"Content-Length: %d\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>found_second</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>   <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>var_cfg_use_bdb</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>dict_pool_get</name><argument_list>(<argument><expr><name>dict_pool</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dict_pool</name> <operator>=</operator> <name>dict_pool</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">"test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4test4\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_WRITE_HOOK_ADD</name></expr></argument>, <argument><expr><name>send_ready</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>reply_404_keep</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_404_keep</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>reply_404_close</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply_404_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>found_second</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>found_second</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>reply_length_fmt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>reply_200_keep</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>reply_200_keep</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>reply_200_close</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>reply_200_close</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>found_second</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>found_second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iov_len</name>  <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>keep_alive</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writev</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_writev</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_request_body_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <name>HTTP_CHAT_ERR_MIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): status(%d) error"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Invalid request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><call><name>set_to_db</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>,
				<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>dict_pool</name></name></expr></argument>,
				<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAX_LEN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): len(%s) too long"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">403</literal></expr></argument>, <argument><expr><literal type="string">"Request too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_req_body</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>, <parameter><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>dict_pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>dict_pool</name></name> <operator>=</operator> <name>dict_pool</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>http_req</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): http_req not null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>http_req</name></name> <operator>=</operator> <call><name>http_req_new</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_req_body_get_async</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>http_req</name></name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
			<argument><expr><name>read_request_body_ready</name></expr></argument>,
			<argument><expr><name>http_client</name></expr></argument>,
			<argument><expr><name>var_cfg_rw_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>http_service</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"http_service"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>dbname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>action</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>method</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DICT_POOL</name> <modifier>*</modifier></type><name>dict_pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTTP_HDR_REQ</name> <modifier>*</modifier></type><name>hdr_req</name> <init>= <expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>http_hdr_req_param</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><literal type="string">"dbname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>dict_pool</name> <operator>=</operator> <operator>(</operator><name>DICT_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name>__db_table</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict_pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dbname(%s) not found"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>, <argument><expr><literal type="string">"Dict not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>http_hdr_req_method</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no method"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, no Method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>http_hdr_req_param</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no key(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>hdr_req</name><operator>-&gt;</operator><name>url_part</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, no key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>http_hdr_req_param</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><literal type="string">"action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no action"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, no action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>http_hdr_req_param</name><argument_list>(<argument><expr><name>hdr_req</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no value"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, no value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>(</operator><call><name>set_to_db</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>dict_pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"POST"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>http_client</name><operator>-&gt;</operator><name>sbuf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><call><name>get_req_body</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>dict_pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): method(%s) not support"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">501</literal></expr></argument> , <argument><expr><literal type="string">"Method not support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not GET method(%s) for get data"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, should be GET request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><call><name>get_from_db</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><name>dict_pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unsupport action(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, not support action"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_header_ready</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>HTTP_CHAT_OK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): status(%d)"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, invalid request header, read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>http_hdr_req_parse</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parse hdr_req error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error_reply</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"Bad request, invalid request header, parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>http_service</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_close_client</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>client</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name> <init>= <expr><operator>(</operator><name>HTTP_CLIENT</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_client_free</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_service_start</name><parameter_list>(<parameter><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_ctl</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_CLOSE_HOOK_ADD</name></expr></argument>, <argument><expr><name>on_close_client</name></expr></argument>, <argument><expr><name>http_client</name></expr></argument>,
		<argument><expr><name>ACL_AIO_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_hdr_req_get_async</name><argument_list>(<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>hdr_req</name></name></expr></argument>,
			<argument><expr><name><name>http_client</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>,
			<argument><expr><name>request_header_ready</name></expr></argument>,
			<argument><expr><name>http_client</name></expr></argument>,
			<argument><expr><name>var_cfg_rw_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>http_service_main</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTTP_CLIENT</name> <modifier>*</modifier></type><name>http_client</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>http_client</name> <operator>=</operator> <call><name>http_client_new</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_service_start</name><argument_list>(<argument><expr><name>http_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
