<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/samples/tls/client/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib_acl.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_MS_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name><cpp:literal>"ws2_32"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"wsock32"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tls_params.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>conf_file</name> <init>= <expr><literal type="string">"tlscli.cf"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>serv_addr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>var_client_tls_loglevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_client_tls_scert_vd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>var_client_starttls_tmout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_key_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_dcert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_dkey_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_eccert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_eckey_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_CAfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_CApath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_client_tls_fpt_dgst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT_TABLE</name></type> <name><name>int_table</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"client_tls_loglevel"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_loglevel</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_scert_vd"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_scert_vd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_starttls_tmout"</literal></expr>, <expr><literal type="number">300</literal></expr>, <expr><operator>&amp;</operator><name>var_client_starttls_tmout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>str_table</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"client_tls_cert_file"</literal></expr>, <expr><literal type="string">"conf/foo-cert.pem"</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_cert_file</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_key_file"</literal></expr>, <expr><literal type="string">"conf/foo-key.pem"</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_key_file</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_dcert_file"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_dcert_file</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_dkey_file"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_dkey_file</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_eccert_file"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_eccert_file</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_eckey_file"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_eckey_file</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_CAfile"</literal></expr>, <expr><literal type="string">"conf/cacert.pem"</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_CAfile</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_CApath"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_CApath</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"client_tls_fpt_dgst"</literal></expr>, <expr><literal type="string">"sha1"</literal></expr>, <expr><operator>&amp;</operator><name>var_client_tls_fpt_dgst</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>TLS_CLIENT_INIT_PROPS</name></type> <name>init_props</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_app_conf_load</name><argument_list>(<argument><expr><name>conf_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(<argument><expr><name>str_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(<argument><expr><name>int_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tls_client_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	TLS_CLIENT_SETUP(&amp;init_props,
			log_level = var_client_tls_loglevel,
			verifydepth = var_client_tls_scert_vd,
			cache_type = TLS_MGR_SCACHE_CLIENT,
			cert_file = var_client_tls_cert_file,
			key_file = var_client_tls_key_file,
			dcert_file = var_client_tls_dcert_file,
			dkey_file = var_client_tls_dkey_file,
			eccert_file = var_client_tls_eccert_file,
			eckey_file = var_client_tls_eckey_file,
			CAfile = var_client_tls_CAfile,
			CApath = var_client_tls_CApath,
			fpt_dgst = var_client_tls_fpt_dgst);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>log_level</name></name> <operator>=</operator> <name>var_client_tls_loglevel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>verifydepth</name></name> <operator>=</operator> <name>var_client_tls_scert_vd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>cache_type</name></name> <operator>=</operator> <name>TLS_MGR_SCACHE_CLIENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>cert_file</name></name> <operator>=</operator> <name>var_client_tls_cert_file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>key_file</name></name> <operator>=</operator> <name>var_client_tls_key_file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>dcert_file</name></name> <operator>=</operator> <name>var_client_tls_dcert_file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>dkey_file</name></name> <operator>=</operator> <name>var_client_tls_dkey_file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>eccert_file</name></name> <operator>=</operator> <name>var_client_tls_eccert_file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>eckey_file</name></name> <operator>=</operator> <name>var_client_tls_eckey_file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>CAfile</name></name> <operator>=</operator> <name>var_client_tls_CAfile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>CApath</name></name> <operator>=</operator> <name>var_client_tls_CApath</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>init_props</name><operator>.</operator><name>fpt_dgst</name></name> <operator>=</operator> <name>var_client_tls_fpt_dgst</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tls_client_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: %s -h [help] -c conf_file -s server_addr\n"</literal></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><literal type="string">"GET /accounts/ServiceLogin?service=mail&amp;passive=true&amp;rm=false&amp;continue=https%3A%2F%2Fmail.google.com%2Fmail%2F%3Fui%3Dhtml%26zy%3Dl&amp;bsv=zpwhtygjntrz&amp;ss=1&amp;scc=1&amp;ltmpl=default&amp;ltmplcache=2 HTTP/1.1\r\n"</literal>
			<literal type="string">"HOST: www.google.com\r\n"</literal>
			<literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><literal type="string">"GET / HTTP/1.1\r\n"</literal>
			<literal type="string">"HOST: www.google.com\r\n"</literal>
			<literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><literal type="string">"GET /urchin.js HTTP/1.1\r\n"</literal>
			<literal type="string">"HOST: ssl.google-analytics.com\r\n"</literal>
			<literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_one</name><parameter_list>(<parameter><decl><type><name>TLS_APPL_STATE</name> <modifier>*</modifier></type><name>client_tls_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TLS_SESS_STATE</name> <modifier>*</modifier></type><name>client_sess_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TLS_CLIENT_START_PROPS</name></type> <name>tls_props</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>   <name>tls_level</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tls_nexthop</name> <init>= <expr><literal type="string">"test.com.cn"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><literal type="string">"test.com.cn"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>namaddrport</name> <init>= <expr><literal type="string">"test.com.cn"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>serverid</name> <init>= <expr><literal type="string">"service:addr:port:helo"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tls_protocols</name> <init>= <expr><name>SSL_TXT_TLSV1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tls_grade</name> <init>= <expr><literal type="string">"low"</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* high, medium, low, export, null */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tls_exclusions</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tls_matchargv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"connect %s error(%s)\n"</literal></expr></argument>, <argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_tcp_set_nodelay</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	client_sess_ctx = TLS_CLIENT_START(&amp;tls_props,
			ctx = client_tls_ctx,
			stream = client,
			log_level = var_client_tls_loglevel,
			timeout = var_client_starttls_tmout,
			tls_level = tls_level,
			nexthop = tls_nexthop,
			host = host,
			namaddr = namaddrport,
			serverid = serverid,
			protocols = tls_protocols,
			cipher_grade = tls_grade,
			cipher_exclusions = tls_exclusions,
			matchargv = tls_matchargv,
			fpt_dgst = var_client_tls_fpt_dgst);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>client_tls_ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>log_level</name></name> <operator>=</operator> <name>var_client_tls_loglevel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>var_client_starttls_tmout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>tls_level</name></name> <operator>=</operator> <name>tls_level</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>nexthop</name></name> <operator>=</operator> <name>tls_nexthop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>host</name></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>namaddr</name></name> <operator>=</operator> <name>namaddrport</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>serverid</name></name> <operator>=</operator> <name>serverid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>protocols</name></name> <operator>=</operator> <name>tls_protocols</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>cipher_grade</name></name> <operator>=</operator> <name>tls_grade</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>cipher_exclusions</name></name> <operator>=</operator> <name>tls_exclusions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>matchargv</name></name> <operator>=</operator> <name>tls_matchargv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tls_props</name><operator>.</operator><name>fpt_dgst</name></name> <operator>=</operator> <name>var_client_tls_fpt_dgst</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>client_sess_ctx</name> <operator>=</operator> <call><name>tls_client_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tls_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>client_sess_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TLS_CLIENT_START error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tls_level</name> <operator>&gt;=</operator> <name>TLS_LEV_VERIFY</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TLS_CERT_IS_TRUSTED</name><argument_list>(<argument><expr><name>client_sess_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Server certificate not trusted\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tls_level</name> <operator>&gt;</operator> <name>TLS_LEV_ENCRYPT</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TLS_CERT_IS_MATCHED</name><argument_list>(<argument><expr><name>client_sess_ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Server certificate not verified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_fprintf</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"hello world\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>END</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_gets</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>END</name>;</goto></block_content></block></if></if_stmt>
		<break>break;</break>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">50000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"client: i=%d, time=%ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>now</name> <operator>-</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write request error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_gets_nonl</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<comment type="block">/*
			printf("%s\n", buf);
			*/</comment>
		</block_content>}</block></while>
		<comment type="block">/*
		printf("gets respond over now\n");
		*/</comment>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>END</name>:</label>
	<expr_stmt><expr><call><name>tls_client_stop</name><argument_list>(<argument><expr><name>client_tls_ctx</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><name>var_client_starttls_tmout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>client_sess_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>run_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>last</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TLS_APPL_STATE</name> <modifier>*</modifier></type><name>client_tls_ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>client_tls_ctx</name> <operator>=</operator> <call><name>tls_client_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>client_tls_ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"tls_client_create error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>run_one</name><argument_list>(<argument><expr><name>client_tls_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"i: %d, time: %ld\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>now</name> <operator>-</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>tls_free_app_context</name><argument_list>(<argument><expr><name>client_tls_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_THREAD</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name><name>tid</name><index>[<expr><name>MAX_THREAD</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	acl_pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);
	*/</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_THREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>run_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_THREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_join</name><argument_list>(<argument><expr><name><name>tid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name>ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:443"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>serv_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hc:s:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>conf_file</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>serv_addr</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>serv_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
