<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/private/bak/fifo.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fifo.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>FIFO_INFO</name></name></type> <name>FIFO_INFO</name>;</typedef>

<struct>struct <name>FIFO_INFO</name> <block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FIFO_ITER</name> <block>{
	<decl_stmt><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>info_curr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>FIFO</name> <block>{
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>cnt</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fifo</name> <operator>=</operator> <operator>(</operator><name>FIFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_default_calloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fifo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>fifo</name></name> <operator>=</operator> <name>fifo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>info_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>fifo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fifo_free</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fifo</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>fifo_pop</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>free_fn</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>fifo_push</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"fifo_push"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: fifo null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: data null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>FIFO_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>fifo_pop</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"fifo_pop"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: fifo null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>fifo_head</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>&amp;&amp;</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>fifo_tail</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>&amp;&amp;</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>fifo_iterator_head</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>&amp;&amp;</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>info_curr</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>iter</name></name><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>fifo_iterator_next</name><parameter_list>(<parameter><decl><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>info_curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>iter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>fifo_iterator_tail</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fifo</name> <operator>&amp;&amp;</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>info_curr</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>fifo</name><operator>-&gt;</operator><name>iter</name></name><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>fifo_iterator_prev</name><parameter_list>(<parameter><decl><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>info_curr</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>iter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>fifo_iterator_data</name><parameter_list>(<parameter><decl><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>fifo_iterator_delete</name><parameter_list>(<parameter><decl><type><name>FIFO_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FIFO_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fifo</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>fifo</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>free_fn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>info_curr</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>iter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fifo_size</name><parameter_list>(<parameter><decl><type><name>FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fifo</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
