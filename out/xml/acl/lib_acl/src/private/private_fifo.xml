<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/private/private_fifo.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private_fifo.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fifo_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_FIFO</name></name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name><name>ptr</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fifo_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_FIFO</name></name> <modifier>*</modifier><name>fifo</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ACL_FIFO_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><operator>(</operator><name>iter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fifo_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_FIFO</name></name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name><name>ptr</name><operator>-&gt;</operator><name>data</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fifo_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_FIFO</name></name> <modifier>*</modifier><name>fifo</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ACL_FIFO_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><name><name>ptr</name><operator>-&gt;</operator><name>prev</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><operator>(</operator><name>iter</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>fifo_iter_info</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_FIFO</name></name> <modifier>*</modifier><name>fifo</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>ACL_FIFO_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>private_fifo_init</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>fifo_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>fifo_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>fifo_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>fifo_iter_prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_info</name></name> <operator>=</operator> <name>fifo_iter_info</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>private_fifo_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fifo</name> <operator>=</operator> <operator>(</operator><name>ACL_FIFO</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fifo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>fifo_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>fifo_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>fifo_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>fifo_iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>fifo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>private_fifo_free</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>private_fifo_pop</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>free_fn</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fifo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>private_fifo_push</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_FIFO_INFO</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>private_fifo_pop</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>private_delete_info</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>, <parameter><decl><type><name>ACL_FIFO_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>private_fifo_head</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>private_fifo_tail</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fifo</name><operator>-&gt;</operator><name>tail</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_fifo_size</name><parameter_list>(<parameter><decl><type><name>ACL_FIFO</name> <modifier>*</modifier></type><name>fifo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fifo</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>fifo</name><operator>-&gt;</operator><name>cnt</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
