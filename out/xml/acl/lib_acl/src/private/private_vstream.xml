<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/private/private_vstream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include> <comment type="block">/* for S_IREAD */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS type"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private_vstream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_ADDR_SIZE</name></cpp:macro>	<cpp:value>256</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>__sys_getc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>  <name>__read_wait</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>fd_set</name></type>  <name>read_fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type>  <name>except_fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/*
	 * Sanity checks.
	 */</comment>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>FD_SETSIZE</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Use select() so we do not depend on alarm() and on signal() handlers.
	 * Restart the select when interrupted by some signal. Some select()
	 * implementations reduce the time to wait when interrupted, which is
	 * exactly what we want.
	 */</comment>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>read_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>except_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>except_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><call><name>select</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_fds</name></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>except_fds</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EINTR</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		<default>default:</default>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__vstream_sys_read</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<label><name>AGAIN</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>__read_wait</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TIMEOUT</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>fread_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>+=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>read_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
			<goto>goto <name>AGAIN</name>;</goto>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TIMEOUT</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name>
			<operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* XXX: should do something where, 2009.12.25 -- zsx */</comment>

		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* xxx: why? */</comment>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* closed by peer */</comment>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>ACL_VSTREAM_FLAG_EOF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_BAD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>total_read_cnt</name></name> <operator>+=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__sys_getc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <call><name>__vstream_sys_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>ACL_VSTREAM_GETC</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_getc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>__vstream_sys_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>*</operator><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>++</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_ungetc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_vstream_unread</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ch</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vstream_bfcp_some</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<comment type="block">/* input params error */</comment>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name> <operator>&amp;&amp;</operator> <name>vptr</name> <operator>&amp;&amp;</operator> <name>maxlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* internal fatal error */</comment>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* there is no any data in buf */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&gt;=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>
		?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vptr</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_gets</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>  <comment type="block">/* left one byte for '\0' */</comment>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>private_vstream_getc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt><comment type="block">/* EOF, nodata read */</comment>
			<break>break;</break>		<comment type="block">/* EOF, some data was read */</comment>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block>{<block_content>	<comment type="block">/* newline is stored, like fgets() */</comment>
				<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* null terminate like fgets() */</comment>
	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_gets_nonl</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>private_vstream_getc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if>  <comment type="block">/* EOF, nodata read */</comment>
			<else>else<block type="pseudo"><block_content>
				<break>break;</break></block_content></block></else></if_stmt>		<comment type="block">/* EOF, some data was read */</comment>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>
				<break>break;</break>	<comment type="block">/* newline is stored, like fgets() */</comment>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* null terminate like fgets() */</comment>
	<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>--</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_readn</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>private_vstream_getc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if> <comment type="block">/* EOF, nodata read */</comment>
			<else>else<block type="pseudo"><block_content>
				<break>break;</break></block_content></block></else></if_stmt>		<comment type="block">/* EOF, some data was read */</comment>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_RDSHORT</name></expr>;</expr_stmt>

		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_read</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>read_cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name>vstream_bfcp_some</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>read_cnt</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* stream-&gt;read_cnt == 0 */</comment>

	<comment type="block">/* there is no data in buf, so need to read data from system */</comment>
	<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name>__vstream_sys_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>read_cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>read_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name>vstream_bfcp_some</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>read_cnt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__vstream_sys_write</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>neintr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name> <operator>&amp;&amp;</operator> <name>vptr</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<label><name>TAG_AGAIN</name>:</label>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(
				<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>fwrite_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>
			<comment type="block">/* ·ÀÖ¹»º³åÇøÄÚµÄÊý¾ÝÓëÊµ¼Ê²»Ò»ÖÂ, ½ö¶ÔÎÄ¼þIOÓÐÐ§ */</comment>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>write_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>++</operator><name>neintr</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

			<goto>goto <name>TAG_AGAIN</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EAGAIN</name>
			<operator>||</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>total_write_cnt</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__loop_writen</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name>   <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>__vstream_sys_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EINTR</name>
				<operator>||</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EAGAIN</name></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>dlen</name>  <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name>   <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_writen</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name> <operator>&amp;&amp;</operator> <name>vptr</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>private_vstream_fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><call><name>__loop_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_write</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>__vstream_sys_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_buffed_writen</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name> <operator>&amp;&amp;</operator> <name>vptr</name> <operator>&amp;&amp;</operator> <name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_size</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>private_vstream_fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>__loop_writen</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>dlen</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dlen</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;=</operator>
		<operator>(</operator><name>size_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>private_vstream_fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>dlen</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_fflush</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>__vstream_sys_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EINTR</name>
			    <operator>||</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>private_vstream_fhopen</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>fh</name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>private_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_SOCKET_INVALID</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>,
		<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ¶¨ÒåÁ÷µÄ»º³åÇøµÄÄ¬ÈÏ´óÐ¡ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_VSTREAM_DEF_MAXLEN</name></cpp:macro>  <cpp:value>8192</cpp:value></cpp:define>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>private_vstream_fdopen</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;</operator> <name>ACL_VSTREAM_DEF_MAXLEN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>ACL_VSTREAM_DEF_MAXLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* XXX: Ö»ÓÐ·Ç¼àÌýÁ÷²ÅÐèÒªÓÐ¶Á»º³åÇø */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdtype</name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN_INET</name><operator>)</operator>
	    <operator>||</operator> <operator>(</operator><name>fdtype</name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN_UNIX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdtype</name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdtype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fdtype</name> <operator>=</operator> <name>ACL_VSTREAM_TYPE_SOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf_len</name></name>     <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>type</name></name>             <operator>=</operator> <name>fdtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>iocp_sock</name></name>        <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ptr</name></name>         <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>oflags</name></name>           <operator>=</operator> <name>oflags</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rw_timeo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name>rw_timeo</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>sys_getc</name></name> <operator>=</operator> <name>__sys_getc</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdtype</name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fread_fn</name></name>  <operator>=</operator> <name>acl_file_read</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fwrite_fn</name></name> <operator>=</operator> <name>acl_file_write</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fwritev_fn</name></name> <operator>=</operator> <name>acl_file_writev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>fclose_fn</name></name> <operator>=</operator> <name>acl_file_close</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_fn</name></name>  <operator>=</operator> <name>acl_socket_read</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>write_fn</name></name> <operator>=</operator> <name>acl_socket_write</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>writev_fn</name></name> <operator>=</operator> <name>acl_socket_writev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>=</operator> <name>acl_socket_close</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>path</name></name>       <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>=</operator> <call><name>private_array_create</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>private_vstream_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>

	<comment type="block">/* for linux2.6 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>_LARGEFILE64_SOURCE</name></cpp:ifdef>
	<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_LARGEFILE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>private_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_SOCKET_INVALID</name></expr></argument>,
		<argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>, <argument><expr><name>MAX_ADDR_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>private_vstream_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_VSTREAM_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_RD_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>write_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_WR_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr>:</case>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_PATH</name></expr>:</case>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>, <argument><expr><name>MAX_ADDR_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_FD</name></expr>:</case>
			<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_CACHE_SEEK</name></expr>:</case>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_CACHE_SEEK</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>private_vstream_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>conn_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>private_vstream_connect_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>,
			<argument><expr><name>conn_timeout</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>private_vstream_connect_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_mode</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>conn_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_bufsize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>he_errorp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>addr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>acl_inet_connect_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>,
			<argument><expr><name>conn_timeout</name></expr></argument>, <argument><expr><name>he_errorp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>acl_unix_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_mode</name></expr></argument>, <argument><expr><name>conn_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>private_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_FLAG_RW</name></expr></argument>, <argument><expr><name>rw_bufsize</name></expr></argument>,
			<argument><expr><name>rw_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_ADDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>,
		<argument><expr><name>MAX_ADDR_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>, <argument><expr><name>MAX_ADDR_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>stream</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>private_vstream_free</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃÑÓ³ÙÊÍ·Å±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_DEFER_FREE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>private_array_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
		 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
		 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
				<call><name>private_array_index</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<comment type="block">/* Ö»Ëù½«´Ëµ÷ÓÃ·ÅÔÚ close_fn Ç°Ãæ£¬ÊÇÎªÁË·ÀÖ¹ÓÐÈËÎóÔÚ
			 * close_fn Àïµ÷ÓÃÁËÉ¾³ý»Øµ÷º¯ÊýµÄ²Ù×÷¶øÔì³É¶ÔÍ¬Ò»ÄÚ´æ
			 * µÄ¶à´ÎÊÍ·Å
			 */</comment>
			<expr_stmt><expr><call><name>private_array_delete</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>private_array_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ACL_FILE_INVALID</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>addr_local</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>private_vstream_close</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃÑÓ³ÙÊÍ·Å±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_DEFER_FREE</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>private_vstream_fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>private_array_size</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
		 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
		 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
				<call><name>private_array_index</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<comment type="block">/* Ö»Ëù½«´Ëµ÷ÓÃ·ÅÔÚ close_fn Ç°Ãæ£¬ÊÇÎªÁË·ÀÖ¹ÓÐÈËÎóÔÚ
			 * close_fn Àïµ÷ÓÃÁËÉ¾³ý»Øµ÷º¯ÊýµÄ²Ù×÷¶øÔì³É¶ÔÍ¬Ò»ÄÚ´æ
			 * µÄ¶à´ÎÊÍ·Å
			 */</comment>
			<expr_stmt><expr><call><name>private_array_delete</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>private_array_destroy</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>close_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_FILE_INVALID</name> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>fclose_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>stream</name><operator>-&gt;</operator><name>fclose_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>addr_local</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
