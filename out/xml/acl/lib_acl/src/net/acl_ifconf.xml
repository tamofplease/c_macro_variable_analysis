<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/net/acl_ifconf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_valid_hostname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_ifconf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAFE_COPY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ACL_SAFE_STRNCPY((x), (y), sizeof(x))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_IFCONF</name></name> <modifier>*</modifier></type><name>ifconf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_IFCONF</name></name> <modifier>*</modifier></type><name>ifconf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_IFCONF</name></name> <modifier>*</modifier></type><name>ifconf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_IFCONF</name></name> <modifier>*</modifier></type><name>ifconf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name>sep</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ifaddr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ifaddr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>ACL_ADDR_SEP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>  <comment type="block">/* xxx */</comment>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* in order to avoid the gcc7.x warning, we should copy the
		 * data into buf and copy to the addr from buf.
		 */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%c%d"</literal></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifaddr</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ifaddr_copy</name><parameter_list>(<parameter><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name> <init>= <expr><operator>(</operator><name>ACL_IFCONF</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFCONF</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name>  <operator>=</operator> <operator>(</operator><name>ACL_IFADDR</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the iterator callback */</comment>
	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><name>ifconf</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_SUNOS5</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sockio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_LINUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_MACOSX</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>

<function><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>acl_get_ifaddrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name><modifier>*</modifier></type> <name>ifaddrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name>  <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>    <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifaddrs</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): getifaddrs error=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>addrs</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ifa</name> <operator>=</operator> <name>ifaddrs</name></expr>;</init> <condition><expr><name>ifa</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ifa</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>    <name>family</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_UP</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ifa</name><operator>-&gt;</operator><name>ifa_flags</name></name> <operator>&amp;</operator> <name>IFF_RUNNING</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>family</name> <operator>=</operator> <name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>getnameinfo</name><argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>NI_MAXHOST</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): getnameinfo error=%s, "</literal>
				<literal type="string">"ifa_name=%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>saddr</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>ifaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ifconf</name> <operator>=</operator> <call><name>ifconf_create</name><argument_list>(<argument><expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>addrs</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name> <init>= <expr><operator>(</operator><name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ifaddr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ifconf</name></expr>;</return>
</block_content>}</block></function>

<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>acl_get_ifaddrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name> <modifier>*</modifier></type><name>ifaces</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ifaces_size</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ifreq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifconf</name></name></type> <name>param</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sock</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create socket error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ifaces</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>ifaces_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ifc_len</name></name> <operator>=</operator> <name>ifaces_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>param</name><operator>.</operator><name>ifc_req</name></name> <operator>=</operator> <name>ifaces</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SIOCGIFCONF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ioctl error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>ifc_len</name></name> <operator>&lt;</operator> <name>ifaces_size</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ifaces_size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ifaces</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>ifaces_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ifconf</name> <operator>=</operator> <call><name>ifconf_create</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>param</name><operator>.</operator><name>ifc_len</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ifreq</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_SOCKADDR</name> <modifier>*</modifier></type><name>saddr</name> <init>= <expr><operator>(</operator><name>ACL_SOCKADDR</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ifaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ifr_addr</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_IFADDR</name>   <modifier>*</modifier></type><name>ifa</name>   <init>= <expr><operator>(</operator><name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>acl_inet_ntop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>saddr</name><operator>-&gt;</operator><name>sa</name></name></expr></argument>, <argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifa</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>ifaces</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ifr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>  <comment type="block">/* reset the ifconf-&gt;length */</comment>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ifconf</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name> <name>(</name><name>lib</name><name>,</name> <cpp:literal>"Iphlpapi.lib"</cpp:literal><name>)</name></cpp:pragma>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>MS_VC6</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iptypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Ipifcons.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>HRESULT</name> <name>STDAPICALLTYPE</name></type> <name>PGAINFO</name><parameter_list>(<parameter><decl><type><name>PIP_ADAPTER_INFO</name></type> <name>pAdapterInfo</name></decl></parameter>, <parameter><decl><type><name>PULONG</name></type> <name>pOutBufLen</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>acl_get_ifaddrs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IP_ADAPTER_INFO</name></type> <name>info_temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>infos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ULONG</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HMODULE</name></type> <name>hInst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGAINFO</name> <modifier>*</modifier></type><name>pGAInfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hInst</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"iphlpapi.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hInst</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"iphlpapi.dll not supported!"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pGAInfo</name> <operator>=</operator> <operator>(</operator><name>PGAINFO</name><operator>*</operator><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>,<argument><expr><literal type="string">"GetAdaptersInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pGAInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"can't find GetAdaptersInfo!"</literal></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pGAInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info_temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GetAdaptersInfo error"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>infos</name> <operator>=</operator> <operator>(</operator><name>IP_ADAPTER_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>pGAInfo</name><argument_list>(<argument><expr><name>infos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GetAdaptersInfo eror"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ifconf</name> <operator>=</operator> <call><name>ifconf_create</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IP_ADAPTER_INFO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>info</name> <operator>=</operator> <name>infos</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>MIB_IF_TYPE_LOOPBACK</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>IpAddressList</name><operator>.</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_is_ip</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>IpAddressList</name><operator>.</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>AdapterName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>Description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>,
			<argument><expr><name><name>info</name><operator>-&gt;</operator><name>IpAddressList</name><operator>.</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>saddr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name>
			<operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name> <operator>=</operator> <operator>(</operator><name>ACL_IFADDR</name><operator>*</operator><operator>)</operator> <call><name>acl_myrealloc</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>,
					<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>  <comment type="block">/* reset the ifconf-&gt;length */</comment>
	<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>hInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ifconf</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* MS_VC6  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Iphlpapi.h&gt;</cpp:file></cpp:include>

<function><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>acl_get_ifaddrs</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IP_ADAPTER_INFO</name></type> <name>info_temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>infos</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ULONG</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>j</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetAdaptersInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info_temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): GetAdaptersInfo eror(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>infos</name> <operator>=</operator> <operator>(</operator><name>IP_ADAPTER_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GetAdaptersInfo</name><argument_list>(<argument><expr><name>infos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): GetAdaptersInfo eror(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ifconf</name> <operator>=</operator> <call><name>ifconf_create</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IP_ADAPTER_INFO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>info</name> <operator>=</operator> <name>infos</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>Next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>Type</name></name> <operator>==</operator> <name>MIB_IF_TYPE_LOOPBACK</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>IpAddressList</name><operator>.</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_is_ip</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>IpAddressList</name><operator>.</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>AdapterName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>Description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>,
			<argument><expr><name><name>info</name><operator>-&gt;</operator><name>IpAddressList</name><operator>.</operator><name>IpAddress</name><operator>.</operator><name>String</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>saddr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name>
			<operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name> <operator>=</operator> <operator>(</operator><name>ACL_IFADDR</name><operator>*</operator><operator>)</operator> <call><name>acl_myrealloc</name><argument_list>(
				<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>, <argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ifconf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>  <comment type="block">/* reset the ifconf-&gt;length */</comment>
	<return>return <expr><name>ifconf</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !MS_VC6 */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknow OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>acl_free_ifaddrs</name><parameter_list>(<parameter><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ifconf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ifconf</name><operator>-&gt;</operator><name>addrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ifconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* format: xxx.xxx.xxx.* or xxx.xxx.*.* or xxx.*.*.* */</comment>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>pattern_tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>ip_tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>       <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQ</name></cpp:macro> <cpp:value>!strcmp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPV4_MATCH</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(EQ((p), "*") || EQ((p), "*.*.*.*") || EQ((p), "0.0.0.0"))</cpp:value></cpp:define>
	<comment type="block">/* for "*" or "*.*.*.*" or "0.0.0.0" */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>IPV4_MATCH</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pattern_tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ip_tokens</name>      <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pattern_tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>pattern_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ip_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ip_tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>pattern_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ip_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>ip_tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>pattern_tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>pattern_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ip_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>pattern_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>ip_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* for ":port" or "|port" */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH1</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(p) == ':' || *(p) == ACL_ADDR_SEP))</cpp:value></cpp:define>

<comment type="block">/* for "*:port" or "*#port" */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH2</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(p) == '*' &amp;&amp; (*((p) + 1) == ':' || *((p) + 1) == ACL_ADDR_SEP))</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * pattern for ipv4:
 *   *|port, *:port, |port, :port, *.*.*.*:port, 0.0.0.0:port, xxx.xxx.xxx.xxx:port,
 *   *, *.*.*.*, 0.0.0.0, xxx.xxx.xxx.xxx
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ipv4_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* for "port" */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_alldig</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ifaddr_clone</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>addr</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>MATCH1</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH2</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>acl_alldig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ifaddr_clone</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>addr</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match_ipv4</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>acl_alldig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ifaddr_clone</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * pattern for ipv6:
 *   *|port, |port, *, port
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ipv6_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>port</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* for "port" */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_alldig</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ifaddr_clone</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>addr</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>MATCH1</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH2</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>acl_alldig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ifaddr_clone</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>addr</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_valid_ipv6_hostaddr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>acl_alldig</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ifaddr_clone</name><argument_list>(<argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patterns_addrs_add</name><parameter_list>(<parameter><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>patterns</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name></decl></parameter>, <parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>addrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>patterns</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  <modifier>*</modifier></type><name>pattern</name>      <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>&amp;</operator><name><name>ifaddr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>sa</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ipv4_clone</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
		<if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ipv6_clone</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>acl_ifconf_search</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patterns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IFCONF</name> <modifier>*</modifier></type><name>ifconf</name> <init>= <expr><call><name>acl_get_ifaddrs</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ifconf2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name>   <modifier>*</modifier></type><name>patterns_tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name>  <modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>    <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ifconf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s:  acl_get_ifaddrs error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>addrs</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>patterns_tokens</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>, <argument><expr><literal type="string">"\"',; \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>ifconf</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>patterns_addrs_add</name><argument_list>(<argument><expr><name>patterns_tokens</name></expr></argument>, <argument><expr><name>ifaddr</name></expr></argument>, <argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* just for all unix domain path */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>patterns_tokens</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_valid_hostaddr</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* the left are used as UNIX doamin except for IP addr */</comment>
		<expr_stmt><expr><name>ifaddr</name> <operator>=</operator> <operator>(</operator><name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IFADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>un</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>patterns_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_free_ifaddrs</name><argument_list>(<argument><expr><name>ifconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>table</name>   <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ifconf2</name> <operator>=</operator> <call><name>ifconf_create</name><argument_list>(<argument><expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reset the length to 0 for adding unique real addr */</comment>
	<expr_stmt><expr><name><name>ifconf2</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>addrs</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_IFADDR</name> <modifier>*</modifier></type><name>ifaddr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ACL_IFADDR</name> <operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_htable_find</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ifaddr_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ifconf2</name><operator>-&gt;</operator><name>addrs</name><index>[<expr><name><name>ifconf2</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>ifaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ifconf2</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ifconf2</name></expr>;</return>
</block_content>}</block></function>
</unit>
