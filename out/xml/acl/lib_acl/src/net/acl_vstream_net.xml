<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/net/acl_vstream_net.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>HP_UX</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE_EXTENDED</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_connect.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_host_port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_valid_hostname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_vstream_net.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_listen_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlen</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>io_bufsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>io_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type>   <name>listenfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>         <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>addr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>qlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* This maybe unix addr, such as '/home/test/listen.sock' */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_valid_unix</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>listenfd</name> <operator>=</operator> <call><name>acl_unix_listen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>listenfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <name>ACL_INET_FLAG_NBLOCK</name></expr> ?</condition><then>
			<expr><name>ACL_NON_BLOCKING</name></expr> </then><else>: <expr><name>ACL_BLOCKING</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sstream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_FLAG_RW</name></expr></argument>, <argument><expr><name>io_bufsize</name></expr></argument>,
			<argument><expr><name>io_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_LISTEN_UNIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>sstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_socket_close</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: open vstream error, addr(%s)"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>sstream</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* addr such as '192.168.0.1|80' */</comment>
	<expr_stmt><expr><name>listenfd</name> <operator>=</operator> <call><name>acl_inet_listen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>listenfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: listen addr(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>sstream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_FLAG_RW</name></expr></argument>,
		<argument><expr><name>io_bufsize</name></expr></argument>, <argument><expr><name>io_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_LISTEN_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getsockname</name><argument_list>(<argument><expr><name>listenfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: getsockname error(%s) for sock(%d)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>listenfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else  <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>sstream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_listen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_listen_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>ACL_INET_FLAG_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_accept_ex</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>cstream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>connfd</name> <init>= <expr><name>ACL_SOCKET_INVALID</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>servfd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sstream</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sstream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>connfd</name> <operator>=</operator> <call><name>acl_accept</name><argument_list>(<argument><expr><name>servfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>sstream</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN_IOCP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>connfd</name> <operator>=</operator> <call><name>acl_accept</name><argument_list>(<argument><expr><name>servfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sstream</name><operator>-&gt;</operator><name>iocp_sock</name></name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>connfd</name> <operator>=</operator> <name><name>sstream</name><operator>-&gt;</operator><name>iocp_sock</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sstream</name><operator>-&gt;</operator><name>iocp_sock</name></name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>

		<comment type="block">/* iocp ·½Ê½ÏÂ£¬Ðèµ÷ÓÃÏÂÃæ¹ý³ÌÒÔÔÊÐíµ÷ÓÃ
		 * getpeername/getsockname
		 */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_UPDATE_ACCEPT_CONTEXT</name></expr></argument>,
			<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>servfd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>servfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown os"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>connfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cstream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cstream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_FLAG_RW</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>sstream</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr></argument>,
			<argument><expr><name><name>sstream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>,
			<argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÈÃ cstream µÄ context ³ÉÔ±¼Ì³Ð sstream µÄ context ³ÉÔ±. */</comment>
		<expr_stmt><expr><name><name>cstream</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name><name>sstream</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_reset</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTREAM_SET_SOCK</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>, <argument><expr><name>connfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sstream</name><operator>-&gt;</operator><name>sa_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_local_addr</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>, <argument><expr><name><name>sstream</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>cstream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>cstream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_accept</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_accept_ex</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_timed_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_mode</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>connect_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_bufsize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstream_timed_connect"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type> <name>connfd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>family</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>addr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: addr null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>acl_valid_unix</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>connfd</name> <operator>=</operator> <call><name>acl_unix_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_mode</name></expr></argument>, <argument><expr><name>connect_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><name>connfd</name> <operator>=</operator> <call><name>acl_inet_timed_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_mode</name></expr></argument>,
			     <argument><expr><name>connect_timeout</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>connfd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_FLAG_RW</name></expr></argument>,
		    <argument><expr><name>rw_bufsize</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>client</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_socket_close</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* must set the IO timeout in ms unit */</comment>
	<expr_stmt><expr><call><name>ACL_VSTREAM_SET_MS</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>family</name> <operator>=</operator> <call><name>acl_getsockfamily</name><argument_list>(<argument><expr><name>connfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>family</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<case>case <expr><name>AF_UNIX</name></expr>:</case>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_UNIX</name></expr>;</expr_stmt>
		<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<case>case <expr><name>AF_INET</name></expr>:</case>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_INET4</name></expr>;</expr_stmt>
		<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
	<case>case <expr><name>AF_INET6</name></expr>:</case>
		<expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_INET6</name></expr>;</expr_stmt>
		<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<default>default:</default>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>client</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_connect_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>block_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>connect_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>rw_bufsize</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>acl_vstream_timed_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_mode</name></expr></argument>,
		 <argument><expr><name>connect_timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>rw_timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>rw_bufsize</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* reset rw_timeout with second unit */</comment>
	<if_stmt><if>if <condition>(<expr><name>conn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_VSTREAM_CLR_MS</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTREAM_SET_RWTIMO</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>rw_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>conn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_mode</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>connect_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_connect_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>block_mode</name></expr></argument>, <argument><expr><name>connect_timeout</name></expr></argument>,
			<argument><expr><name>rw_timeout</name></expr></argument>, <argument><expr><name>rw_bufsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>udp_read</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>sa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>sa_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>sa_peer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"0.0.0.0|0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>&gt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <call><name>acl_read_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>sa_peer_size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then>
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name><name>stream</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name><name>stream</name><operator>-&gt;</operator><name>sa_local_len</name></name> <operator>&gt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>sa_peer_len</name></name></expr> ?</condition><then>
			<expr><name><name>stream</name><operator>-&gt;</operator><name>sa_peer_len</name></name></expr> </then><else>: <expr><name><name>stream</name><operator>-&gt;</operator><name>sa_local_len</name></name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>sa_local</name></name>
			  <operator>&amp;&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>sa_local</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstream_set_peer_addr</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>stream</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_peer_addr</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>udp_write</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>sa_peer_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): peer addr null"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>sa_peer_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_bind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type>   <name>sock</name> <init>= <expr><call><name>acl_udp_bind</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>saddr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type>    <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: bind addr %s error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name>rw_timeout</name></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ±¾µØ°ó¶¨µØÖ· */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>saddr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_set_local_addr</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>saddr</name><operator>.</operator><name>sa</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ×¢²áÁ÷¶ÁÐ´»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>udp_read</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>udp_write</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_set_udp_io</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>udp_read</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>udp_write</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
