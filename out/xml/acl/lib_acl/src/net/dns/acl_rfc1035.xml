<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/net/dns/acl_rfc1035.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>  <comment type="block">/* for snprintf */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_rfc1035.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_RFC1035_MAXLABELSZ</name></cpp:macro>		<cpp:value>63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_RFC1035_UNPACK_ERROR</name></cpp:macro>	<cpp:value>15</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_RFC1035_UNPACK_DEBUG</name></cpp:macro>  <cpp:value>acl_msg_error("unpack error at %s:%d", __FILE__,__LINE__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_RFC1035_UNPACK_DEBUG</name></cpp:macro>  <cpp:value>(void) 0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * rfc1035_header_pack()
 *
 * Packs a ACL_RFC1035_header structure into a buffer.
 * Returns number of octets packed (should always be 12)
 */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rfc1035_header_pack</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type> <name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_header_pack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>t</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: sz(%d) &lt; 12"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>qr</name></name> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>opcode</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>aa</name></name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>tc</name></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>rd</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>ra</name></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>|=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>rcode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: off(%d) != 12"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_label_pack()
 *
 * Packs a label into a buffer.  The format of
 * a label is one octet specifying the number of character
 * bytes to follow.  Labels must be smaller than 64 octets.
 * Returns number of octets packed.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_label_pack</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_label_pack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>label</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>label</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: '.' exist in label(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>ACL_RFC1035_MAXLABELSZ</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ACL_RFC1035_MAXLABELSZ</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: sz(%d) &lt; len(%d) + 1"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <name>off</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_name_pack()
 *
 * Packs a name into a buffer.  Names are packed as a
 * sequence of labels, terminated with NULL label.
 * Note message compression is not supported here.
 * Returns number of octets packed.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_name_pack</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_name_pack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * NOTE: use of strtok here makes names like foo....com valid.
	 */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <call><name>rfc1035_label_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <call><name>rfc1035_label_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: off(%d) &gt; sz(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_question_pack()
 *
 * Packs a QUESTION section of a message.
 * Returns number of octets packed.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_question_pack</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>tclass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_question_pack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>off</name> <operator>+=</operator> <call><name>rfc1035_name_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>tclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: off(%d) &gt; sz(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_name_unpack()
 *
 * Unpacks a Name in a message buffer into a char*.
 * Note 'buf' points to the beginning of the whole message,
 * 'off' points to the spot where the Name begins, and 'sz'
 * is the size of the whole message.  'name' must be allocated
 * by the caller.
 *
 * Supports the RFC1035 message compression through recursion.
 *
 * Updates the new buffer offset.
 *
 * Returns 0 (success) or 1 (error)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_name_unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>rdlength</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rdepth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_name_unpack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: ns(%d) &lt;= 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><name>ACL_RFC1035_UNPACK_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: *off(%d) &gt;= sz(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><name>ACL_RFC1035_UNPACK_ERROR</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">191</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* blasted compression */</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>ptr</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>rdepth</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>	<comment type="block">/* infinite pointer loop */</comment>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<comment type="block">/* Sanity check */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>s</name> <operator>&amp;</operator> <literal type="number">0x3FFF</literal></expr>;</expr_stmt>
			<comment type="block">/* Make sure the pointer is inside this message */</comment>
			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>rfc1035_name_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>rdlength</name></expr></argument>,
				<argument><expr><name>name</name> <operator>+</operator> <name>no</name></expr></argument>, <argument><expr><name>ns</name> <operator>-</operator> <name>no</name></expr></argument>, <argument><expr><name>rdepth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>ACL_RFC1035_MAXLABELSZ</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * "(The 10 and 01 combinations are reserved for future use.)"
			 */</comment>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>ns</name> <operator>-</operator> <name>no</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="block">/* label won't fit */</comment>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition>	<block>{<block_content> <comment type="block">/* message is too short */</comment>
				<return>return <expr><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>no</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>no</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>name</name> <operator>+</operator> <operator>(</operator><name>no</name><operator>++</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>rdlength</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>rdlength</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>no</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ns</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>no</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>name</name> <operator>+</operator> <name>no</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* make sure we didn't allow someone to overflow the name buffer */</comment>
	<if_stmt><if>if <condition>(<expr><name>no</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ns</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: no(%d) &gt; ns(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>no</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><name>ACL_RFC1035_UNPACK_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_rfc1035_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<struct>struct <name>__ERRMSG</name><block>{
		<decl_stmt><decl><type><name>int</name></type>   <name>errnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	}</block>;</struct>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>__ERRMSG</name></name></type> <name><name>errmsg</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"No error condition"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"Format Error: The name server was unable to "</literal>
			 <literal type="string">"interpret the query."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"Server Failure: The name server was "</literal>
			 <literal type="string">"unable to process this query."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"Name Error: The domain name does not exist."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="string">"Not Implemented: The name server does "</literal>
				<literal type="string">"not support the requested kind of query."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"Refused: The name server refuses to "</literal>
				<literal type="string">"perform the specified operation."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_RFC1035_UNPACK_ERROR</name></expr>, <expr><literal type="string">"The DNS reply message is corrupt or could "</literal>
			<literal type="string">"not be safely parsed."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unknown</name> <init>= <expr><literal type="string">"Unknown Error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>errmsg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>errmsg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>errnum</name> <operator>==</operator> <operator>-</operator><name>errnum</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name><name>errmsg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>unknown</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rfc1035_set_errno</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_rfc1035_query_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>la</name></decl>, <decl><type ref="prev"/><name>lb</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>qtype</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>qtype</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>qclass</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>qclass</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>la</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lb</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>la</name> <operator>!=</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Trim root label(s) */</comment>
		<while>while <condition>(<expr><name>la</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>la</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>la</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<while>while <condition>(<expr><name>lb</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>lb</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>lb</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>la</name> <operator>!=</operator> <name>lb</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>la</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_rr_pack()
 *
 * Unpacks a RFC1035 Resource Record into 'RR' from a message buffer.
 * The caller must free RR-&gt;rdata!
 *
 * Updates the new message buffer offset.
 *
 * Returns &gt; 0 (success) or 0 (error)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_rr_pack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_RR</name> <modifier>*</modifier></type><name>RR</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_rr_pack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>off_saved</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>rfc1035_name_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>RR</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>tclass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>RR</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_RFC1035_TYPE_PTR</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_NS</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_CNAME</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_TXT</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>off_saved</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <call><name>rfc1035_name_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name>off_saved</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off_saved</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> ,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>, <argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>+=</operator> <name><name>RR</name><operator>-&gt;</operator><name>rdlength</name></name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>off</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: off(%d) &gt; sz(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>off</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>rfc1035_build_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qclass</name></decl></parameter>,
	<parameter><decl><type><name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_build_query"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_MESSAGE</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: sz(%d) &lt; 512, too small"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>qid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>qr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>rd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>		<comment type="block">/* QUERY */</comment>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>qdcount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_header_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_question_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>,
			<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>qclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name>  <operator>=</operator> <name>qtype</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qclass</name></name> <operator>=</operator> <name>qclass</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: offset(%d) &gt; sz(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_query4a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rfc1035_build_query</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>qid</name></expr></argument>, <argument><expr><name>ACL_RFC1035_TYPE_A</name></expr></argument>,
			 <argument><expr><name>ACL_RFC1035_CLASS_IN</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_query4aaaa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rfc1035_build_query</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>qid</name></expr></argument>, <argument><expr><name>ACL_RFC1035_TYPE_AAAA</name></expr></argument>,
			<argument><expr><name>ACL_RFC1035_CLASS_IN</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_query4mx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rfc1035_build_query</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>qid</name></expr></argument>, <argument><expr><name>ACL_RFC1035_TYPE_MX</name></expr></argument>,
			<argument><expr><name>ACL_RFC1035_CLASS_IN</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_query4ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type> <name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"RFC1035BuildPTRQuery"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_MESSAGE</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>rev</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"%u.%u.%u.%u.in-addr.arpa."</literal></expr></argument>,
		<argument><expr><name>i</name> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>qid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>qr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>rd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>		<comment type="block">/* QUERY */</comment>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>qdcount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_header_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_question_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
			<argument><expr><name>ACL_RFC1035_TYPE_PTR</name></expr></argument>, <argument><expr><name>ACL_RFC1035_CLASS_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name> <operator>=</operator> <name>ACL_RFC1035_TYPE_PTR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qclass</name></name> <operator>=</operator> <name>ACL_RFC1035_CLASS_IN</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: offset(%d) &gt; sz(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_rfc1035_set_query_id</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name> <init>= <expr><call><name>htons</name><argument_list>(<argument><expr><name>qid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<comment type="block" format="doxygen">/**
 * rfc1035_header_unpack()
 *
 * Unpacks a RFC1035 message header buffer into the header fields
 * of the ACL_RFC1035_MESSAGE structure.
 *
 * Updates the buffer offset, which is the same as number of
 * octects unpacked since the header starts at offset 0.
 *
 * Returns 0 (success) or 1 (error)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_header_unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>,
	<parameter><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_header_unpack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>t</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: *off(%d) != 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><name>ACL_RFC1035_UNPACK_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The header is 12 octets.  This is a bogus message if the size
	 * is less than that.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>qr</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>aa</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>tc</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>rd</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ra</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

	<comment type="block">/* We might want to check that the reserved 'Z' bits (6-4) are
	 * all zero as per RFC 1035.  If not the message should be
	 * rejected.
	 */</comment>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>rcode</name></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>qdcount</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: *off(%d) != 12"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><name>ACL_RFC1035_UNPACK_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_query_unpack()
 *
 * Unpacks a RFC1035 Query Record into 'query' from a message buffer.
 *
 * Updates the new message buffer offset.
 *
 * Returns 0 (success) or 1 (error)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_query_unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>,
	<parameter><decl><type><name>ACL_RFC1035_QUERY</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rfc1035_name_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
		<argument><expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>query</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>query</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qtype</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>off</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>qclass</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * rfc1035_rr_unpack()
 *
 * Unpacks a RFC1035 Resource Record into 'RR' from a message buffer.
 * The caller must free RR-&gt;rdata!
 *
 * Updates the new message buffer offset.
 *
 * Returns 0 (success) or 1 (error)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rfc1035_rr_unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_RR</name> <modifier>*</modifier></type><name>RR</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_rr_unpack"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>rdlength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>rdata_off</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rfc1035_name_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>RR</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
		<argument><expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>RR</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>RR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Make sure the remaining message has enough octets for the
	* rest of the RR fields.
	*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>RR</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>RR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>tclass</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>rdlength</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+</operator> <name>rdlength</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* We got a truncated packet.  'dnscache' truncates UDP
		 * replies at 512 octets, as per RFC 1035.
		 */</comment>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>RR</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>RR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>rdlength</name></name> <operator>=</operator> <name>rdlength</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>RR</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_RFC1035_TYPE_CNAME</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_SOA</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_NS</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_TXT</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_PTR</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_WKS</name></expr>:</case>
		<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rdata_off</name> <operator>=</operator> <operator>*</operator><name>off</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>rdlength</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* Filled in by rfc1035_name_unpack */</comment>

		<if_stmt><if>if <condition>(<expr><call><name>rfc1035_name_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rdata_off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RR</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>,
			<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>, <argument><expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rdata_off</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+</operator> <name>rdlength</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* This probably doesn't happen for valid packets, but
			 * I want to make sure that NameUnpack doesn't go beyond
			 * the RDATA area.
			 */</comment>
			<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>RR</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>RR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_RFC1035_TYPE_A</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_AAAA</name></expr>:</case>
	<case>case <expr><name>ACL_RFC1035_TYPE_MX</name></expr>:</case>
	<default>default:</default>
		<expr_stmt><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>rdlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>RR</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>off</name><operator>)</operator></expr></argument>, <argument><expr><name>rdlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>off</name><operator>)</operator> <operator>+=</operator> <name>rdlength</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>&gt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: *off(%d) &gt; sz(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><name>ACL_RFC1035_UNPACK_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_RFC1035_RR</name> <modifier>*</modifier></type><name>rfc1035_unpack2rr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_RR</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rr</name> <operator>=</operator> <operator>(</operator><name>ACL_RFC1035_RR</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_RFC1035_RR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>off</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>	<comment type="block">/* corrupt packet */</comment>
			<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>rfc1035_rr_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>rr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>acl_rfc1035_response_unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>ACL_RFC1035_MESSAGE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rfc1035_header_unpack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rfc1035_set_errno</name><argument_list>(<argument><expr><name>ACL_RFC1035_UNPACK_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>rcode</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rfc1035_set_errno</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>rcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>ancount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* do nothing */</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* This can not be an answer to our queries.. */</comment>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid qdcount=%d &gt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <operator>(</operator><name>ACL_RFC1035_QUERY</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_RFC1035_QUERY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>rfc1035_query_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unpack error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>answer</name></name> <operator>=</operator> <call><name>rfc1035_unpack2rr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>nr</name></expr>;</expr_stmt>  <comment type="block">/* reset the valid ancount */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>nscount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>authority</name></name> <operator>=</operator> <call><name>rfc1035_unpack2rr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>,
			<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>nr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>authority</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): nscount=%d, authority null"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>arcount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>additional</name></name> <operator>=</operator> <call><name>rfc1035_unpack2rr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>,
			<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>nr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>additional</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): arcount=%d, addrional null"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>acl_rfc1035_request_unpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>ACL_RFC1035_MESSAGE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>rfc1035_header_unpack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rfc1035_set_errno</name><argument_list>(<argument><expr><name>ACL_RFC1035_UNPACK_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>rcode</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rfc1035_set_errno</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>rcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* This can not be an answer to our queries.. */</comment>
		<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rfc1035_set_errno</name><argument_list>(<argument><expr><name>ACL_RFC1035_UNPACK_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <operator>(</operator><name>ACL_RFC1035_QUERY</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_RFC1035_QUERY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>msg</name><operator>-&gt;</operator><name>qdcount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>rfc1035_query_unpack</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><operator>-&gt;</operator><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ACL_RFC1035_UNPACK_DEBUG</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rfc1035_set_errno</name><argument_list>(<argument><expr><name>ACL_RFC1035_UNPACK_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>msg</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rfc1035_rr_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_RFC1035_RR</name> <modifier>*</modifier></type> <name>rr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"rfc1035_rr_destroy"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: n(%d) &lt;= 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>rr</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rdata</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>rr</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_rfc1035_message_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>answer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rfc1035_rr_destroy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>answer</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>authority</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rfc1035_rr_destroy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>authority</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>additional</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>rfc1035_rr_destroy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>additional</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_reply4a</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>ips</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain_root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dnsname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dnsip</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RFC1035_REPLY</name></type> <name>reply</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>hostname</name></name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>ips</name></name> <operator>=</operator> <name>ips</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>domain_root</name></name> <operator>=</operator> <name>domain_root</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>dns_name</name></name> <operator>=</operator> <name>dnsname</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>dns_ip</name></name> <operator>=</operator> <name>dnsip</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>ip_type</name></name> <operator>=</operator> <name>ACL_RFC1035_TYPE_A</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>qid</name></name> <operator>=</operator> <name>qid</name></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_rfc1035_build_reply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_reply4aaaa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_ARGV</name> <modifier>*</modifier></type><name>ips</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain_root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dnsname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dnsip</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RFC1035_REPLY</name></type> <name>reply</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>hostname</name></name> <operator>=</operator> <name>hostname</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>ips</name></name> <operator>=</operator> <name>ips</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>domain_root</name></name> <operator>=</operator> <name>domain_root</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>dns_name</name></name> <operator>=</operator> <name>dnsname</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>dns_ip</name></name> <operator>=</operator> <name>dnsip</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>ip_type</name></name> <operator>=</operator> <name>ACL_RFC1035_TYPE_AAAA</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <literal type="number">600</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>reply</name><operator>.</operator><name>qid</name></name> <operator>=</operator> <name>qid</name></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_rfc1035_build_reply</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>save_addr2rr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_RR</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ACL_RFC1035_TYPE_A</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nip</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nip</name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>-&gt;</operator><name>rdata</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rr</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nip</name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name></expr>;</return>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ACL_RFC1035_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>in6</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* when '%' was appended to the IPV6's addr */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in6</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in6</name><operator>.</operator><name>sin6_port</name></name>   <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1600</literal><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <call><name>if_nametoindex</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): if_nametoindex error %s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid addr=%s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>-&gt;</operator><name>rdata</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rr</name><operator>-&gt;</operator><name>rdata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name><name>rr</name><operator>-&gt;</operator><name>rdlength</name></name></expr>;</return>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support type=%d"</literal></expr></argument>,
		      <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_rfc1035_build_reply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_REPLY</name> <modifier>*</modifier></type><name>reply</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RFC1035_MESSAGE</name></type> <name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_RR</name></type> <name>rr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>ips</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>reply</name><operator>-&gt;</operator><name>ips</name><operator>-&gt;</operator><name>argc</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>qid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>qr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>		<comment type="block">/* response */</comment>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>opcode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>		<comment type="block">/* QUERY */</comment>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>aa</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>tc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>rd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>ra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>rcode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>qdcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>ancount</name></name> <operator>=</operator> <ternary><condition><expr><name><name>reply</name><operator>-&gt;</operator><name>cname</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>reply</name><operator>-&gt;</operator><name>cname</name></name></expr> ?</condition><then>
		<expr><name><name>reply</name><operator>-&gt;</operator><name>ips</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>reply</name><operator>-&gt;</operator><name>ips</name><operator>-&gt;</operator><name>argc</name></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>nscount</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>reply</name><operator>-&gt;</operator><name>dns_name</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>reply</name><operator>-&gt;</operator><name>dns_name</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>.</operator><name>arcount</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>h</name><operator>.</operator><name>nscount</name></name> <operator>&amp;&amp;</operator> <name><name>reply</name><operator>-&gt;</operator><name>dns_ip</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>reply</name><operator>-&gt;</operator><name>dns_ip</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_header_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_question_pack</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>,
			<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>ip_type</name></name></expr></argument>, <argument><expr><name>ACL_RFC1035_CLASS_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>reply</name><operator>-&gt;</operator><name>cname</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>reply</name><operator>-&gt;</operator><name>cname</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ACL_RFC1035_TYPE_CNAME</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>tclass</name></name> <operator>=</operator> <name>ACL_RFC1035_CLASS_IN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>rdlength</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>cname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_rr_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>reply</name><operator>-&gt;</operator><name>ips</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>ip_type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>tclass</name></name> <operator>=</operator> <name>ACL_RFC1035_CLASS_IN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>save_addr2rr</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>ip_type</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>ips</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid ip=%s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument> , <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>ips</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_rr_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>nscount</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>domain_root</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ACL_RFC1035_TYPE_NS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>tclass</name></name> <operator>=</operator> <name>ACL_RFC1035_CLASS_IN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>rdlength</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>dns_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>dns_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_rr_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>arcount</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>dns_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>ip_type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>tclass</name></name> <operator>=</operator> <name>ACL_RFC1035_CLASS_IN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rr</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>reply</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>save_addr2rr</name><argument_list>(<argument><expr><name><name>reply</name><operator>-&gt;</operator><name>ip_type</name></name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>dns_ip</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid ip=%s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument> , <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>reply</name><operator>-&gt;</operator><name>dns_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>rfc1035_rr_pack</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>rdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>
</unit>
