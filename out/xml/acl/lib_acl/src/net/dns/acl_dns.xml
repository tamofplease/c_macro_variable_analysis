<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/net/dns/acl_dns.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_htable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_mask_addr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_vstream_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_dns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_rfc1035.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../aio/aio.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>ACL_DOMAIN_GROUP</name> <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>group</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>group_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>domain</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>excepts</name></decl>;</decl_stmt>
}</block></struct></type> <name>ACL_DOMAIN_GROUP</name>;</typedef>

<struct>struct <name>ACL_DNS_REQ</name> <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_MESSAGE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>nretry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>qid</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAFE_COPY</name></cpp:macro> <cpp:value>ACL_SAFE_STRNCPY</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>dns_stream_open</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* ACL_VSTREAM: ´ÓÊý¾ÝÁ÷¶ÁÈ¡Êý¾ÝµÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_read</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator><name>ACL_DNS</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>      <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* xxx: ±ØÐëÏÈ½«ÏµÍ³¿É¶Á±êÖ¾Î»ÖÃ0£¬ÒÔÃâÒýÆðÊÂ¼þÒýÇæµÄÖØ¸´´¥·¢ */</comment>
	<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>socklen_t</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): recvfrom error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ACL_VSTREAM: ÏòÊý¾ÝÁ÷Ð´È¡Êý¾ÝµÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_write</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator><name>ACL_DNS</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>      <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_ADDR</name>  <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dns_list's size(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¸ù¾Ýµ±Ç°IDºÅÈ¡Ä£»ñµÃÄ¿±êDNSµØÖ· */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>dns</name><operator>-&gt;</operator><name>dns_idx</name></name><operator>++</operator> <operator>%</operator> <name><name>dns</name><operator>-&gt;</operator><name>dns_list</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_idx</name></name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>dns</name><operator>-&gt;</operator><name>dns_list</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): addr null for %d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef> 
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive>  <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): sendto error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ¸ù¾ÝDNS²éÑ¯½á¹ûÉú³É ACL_DNS_DB ¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>build_dns_db</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>ttl_min</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name> <init>= <expr><call><name>acl_netdb_new</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HOSTNAME</name> <modifier>*</modifier></type><name>phost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name> <modifier>*</modifier></type><name>saddr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ttl_min</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ttl_min</name> <operator>=</operator> <literal type="number">100000000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>ancount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ACL_RFC1035_TYPE_A</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>phost</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HOSTNAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_HOSTNAME_TYPE_IPV4</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>saddr</name> <operator>=</operator> <operator>&amp;</operator><name><name>phost</name><operator>-&gt;</operator><name>saddr</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<comment type="block">/* ÕâÑùÖ±½Ó¸³ÖµÒª±ÈÓÃ memcpy ¿ìÐ© */</comment>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>MINGW</name></cpp:ifdef>
			<expr_stmt><expr><name><name>saddr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator>
				<operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name>saddr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator>
				<operator>*</operator><operator>(</operator><operator>(</operator><name>in_addr_t</name><operator>*</operator><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
			<expr_stmt><expr><name><name>saddr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator>
				<operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rdata</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* Ä¿Ç°¸ÃÄ£¿é½öÖ§³Ö IPV4 */</comment>
			<expr_stmt><expr><name><name>saddr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>saddr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>,
				<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ttl</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ttl_min</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ttl_min</name> <operator>&gt;</operator> <name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ttl_min</name> <operator>=</operator> <name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name></expr></argument>, <argument><expr><name>phost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ACL_RFC1035_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>phost</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HOSTNAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_HOSTNAME_TYPE_IPV6</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>phost</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>,
				<argument><expr><name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rdata</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>phost</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>,
				<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>phost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Ä¿Ç°¸ÃÄ£¿é½öÖ§³Ö IPV4 */</comment>
			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ttl</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ttl_min</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ttl_min</name> <operator>&gt;</operator> <name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ttl_min</name> <operator>=</operator> <name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name></expr></argument>, <argument><expr><name>phost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>ACL_RFC1035_TYPE_CNAME</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>phost</name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HOSTNAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_HOSTNAME_TYPE_CNAME</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>acl_snprintf</name><argument_list>(<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
				<argument><expr><name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ttl</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ttl_min</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ttl_min</name> <operator>&gt;</operator> <name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ttl_min</name> <operator>=</operator> <name><name>phost</name><operator>-&gt;</operator><name>ttl</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name></expr></argument>, <argument><expr><name>phost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dns_db</name><operator>-&gt;</operator><name>refer</name></name> <operator>=</operator> <name>phost</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dns_db</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>dns_db</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_safe_addr_check</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>from</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<comment type="block">/* ¼ì²éÏìÓ¦°üµÄ DNS µØÖ·Óë±¾µØÅäÖÃµÄµØÖ·ÊÇ·ñÆ¥Åä */</comment>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>dns-&gt;dns_list</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DNS_ADDR</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>ACL_DNS_ADDR</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name>
			<operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid from=%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_safe_net_check</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>from</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>dns-&gt;dns_list</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DNS_ADDR</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>ACL_DNS_ADDR</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_mask_addr</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>mask_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>s_addr</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid from=%s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dns_lookup_error</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): res NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): the dns is closed"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>req</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* È¡Ïû¶¨Ê±Æ÷ */</comment>
		<expr_stmt><expr><call><name>acl_aio_cancel_timer</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_timeout</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ´Ó²éÑ¯ÁÐ±íÉ¾³ý¸Ã²éÑ¯¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Í¨ÖªÓ¦ÓÃ²éÑ¯Ê§°Ü */</comment>
		<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>rcode</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ÊÍ·Å¸Ã²éÑ¯¶ÔÏó */</comment>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dns_lookup_ok</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ttl_min</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name>  <modifier>*</modifier></type><name>dns_db</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* È¡Ïû¶¨Ê±Æ÷ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_cancel_timer</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_timeout</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): the dns is closed"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* ´Ó²éÑ¯ÁÐ±íÉ¾³ý¸Ã²éÑ¯¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨ DNS ²éÑ¯½á¹û»º´æ¶ÔÏó£¬²¢¼ÓÈë±¾µØ»º´æÖÐ */</comment>
	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>build_dns_db</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ttl_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ·µ»Ø±¾´Î²éÑ¯½á¹ûËùÊ¹ÓÃµÄ DNS ·þÎñÆ÷µØÖ·*/</comment>
	<expr_stmt><expr><call><name>acl_netdb_set_ns</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dns</name><operator>-&gt;</operator><name>addr_from</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* »Øµ÷º¯ÊýÓÃ»§µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>rcode</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÊÍ·Å¸Ã²éÑ¯¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û»º´æ»úÖÆÔÊÐíÔò»º´æ¸Ã²éÑ¯½á¹û */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ttl_min</name> <operator>&lt;=</operator> <literal type="number">0</literal>
		<operator>||</operator> <call><name>acl_cache2_enter</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
			<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><name>ttl_min</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ÓÐDNS·þÎñÆ÷Êý¾Ý¿É¶ÁÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_lookup_callback</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>astream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator><name>ACL_DNS</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RFC1035_MESSAGE</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<comment type="block">/* ½âÎöDNSÏìÓ¦Êý¾Ý°ü */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>acl_rfc1035_response_unpack</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ancount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>dns_lookup_error</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÊÇ·ñ¼ì²é DNS Ô´/Ä¿µÄµØÖ·, ÒÔ±£Ö¤°²È«ÐÔ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_DNS_FLAG_CHECK_DNS_IP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>dns_safe_addr_check</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÊÇ·ñ¼ì²é DNS Ô´/Ä¿µÄÍøÂç, ÒÔ±£Ö¤°²È«ÐÔ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_DNS_FLAG_CHECK_DNS_NET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>dns_safe_net_check</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>dns_lookup_ok</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_rfc1035_message_destroy</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dns_stream_reopen_timer</name><parameter_list>(<parameter><decl><type><name>int</name> <name>event_type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator><name>ACL_DNS</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ´´½¨Ò»¸öÐÂµÄÌ×½Ó¿Ú */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>dns_stream_open</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Òì²½¶ÁDNS·þÎñÆ÷ÏìÓ¦Êý¾Ý */</comment>
		<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃ¶¨Ê±Æ÷ÖØÐÂ´ò¿ª UDP Ì×½Ó×Ö */</comment>
		<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>dns_stream_reopen_timer</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>,
			<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): the dns is closed"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Êý¾ÝÁ÷³ö´íÊ±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_lookup_close</name><parameter_list>(<parameter><decl><type><name>ACL_ASTREAM</name> <modifier>*</modifier><name>server</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dns_lookup_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator><name>ACL_DNS</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr></init></decl>;</decl_stmt>


	<comment type="block">/* ÉèÖÃ UDP ¾ä±úÎª NULL£¬ÒÔ·ÀÖ¹ÔÚÖØÐÂ´ò¿ªÇ°±»Ê¹ÓÃ£¬ÒòÎª±¾º¯Êý·µ»Øºó¸Ã
	 * Òì²½Á÷¶ÔÏó½«»á±»¹Ø±Õ
	 */</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ¶¨Ê±Æ÷ÖØÐÂ´ò¿ª UDP Ì×½Ó×Ö£¬²»Ó¦Á¢¼´´ò¿ª socket£¬ÒÔ·ÀÖ¹Æµ·±¹Ø±Õ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dns socket closed %s, re-open it in timer"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>dns_stream_reopen_timer</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>,
			<argument><expr><literal type="number">2</literal><operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ´´½¨DNS²éÑ¯µÄÒì²½Á÷ */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dns_stream_open</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ndk9 ¾ÓÈ»ÒªÇó acl_vstream_bind Ç°¼Ó·µ»ØÀàÐÍ£¿*/</comment>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><call><name>acl_vstream_bind</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0:0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_vstream_bind error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dns-&gt;aio = NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´´½¨Òì²½Á÷ */</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name> <operator>=</operator> <call><name>acl_aio_open</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_ctl</name><argument_list>(<argument><expr><name>stream</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr></argument>, <argument><expr><name>dns_read</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr></argument>, <argument><expr><name>dns_write</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>,
		<argument><expr><name>ACL_VSTREAM_CTL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ²éÑ¯Ì×½Ó¿Ú¿É¶Á¡¢¹Ø±ÕÊ±µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name>acl_aio_add_read_hook</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>, <argument><expr><name>dns_lookup_callback</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_aio_add_close_hook</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>, <argument><expr><name>dns_lookup_close</name></expr></argument>, <argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ¸ÃÒì²½Á÷Îª³ÖÐø¶Á×´Ì¬ */</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name><operator>-&gt;</operator><name>keep_read</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dns_lookup_send</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨DNS²éÑ¯Êý¾Ý°ü */</comment>
	<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_RFC1035_TYPE_A</name></expr>:</case>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_rfc1035_build_query4a</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><name><name>req</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_RFC1035_TYPE_AAAA</name></expr>:</case>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_rfc1035_build_query4aaaa</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><name><name>req</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_RFC1035_TYPE_MX</name></expr>:</case>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_rfc1035_build_query4mx</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><name><name>req</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not support type=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></switch>

	<comment type="block">/* ·¢ËÍÇëÇóDNS°ü */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_writen</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: astream null, wait for a while"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ²éÑ¯³¬Ê±µÄ»Øµ÷º¯Êý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dns_lookup_timeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>ACL_DNS_REQ</name><operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>dns</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>event_type</name> <operator>!=</operator> <name>ACL_EVENT_TIME</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid event_type(%d)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>req</name><operator>-&gt;</operator><name>nretry</name></name> <operator>&lt;=</operator> <name><name>dns</name><operator>-&gt;</operator><name>retry_limit</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>domain</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dns</name><operator>-&gt;</operator><name>dns_list</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>dns_lookup_send</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* ÉèÖÃ¶¨Ê±Æ÷ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_timeout</name></name></expr></argument>,
				<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>dns</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dns-&gt;aio NULL"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´Ó²éÑ¯ÁÐ±íÉ¾³ý¸Ã²éÑ¯¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* »Øµ÷º¯ÊýÓÃ»§µÄ»Øµ÷º¯Êý */</comment>
	<expr_stmt><expr><call><name><name>req</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>ACL_DNS_ERR_TIMEOUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÊÍ·Å¸Ã²éÑ¯¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dns_init</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name>       <operator>&amp;=</operator> <operator>~</operator><name>ACL_DNS_FLAG_ALLOC</name></expr>;</expr_stmt>  <comment type="block">/* Ä¬ÈÏÎªÕ»¿Õ¼ä */</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name>         <operator>=</operator> <name>aio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>timeout</name></name>     <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>timeout</name></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>qid</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_idx</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>retry_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨DNS·þÎñÆ÷µØÖ·Êý×é */</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name>       <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ´´½¨²éÑ¯¶ÔÏó±í */</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name>   <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃ DNS ²éÑ¯³¬Ê±µÄ»Øµ÷º¯Êý*/</comment>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_timeout</name></name> <operator>=</operator> <name>dns_lookup_timeout</name></expr>;</expr_stmt>

	<comment type="block">/* ´ò¿ªÒì²½¶ÁÈ¡DNS·þÎñÆ÷ÏìÓ¦µÄÊý¾ÝÁ÷ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>dns_stream_open</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: dns_stream_open error=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¿ªÊ¼Òì²½¶Á²éÑ¯½á¹û */</comment>
	<expr_stmt><expr><call><name>acl_aio_read</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>acl_dns_create</name><parameter_list>(<parameter><decl><type><name>ACL_AIO</name> <modifier>*</modifier></type><name>aio</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name> <init>= <expr><operator>(</operator><name>ACL_DNS</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DNS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_dns_init</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>aio</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_dns_init error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_DNS_FLAG_ALLOC</name></expr>;</expr_stmt>  <comment type="block">/* ÉèÖÃÎª¶Ñ·ÖÅäµÄ±äÁ¿ */</comment>
	<return>return <expr><name>dns</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_close</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>dns-&gt;lookup_table</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>ACL_DNS_REQ</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name><operator>-&gt;</operator><name>dns</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/* ÖÃ¿Õºó£¬ÎªºóÐø¹ý³ÌÌáÊ¾µ±Ç°¶ÔÏóÕýÔÚ¹Ø±Õ¹ý³ÌÖÐ */</comment>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_cache2_free</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_aio_iocp_close</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>astream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>groups</name></name></expr>)</condition> <block>{<block_content>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>dns-&gt;groups</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_DOMAIN_GROUP</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>ACL_DOMAIN_GROUP</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>excepts</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>excepts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_DNS_FLAG_ALLOC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_check_dns_ip</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_DNS_FLAG_CHECK_DNS_IP</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_check_dns_net</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_DNS_FLAG_CHECK_DNS_NET</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_set_retry_limit</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>retry_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>retry_limit</name></name> <operator>=</operator> <name>retry_limit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_free_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CACHE2_INFO</name> <modifier>*</modifier><name>info</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name> <init>= <expr><operator>(</operator><name>ACL_DNS_DB</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÊÍ·Å»º´æ¶ÔÏó */</comment>
	<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_open_cache</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name> <operator>=</operator> <call><name>acl_cache2_create</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><name>cache_free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_add_dns</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dns_ip</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>dns_port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_ADDR</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mask_length</name> <operator>&gt;=</operator> <literal type="number">32</literal> <operator>||</operator> <name>mask_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): mask_length(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>mask_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>ACL_DNS_ADDR</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DNS_ADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>mask_length</name></name> <operator>=</operator> <name>mask_length</name></expr>;</expr_stmt>

	<comment type="block">/* ÉèÖÃDNS·þÎñÆ÷µØÖ· */</comment>

	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>dns_ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>dns_port</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name>        <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>dns_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>dns_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name>       <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>addr_len</name></name>                <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>s_addr</name></name>               <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_mask_addr</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>mask_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃDNSµØÖ·Ìí¼Ó½øÊý×éÖÐ */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_del_dns</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DNS_ADDR</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>(</operator><name>ACL_DNS_ADDR</name><operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>port</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_array_delete</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_clear_dns</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>acl_dns_list</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_dns_size</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_list</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dns_empty</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dns_size</name><argument_list>(<argument><expr><name>dns</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_add_host</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): please call acl_dns_open_cache first!"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_netdb_new</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>ip_list</name></expr></argument>, <argument><expr><literal type="string">",; \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_HOSTNAME</name> <modifier>*</modifier></type><name>phost</name> <init>= <expr><call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HOSTNAME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>phost</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name>       <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>phost</name><operator>-&gt;</operator><name>saddr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>h_db</name></name></expr></argument>, <argument><expr><name>phost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><call><name>acl_cache2_enter</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name></expr></argument>, <argument><expr><name><name>dns_db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>dns_db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add domain(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_netdb_free</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_add_group</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>group</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refer</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>excepts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DOMAIN_GROUP</name> <modifier>*</modifier></type><name>dmgrp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>groups</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dns</name><operator>-&gt;</operator><name>groups</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>dns-&gt;groups</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>dmgrp</name> <operator>=</operator> <operator>(</operator><name>ACL_DOMAIN_GROUP</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): group(%s) already exist"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>dmgrp</name> <operator>=</operator> <operator>(</operator><name>ACL_DOMAIN_GROUP</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DOMAIN_GROUP</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>refer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>refer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>refer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>excepts</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>excepts</name></name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>excepts</name></expr></argument>, <argument><expr><literal type="string">",; \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>excepts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>groups</name></name></expr></argument>, <argument><expr><name>dmgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ip_list</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ip_list</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_dns_add_host</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>ip_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_lookup</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain_in</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_MESSAGE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_dns_lookup2</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>domain_in</name></expr></argument>, <argument><expr><name>ACL_RFC1035_TYPE_A</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_lookup2</name><parameter_list>(<parameter><decl><type><name>ACL_DNS</name> <modifier>*</modifier></type><name>dns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain_in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>type</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ACL_DNS_DB</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_RFC1035_MESSAGE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>domain</name><index>[<expr><name>ACL_RFC1035_MAXHOSTNAMESZ</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ÏÈ¼ì²éÊÇ·ñÆ¥ÅäÓòÃû×é */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>groups</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DOMAIN_GROUP</name> <modifier>*</modifier></type><name>dmgrp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>dns-&gt;groups</argument>)</argument_list></macro> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter2</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ACL_DOMAIN_GROUP</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><operator>(</operator><name>ACL_DOMAIN_GROUP</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEQ</name></cpp:macro> <cpp:value>acl_strrncasecmp</cpp:value></cpp:define>

			<comment type="block">/* ÏÈÕÒµ½ÓòÃû×é¶ÔÏó */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>NEQ</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>domain_in</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>group_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* ¼ì²é¸ÃÓòÃûÊÇ·ñÊÇÓòÃû×éµÄÀýÍâÓòÃû */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tmp</name><operator>-&gt;</operator><name>excepts</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>dmgrp</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<macro><name>acl_foreach</name><argument_list>(<argument>iter2</argument>, <argument>tmp-&gt;excepts</argument>)</argument_list></macro> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>except</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter2</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>except</name></expr></argument>, <argument><expr><name>domain_in</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<goto>goto <name>END_FOREACH_TAG</name>;</goto>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>
		</block_content>}</block>

<label><name>END_FOREACH_TAG</name>:</label>
		<if_stmt><if>if <condition>(<expr><name>dmgrp</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>dmgrp</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domain_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>domain_in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û´ò¿ªDNS»º´æ¹¦ÄÜ£¬ÔòÓÅÏÈ²éÑ¯»º´æ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DNS_DB</name> <modifier>*</modifier></type><name>dns_db</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>dns_db</name> <operator>=</operator> <call><name>acl_cache2_find</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>dns_cache</name></name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dns_db</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>dns_db</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ACL_DNS_OK_CACHE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>dns</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <operator>(</operator><name>ACL_DNS_REQ</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XXX: ²»Ó¦´æÔÚÏàÍ¬µÄ¼ü´æÔÚ, ÒòÎª¸Ã¼üÊÇÓÉÓòÃû¼°×Ô¶¯ID×é³É */</comment>
	<if_stmt><if>if <condition>(<expr><name>req</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%s) exist"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ACL_DNS_ERR_EXIST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ·ÖÅäÐÂµÄ²éÑ¯¶ÔÏó */</comment>
	<expr_stmt><expr><name>req</name>           <operator>=</operator> <operator>(</operator><name>ACL_DNS_REQ</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DNS_REQ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>dns</name></name>      <operator>=</operator> <name>dns</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>ctx</name></name>      <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>type</name></name>     <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>qid</name></name>      <operator>=</operator> <name><name>dns</name><operator>-&gt;</operator><name>qid</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SAFE_COPY</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ìí¼Ó½ø²éÑ¯¶ÔÏó±íÖÐ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): enter htable error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dns</name><operator>-&gt;</operator><name>dns_list</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>dns_lookup_send</name><argument_list>(<argument><expr><name>dns</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* ÉèÖÃ¶¨Ê±Æ÷ */</comment>
	<expr_stmt><expr><call><name>acl_aio_request_timer</name><argument_list>(<argument><expr><name><name>dns</name><operator>-&gt;</operator><name>aio</name></name></expr></argument>, <argument><expr><name><name>dns</name><operator>-&gt;</operator><name>lookup_timeout</name></name></expr></argument>,
		<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>dns</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dns_cancel</name><parameter_list>(<parameter><decl><type><name>ACL_DNS_REQ</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>req</name><operator>-&gt;</operator><name>dns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input error"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>dns</name><operator>-&gt;</operator><name>lookup_table</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_dns_serror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<struct>struct <name>__ERRMSG</name><block>{
		<decl_stmt><decl><type><name>int</name></type>   <name>errnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	}</block>;</struct>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>__ERRMSG</name></name></type> <name><name>errmsg</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{ <expr><name>ACL_DNS_OK</name></expr>, <expr><literal type="string">"OK, No error condition"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_OK_CACHE</name></expr>, <expr><literal type="string">"OK, in cache"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_FMT</name></expr>, <expr><literal type="string">"Format Error: The name server was unable to "</literal>
			<literal type="string">"interpret the query."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_SVR</name></expr>, <expr><literal type="string">"Server Failure: The name server was "</literal>
			<literal type="string">"unable to process this query."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NO_EXIST</name></expr>, <expr><literal type="string">"Name Error: The domain name does not exist."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NO_SUPPORT</name></expr>, <expr><literal type="string">"Not Implemented: The name server does "</literal>
			<literal type="string">"not support the requested kind of query."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_DENY</name></expr>, <expr><literal type="string">"Refused: The name server refuses to "</literal>
			<literal type="string">"perform the specified operation."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_YX</name></expr>, <expr><literal type="string">"The domain should not exist"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_YXRR</name></expr>, <expr><literal type="string">"The domain's RR should not exist"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NXRR</name></expr>, <expr><literal type="string">"The domain's RR should exist"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NO_AUTH</name></expr>, <expr><literal type="string">"The dns is not authority"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NOT_ZONE</name></expr>, <expr><literal type="string">"The domain name is not in the zone"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NOT_ZONE</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><literal type="string">"Unknown Error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NOT_ZONE</name> <operator>+</operator> <literal type="number">2</literal></expr>, <expr><literal type="string">"Unknown Error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NOT_ZONE</name> <operator>+</operator> <literal type="number">3</literal></expr>, <expr><literal type="string">"Unknown Error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_NOT_ZONE</name> <operator>+</operator> <literal type="number">4</literal></expr>, <expr><literal type="string">"Unknown Error"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_UNPACK</name></expr>, <expr><literal type="string">"The DNS reply message is corrupt or could "</literal>
			<literal type="string">"not be safely parsed."</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_TIMEOUT</name></expr>, <expr><literal type="string">"The DNS reply timeout"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_EXIST</name></expr>, <expr><literal type="string">"The same DNS search exist"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><name>ACL_DNS_ERR_BUILD_REQ</name></expr>, <expr><literal type="string">"Can't build query packet"</literal></expr> }</block></expr>,
		<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unknown</name> <init>= <expr><literal type="string">"Unknown Error"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>errmsg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name><name>errmsg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>errnum</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>errmsg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>unknown</name></expr>;</return>
</block_content>}</block></function>
</unit>
