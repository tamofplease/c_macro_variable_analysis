<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/net/acl_host_port.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_split_at.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_valid_hostname.h"</cpp:file></cpp:include>

<comment type="block">/* Global library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_host_port.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* host_port - parse string into host and port, destroy string */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_host_port</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>def_host</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>def_service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* port */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_alldig</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <name>def_host</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* [host]:port, [host]:, [host] */</comment>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <operator>++</operator><name>cp</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>acl_split_at</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">"missing \"]\""</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="string">"garbage after \"]\""</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>cp</name></expr> ?</condition><then> <expr><name>cp</name></expr> </then><else>: <expr><name>def_service</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* host#port, host#, host, #port */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>acl_split_at_right</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>buf</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>def_host</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>cp</name></expr> ?</condition><then> <expr><name>cp</name></expr> </then><else>: <expr><name>def_service</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* host:port, host:, host, :port */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>acl_split_at_right</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>buf</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>def_host</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>cp</name></expr> ?</condition><then> <expr><name>cp</name></expr> </then><else>: <expr><name>def_service</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>buf</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>def_host</name></expr> ?</condition><then> <expr><name>def_host</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <ternary><condition><expr><name>def_service</name></expr> ?</condition><then> <expr><name>def_service</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>host</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"missing host information"</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * if (*port == 0)
	 *	return "missing service information";
	 */</comment>

	<comment type="block">/*
	 * Final sanity checks. We're still sloppy, allowing bare numerical
	 * network addresses instead of requiring proper [ipaddress] forms.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>host</name> <operator>!=</operator> <name>def_host</name>
	    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>acl_valid_hostname</name><argument_list>(<argument><expr><operator>*</operator><name>host</name></expr></argument>, <argument><expr><name>ACL_DONT_GRIPE</name></expr></argument>)</argument_list></call>
	    <operator>&amp;&amp;</operator> <operator>!</operator><call><name>acl_valid_hostaddr</name><argument_list>(<argument><expr><operator>*</operator><name>host</name></expr></argument>, <argument><expr><name>ACL_DONT_GRIPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

		<return>return <expr><literal type="string">"valid hostname or network address required"</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>port</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>port</name> <operator>!=</operator> <name>def_service</name> <operator>&amp;&amp;</operator> <call><name>ACL_ISDIGIT</name><argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>port</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>acl_alldig</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"garbage after numerical service"</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>host_port</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>def_host</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_host_port</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>def_host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid addr %s, %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>port</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>atoi</name><argument_list>(<argument><expr><operator>*</operator><name>port</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: invalid port: %s, addr: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>*</operator><name>port</name></expr> ?</condition><then> <expr><operator>*</operator><name>port</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>host</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>host</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><operator>*</operator><name>host</name> <operator>=</operator> <literal type="string">"0.0.0.0"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>acl_host_addrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_host_addrinfo2</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>PF_UNSPEC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>acl_host_addrinfo2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>    <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>host_port</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>host</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name>   <operator>=</operator> <name>family</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_MACOSX</name></cpp:ifdef>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_DEFAULT</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <ternary><condition><expr><name>type</name> <operator>==</operator> <name>SOCK_DGRAM</name></expr> ?</condition><then> <expr><name>IPPROTO_UDP</name></expr> </then><else>: <expr><name>IPPROTO_TCP</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_V4MAPPED</name> <operator>|</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_V4MAPPED</name> <operator>|</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): getaddrinfo error %s, host=%s, addr=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res0</name></expr>;</return>
</block_content>}</block></function>
</unit>
