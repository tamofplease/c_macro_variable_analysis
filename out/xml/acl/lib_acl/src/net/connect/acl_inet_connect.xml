<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/net/connect/acl_inet_connect.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_tcp_ctl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_netdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_valid_hostname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_connect.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bind_local</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>res</name> <operator>=</operator> <name>res0</name></expr>;</init> <condition><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>!=</operator> <name>family</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></for>

<comment type="block">/* connect_one - try to connect to one address */</comment>

<function><type><specifier>static</specifier> <name>ACL_SOCKET</name></type> <name>connect_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>peer</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>local0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type>  <name>sock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>on</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): create socket error: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_SOCKET_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	acl_tcp_set_rcvbuf(sock, ACL_SOCKET_RBUF_SIZE);
	acl_tcp_set_sndbuf(sock, ACL_SOCKET_WBUF_SIZE);
	*/</comment>

	<expr_stmt><expr><name>on</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>,
		<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): setsockopt(SO_REUSEADDR): %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>local0</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>bind_local</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name>local0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): bind local error %s, fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_SOCKET_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Timed connect. */</comment>
	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>acl_timed_connect_ms</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <name><name>peer</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>acl_timed_connect_ms</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
			<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
			<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>acl_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>acl_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
			<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>ACL_SOCKET_INVALID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>blocking</name> <operator>!=</operator> <name>ACL_NON_BLOCKING</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>sock</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Maybe block until connected. */</comment>
	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>acl_sane_connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>,
		<argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator> <name><name>peer</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>acl_sane_connect</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>int</name></type>  <name>err</name></decl>, <decl><type ref="prev"/><name>errnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>errnum</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>SUNOS5</name></cpp:ifdef>
			<comment type="block">/*
			 * Solaris 2.4's socket emulation doesn't allow you
			 * to determine the error from a failed non-blocking
			 * connect and just returns EPIPE.  Create a fake
			 * error message for connect. -- fenner@parc.xerox.com
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ENOTCONN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>acl_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
			<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>ACL_SOCKET_INVALID</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>errnum</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name>ACL_EINPROGRESS</name> <operator>||</operator> <name>errnum</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>sock</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name>ACL_EINPROGRESS</name> <operator>||</operator> <name>errnum</name> <operator>==</operator> <name>EISCONN</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>sock</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>acl_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>ACL_SOCKET_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<comment type="block">/* acl_inet_connect - connect to TCP listener */</comment>

<function><type><name>ACL_SOCKET</name></type> <name>acl_inet_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>h_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>acl_inet_connect_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h_error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_SOCKET</name></type> <name>acl_inet_connect_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_inet_timed_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>, <argument><expr><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>h_error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>try_numeric_addr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai_buf</name></decl></parameter>, <parameter><decl><type><name>ACL_SOCKADDR</name> <modifier>*</modifier></type><name>in_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>addrlen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>family</name> <operator>!=</operator> <name>PF_INET</name> <operator>&amp;&amp;</operator> <name>family</name> <operator>!=</operator> <name>PF_INET6</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_valid_ipv6_hostaddr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>family</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_valid_ipv4_hostaddr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>family</name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>addrlen</name> <operator>=</operator> <call><name>acl_inet_pton</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <name>in_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>addrlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: acl_inet_pton error, name=%s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>PF_INET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>in_buf</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name>   <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>in_buf</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ai_buf</name><operator>-&gt;</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_NUMERICHOST</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai_buf</name><operator>-&gt;</operator><name>ai_family</name></name>   <operator>=</operator> <name>family</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai_buf</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai_buf</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai_buf</name><operator>-&gt;</operator><name>ai_addrlen</name></name>  <operator>=</operator> <operator>(</operator><name>socklen_t</name><operator>)</operator> <name>addrlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ai_buf</name><operator>-&gt;</operator><name>ai_addr</name></name>     <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <name>in_buf</name></expr>;</expr_stmt>
	<return>return <expr><name>ai_buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>resolve_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name>   <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_DEFAULT</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal></expr></cpp:if>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_V4MAPPED</name> <operator>|</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name>    <operator>=</operator> <name>AI_V4MAPPED</name> <operator>|</operator> <name>AI_ADDRCONFIG</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res0</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>res0</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: getaddrinfo error %s, peer=%s"</literal></expr></argument>,
		<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>addr_res</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>peer_family</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>peer_in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SOCKADDR</name></type> <name>local_in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type>  <name>peer_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type>  <name>local_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>peer_res0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>local_res0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peer_port</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addr_res</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>peer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>local</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>peer_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>peer</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name>  <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>local</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>++</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>ptr</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>local</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_valid_ipv6_hostaddr</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>peer_family</name></name> <operator>=</operator> <name>PF_INET6</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_valid_ipv4_hostaddr</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>peer_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>ACL_ADDR_SEP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid addr(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>peer_port</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>peer_port</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid port(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>peer_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ip buf's length is 0"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>peer_res0</name></name> <operator>=</operator> <call><name>try_numeric_addr</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>peer_family</name></name></expr></argument>, <argument><expr><name>peer</name></expr></argument>,
		<argument><expr><name><name>res</name><operator>-&gt;</operator><name>peer_port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>peer_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>peer_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>peer_res0</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>peer_res0</name></name> <operator>=</operator>
		 <call><name>resolve_addr</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>peer_port</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>local</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>local_res0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>res</name><operator>-&gt;</operator><name>local_res0</name></name> <operator>=</operator> <call><name>try_numeric_addr</name><argument_list>(<argument><expr><name>PF_UNSPEC</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>local_buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>local_in</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>local_res0</name></name> <operator>=</operator> <call><name>resolve_addr</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_SOCKET</name></type> <name>acl_inet_timed_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocking</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SOCKET</name></type>  <name>sock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addr_res</name></name></type> <name>ares</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>h_error</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h_error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* we should fill the ares with 0 to init all members int it. */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ares</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ares</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>parse_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ares</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_SOCKET_INVALID</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>sock</name> <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>res</name> <operator>=</operator> <name><name>ares</name><operator>.</operator><name>peer_res0</name></name></expr>;</init> <condition><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr> ;</condition> <incr><expr><name>res</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>connect_one</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>ares</name><operator>.</operator><name>local_res0</name></name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d) %s: connect %s error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ares</name><operator>.</operator><name>peer_res0</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>ares</name><operator>.</operator><name>peer_buf</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>ares</name><operator>.</operator><name>peer_res0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ares</name><operator>.</operator><name>local_res0</name></name> <operator>&amp;&amp;</operator> <name><name>ares</name><operator>.</operator><name>local_res0</name></name> <operator>!=</operator> <operator>&amp;</operator><name><name>ares</name><operator>.</operator><name>local_buf</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name><name>ares</name><operator>.</operator><name>local_res0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function>
</unit>
