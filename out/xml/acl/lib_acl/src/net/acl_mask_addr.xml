<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/net/acl_mask_addr.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>			<comment type="block">/* CHAR_BIT */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_mask_addr.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* acl_mask_addr - mask off a variable-length address */</comment>

<function><type><name>void</name></type> <name>acl_mask_addr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>addr_bytes</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name></type> <name>addr_byte_count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>network_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>network_bits</name> <operator>&gt;</operator> <name>addr_byte_count</name> <operator>*</operator> <name>CHAR_BIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"mask_addr: address byte count %d too small for"</literal>
			<literal type="string">" bit count %d"</literal></expr></argument>, <argument><expr><name>addr_byte_count</name></expr></argument>, <argument><expr><name>network_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>addr_bytes</name> <operator>+</operator> <name>network_bits</name> <operator>/</operator> <name>CHAR_BIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>network_bits</name> <operator>%=</operator> <name>CHAR_BIT</name></expr>;</expr_stmt>

	<comment type="block">/* "using unsigned" is just avoiding gcc6.1 warning */</comment>
	<if_stmt><if>if <condition>(<expr><name>network_bits</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>&amp;=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>~</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator>
			<operator>(</operator><name>CHAR_BIT</name> <operator>-</operator> <name>network_bits</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>addr_bytes</name> <operator>+</operator> <name>addr_byte_count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

</unit>
