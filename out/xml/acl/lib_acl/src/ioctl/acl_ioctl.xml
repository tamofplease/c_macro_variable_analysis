<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/ioctl/acl_ioctl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ioctl/acl_ioctl.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ioctl_internal.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__poller_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>       
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_event_loop</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>                               

<function><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>acl_ioctl_create_ex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_threads</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>idle_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_sec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_usec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_create_ex"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_threads</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_threads</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>max_threads</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idle_timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>idle_timeout</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): idle_timeout(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>idle_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ioc</name> <operator>=</operator> <operator>(</operator><name>ACL_IOCTL</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IOCTL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>delay_sec</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>delay_usec</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>delay_sec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>delay_usec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>event_mode</name></name>   <operator>=</operator> <name>event_mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name>  <operator>=</operator> <name>max_threads</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>idle_timeout</name></name> <operator>=</operator> <name>idle_timeout</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_sec</name></name>    <operator>=</operator> <name>delay_sec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_usec</name></name>   <operator>=</operator> <name>delay_usec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>stacksize</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>ioc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>acl_ioctl_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_threads</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idle_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>delay_sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delay_usec</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>acl_ioctl_create_ex</name><argument_list>(<argument><expr><name>ACL_EVENT_SELECT</name></expr></argument>, <argument><expr><name>max_threads</name></expr></argument>,
			<argument><expr><name>idle_timeout</name></expr></argument>, <argument><expr><name>delay_sec</name></expr></argument>, <argument><expr><name>delay_usec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_IOCTL_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_IOCTL_CTL_THREAD_MAX</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_THREAD_STACKSIZE</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>stacksize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_THREAD_IDLE</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>idle_timeout</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_DELAY_SEC</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_sec</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_event_set_delay_sec</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_DELAY_USEC</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_usec</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_event_set_delay_usec</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_INIT_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_init_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_IOCTL_THREAD_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_EXIT_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_exit_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_IOCTL_THREAD_EXIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_INIT_CTX</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_init_arg</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_IOCTL_CTL_EXIT_CTX</name></expr>:</case>
			<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_exit_arg</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>	
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown arg"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* not reached */</comment>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_free</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_destroy</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_free</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_add_dog</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>enable_dog</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>enable_dog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__on_thread_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_init</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__on_thread_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL</name><operator>*</operator><operator>)</operator> <name>arg_init</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_init_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): thread_init_fn null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>ioc</name><operator>-&gt;</operator><name>thread_init_fn</name></name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_init_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__on_thread_exit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg_free</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__on_thread_exit"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL</name><operator>*</operator><operator>)</operator> <name>arg_free</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_exit_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): thread_exit_fn null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name><name>ioc</name><operator>-&gt;</operator><name>thread_exit_fn</name></name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_exit_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_ioctl_start</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* µ¥Ïß³ÌÄ£Ê½ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>acl_event_new</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event_mode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
				<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_sec</name></name></expr></argument>, <argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¶àÏß³ÌÄ£Ê½ */</comment>
	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name> <operator>=</operator> <call><name>acl_thread_pool_create</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name></expr></argument>, <argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>idle_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_pool_set_poller</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>, <argument><expr><name>__poller_fn</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_init_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_atinit</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>, <argument><expr><name>__on_thread_init</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>thread_exit_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_pool_atfree</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>, <argument><expr><name>__on_thread_exit</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>=</operator> <call><name>acl_event_new</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event_mode</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
			<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_sec</name></name></expr></argument>, <argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>delay_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>enable_dog</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_add_dog</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_pthread_pool_start_poller</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>tp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_loop</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>&amp;&amp;</operator> <name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_loop</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_ioctl_event</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ioc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_disable_readwrite</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>&amp;&amp;</operator> <name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;&amp;</operator> <name>stream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_disable_readwrite</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_disable_read</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>&amp;&amp;</operator> <name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;&amp;</operator> <name>stream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_disable_read</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_disable_write</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>&amp;&amp;</operator> <name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>&amp;&amp;</operator> <name>stream</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_disable_write</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_ioctl_isset</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_event_isset</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_ioctl_isrset</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_event_isrset</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_ioctl_iswset</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_event_iswset</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__free_ctx</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_enable_read</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_enable_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IOCTL_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ACL_IOCTL_CTX</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name><operator>)</operator><operator>-&gt;</operator><name>stream</name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>__free_ctx</name></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ioc</name></name>        <operator>=</operator> <name>ioc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notify_fn</name></name>  <operator>=</operator> <name>notify_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name>    <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>ACL_EVENT_READ</name></expr>;</expr_stmt>

	<comment type="block">/* ½«Êý¾ÝÁ÷µÄ×´Ì¬ÖÃÈëÊÂ¼þ¼à¿Ø¼¯ºÏÖÐ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>read_notify_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>read_notify_callback_r</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_enable_write</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_enable_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_write_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_write_ctx</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IOCTL_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ACL_IOCTL_CTX</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_write_ctx</name></name><operator>)</operator><operator>-&gt;</operator><name>stream</name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>__free_ctx</name></expr></argument>,
			<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_write_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_write_ctx</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ioc</name></name>       <operator>=</operator> <name>ioc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notify_fn</name></name> <operator>=</operator> <name>notify_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name>   <operator>=</operator> <name>context</name></expr>;</expr_stmt>

	<comment type="block">/* ½«¿Í»§¶ËÊý¾ÝÁ÷µÄ×´Ì¬ÖÃÈëÊÂ¼þ¼à¿Ø¼¯ºÏÖÐ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_write</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>write_notify_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_write</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>write_notify_callback_r</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_enable_connect</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_enable_connect"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ioctl_enable_write</name><argument_list>(<argument><expr><name>ioc</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>notify_fn</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ioctl_enable_listen</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_enable_listen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_IOCTL_CTX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ACL_IOCTL_CTX</name> <operator>*</operator><operator>)</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name><operator>)</operator><operator>-&gt;</operator><name>stream</name> <operator>=</operator> <name>stream</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_add_close_handle</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>__free_ctx</name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ioc</name></name>       <operator>=</operator> <name>ioc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>notify_fn</name></name> <operator>=</operator> <name>notify_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name>   <operator>=</operator> <name>context</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>max_threads</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>listen_notify_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
			<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>listen_notify_callback_r</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_ioctl_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_connect</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>ACL_NON_BLOCKING</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>stream</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_ioctl_listen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_listen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_ioctl_listen_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlen</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>block_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>io_bufsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>io_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_listen_ex</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><ternary><condition><expr><name>block_mode</name> <operator>==</operator> <name>ACL_BLOCKING</name></expr>
		?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ACL_INET_FLAG_NBLOCK</name></expr></else></ternary></expr></argument>, <argument><expr><name>io_bufsize</name></expr></argument>, <argument><expr><name>io_timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_ioctl_accept</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>sstream</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_accept</name><argument_list>(<argument><expr><name>sstream</name></expr></argument>, <argument><expr><name>ipbuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_ioctl_request_timer</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>timer_fn</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>idle_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_request_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>timer_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ioctl's event null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>timer_fn</name></expr></argument>,
			<argument><expr><name>context</name></expr></argument>, <argument><expr><name>idle_limit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_ioctl_cancel_timer</name><parameter_list>(<parameter><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT_NOTIFY_TIME</name></type> <name>timer_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_ioctl_cancel_timer"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ioc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ioc</name><operator>-&gt;</operator><name>event</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>timer_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name><name>ioc</name><operator>-&gt;</operator><name>event</name></name></expr></argument>, <argument><expr><name>timer_fn</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
