<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/ioctl/ioctl_proc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_net.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ioctl/acl_ioctl.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ioctl_internal.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>read_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IOCTL_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ioc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify_fn</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_event_disable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>event_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_READ</name></expr>:</case>
	<case>case <expr><name>ACL_EVENT_RW_TIMEOUT</name></expr>:</case>
	<case>case <expr><name>ACL_EVENT_XCPT</name></expr>:</case>
		<expr_stmt><expr><call><name>notify_fn</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown event type(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* not reached */</comment>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>write_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IOCTL_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ioc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify_fn</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_event_disable_write</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>event_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_WRITE</name></expr>:</case>
	<case>case <expr><name>ACL_EVENT_RW_TIMEOUT</name></expr>:</case>
	<case>case <expr><name>ACL_EVENT_XCPT</name></expr>:</case>
		<expr_stmt><expr><call><name>notify_fn</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown event type(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* not reached */</comment>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>listen_notify_callback</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_type</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_IOCTL_CTX</name> <modifier>*</modifier></type><name>ctx</name><init>= <expr><operator>(</operator><name>ACL_IOCTL_CTX</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL</name> <modifier>*</modifier></type><name>ioc</name> <init>= <expr><operator>(</operator><name>ACL_IOCTL</name><operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ioc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IOCTL_NOTIFY_FN</name></type> <name>notify_fn</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>notify_fn</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>event_type</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>event_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>ACL_EVENT_RW_TIMEOUT</name></expr>:</case>
	<case>case <expr><name>ACL_EVENT_XCPT</name></expr>:</case>
		<expr_stmt><expr><call><name>acl_event_disable_read</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>notify_fn</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>ACL_EVENT_READ</name></expr>:</case>
		<expr_stmt><expr><call><name>notify_fn</name><argument_list>(<argument><expr><name>event_type</name></expr></argument>, <argument><expr><name>ioc</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown event type(%d)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>event_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* not reached */</comment>
		<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
