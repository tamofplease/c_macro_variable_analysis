<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/json/acl_json.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json/acl_json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_JSON_NODE</name></name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>child</name> <operator>=</operator> <operator>(</operator>struct <name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_JSON_NODE</name></name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>child</name> <operator>=</operator> <operator>(</operator>struct <name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_node_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(
			<argument><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_JSON_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name>      <operator>=</operator> <call><name>acl_vstring_dbuf_alloc</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name>      <operator>=</operator> <call><name>acl_vstring_dbuf_alloc</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tag_node</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name>    <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>depth</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>quote</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>json</name></name>      <operator>=</operator> <name>json</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>node_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>node_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>node_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>node_iter_prev</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_json_node_delete</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>next</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node_next</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>acl_json_node_delete</name><argument_list>(<argument><expr><name>node_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>json</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>--</operator></expr>;</expr_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_node_append</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node1</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node1</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node2</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node2</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>node1</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_node_add_child</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>child</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_node_parent</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_node_next</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name> <init>= <expr><call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_node_prev</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name> <init>= <expr><call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/************************************************************************/</comment>
<comment type="block">/*               json ¶ÔÏó´¦Àíº¯Êý¼¯                                    */</comment>
<comment type="block" format="doxygen">/************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>json_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name><operator>==</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>json_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_JSON_NODE</name></name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator>struct <name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄ×Ó½Úµã±éÀúÍê±Ï£¬ÔÙ±éÀúµ±Ç°½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄÐÖµÜ½Úµã±éÀúÍê±Ï£¬×îºó±éÀúµ±Ç°½ÚµãµÄ¸¸½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parent null"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
			<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition>;</do>

	<comment type="block">/* ±éÀúÍêËùÓÐ½Úµã */</comment>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>json_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>node_cnt</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name><operator>==</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>json_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ACL_JSON_NODE</name></name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator>struct <name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>

	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄ×Ó½Úµã±éÀúÍê±Ï£¬ÔÙ±éÀúµ±Ç°½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
		<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* µ±Ç°½ÚµãµÄÐÖµÜ½Úµã±éÀúÍê±Ï£¬×îºó±éÀúµ±Ç°½ÚµãµÄ¸¸½ÚµãµÄÐÖµÜ½Úµã */</comment>

	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parent null"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
			<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>ring_ptr</name> <operator>!=</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition>;</do>

	<comment type="block">/* ±éÀúÍêËùÓÐ½Úµã */</comment>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>acl_json_alloc</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_json_dbuf_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>acl_json_dbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <call><name>acl_dbuf_pool_create</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>json</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_JSON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>json</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_JSON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_keep</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_JSON</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ½«¸ù½Úµã×÷Îªµ±Ç°½Úµã */</comment>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃ×´Ì¬»úµÄ×´Ì¬ */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	json-&gt;status = ACL_JSON_S_OBJ;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	json-&gt;root-&gt;left_ch = '{';
	json-&gt;root-&gt;right_ch = '}';
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ROOT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ÉèÖÃµü´úº¯Êý */</comment>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>json_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>json_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>json_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>json_iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><name>json</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_node_duplicate</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>child_from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>child_to</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>left_ch</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>right_ch</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>  <comment type="block">/* XXX? */</comment>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;from-&gt;children</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>child_from</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>child_to</name> <operator>=</operator> <call><name>acl_json_node_duplicate</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>child_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>child_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>==</operator> <name>child_from</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>=</operator> <name>child_to</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>to</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>acl_json_create</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name> <init>= <expr><call><name>acl_dbuf_pool_create</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>acl_json_dbuf_create</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
    <return>return <expr><name>json</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>acl_json_dbuf_create</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>json</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>json</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_calloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_JSON</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û´«ÈëµÄ½ÚµãÎª root ½Úµã£¬ÔòÖ±½Ó¸³Öµ´´½¨ root ¼´¿É */</comment>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>root</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>acl_json_node_duplicate</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>acl_json_node_duplicate</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* ½«¸ù½Úµã×÷Îªµ±Ç°½Úµã */</comment>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
	<comment type="block">/* ÉèÖÃ×´Ì¬»úµÄ×´Ì¬ */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	json-&gt;status = ACL_JSON_S_OBJ;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ROOT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ÉèÖÃµü´úº¯Êý */</comment>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>json_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>json_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>json_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>json_iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><name>json</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_foreach_init</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>json_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>json_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>json_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>json_iter_prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_free</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_destroy</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_reset</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_inner</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_reset</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>dbuf_keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	json-&gt;root-&gt;left_ch = '{';
	json-&gt;root-&gt;right_ch = '}';
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_OBJ</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>node_cnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ROOT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
