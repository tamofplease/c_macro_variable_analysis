<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/json/acl_json_util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_argv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json/acl_json.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_getFirstElementByTagName</name><parameter_list>(
	<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>json</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_free_array</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>acl_json_getElementsByTagName</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>json</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>acl_json_getElementsByTags</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node_saved</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_json_getElementsByTagName</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>NEQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strcasecmp((x), (y))</cpp:value></cpp:define>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>a</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>node_saved</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>tokens</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>NEQ</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name>NEQ</name><argument_list>(<argument><expr><name><name>tokens</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

				<break>break;</break>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>result</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>node_saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_json_free_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_free</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_text</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_STRING</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_bool</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"false"</literal></expr> </then><else>: <expr><literal type="string">"true"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_BOOL</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_null</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_int64</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_NUMBER</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_double</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"%.4f"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_DOUBLE</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_double2</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fmt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%%.%df"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_DOUBLE</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_array_text</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_STRING</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_array_int64</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_NUMBER</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_array_double</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"%.4f"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_DOUBLE</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_array_bool</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_BOOL</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_array_null</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_obj</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_OBJ</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_array</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_ARRAY</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>acl_json_create_node</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_OBJ</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_node_append_child</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_json_node_append_child"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_JSON_T_ARRAY</name>
		<operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_JSON_T_OBJ</name>
		<operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <name><name>parent</name><operator>-&gt;</operator><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parent's type not array or obj"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>json_escape_append</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\f'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_json_building</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name> <init>= <expr><call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ÎªÁË¼æÈÝÀúÊ·µÄBUG£¬ËùÒÔ´Ë´¦Ö»ÄÜÈç´Ë´¦ÀíÁË--zsx, 2021.3.27 */</comment>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>json</argument>)</argument_list></macro> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>callback</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>acl_json_node_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_ADD_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Ö»ÓÐµ±±êÇ©µÄ¶ÔÓ¦ÖµÎª JSON ¶ÔÏó»òÊý×é¶ÔÏóÊ± tag_node ·Ç¿Õ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_ADD_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* '{' or '[' */</comment>	
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>

		<comment type="block">/* µ±½ÚµãÓÐ±êÇ©ÃûÊ± */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_ADD_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>~</operator><name>ACL_JSON_T_LEAF</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>ACL_JSON_T_NULL</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ACL_JSON_T_BOOL</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_NUMBER</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_DOUBLE</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>

		<comment type="block">/* µ±½ÚµãÎªÊý×éµÄ³ÉÔ±Ê± */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name>
			<operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>~</operator><name>ACL_JSON_T_LEAF</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>ACL_JSON_T_A_NULL</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ACL_JSON_T_A_BOOL</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_A_NUMBER</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_A_DOUBLE</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>

		<comment type="block">/* µ±½ÚµãÎªÃ»ÓÐ±êÇ©ÃûµÄÈÝÆ÷(Îª '{}' »ò '[]')Ê± */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * ±éÀú·½Ê½ÎªÇ°Ðò±éÀú·½Ê½£¬¼´ÏÈ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã£¬
		 * ÔÙ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã£¬×îºó±éÀúµ±Ç°½ÚµãµÄ¸¸½Úµã
		 */</comment>
		<comment type="block">/* µ±±¾½ÚµãÓÐ×Ó½Úµã»òËäÎªÒ¶½Úµã£¬µ«¸Ã½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã
		 * ·Ç¿ÕÊ±¼ÌÐøÏÂÒ»¸öÑ­»·¹ý³Ì
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_json_node_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* µ±±¾½ÚµãÎªÒ¶½ÚµãÇÒºóÃæÃ»ÓÐÐÖµÜ½ÚµãÊ±£¬ÐèÒªÒ»¼¶Ò»¼¶»ØËÝ
		 * ½«¸¸½ÚµãµÄ·Ö¸ô·ûÌí¼ÓÖÁ±¾Ò¶½ÚµãÎ²²¿£¬Ö±µ½Óöµ½¸ù½Úµã»ò¸¸
		 * ½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã·Ç¿Õ
		 */</comment>
		<while>while <condition>(<expr><call><name>acl_json_node_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

			<comment type="block">/* right_ch: '}' or ']' */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>callback</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«µÚ¶þ¸ö²ÎÊýÖÃ NULL ±íÊ¾´¦ÀíÍê±Ï */</comment>
	<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>callback</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_json_build</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name> <init>= <expr><call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ÎªÁË¼æÈÝÀúÊ·µÄBUG£¬ËùÒÔ´Ë´¦Ö»ÄÜÈç´Ë´¦ÀíÁË--zsx, 2021.3.27 */</comment>

	<if_stmt><if>if <condition>(<expr><name>ring_ptr</name> <operator>==</operator> <operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>, <argument><expr><name>ACL_JSON_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>json</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_JSON_NODE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>acl_json_node_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_ADD_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Ö»ÓÐµ±±êÇ©µÄ¶ÔÓ¦ÖµÎª JSON ¶ÔÏó»òÊý×é¶ÔÏóÊ± tag_node ·Ç¿Õ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_ADD_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* '{' or '[' */</comment>	
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>

		<comment type="block">/* µ±½ÚµãÓÐ±êÇ©ÃûÊ± */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_ADD_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>~</operator><name>ACL_JSON_T_LEAF</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>ACL_JSON_T_NULL</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ACL_JSON_T_BOOL</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_NUMBER</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_DOUBLE</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>

		<comment type="block">/* µ±½ÚµãÎªÊý×éµÄ³ÉÔ±Ê± */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		else if (LEN(node-&gt;text) &gt; 0 &amp;&amp; node-&gt;parent
			<comment type="block">/* Ó¦¸ÃÒÀ¾Ý¸¸½ÚµãÀàÐÍÀ´È·¶¨µ±Ç°½ÚµãÊÇ·ñÎªÊý×é½Úµã
			 * &amp;&amp; node-&gt;parent-&gt;left_ch != 0)
			 */</comment>
			&amp;&amp; node-&gt;parent-&gt;type == ACL_JSON_T_ARRAY)
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:elif>
		<if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_JSON_T_ARRAY</name>
			<operator>&amp;&amp;</operator> <operator>(</operator><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>ACL_JSON_T_A_STRING</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_JSON_T_ARRAY</name>
			<operator>&amp;&amp;</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_JSON_T_A_NULL</name>
			    <operator>|</operator> <name>ACL_JSON_T_A_BOOL</name> <operator>|</operator> <name>ACL_JSON_T_A_NUMBER</name>
			    <operator>|</operator> <name>ACL_JSON_T_A_DOUBLE</name> <operator>|</operator> <name>ACL_JSON_T_A_STRING</name><operator>)</operator><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <operator>~</operator><name>ACL_JSON_T_LEAF</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>ACL_JSON_T_A_NULL</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ACL_JSON_T_A_BOOL</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_A_NUMBER</name></expr>:</case>
			<case>case <expr><name>ACL_JSON_T_A_DOUBLE</name></expr>:</case>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ACL_JSON_T_A_STRING</name></expr>:</case>
				<expr_stmt><expr><call><name>json_escape_append</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>

		<comment type="block">/* µ±½ÚµãÎªÃ»ÓÐ±êÇ©ÃûµÄÈÝÆ÷(Îª '{}' »ò '[]')Ê± */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * ±éÀú·½Ê½ÎªÇ°Ðò±éÀú·½Ê½£¬¼´ÏÈ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã£¬
		 * ÔÙ±éÀúµ±Ç°½ÚµãµÄ×Ó½Úµã£¬×îºó±éÀúµ±Ç°½ÚµãµÄ¸¸½Úµã
		 */</comment>
		<comment type="block">/* µ±±¾½ÚµãÓÐ×Ó½Úµã»òËäÎªÒ¶½Úµã£¬µ«¸Ã½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã
		 * ·Ç¿ÕÊ±¼ÌÐøÏÂÒ»¸öÑ­»·¹ý³Ì
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>children</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>acl_json_node_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* µ±±¾½ÚµãÎªÒ¶½ÚµãÇÒºóÃæÃ»ÓÐÐÖµÜ½ÚµãÊ±£¬ÐèÒªÒ»¼¶Ò»¼¶»ØËÝ
		 * ½«¸¸½ÚµãµÄ·Ö¸ô·ûÌí¼ÓÖÁ±¾Ò¶½ÚµãÎ²²¿£¬Ö±µ½Óöµ½¸ù½Úµã»ò¸¸
		 * ½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã·Ç¿Õ
		 */</comment>
		<while>while <condition>(<expr><call><name>acl_json_node_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

			<comment type="block">/* right_ch: '}' or ']' */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_json_node_build</name><parameter_list>(<parameter><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>acl_json_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>json</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tag_node</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>acl_json_node_duplicate</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_json_build</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_json_free</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
