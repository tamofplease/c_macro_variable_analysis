<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/json/acl_json_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json/acl_json.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END</name></cpp:macro>	<cpp:value>acl_vstring_end</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDCH</name></cpp:macro>	<cpp:value>ACL_VSTRING_ADDCH</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_QUOTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == '\"' || (x) == '\'')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == ' ' || (c) == '\t' || (c) == '\r' || (c) == '\n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_WHILE</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>, <parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while(*(ptr) &amp;&amp; (cond)) (ptr)++; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_SPACE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ while(IS_SPACE(*(ptr))) (ptr)++; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_root</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SKIP_WHILE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name> <operator>!=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name> <operator>!=</operator> <literal type="char">'['</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_MEMBER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_OBJ</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ELEMENT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_ARRAY</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ·ÖÎö½Úµã¶ÔÏóÖµ£¬±ØÐëÕÒµ½ '{' »ò '[' */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_obj</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ´´½¨¶ÔÏó '{}' ×Ó½Úµã */</comment>

	<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_OBJ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>json</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ¸ù¾Ý json ½Úµã¶ÔÏóÇ°×ºµÄ²»Í¬£¬¼ÇÂ¼²»Í¬µÄ¶ÔÏóºó×º */</comment>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_MEMBER</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_member</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ´´½¨ÉÏÃæËù½¨¶ÔÏó½ÚµãµÄ³ÉÔ±¶ÔÏó */</comment>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>member</name> <init>= <expr><call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>member</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_MEMBER</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>member</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>member</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>json</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¸Ã³ÉÔ±¶ÔÏóÖÃÎªµ±Ç° JSON ·ÖÎö½Úµã */</comment>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>member</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_PAIR</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ½âÎö½ÚµãµÄ±êÇ©Ãû³Æ£¬½ÚµãÔÊÐíÃ»ÓÐ±êÇ©Ãû£»Ò¶½ÚµãÃ»ÓÐ { } [ ] ·Ö¸ô·û */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_pair</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Èç¹ûµ±Ç°×Ö·ûÎª¸¸½ÚµãµÄÓÒ·Ö¸ô·û£¬Ôò±íÊ¾¸¸½Úµã½áÊø */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>right_ch</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* È¥µô¸¸½ÚµãµÄÓÒ·Ö¸ô·û */</comment>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Èç¹û¸ù½Úµã·ÖÎö½áÊøÔòÕû¸ö json ·ÖÎöÍê±Ï */</comment>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<return>return <expr><name>data</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* µ¯³ö¸¸½Úµã */</comment>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
		<comment type="block">/* ²éÑ¯¸¸½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã */</comment>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Îª '{' »ò '[' Ê±ËµÃ÷Óöµ½ÁËµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_OBJ</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ARRAY</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û±êÇ©ÃûÇ°ÓÐÒýºÅ£¬¼ÇÂ¼ÏÂ¸ÃÒýºÅ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_PAIR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_TAG</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ½âÎö½ÚµãµÄ±êÇ©Ãû³Æ£¬½ÚµãÔÊÐíÃ»ÓÐ±êÇ©Ãû£»Ò¶½ÚµãÃ»ÓÐ { } [ ] ·Ö¸ô·û */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_tag</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûÇ°ÃæÓÐÒýºÅ£¬ÔòÐèÒªÕÒµ½½áÎ²ÒýºÅ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>

			<comment type="block">/* µ±ÎªË«×Ö½Úºº×ÖÊ±£¬µÚÒ»¸ö×Ö½ÚÎªµÄ¸ßÎ»Îª 1£¬
			 * µÚ¶þ¸ö×Ö½ÚÎª 92£¬ÕýºÃÓë×ªÒå×Ö·ûÏàÍ¬
			 */</comment>
			<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ´¦Àí°ë¸öºº×ÖµÄÇéÐÎ */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">//acl_assert(parent);</comment>

				<comment type="block">/* Êý×é¶ÔÏóµÄ×Ó½ÚµãÔÊÐíÎªµ¥¶ÀµÄ×Ö·û´®»ò¶ÔÏó */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt></block_content></block></if>

				<comment type="block">/* ±êÇ©Öµ·ÖÎö½áÊø£¬ÏÂÒ»²½ÐèÒªÕÒµ½Ã°ºÅ */</comment>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_COLON</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<comment type="block">/* µ±ÔÚ·ÖÎö±êÇ©Ãû½áÊøºó£¬ÐèÒª°Ñ quote ¸³ 0£¬
				 * ÕâÑùÔÚ·ÖÎö±êÇ©ÖµÊ±£¬¿ÉÒÔ¸´ÓÃ¸Ã quote ±äÁ¿,
				 * Èç¹û²»Çå 0£¬Ôò»á¸ÉÈÅ·ÖÎö±êÇ©Öµ¹ý³Ì
				 */</comment>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if>

			<comment type="block">/* ÊÇ·ñ¼æÈÝºó°ë¸öºº×ÖÎª×ªÒå·û '\' µÄÇé¿ö */</comment>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_PART_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* ´¦Àí°ë¸öºº×ÖµÄÇéÐÎ */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>

		<comment type="block">/* ·ÖÎö±êÇ©ÃûÇ°Ã»ÓÐÒýºÅµÄÇé¿ö */</comment>

		<if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>

		<comment type="block">/* µ±ÎªË«×Ö½Úºº×ÖÊ±£¬µÚÒ»¸ö×Ö½ÚÎªµÄ¸ßÎ»Îª 1£¬
		 * µÚ¶þ¸ö×Ö½ÚÎª 92£¬ÕýºÃÓë×ªÒå×Ö·ûÏàÍ¬
		 */</comment>
		<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ´¦Àí°ë¸öºº×ÖµÄÇéÐÎ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ±êÇ©Ãû·ÖÎö½áÊø£¬ÏÂÒ»²½ÐèÒªÕÒµ½Ã°ºÅ */</comment>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_COLON</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>

		<comment type="block">/* ÊÇ·ñ¼æÈÝºó°ë¸öºº×ÖÎª×ªÒå·û '\' µÄÇé¿ö */</comment>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_PART_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ´¦Àí°ë¸öºº×ÖµÄÇéÐÎ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Èç¹û±êÇ©Ãû·Ç¿Õ£¬ÔòÐèÒª±£Ö¤ÒÔ 0 ½áÎ² */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Ò»Ö±²éµ½Ã°ºÅÎªÖ¹£¬È»ºóÇÐ»»ÖÁ·ÖÎö±êÇ©Öµ¹ý³Ì */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_colon</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* ÏÂÒ»²½·ÖÎö±êÇ©ÃûËù¶ÔÓ¦µÄ±êÇ©Öµ£¬ÓÐ¿ÉÄÜÎª×Ö·û´®£¬
	 * Ò²ÓÐ¿ÉÄÜÎª×Ó½Úµã¶ÔÏó
	 */</comment>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_VALUE</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_array</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ´´½¨Êý×é¶ÔÏó */</comment>
	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>right_ch</name></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_ARRAY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>json</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>ltag</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>tag_node</name></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ELEMENT</name></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û¸ÃÊý×éÎª¿Õ£¬ÔòÖ±½Ó²éÑ¯ÆäÐÖµÜ½Úµã */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_element</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* ´´½¨Êý×é³ÉÔ±¶ÔÏó */</comment>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>element</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_OBJ</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ARRAY</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>element</name> <operator>=</operator> <call><name>acl_json_node_alloc</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_ELEMENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>element</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>depth</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>element</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <name><name>json</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>element</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_json_node_add_child</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>, <argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÊý×é³ÉÔ±¶ÔÏóÖÃÎªµ±Ç° JSON ·ÖÎö½Úµã */</comment>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>element</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_VALUE</name></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ·ÖÎö±êÇ©Öµ£¬¸ÃÖµÓÐ¿ÉÄÜÊÇ´¿ÎÄ±¾(¼´¸Ã½ÚµãÎªÒ¶½Úµã)£¬Ò²ÓÐ¿ÉÄÜÊÇÒ»¸ö×Ó½Úµã */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_value</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Îª '{' »ò '[' Ê±ËµÃ÷Óöµ½ÁËµ±Ç°½ÚµãµÄ×Ó½Úµã */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_OBJ</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ARRAY</name></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ¼æÈÝÒ»ÏÂÓÐÐ©Êý¾Ý¸ñÊ½Îª "xxx: ," µÄ·½Ê½ */</comment>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* ÇÐ»»ÖÁ²éÑ¯¸Ã½ÚµãµÄÐÖµÜ½ÚµãµÄ¹ý³Ì */</comment>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ËµÃ÷±êÇ©ÃûºóÃæµÄ±êÇ©ÖµÎª×Ö·û´®»òÊý×Ö */</comment>
	<comment type="block">/* Èç¹û±êÇ©ÖµÇ°ÓÐÒýºÅ£¬¼ÇÂ¼ÏÂ¸ÃÒýºÅ */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* &amp;&amp; json-&gt;curr_node-&gt;quote == 0) { */</comment>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>quote</name></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_STRING</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_STRING</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_string</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>

	<comment type="block">/* Bugfix: Õâ·ÀÖ¹×Ö·û´®¿ªÊ¼²¿·ÖÎª¿Õ¸ñÊ±±»ºöÂÔÐè×¢µôÏÂÃæ¹ýÂËÂß¼­ */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* µ±ÎÄ±¾³¤¶ÈÎª 0 Ê±£¬¿ÉÒÔÈÏÎª»¹Î´Óöµ½ÓÐÐ§µÄ×Ö·û */</comment>

	if (LEN(node-&gt;text) == 0) {
		<comment type="block">/* ÏÈ¹ýÂË¿ªÍ·Ã»ÓÃµÄ¿Õ¸ñ */</comment>
		<comment type="line">//SKIP_SPACE(data);</comment>
		if (*data == 0)
			return data;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ËµÃ÷±¾½ÚµãÊÇÒ¶½Úµã */</comment>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹û¿ªÊ¼ÓÐÒýºÅ£¬ÔòÐèÒªÒÔ¸ÃÒýºÅ×÷Îª½áÎ²·û */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'r'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>

			<comment type="block">/* µ±ÎªË«×Ö½Úºº×ÖÊ±£¬µÚÒ»¸ö×Ö½ÚÎªµÄ¸ßÎ»Îª 1£¬
			 * µÚ¶þ¸ö×Ö½ÚÓÐ¿ÉÄÜÎª 92£¬ÕýºÃÓë×ªÒå×Ö·ûÏàÍ¬
			 */</comment>
			<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ´¦Àí°ë¸öºº×ÖµÄÇé¿ö£¬Èç¹ûÇ°Ò»¸ö×Ö½ÚÊÇÇ°
				 * °ë¸öºº×Ö£¬Ôòµ±Ç°µÄ×ªÒå·ûµ±×÷ºó°ë¸öºº×Ö
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>quote</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ¶Ô½ÚµãµÄÖµ£¬±ØÐë±£Áô¸Ã quote Öµ£¬ÒÔ±ãÓÚÇø·Ö
				 * ²»Í¬µÄÖµÀàÐÍ£ºbool, null, number, string
				 * node-&gt;quote = 0;
				 */</comment>

				<comment type="block">/* ÇÐ»»ÖÁ²éÑ¯¸Ã½ÚµãµÄÐÖµÜ½ÚµãµÄ¹ý³Ì */</comment>
				<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_STREND</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if>

			<comment type="block">/* ÊÇ·ñ¼æÈÝºó°ë¸öºº×ÖÎª×ªÒå·û '\' µÄÇé¿ö */</comment>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_PART_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* ÈôÇ°Ò»¸ö×Ö½ÚÎªÇ°°ë¸öºº×Ö£¬Ôòµ±Ç°×Ö½Ú
				 * Îªºó°ë¸öºº×Ö£¬ÕýºÃÎªÒ»¸öÍêÕûµÄºº×Ö
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

				<comment type="block">/* Ç°Ò»¸ö×Ö½Ú·ÇÇ°°ë¸öºº×ÖÇÒµ±Ç°×Ö½Ú¸ßÎ»
				 * Îª 1£¬Ôò±íÃ÷µ±Ç°×Ö½ÚÎªÇ°°ë¸öºº×Ö
				 */</comment>
				<if type="elseif">else if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>backslash</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">';'</literal>
			<operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'}'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ÇÐ»»ÖÁ²éÑ¯¸Ã½ÚµãµÄÐÖµÜ½ÚµãµÄ¹ý³Ì */</comment>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_STREND</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if>

		<comment type="block">/* ÊÇ·ñ¼æÈÝºó°ë¸öºº×ÖÎª×ªÒå·û '\' µÄÇé¿ö */</comment>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>json</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_JSON_FLAG_PART_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ´¦Àí°ë¸öºº×ÖµÄÇéÐÎ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>part_word</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_strend</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>EQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>!strcasecmp((x), ((y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IS_NUMBER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(acl_alldig((x)) \
		|| ((*(x) == '-' || *(x) == '+') \
			&amp;&amp; *((x) + 1) != 0 &amp;&amp; acl_alldig((x) + 1)))</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_JSON_T_ARRAY</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_NULL</name>
					<operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_BOOL</name>
					<operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>IS_NUMBER</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_NUMBER</name>
					<operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>acl_is_double</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_DOUBLE</name>
					<operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_STRING</name>
					<operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_A_STRING</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>quote</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>txt</name> <init>= <expr><call><name>STR</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_NULL</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>EQ</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>EQ</name><argument_list>(<argument><expr><name>txt</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_BOOL</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IS_NUMBER</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_NUMBER</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>acl_is_double</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_DOUBLE</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_STRING</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ACL_JSON_T_STRING</name> <operator>|</operator> <name>ACL_JSON_T_LEAF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>!=</operator> <name><name>parent</name><operator>-&gt;</operator><name>right_ch</name></name></expr>)</condition> <block>{<block_content>  <comment type="block">/* xxx */</comment>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ³¢ÊÔ·ÖÎö±¾½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã£¬±ØÐëÄÜÕÒµ½·Ö¸ô·û ',' »ò ';' */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json_brother</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_JSON_NODE</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SKIP_SPACE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Èç¹ûµ½´ï¸ù½ÚµãµÄ½áÊø·û£¬Ôò json ½âÎö¹ý³ÌÍê±Ï */</comment>
	<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>acl_json_node_parent</name><argument_list>(<argument><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">','</literal> <operator>||</operator> <operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_MEMBER</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ELEMENT</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>right_ch</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>==</operator> <name><name>json</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<return>return <expr><name>data</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
		<comment type="block">/* ²éÑ¯¸¸½ÚµãµÄÏÂÒ»¸öÐÖµÜ½Úµã */</comment>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt>
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="char">'{'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_MEMBER</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left_ch</name></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_ELEMENT</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_JSON_S_NEXT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>json</name><operator>-&gt;</operator><name>curr_node</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
	<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ×´Ì¬»úÊý¾Ý½á¹¹ÀàÐÍ */</comment>

<struct>struct <name>JSON_STATUS_MACHINE</name> <block>{
	<comment type="block">/* ×´Ì¬Âë */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>status</name></decl>;</decl_stmt>

	<comment type="block">/* ×´Ì¬»ú´¦Àíº¯Êý */</comment>
	<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>callback</name>) <parameter_list>(<parameter><decl><type><name>ACL_JSON</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>JSON_STATUS_MACHINE</name></name></type> <name><name>status_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>ACL_JSON_S_ROOT</name></expr>,	<expr><name>json_root</name></expr> }</block></expr>,    <comment type="block">/* json root node */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_OBJ</name></expr>,	<expr><name>json_obj</name></expr> }</block></expr>,     <comment type="block">/* json obj node */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_MEMBER</name></expr>,	<expr><name>json_member</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>ACL_JSON_S_ARRAY</name></expr>,	<expr><name>json_array</name></expr> }</block></expr>,   <comment type="block">/* json array node */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_ELEMENT</name></expr>,	<expr><name>json_element</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>ACL_JSON_S_PAIR</name></expr>,	<expr><name>json_pair</name></expr> }</block></expr>,    <comment type="block">/* json pair node */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_NEXT</name></expr>,	<expr><name>json_brother</name></expr> }</block></expr>, <comment type="block">/* json brother node */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_TAG</name></expr>,	<expr><name>json_tag</name></expr> }</block></expr>,     <comment type="block">/* json tag name */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_VALUE</name></expr>,	<expr><name>json_value</name></expr> }</block></expr>,   <comment type="block">/* json node's value */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_COLON</name></expr>,	<expr><name>json_colon</name></expr> }</block></expr>,	<comment type="block">/* json tag's ':' */</comment>
	<expr><block>{ <expr><name>ACL_JSON_S_STRING</name></expr>,	<expr><name>json_string</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>ACL_JSON_S_STREND</name></expr>,	<expr><name>json_strend</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>acl_json_update</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ¼ì²éÊÇ·ñÒÑ¾­½âÎöÍê±Ï */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ptr</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* json ½âÎöÆ÷×´Ì¬»úÑ­»·´¦Àí¹ý³Ì */</comment>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>json</name><operator>-&gt;</operator><name>finish</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>status_tab</name><index>[<expr><name><name>json</name><operator>-&gt;</operator><name>status</name></name></expr>]</index></name><operator>.</operator><call><name>callback</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_json_finish</name><parameter_list>(<parameter><decl><type><name>ACL_JSON</name> <modifier>*</modifier></type><name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>json</name><operator>-&gt;</operator><name>finish</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
