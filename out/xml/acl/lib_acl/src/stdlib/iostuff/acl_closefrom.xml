<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/iostuff/acl_closefrom.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>

<comment type="block">/* acl_closefrom() - closes all file descriptors from the given one up */</comment>
        
<function><type><name>int</name></type> <name>acl_closefrom</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lowfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>   
	<decl_stmt><decl><type><name>int</name></type>   <name>fd_limit</name> <init>= <expr><call><name>acl_open_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>fd</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * lowfrom does not have an easy to determine upper limit. A process may
	 * have files open that were inherited from a parent process with a less
	 * restrictive resource limit.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>lowfd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EBADF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd_limit</name> <operator>&gt;</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fd_limit</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <name>lowfd</name></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>fd_limit</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>
</unit>
