<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/iostuff/acl_write_wait.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>  <comment type="block">/* in SUNOS, FD_ZERO need memset() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>   
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../init/init.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_HAS_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_poll_fn</name></type> <name>__sys_poll</name> <init>= <expr><name>WSAPoll</name></expr></init></decl>;</decl_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_poll_fn</name></type> <name>__sys_poll</name> <init>= <expr><name>poll</name></expr></init></decl>;</decl_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>set_poll4write</name><parameter_list>(<parameter><decl><type><name>acl_poll_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>set_poll4write</name><parameter_list>(<parameter><decl><type><name>acl_poll_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_poll</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_write_wait_ms</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_write_wait"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>fds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><name>timeout</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fds</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><call><name>__sys_poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<case>case <expr><name>SOCKET_ERROR</name></expr>:</case>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: poll error(%s), fd: %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: poll return 0, delay=%d, "</literal>
				<literal type="string">"fd=%d, cost=%ld"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLNVAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: %s, POLLNVAL, fd=%d"</literal></expr></argument>,
					<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLLHUP</name> <operator>|</operator> <name>POLLERR</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: %s, %s, %s, fd=%d"</literal></expr></argument>,
					<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLHUP</name></expr> ?</condition><then> <expr><literal type="string">"POLLHUP"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLERR</name></expr> ?</condition><then> <expr><literal type="string">"POLLERR"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>,
					<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ECONNREFUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLOUT</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: %s, revents=%d, %d, %d, %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fds</name><operator>.</operator><name>revents</name></name></expr></argument>,
				<argument><expr><name><name>fds</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLHUP</name></expr></argument>,
				<argument><expr><name><name>fds</name><operator>.</operator><name>revents</name></name><operator>&amp;</operator> <name>POLLERR</name></expr></argument>,
				<argument><expr><name><name>fds</name><operator>.</operator><name>revents</name></name><operator>&amp;</operator> <name>POLLNVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></for>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>acl_write_wait_ms</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_write_wait"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type>  <name>wfds</name></decl>, <decl><type ref="prev"/><name>xfds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>errnum</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifndef>
	<comment type="block">/*
	 * Sanity checks.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>FD_SETSIZE</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): descriptor %d does not fit "</literal>
			<literal type="string">"FD_SETSIZE %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>, <argument><expr><name>FD_SETSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	* Guard the write() with select() so we do not depend on alarm()
	* and on signal() handlers. Restart the select when interrupted
	* by some signal. Some select() implementations may reduce the time
	* to wait when interrupted, which is exactly what we want.
	*/</comment>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>tp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<switch>switch <condition>(<expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<switch>switch <condition>(<expr><call><name>select</name><argument_list>(<argument><expr><name>fd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>fd_set</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><name>errnum</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name>WSAEINPROGRESS</name>
				<operator>||</operator> <name>errnum</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name>
				<operator>||</operator> <name>errnum</name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): select error(%s), fd(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<case>case <expr><literal type="number">0</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></switch>
</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_HAS_POLL */</comment>

<function><type><name>int</name></type> <name>acl_write_wait</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_write_wait_ms</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
