<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/acl_vbuf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vbuf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>acl_vbuf_space</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstring_space</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* vbuf_put - handle write buffer full condition */</comment>

<function><type><name>int</name></type> <name>acl_vbuf_put</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>acl_vstring_put_ready</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ACL_VBUF_EOF</name></expr> </then><else>: <expr><call><name>ACL_VBUF_PUT</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* vbuf_write - bulk write to buffer */</comment>

<function><type><name>int</name></type> <name>acl_vbuf_write</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>count</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>buf</name></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cp</name> <operator>+=</operator> <name>n</name></expr><operator>,</operator> <expr><name>count</name> <operator>-=</operator> <name>n</name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&gt;=</operator> <name><name>bp</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>bp</name><operator>-&gt;</operator><name>len</name></name>
			 <operator>&amp;&amp;</operator> <call><name>acl_vstring_put_ready</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>count</name> <operator>&lt;</operator> <name>dlen</name></expr> ?</condition><then> <expr><name>count</name></expr> </then><else>: <expr><name>dlen</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name> <operator>-</operator> <name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
