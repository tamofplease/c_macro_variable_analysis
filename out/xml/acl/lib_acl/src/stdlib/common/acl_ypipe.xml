<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/common/acl_ypipe.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_yqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ypipe.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ACL_YPIPE</name> <block>{
	<decl_stmt><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>   <name>reads</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>   <name>writes</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>acl_ypipe_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>ACL_YPIPE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_YPIPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>acl_yqueue_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_yqueue_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>item</name>    <operator>=</operator> <call><name>acl_yqueue_back</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>acl_ypipe_free</name><parameter_list>(<parameter><decl><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>free_data_fun</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_yqueue_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>free_data_fun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_ypipe_read</name><parameter_list>(<parameter><decl><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_ypipe_check_read</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>*</operator><call><name>acl_yqueue_front</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_yqueue_pop</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>reads</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_ypipe_write</name><parameter_list>(<parameter><decl><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><call><name>acl_yqueue_back</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_yqueue_push</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>acl_yqueue_back</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>writes</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_ypipe_flush</name><parameter_list>(<parameter><decl><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>w</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_atomic_cas</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>w</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_ypipe_check_read</name><parameter_list>(<parameter><decl><type><name>ACL_YPIPE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>front</name> <init>= <expr><call><name>acl_yqueue_front</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>front</name> <operator>!=</operator> <name><name>self</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;&amp;</operator> <name><name>self</name><operator>-&gt;</operator><name>r</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>self</name><operator>-&gt;</operator><name>r</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_atomic_cas</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>front</name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>r</name></name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>self</name><operator>-&gt;</operator><name>r</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
