<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/common/acl_token_tree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_argv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_token_tree.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LEN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_token_delim_tab_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>delim_tab</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>delim</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>delim_tab</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>delim_tab</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_delim_tab_free</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>delim_tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>delim_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>token</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>iter_next</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>next_token</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* lookup the first left no null child of the current token */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* lookup the right no null brother of the current token */</comment>

	<expr_stmt><expr><name>i</name>      <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>ch</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<return>return <expr><name><name>parent</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>i</name>      <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>ch</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>i</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier><name>token</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>curr</name> <init>= <expr><operator>(</operator><name>ACL_TOKEN</name> <operator>*</operator><operator>)</operator> <name><name>it</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>next_token</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>curr</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><operator>(</operator><name>ACL_TOKEN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_TOKEN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>ch</name></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>iter_next</name></expr>;</expr_stmt>
	<return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_free</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_name</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>iter</name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pend</name> <operator>=</operator> <call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name>  <operator>=</operator> <call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name>    <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>pend</name> <operator>-</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ch</name>    <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>ptr</name>  <operator>=</operator> <operator>*</operator><name>pend</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>pend</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>pend</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_token_name1</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>buf_key</name> <init>=
		<expr><operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>__buf_unsafe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>__buf_unsafe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__buf_unsafe</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>__buf_unsafe</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>buf_key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
				<argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>acl_vstring_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_token_name</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_tree_add</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name><init>= <expr><literal type="string">"acl_token_tree_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>word</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>tree</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_TOKEN_F_PASS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_TOKEN_F_DENY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): word(%s)'s flag(%u) is"</literal>
			<literal type="string">" ACL_TOKEN_F_DENY | ACL_TOKEN_F_PASS"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>token</name>              <operator>=</operator> <call><name>acl_token_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>ch</name></name>          <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name>      <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name>               <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>ch</name></name> <operator>!=</operator> <operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): token-&gt;ch(%d) != %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name><operator>-&gt;</operator><name>ch</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>ctx</name></name>  <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_tree_add_word_map</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word_map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_token_tree_add_word_map"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>word</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr_map</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>word_map</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>tree</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_TOKEN_F_PASS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_TOKEN_F_DENY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): word(%s)'s flag(%u) is "</literal>
			<literal type="string">"ACL_TOKEN_F_DENY | ACL_TOKEN_F_PASS"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>ch</name></name> <operator>=</operator> <operator>*</operator><name>ptr_map</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr_map</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>ch</name></name> <operator>!=</operator> <operator>*</operator><name>ptr_map</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): token-&gt;ch(%d) != %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name><operator>-&gt;</operator><name>ch</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr_map</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_tree_word_match</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>word</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>tree</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>token</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>token</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_token_tree_word_remove</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>acl_token_tree_word_match</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name><name>token</name><operator>-&gt;</operator><name>ch</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_token_free</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>search_stop_at_delim</name><parameter_list>(
	<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>tree</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>is_word</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>delim</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <name><name>delim</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>is_word</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name>   <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name>  <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>last</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>iter</name>  <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>search_stop_at_delim_tab</name><parameter_list>(
	<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim_tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>tree</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>is_word</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>delim_tab</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>is_word</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name>   <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name>  <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>last</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>iter</name>  <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>search_all</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name>tree</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>is_word</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>is_word</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name>   <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name>  <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>is_word</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_word</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>last</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>iter</name>  <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <operator>*</operator><name>ptr</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>last</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>token</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_tree_match</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim_tab</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>delim</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>search_stop_at_delim</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>delim_tab</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>search_stop_at_delim_tab</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>delim_tab</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>search_all</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_tree_walk</name><parameter_list>(
	<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tree</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_TOKEN_F_STOP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>walk_fn</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_token_tree_walk</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>walk_fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_token_name_walk</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_token_name</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_tree_print</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_token_tree_walk</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
				<argument><expr><name>acl_token_name_walk</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"&gt;&gt;&gt;all token: (%s)\n"</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_tree_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_token_tree_create2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">";, \t"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>acl_token_tree_create2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_token_tree_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARGV</name>        <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>         <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>     <name>flag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name>       <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_TOKEN</name>       <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name>     <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>acl_token_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>tree</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ACL_TOKEN_F_STOP</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_TOKEN_F_DENY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_TOKEN_F_PASS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): word(%s) discard"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_token_name</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tree</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_tree_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ACL_TOKEN_WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_token_tree_destroy</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_token_free</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_tree_load_deny</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_token_tree_load_deny"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>flag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filepath</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>filepath</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s open error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_fgets_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ACL_TOKEN_F_STOP</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_TOKEN_F_DENY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_TOKEN_F_PASS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ACL_TOKEN_F_STOP</name> <operator>|</operator> <name>ACL_TOKEN_F_DENY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_token_tree_load_pass</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ACL_TOKEN</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_token_tree_load_pass"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>flag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filepath</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>filepath</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_fopen</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s open error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_fgets_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ACL_TOKEN_F_STOP</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'D'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_TOKEN_F_DENY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>ACL_TOKEN_F_PASS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>ACL_TOKEN_F_STOP</name> <operator>|</operator> <name>ACL_TOKEN_F_PASS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
