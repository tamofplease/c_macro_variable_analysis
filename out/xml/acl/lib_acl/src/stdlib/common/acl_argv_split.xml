<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/common/acl_argv_split.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Application-specific. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_argv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* acl_argv_split - split string into token array */</comment>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_argv_split3</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_split3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>,
	<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argvp</name> <init>= <expr><call><name>acl_argv_alloc2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_string</name> <init>=
		<expr><ternary><condition><expr><name>dbuf</name></expr> ?</condition><then> <expr><call><name>acl_dbuf_pool_strdup</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_string</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dbuf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_free</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_argv_splitn - split string into token array with max items */</comment>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_splitn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_argv_splitn4</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_splitn4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argvp</name> <init>= <expr><call><name>acl_argv_alloc2</name><argument_list>(<argument><expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_string</name> <init>= <expr><ternary><condition><expr><name>dbuf</name></expr> ?</condition><then>
		<expr><call><name>acl_dbuf_pool_strdup</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_string</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dbuf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_free</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_argv_split_append - split string into token array, append to array */</comment>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_split_append</name><parameter_list>(<parameter><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_string</name> <init>= <expr><ternary><condition><expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr> ?</condition><then>
		<expr><call><name>acl_dbuf_pool_strdup</name><argument_list>(<argument><expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_string</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_free</name><argument_list>(<argument><expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_argv_splitn_append - split string into token array, append to
 * array with max items */</comment>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_splitn_append</name><parameter_list>(<parameter><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argvp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>saved_string</name> <init>= <expr><ternary><condition><expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr> ?</condition><then>
		<expr><call><name>acl_dbuf_pool_strdup</name><argument_list>(<argument><expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>bp</name> <init>= <expr><name>saved_string</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dbuf_pool_free</name><argument_list>(<argument><expr><name><name>argvp</name><operator>-&gt;</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>saved_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_quote_split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_argv_quote_split4</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>acl_argv_quote_split4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>,
	<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argvp</name> <init>= <expr><call><name>acl_argv_alloc2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>, <decl><type ref="prev"/><name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>backslash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_dbuf_alloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ADDCH</name></cpp:macro>	<cpp:value>ACL_VSTRING_ADDCH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>TERM</name></cpp:macro>	<cpp:value>ACL_VSTRING_TERMINATE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RESET</name></cpp:macro>	<cpp:value>ACL_VSTRING_RESET</cpp:value></cpp:define>

	<while>while <condition>(<expr><operator>(</operator><name>ch</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>backslash</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TERM</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>backslash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>backslash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>TERM</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>backslash</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TERM</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>backslash</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>backslash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>quote</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>delim</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RESET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TERM</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>argvp</name></expr>;</return>
</block_content>}</block></function>
</unit>
