<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/common/acl_htable.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_htable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* htable_iter_head */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_next */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_tail */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_prev */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>htable_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ptr</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_iter_info */</comment>

<function><type><specifier>static</specifier> <name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>htable_iter_info</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_HTABLE</name></name> <modifier>*</modifier><name>table</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>ACL_HTABLE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* __def_hash_fn - hash a string */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>__def_hash_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buffer</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * From the "Dragon" book by Aho, Sethi and Ullman.
         */</comment>

        <while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>g</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>(</operator><name>g</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>h</name> <operator>^=</operator> <name>g</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>h</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* htable_link - insert element into table */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htable_link</name><parameter_list>(<parameter><type><name>_table</name></type></parameter>, <parameter><type><name>_element</name></type></parameter>, <parameter><type><name>_n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	ACL_HTABLE_INFO **_h = _table-&gt;data + _n; \
	_element-&gt;prev = 0; \
	if ((_element-&gt;next = *_h) != 0) \
		(*_h)-&gt;prev = _element; \
	*_h = _element; \
	_table-&gt;used++; \
}</cpp:value></cpp:define>

<comment type="block">/* htable_size - allocate and initialize hash table */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>htable_size</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>h</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator>
			<call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>,
					<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE_INFO</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>h</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator>
			<call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE_INFO</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

	<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* htable_grow - extend existing table */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>htable_grow</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>old_size</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h0</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>old_entries</name> <init>= <expr><name>h0</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>htable_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>old_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>old_size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h0</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>,
				<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>htable_link</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>old_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>old_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>_RWLOCK_TYPE</name></cpp:macro>	<cpp:value>acl_pthread_mutex_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>_RWLOCK_INIT</name></cpp:macro>	<cpp:value>acl_pthread_mutex_init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>_RWLOCK_DESTROY</name></cpp:macro>	<cpp:value>acl_pthread_mutex_destroy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>_RWLOCK_RDLOCK</name></cpp:macro>	<cpp:value>acl_pthread_mutex_lock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>_RWLOCK_WRLOCK</name></cpp:macro>	<cpp:value>acl_pthread_mutex_lock</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>_RWLOCK_UNLOCK</name></cpp:macro>	<cpp:value>acl_pthread_mutex_unlock</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>__init_table_rwlock</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__init_table_rwlock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>enable</name> <operator>&amp;&amp;</operator> <name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <call><name>acl_slice_pool_calloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
						<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_RWLOCK_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_RWLOCK_TYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%s): calloc error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_RWLOCK_INIT</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): init rwlock error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>enable</name> <operator>&amp;&amp;</operator> <name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_RWLOCK_DESTROY</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_htable_create - create initial hash table */</comment>

<function><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>acl_htable_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>acl_htable_create3</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>acl_htable_create3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>slice</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE</name> <operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_calloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>table</name> <operator>=</operator>	<operator>(</operator><name>ACL_HTABLE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>init_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>htable_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">13</literal></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name> <operator>=</operator> <name>__def_hash_fn</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>htable_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>htable_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>htable_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>htable_iter_prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>iter_info</name></name> <operator>=</operator> <name>htable_iter_info</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_USE_LOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__init_table_rwlock</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>table</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>LOCK_TABLE_READ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>&amp;&amp;</operator> <call><name>_RWLOCK_RDLOCK</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): read lock error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LOCK_TABLE_WRITE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>&amp;&amp;</operator> <call><name>_RWLOCK_WRLOCK</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write lock error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UNLOCK_TABLE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name> <operator>&amp;&amp;</operator> <call><name>_RWLOCK_UNLOCK</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unlock error"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_TABLE_READ</name><parameter_list>(<parameter><type><name>_table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	int   _ret; \
	if (_table-&gt;rwlock &amp;&amp; (_ret = _RWLOCK_RDLOCK(_table-&gt;rwlock))) { \
		acl_msg_fatal("%s(%d): read lock error(%s)", \
				__FILE__, __LINE__, strerror(_ret)); \
	} \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LOCK_TABLE_WRITE</name><parameter_list>(<parameter><type><name>_table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	int   _ret; \
	if (_table-&gt;rwlock &amp;&amp; (_ret = _RWLOCK_WRLOCK(_table-&gt;rwlock))) { \
		acl_msg_fatal("%s(%d): write lock error(%s)", \
				__FILE__, __LINE__, strerror(_ret)); \
	} \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>UNLOCK_TABLE</name><parameter_list>(<parameter><type><name>_table</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	int   _ret; \
	if (_table-&gt;rwlock &amp;&amp; (_ret = _RWLOCK_UNLOCK(_table-&gt;rwlock))) { \
		acl_msg_fatal("%s(%d): unlock error(%s)", \
				__FILE__, __LINE__, strerror(_ret)); \
	} \
} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>acl_htable_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_htable_ctl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_HTABLE_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_HTABLE_CTL_HASH_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_HASH_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name> <operator>=</operator> <name>__def_hash_fn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_HTABLE_CTL_RWLOCK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>__init_table_rwlock</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: init rwlock error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: bad name %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_htable_errno</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ACL_HTABLE_STAT_INVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>status</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_htable_set_errno</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STREQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x == y || (x[0] == y[0] &amp;&amp; strcmp(x,y) == 0))</cpp:value></cpp:define>

<comment type="block">/* acl_htable_enter - enter (key, value) pair */</comment>

<function><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>acl_htable_enter</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_htable_enter"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keybuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do \
{ \
	if (keybuf) { \
		if (table-&gt;slice) \
			acl_slice_pool_free(__FILE__, __LINE__, keybuf); \
		else \
			acl_myfree(keybuf); \
	} \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_LOWER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_HTABLE_STAT_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>htable_grow</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>hash</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_HTABLE_STAT_DUPLEX_KEY</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): duplex key(%s) exist"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): alloc error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_REUSE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
						<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): alloc error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>hash</name></name>  <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>htable_link</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_htable_enter_r</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_htable_enter_r"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keybuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do \
{ \
	if (keybuf) { \
		if (table-&gt;slice) \
			acl_slice_pool_free(__FILE__, __LINE__, keybuf); \
		else \
			acl_myfree(keybuf); \
	} \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_LOWER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_HTABLE_STAT_OK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_TABLE_WRITE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>htable_grow</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>hash</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): duplex key(%s) exist"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>ACL_HTABLE_STAT_DUPLEX_KEY</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_HTABLE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_REUSE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>hash</name></name>  <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>htable_link</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/* acl_htable_find - lookup value */</comment>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_htable_find</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name> <init>= <expr><call><name>acl_htable_locate</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><name>ht</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>  <name>acl_htable_find_r</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>  <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keybuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do \
{ \
	if (keybuf) { \
		if (table-&gt;slice) \
			acl_slice_pool_free(__FILE__, __LINE__, keybuf); \
		else \
			acl_myfree(keybuf); \
	} \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_LOWER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_TABLE_READ</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_MSLOOK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_htable_locate - lookup entry */</comment>

<function><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>acl_htable_locate</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>  <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keybuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do \
{ \
	if (keybuf) { \
		if (table-&gt;slice) \
			acl_slice_pool_free(__FILE__, __LINE__, keybuf); \
		else \
			acl_myfree(keybuf); \
	} \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_LOWER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_MSLOOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ht</name> <operator>==</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name><operator>-&gt;</operator><name>prev</name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>ht</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_htable_locate_r</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>  <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keybuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do \
{ \
	if (keybuf) { \
		if (table-&gt;slice) \
			acl_slice_pool_free(__FILE__, __LINE__, keybuf); \
		else \
			acl_myfree(keybuf); \
	} \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_LOWER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_TABLE_READ</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>callback</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_htable_delete_entry</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>ht</name><operator>-&gt;</operator><name>hash</name></name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ht</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_REUSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>free_fn</name>) <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_htable_delete - delete one entry */</comment>

<function><type><name>int</name></type> <name>acl_htable_delete</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_in</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>  <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keybuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do \
{ \
	if (keybuf) { \
		if (table-&gt;slice) \
			acl_slice_pool_free(__FILE__, __LINE__, keybuf); \
		else \
			acl_myfree(keybuf); \
	} \
	return (x); \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_LOWER</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_slice_pool_strdup</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>acl_lowercase</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keybuf</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>table</name><operator>-&gt;</operator><name>hash_fn</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCK_TABLE_WRITE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_htable_delete_entry</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_htable_free - destroy hash table */</comment>

<function><type><name>void</name></type> <name>acl_htable_free</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_REUSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
						<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call>(<modifier>*</modifier><name>free_fn</name>) <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>_RWLOCK_DESTROY</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_htable_reset</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LOCK_TABLE_WRITE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_HTABLE_FLAG_KEY_REUSE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>&amp;&amp;</operator> <name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call>(<modifier>*</modifier><name>free_fn</name>) <argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>htable_size</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>table</name><operator>-&gt;</operator><name>init_size</name></name> <operator>&lt;</operator> <literal type="number">13</literal></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><name><name>table</name><operator>-&gt;</operator><name>init_size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>acl_htable_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>acl_htable_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>acl_htable_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>ACL_HTABLE_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>acl_htable_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>h</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_htable_walk - iterate over hash table */</comment>

<function><type><name>void</name></type> <name>acl_htable_walk</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>action</name>)<parameter_list>(<parameter><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LOCK_TABLE_READ</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>ht</name> <operator>=</operator> <operator>*</operator><name>h</name><operator>++</operator></expr>;</init> <condition><expr><name>ht</name></expr>;</condition> <incr><expr><name>ht</name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>action</name>) <argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></while>
	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_htable_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_htable_used</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>table</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>used</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>acl_htable_data</name><parameter_list>(<parameter><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ACL_HTABLE_INFO</name><operator>*</operator><operator>*</operator><operator>)</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_htable_list - list all table members */</comment>

<function><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>acl_htable_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>used</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>member</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>member</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>member</name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>list</name><index>[<expr><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>member</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>ACL_HTABLE_INFO</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>list</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>list</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_htable_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_HTABLE_INFO</name> <modifier>*</modifier></type><name>member</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>i</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LOCK_TABLE_READ</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash stat count for each key:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>member</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for<control>(<init>;</init> <condition><expr><name>member</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>member</name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
		<if_stmt><if>if<condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"chains[%d]: count[%d]\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash stat all values for each key:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>member</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>member</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"chains[%d]: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init>;</init> <condition><expr><name>member</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>member</name> <operator>=</operator> <name><name>member</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><name><name>member</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash table size=%d, used=%d\n"</literal></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UNLOCK_TABLE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
