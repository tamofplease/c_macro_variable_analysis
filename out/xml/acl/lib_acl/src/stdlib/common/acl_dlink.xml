<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/common/acl_dlink.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_dlink.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dlink_free_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>arg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>pnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* sanity set to be null */</comment>
	
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ¹¦ÄÜ:	ÕÒ³öÄ³¸ö³¤ÕûÊýÔÚÊý×éÖÐµÄÏÂ±ê·¶Î§Î»ÖÃ
 * ²ÎÊý:
 * a:		½á¹¹Êý×éÖ¸Õë
 * n:		³¤ÕûÊý
 * ·µ»ØÖµ:	ÏÂ±êË÷Òý, ¸ÃË÷ÒýÂú×ãÈçÏÂÌõ¼þ:
 *		(idx &gt;= 0 &amp;&amp; idx &lt; a-&gt;count - 1
 *		 &amp;&amp; n &gt;= a-&gt;items[idx]-&gt;begin
 *		 &amp;&amp; n &lt;  a-&gt;item[a-&gt;count - 1]-&gt;begin )
 *		or (idx == 0 &amp;&amp; n &lt; a-&gt;item[idx]-&gt;begin)
 *		or (idx == a-&gt;count - 1 &amp;&amp; n &gt;= a-&gt;item[idx]-&gt;begin)
 * Ê§°Ü:	-1
 * ³É¹¦:	&gt;= 0
 * ËµÃ÷:	if idx == 0 ----&gt; ËµÃ÷ÔÚÊý×éµÄ¿ªÊ¼Î»ÖÃÌí¼Ó»òÔÚ¿ªÊ¼Î»ÖÃÇ°²åÈë
 * 		if idx &gt; 0 &amp;&amp; idx &lt;= a-&gt;count - 1 -----&gt; ËµÃ÷ÔÚÊý×éµÄÖÐ¼äµÄÄ³Ò»Î»ÖÃ
 *		if idx &gt; a-&gt;count - 1 -----&gt; ËµÃ÷ÔÚÊý×éµÄ×îºóÒ»Î»ÖÃÌí¼Ó
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scope_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem_left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pitem_right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lidx</name></decl>, <decl><type ref="prev"/><name>hidx</name></decl>, <decl><type ref="prev"/><name>midx</name></decl>, <decl><type ref="prev"/><name>ridx</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>lidx</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>hidx</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ridx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>idx</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>hidx</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * find the postion where n &gt;= item_low-&gt;begin
		 * and n &lt; item_high-&gt;begin
		 * NOTICE:
		 * item_low-&gt;begin &lt;= item_low-&gt;end &lt; item_high-&gt;begin !!!!
		 * because the dlink is sorted correctly, or some error must happen
		 * if(item_low-&gt;begin == item_high-&gt;begin
		 *   || item_low-&gt;end == item_high-&gt;begin)
		 * then we should merge them first
		 */</comment>

		<expr_stmt><expr><name>midx</name> <operator>=</operator> <operator>(</operator><name>lidx</name> <operator>+</operator> <name>hidx</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ridx</name> <operator>&gt;</operator> <name>hidx</name></expr>)</condition>	<block>{<block_content>
			<comment type="block">/*
			 * here hidx == 0 or hidx == a-&gt;count - 1, we've been
			 * out of the search scope now, so break out of the loop
			 */</comment>

			<if_stmt><if>if<condition>(<expr><name>hidx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>hidx</name> <operator>==</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>	<comment type="block">/* an error happens */</comment>
				<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pitem_left</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>midx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pitem_right</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ridx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name><name>pitem_right</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>midx</name></expr>;</expr_stmt>	<comment type="block">/* find it :) */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* not find, continue...... */</comment>
		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>pitem_right</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>ridx</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>hidx</name> <operator>=</operator> <name>midx</name></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>	<comment type="block">/* why does the array not to be sorted ? */</comment>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>idx</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>begin_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>scope_pos</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>end_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>scope_pos</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_PRED_INSERT_</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>ACL_DITEM</name> <modifier>*</modifier></type><name>dlink_pred_insert</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_position</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>pitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name>   <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_array_pred_insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_position</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>pnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>pitem</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ACL_DITEM</name> <modifier>*</modifier></type><name>dlink_succ_insert</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_position</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>pitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_array_succ_insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_position</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>pnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>pitem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_DITEM</name> <modifier>*</modifier></type><name>dlink_append</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>pitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name>   <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_array_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>pnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>pitem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_DITEM</name> <modifier>*</modifier></type><name>dlink_prepend</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>pitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name>   <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_array_prepend</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>pnode</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>pitem</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dlink_node_merge</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_obj_begin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx_src_begin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>idx_obj_begin</name> <operator>&gt;=</operator> <name>idx_src_begin</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_array_mv_idx</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_obj_begin</name></expr></argument>, <argument><expr><name>idx_src_begin</name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_DITEM</name> <modifier>*</modifier></type><name>dlink_add</name><parameter_list>(<parameter><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem_right</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pitem_left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>idx_begin</name></decl>, <decl><type ref="prev"/><name>idx_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* sanity check, maybe useless */</comment>
	<comment type="block">/* because it's used internal */</comment>
	<if_stmt><if>if<condition>(<expr><name>begin</name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx_begin</name> <operator>=</operator> <call><name>begin_pos</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx_begin</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx_begin</name> <operator>&gt;=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* an error happened */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx_end</name>   <operator>=</operator> <call><name>end_pos</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>idx_end</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx_end</name> <operator>&gt;=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* an error happened */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>idx_begin</name> <operator>&gt;</operator> <name>idx_end</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* an error happened */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>	<comment type="block">/* the d-link is empty so just add one :) */</comment>
		<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>dlink_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>pitem</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pitem_left</name>  <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pitem_right</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if idx_end == 0 then idx_begin must be equal to 0, I'm sure it :) */</comment>
	<if_stmt><if>if <condition>(<expr><name>idx_begin</name> <operator>==</operator> <name>idx_end</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * pitem_left == pitem_right
		 * here idx_begin maybe one of: 0, a-&gt;count - 1,
		 * or the one between 0 and a-&gt;count
		 * this is to say the begin and end is on the same d-link
		 */</comment>

		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * here idx_begin == idx_end must be equal to 0
			 * the begin and the end must be less
			 * than the next node's begin
			 * add one new node before the one
			 */</comment>
			<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>dlink_prepend</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>pitem</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&gt;</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * this is to say begin and end
			 * between the current node's end
			 * the next node's begin, and we just
			 * insert one new node between the
			 * current node and the next node, when
			 * the next node is NULL(which say that
			 * idx_begin == idx_end == a-&gt;count - 1),
			 * just insert one new node after
			 * the the last node
			 */</comment>
			<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>dlink_succ_insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_begin</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>pitem</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * here idx_begin == idx_end must in the middle
		 * here begin &lt;= pitem_left-&gt;end,
		 * and end &lt; the next node's begin,
		 * and end &gt;= pitem_left-&gt;begin
		 */</comment>

		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*
			 * just merge, which happens when
			 * idx_begin == idx_end == 0 &amp;&amp; begin &lt; pitem_left-&gt;begin
			 * &amp;&amp; end &gt;= pitem_left-&gt;begin
			 */</comment>
			<expr_stmt><expr><name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/*
			 * just merge, pitem_left-&gt;begin &lt;= pitem_left-&gt;end
			 * pitem_left-&gt;begin &lt;= end &lt; pitem_right-&gt;end
			 * or pitem_right == NULL
			 */</comment>
			<expr_stmt><expr><name><name>pitem_left</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>pitem_left</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * idx_end &gt; idx_begin, idx_begin &gt;= 0, idx_end &lt;= a-&gt;count - 1
	 * ===&gt; 0 &lt;= idx_begin &lt; idx_end &lt;= a-&gt;count - 1;
	 *
	 * idx_end &gt; idx_begin, so the begin and end
	 * are separately in defferent node,
	 * because the d-link is sored correctly:).
	 * ===&gt; I just only merge them--the reason is shown below:
	 * idx_end &gt; idx_begin, d-link is sorted correctly
	 * ===&gt;	pitem_left-&gt;begin &lt; pitem_right-&gt;begin &lt;= end,
	 *	begin &lt; pitem_right-&gt;begin;
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * in the first position of the array
		 * idx_begin == 0 and idx_end &gt;= 1
		 * just merge :)
		 */</comment>

		<expr_stmt><expr><name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt> 

	<comment type="block">/*
	 * ===&gt;  pitem_left-&gt;begin
	 * ===&gt;  &lt;= begin
	 * ===&gt;  ......
	 * ===&gt;  &lt;  pitem_right-&gt;begin
	 * ===&gt;  &lt;= end
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;=</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>end</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * ===&gt;  pitem_left-&gt;begin
		 * ===&gt;  &lt;= begin
		 * +++&gt;  &lt;= pitem_left-&gt;end
		 * ===&gt;  &lt;  pitem_right-&gt;begin
		 * ===&gt;  &lt;= end
		 * ===&gt;  so, just merge the nodes between the
		 * ===&gt;  pitem_left node and the pitem_right node,
		 * ===&gt;  and include both of them
		 */</comment>

		<comment type="block">/*
		 * merge the pitem_left node, begin ---&gt; end into pitem_right
		 * node, and merge all nodes into one node which are between 
		 * the pitem_left node and the pitem_right node,
		 * include both of pitem_left node and pitem_right node
		 */</comment>

		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>pitem_right</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/*
			 * ===&gt;  pitem_left-&gt;begin
			 * ===&gt;  &lt;= begin
			 * ===&gt;  &lt;= pitem_left-&gt;end
			 * ===&gt;  &lt;  pitem_right-&gt;begin
			 * +++&gt;  &lt;= pitem_right-&gt;end
			 * ===&gt;  &lt;  end
			 */</comment>

			<expr_stmt><expr><name><name>pitem_right</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/*
		 * else
		 * ===&gt;  pitem_left-&gt;begin
		 * ===&gt;  &lt;= begin
		 * ===&gt;  &lt;= pitem_left-&gt;end
		 * ===&gt;  &lt;  pitem_right-&gt;begin
		 * ===&gt;  &lt;= end
		 * +++&gt;  &lt;= pitem_right-&gt;end
		 */</comment>

		<expr_stmt><expr><name><name>pitem_right</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name><name>pitem_left</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dlink_node_merge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_begin</name></expr></argument>, <argument><expr><name>idx_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><name>pitem_right</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * ===&gt;  pitem_left-&gt;begin
	 * ===&gt;  &lt;= pitem_left-&gt;end
	 * ===&gt;  &lt;  begin
	 * ===&gt;  &lt;  pitem_right-&gt;begin
	 * ===&gt;  &lt;= end
	 *
	 * merge the begin---&gt;end into pitem_right node
	 * and at the same time, merge all the nodes into idx_begin + 1
	 * which between the idx_begin + 1 node and the pitem_right node,
	 * include idx_begin + 1 node and pitem_righ node
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>pitem_right</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * ===&gt;  pitem_left-&gt;begin
		 * ===&gt;  &lt;= pitem_left-&gt;end
		 * ===&gt;  &lt;  begin
		 * ===&gt;  &lt;  pitem_right-&gt;begin
		 * +++&gt;  &lt;= pitem_right-&gt;end
		 * ===&gt;  &lt;  end
		 */</comment>

		<expr_stmt><expr><name><name>pitem_right</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * else
	 * ===&gt;  pitem_left-&gt;begin
	 * ===&gt;  &lt;= pitem_left-&gt;end
	 * ===&gt;  &lt;  begin
	 * ===&gt;  &lt;  pitem_right-&gt;begin
	 * ===&gt;  &lt;  end
	 * +++&gt;  &lt;= pitem_right-&gt;end
	 */</comment>

	<expr_stmt><expr><name><name>pitem_right</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dlink_node_merge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>idx_begin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>idx_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>pitem_right</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dlink_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_DLINK</name></name> <modifier>*</modifier></type><name>dlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>dlink</name><operator>-&gt;</operator><name>parray</name><operator>-&gt;</operator><name>iter_head</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>dlink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dlink_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_DLINK</name></name> <modifier>*</modifier></type><name>dlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>dlink</name><operator>-&gt;</operator><name>parray</name><operator>-&gt;</operator><name>iter_next</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>dlink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dlink_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_DLINK</name></name> <modifier>*</modifier></type><name>dlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>dlink</name><operator>-&gt;</operator><name>parray</name><operator>-&gt;</operator><name>iter_tail</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>dlink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dlink_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_DLINK</name></name> <modifier>*</modifier></type><name>dlink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>dlink</name><operator>-&gt;</operator><name>parray</name><operator>-&gt;</operator><name>iter_prev</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>dlink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>acl_dlink_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>plink</name> <operator>=</operator> <operator>(</operator><name>ACL_DLINK</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DLINK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>call_back_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nsize</name> <operator>=</operator> <ternary><condition><expr><name>nsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>nsize</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>plink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>dlink_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>dlink_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>dlink_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plink</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>dlink_iter_prev</name></expr>;</expr_stmt>

	<return>return <expr><name>plink</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dlink_free</name><parameter_list>(<parameter><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>plink</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>plink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup_by_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_lookup2_by_item</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup2_by_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>parray</name> <init>= <expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>parray</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>pitem</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pidx</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>pidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>pitem</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_lookup2</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>lidx</name></decl>, <decl><type ref="prev"/><name>midx</name></decl>, <decl><type ref="prev"/><name>hidx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>lidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>hidx</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>hidx</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DITEM</name><modifier>*</modifier></type> <name>pitem</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>midx</name>  <operator>=</operator> <operator>(</operator><name>lidx</name> <operator>+</operator> <name>hidx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>midx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pidx</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>pidx</name> <operator>=</operator> <name>midx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>pitem</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>hidx</name> <operator>=</operator> <name>midx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>			<comment type="block">/* why does this array not to be sorted ? */</comment>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>	<comment type="block">/*not in the d_link scope */</comment>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>ditem</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>begin</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ditem</name> <operator>=</operator> <call><name>acl_dlink_lookup2</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>pidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ditem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ditem</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ditem</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup_larger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DITEM</name><modifier>*</modifier></type> <name>pitem</name> <init>= <expr><operator>(</operator><name>ACL_DITEM</name><operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name>off</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pidx</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>pidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>pitem</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>	<comment type="block">/*not in the d_link scope */</comment>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_lookup_lower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pidx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_DITEM</name><modifier>*</modifier></type> <name>pitem</name> <init>= <expr><operator>(</operator><name>ACL_DITEM</name><operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>&lt;=</operator> <name>off</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pidx</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>pidx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>pitem</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>	<comment type="block">/*not in the d_link scope */</comment>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_insert</name><parameter_list>(<parameter><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_int64</name></type> <name>tmp</name></decl>;</decl_stmt>
		<comment type="block">/* swap the begin and end if end &lt; begin */</comment>
		<expr_stmt><expr><name>tmp</name>   <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name>   <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* this is the first item of the array */</comment>
		<return>return <expr><call><name>dlink_append</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´Ëº¯ÊýÄÚÓÐ¿ÉÄÜ½øÐÐÁË½áµãÏîµÄºÏ²¢ */</comment>
	<return>return <expr><call><name>dlink_add</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dlink_delete</name><parameter_list>(<parameter><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_DITEM</name> <modifier>*</modifier></type><name>ditem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>idx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ditem</name> <operator>=</operator> <call><name>acl_dlink_lookup2</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ditem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dlink_delete_by_item</name><parameter_list>(<parameter><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_array_delete_obj</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* this is impossile, but a sanity check */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dlink_delete_range</name><parameter_list>(<parameter><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>parray</name> <init>= <expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>pitem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pitem_low</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pitem_low</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>parray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&gt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* begin &lt;= pitem-&gt;end */</comment>
		
		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&lt;=</operator> <name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* begin &lt;= pitem-&gt;begin &lt;= pitem-&gt;end */</comment>
			<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* begin &lt;= pitem-&gt;begin &lt;= end &lt; pitem-&gt;end */</comment>
				<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>==</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* begin &lt;= pitem-&gt;begin &lt;= pitem-&gt;end == end */</comment>
				<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* begin &lt;= pitem-&gt;begin &lt;= pitem-&gt;end &lt; end */</comment>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></if>

		<comment type="block">/* pitem-&gt;begin &lt; begin &lt;= pitem-&gt;end */</comment>

		<if type="elseif">else if <condition>(<expr><name>end</name> <operator>==</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* pitem-&gt;begin &lt; begin &lt;= end == pitem-&gt;end */</comment>
			<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* pitem-&gt;begin &lt; begin &lt;= end &lt; pitem-&gt;end */</comment>
			<decl_stmt><decl><type><name>acl_int64</name></type> <name>tmp_begin</name></decl>, <decl><type ref="prev"/><name>tmp_end</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>tmp_begin</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp_end</name> <operator>=</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/* add one ditem hole */</comment>
			<expr_stmt><expr><call><name>dlink_add</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>tmp_begin</name></expr></argument>, <argument><expr><name>tmp_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* pitem-&gt;begin &lt; begin &lt;= pitem-&gt;end &lt; end */</comment>
			<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>begin</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* i is the last item's idx */</comment>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>pitem_low</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pitem_low</name><operator>-&gt;</operator><name>begin</name></name> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<comment type="block">/* begin &lt; pitem_low-&gt;begin &lt;= end */</comment>
			<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>pitem_low</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* begin &lt; pitem_low-&gt;begin &lt;= end &lt; pitem_low-&gt;end */</comment>
				<expr_stmt><expr><name><name>pitem_low</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>==</operator> <name><name>pitem_low</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* begin &lt; pitem_low-&gt;begin &lt;= pitem_low-&gt;end == end */</comment>
				<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* begin &lt; pitem_low-&gt;begin &lt;= pitem_low-&gt;end &lt; end */</comment>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<expr_stmt><expr><name>high</name> <operator>=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>low</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* end &lt;= pitem-&gt;end */</comment>

		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* end &lt; pitem-&gt;begin &lt;= pitem-&gt;end */</comment>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>end</name> <operator>==</operator> <name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* end == pitem-&gt;begin &lt;= pitem-&gt;end */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>==</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* end == pitem-&gt;begin == pitem-&gt;end */</comment>
				<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/* end == pitem-&gt;begin &lt; pitem-&gt;end */</comment>
				<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>

		<comment type="block">/* pitem-&gt;begin &lt; end &lt;= pitem-&gt;end */</comment>

		<if type="elseif">else if <condition>(<expr><name>end</name> <operator>==</operator> <name><name>pitem</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* pitem-&gt;begin &lt; end == pitem-&gt;end */</comment>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* pitem-&gt;begin &lt; end &lt; pitem-&gt;end */</comment>
			<expr_stmt><expr><name><name>pitem</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;</operator> <name>high</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>acl_array_delete_range</name><argument_list>(<argument><expr><name>parray</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>dlink_free_callback</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_modify</name><parameter_list>(<parameter><decl><type><name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>acl_int64</name></type> <name>tmp</name></decl>;</decl_stmt>
		<comment type="block">/* swap the begin andend if end &lt; begin */</comment>
		<expr_stmt><expr><name>tmp</name>   <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>begin</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name>   <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>dlink_add</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>acl_dlink_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dlink_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ++++++++++++++++++++++++++below functions are used only for test ++++++++++++ */</comment>

<function><type><name>int</name></type> <name>acl_dlink_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_DLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dlink_list"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DITEM</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>plink</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>plink</name><operator>-&gt;</operator><name>parray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\r\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return<expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>ACL_DITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"begin="</literal> <name>ACL_FMT_I64D</name> <literal type="string">", end="</literal> <name>ACL_FMT_I64D</name> <literal type="string">"\r\n"</literal></expr></argument>,
			<argument><expr><name><name>item</name><operator>-&gt;</operator><name>begin</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
