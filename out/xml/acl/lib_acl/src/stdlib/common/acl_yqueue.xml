<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/common/acl_yqueue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_yqueue.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>CHUNK_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>chunk_t</name> <block>{
	<decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name><name>value</name><index>[<expr><name>CHUNK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>chunk_t</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>chunk_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>chunk_t</name>;</typedef>

<struct>struct <name>ACL_YQUEUE</name> <block>{
	<decl_stmt><decl><type><name>chunk_t</name>   <modifier>*</modifier></type><name>begin_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>begin_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chunk_t</name>   <modifier>*</modifier></type><name>back_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>back_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chunk_t</name>   <modifier>*</modifier></type><name>end_chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>        <name>end_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_uint64</name></type> <name>pushs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_uint64</name></type> <name>pops</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>spare_chunk</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>acl_yqueue_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>self</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>self</name> <operator>=</operator> <operator>(</operator><name>ACL_YQUEUE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_YQUEUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_YQUEUE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name> <operator>=</operator> <operator>(</operator><name>chunk_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>back_chunk</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>back_pos</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name>   <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_pos</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>spare_chunk</name></name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>spare_chunk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>chunk_data_free</name><parameter_list>(<parameter><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>begin</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free_fn</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>acl_yqueue_free</name><parameter_list>(<parameter><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>free_fn</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>back_chunk</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>chunk_data_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name></expr></argument>,
				<argument><expr><name><name>self</name><operator>-&gt;</operator><name>back_pos</name></name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>back_chunk</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>begin_pos</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init>;</init> <condition><expr><name>begin</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>begin</name> <operator>=</operator> <name><name>begin</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>chunk_data_free</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>begin_pos</name></expr></argument>,
					<argument><expr><name>CHUNK_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>begin_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>chunk_data_free</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>back_pos</name></name></expr></argument>, <argument><expr><name>free_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>begin_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<do>do <block>{<block_content>
		<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name> <operator>==</operator> <name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

	<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>chunk_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_atomic_xchg</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>spare_chunk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>spare_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>acl_yqueue_front</name><parameter_list>(<parameter><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>acl_yqueue_back</name><parameter_list>(<parameter><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>back_chunk</name><operator>-&gt;</operator><name>value</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>back_pos</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_yqueue_push</name><parameter_list>(<parameter><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pushs</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>back_chunk</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>back_pos</name></name>   <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>end_pos</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_pos</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>!=</operator> <name>CHUNK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>sc</name> <operator>=</operator> <operator>(</operator><name>chunk_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_atomic_xchg</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>spare_chunk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sc</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator>
			<operator>(</operator><name>chunk_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_chunk</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>end_chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>end_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_yqueue_pop</name><parameter_list>(<parameter><decl><type><name>ACL_YQUEUE</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>pops</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name> <operator>==</operator> <name>CHUNK_SIZE</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name></name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_chunk</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>begin_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>chunk_t</name> <operator>*</operator><operator>)</operator> <call><name>acl_atomic_xchg</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>spare_chunk</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cs</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
