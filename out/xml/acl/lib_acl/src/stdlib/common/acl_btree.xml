<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/common/acl_btree.c"><comment type="block">/*
 * FILE:     btree.c
 * PROGRAM:  RAT
 * AUTHOR:   O.Hodson
 * MODIFIED: C.Perkins
 * 
 * Binary tree implementation - Mostly verbatim from:
 *
 * Introduction to Algorithms by Corman, Leisserson, and Rivest,
 * MIT Press / McGraw Hill, 1990.
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_btree.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>BTREE_NODE</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>BTREE_NODE</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>BTREE_NODE</name></name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>BTREE_NODE</name></name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>magic</name></decl>;</decl_stmt>
}</block></struct></type> <name>BTREE_NODE</name>;</typedef>

<struct>struct <name>ACL_BTREE</name> <block>{
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>magic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/*****************************************************************************/</comment>
<comment type="block">/* Debugging functions...                                                    */</comment>
<comment type="block" format="doxygen">/*****************************************************************************/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTREE_MAGIC</name></cpp:macro>      <cpp:value>0x10101010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BTREE_NODE_MAGIC</name></cpp:macro> <cpp:value>0x01010101</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>btree_count</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btree_validate_node</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"btree_validate_node"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>BTREE_NODE_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): magic(%u) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>parent</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): parent invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>btree_count</name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>btree_validate_node</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>btree_validate_node</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btree_validate</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"btree_validate"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>BTREE_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): magic(%u) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>btree_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>btree_validate_node</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>btree_count</name> <operator>!=</operator> <name><name>t</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): btree_count(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>btree_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*****************************************************************************/</comment>
<comment type="block">/* Utility functions                                                         */</comment>
<comment type="block" format="doxygen">/*****************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>BTREE_NODE</name> <modifier>*</modifier></type><name>btree_min</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<while>while<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>x</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BTREE_NODE</name> <modifier>*</modifier></type><name>btree_max</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<while>while<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>x</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BTREE_NODE</name> <modifier>*</modifier></type><name>btree_successor</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><call><name>btree_min</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>y</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>==</operator> <name><name>y</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>y</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BTREE_NODE</name> <modifier>*</modifier></type><name>btree_search</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>key</name> <operator>!=</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>x</name><operator>)</operator></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btree_insert_node</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"btree_insert_node"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%u) exist"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>key</name></name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BTREE_NODE</name> <modifier>*</modifier></type><name>btree_delete_node</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>btree_successor</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>y</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name> <operator>==</operator> <name><name>y</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>y</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>y</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*****************************************************************************/</comment>
<comment type="block">/* Exported functions                                                        */</comment>
<comment type="block" format="doxygen">/*****************************************************************************/</comment>

<function><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>acl_btree_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>ACL_BTREE</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_BTREE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>BTREE_MAGIC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>root</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"acl_btree"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BTREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>t</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_btree_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_btree_destroy"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Tree not empty"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_btree_find</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_search</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_btree_add</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_btree_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_search</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Item already exists - key %u"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>BTREE_NODE</name> <operator>*</operator><operator>)</operator> <call><name>acl_slice_alloc</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>data</name></name>   <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>left</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>magic</name></name>  <operator>=</operator> <name>BTREE_NODE_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_insert_node</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_btree_remove</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_btree_remove"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_search</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): Item not on tree - key %u\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Note value that gets freed is not necessarily the the same
	 * as node that gets removed from tree since there is an
	 * optimization to avoid pointer updates in tree which means
	 * sometimes we just copy key and data from one node to another.  
	 */</comment>

	<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_delete_node</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>data</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_btree_get_min_key</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_min</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        
	<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_btree_get_max_key</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_max</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        
	<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_btree_get_next_key</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cur_key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>next_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>btree_validate</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_search</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>btree_successor</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
        
	<expr_stmt><expr><operator>*</operator><name>next_key</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btree_depth</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>btree_depth</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>btree_depth</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_btree_depth</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>btree_depth</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btree_dump_node</name><parameter_list>(<parameter><decl><type><name>BTREE_NODE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* move(depth * 2, c); */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>depth</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%u\r\n"</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>btree_dump_node</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>left</name></name></expr></argument>,  <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>w</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>btree_dump_node</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>w</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>w</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_btree_dump</name><parameter_list>(<parameter><decl><type><name>ACL_BTREE</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>btree_dump_node</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
