<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/common/acl_ring.c"><comment type="block">/* Application-specific. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* acl_ring_init - initialize ring head */</comment>
<function><type><name>void</name></type> <name>acl_ring_init</name><parameter_list>(<parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>pred</name></name>   <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>succ</name></name> <operator>=</operator> <name>ring</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>ring</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>len</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_ring_size - the entry number in the ring */</comment>

<function><type><name>int</name></type> <name>acl_ring_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>ring</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_ring_append - insert entry after ring head */</comment>

<function><type><name>void</name></type> <name>acl_ring_append</name><parameter_list>(<parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>, <parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>succ</name></name>      <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>succ</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pred</name></name>      <operator>=</operator> <name>ring</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>parent</name></name>    <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>succ</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>succ</name></name>       <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_ring_prepend - insert new entry before ring head */</comment>

<function><type><name>void</name></type> <name>acl_ring_prepend</name><parameter_list>(<parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>, <parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>pred</name></name>      <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>pred</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>succ</name></name>      <operator>=</operator> <name>ring</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>parent</name></name>    <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>succ</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>pred</name></name>       <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ring</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_ring_detach - remove entry from ring */</comment>

<function><type><name>void</name></type> <name>acl_ring_detach</name><parameter_list>(<parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name>   <modifier>*</modifier></type><name>succ</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name>   <modifier>*</modifier></type><name>pred</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>entry</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>succ</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>succ</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pred</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>succ</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pred</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pred</name><operator>-&gt;</operator><name>succ</name></name> <operator>=</operator> <name>succ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>succ</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>succ</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>pred</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_ring_pop_head - pop ring's head entry out from ring */</comment>

<function><type><name>ACL_RING</name> <modifier>*</modifier></type><name>acl_ring_pop_head</name><parameter_list>(<parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name>   <modifier>*</modifier></type><name>succ</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>succ</name> <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>succ</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>succ</name> <operator>==</operator> <name>ring</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><name>succ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>succ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_ring_pop_tail - pop ring's tail entry out from ring */</comment>

<function><type><name>ACL_RING</name> <modifier>*</modifier></type><name>acl_ring_pop_tail</name><parameter_list>(<parameter><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name>   <modifier>*</modifier></type><name>pred</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pred</name> <operator>=</operator> <name><name>ring</name><operator>-&gt;</operator><name>pred</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pred</name> <operator>==</operator> <name>ring</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pred</name></expr>;</return>
</block_content>}</block></function>
</unit>
