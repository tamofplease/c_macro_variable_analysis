<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/common/acl_iplink.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_dlink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iplink.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_check_ip_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier>	<name>char</name>	<modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pstrip</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pstrip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>pstrip</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* the first char should not be '.' */</comment>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<while>while<condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* the last char should not be '.' */</comment>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>count</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* 192.168.0.1 has the number '.' is 4 */</comment>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>acl_iplink_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_create</name><argument_list>(<argument><expr><name>nsize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_iplink_free</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>lnk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>lnk</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_dlink_free</name><argument_list>(<argument><expr><name>lnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>acl_iplink_lookup_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>,
	<parameter><decl><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>pitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_lookup_by_item</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>acl_iplink_lookup_bin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_lookup</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>acl_iplink_lookup_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ip</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>ipstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>acl_iplink_lookup_bin</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>acl_iplink_insert_bin</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ip_begin</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ip_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_insert</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>ip_begin</name></expr></argument>, <argument><expr><name>ip_end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>acl_iplink_insert</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip_begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip_end</name></decl></parameter> )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_iplink_insert"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ip_begin</name></decl>, <decl><type ref="prev"/><name>ip_end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>_check_ip_addr</name><argument_list>(<argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid ip begin(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>_check_ip_addr</name><argument_list>(<argument><expr><name>pstrip_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid ip end(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pstrip_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ip_begin</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ip_end</name>   <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>pstrip_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_iplink_insert_bin</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>ip_begin</name></expr></argument>, <argument><expr><name>ip_end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_iplink_delete_by_ip</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip_begin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ip</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>_check_ip_addr</name><argument_list>(<argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>acl_dlink_delete</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_iplink_delete_by_item</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>pitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_dlink_delete_by_item</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>pitem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>acl_iplink_modify</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip_id</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip_begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstrip_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ip_begin</name></decl>, <decl><type ref="prev"/><name>ip_end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>_check_ip_addr</name><argument_list>(<argument><expr><name>pstrip_id</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
	    <operator>||</operator> <call><name>_check_ip_addr</name><argument_list>(<argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
	    <operator>||</operator> <call><name>_check_ip_addr</name><argument_list>(<argument><expr><name>pstrip_end</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ip_begin</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>pstrip_begin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ip_end</name>   <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>pstrip_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_dlink_modify</name><argument_list>(<argument><expr><name>plink</name></expr></argument>, <argument><expr><name>ip_begin</name></expr></argument>, <argument><expr><name>ip_end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_iplink_count_item</name><parameter_list>(<parameter><decl><type><name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ++++++++++++++++++++++++++below functions are used only for test ++++++++++++ */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__sane_inet_ntoa</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* XXX: may be bugfix here---zsx */</comment>
<comment type="block">/*	in.s_addr = ntohl(src); */</comment>
	<expr_stmt><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>in</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_LINUX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUNOS5</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HP_UX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return<expr><operator>(</operator><name>dst</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_iplink_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_IPLINK</name> <modifier>*</modifier></type><name>plink</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_IPITEM</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ip_begin</name></decl>, <decl><type ref="prev"/><name>ip_end</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>ACL_IPITEM</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>plink</name><operator>-&gt;</operator><name>parray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ip_begin</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>begin</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ip_end</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__sane_inet_ntoa</name><argument_list>(<argument><expr><name>ip_begin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ipbegin=%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__sane_inet_ntoa</name><argument_list>(<argument><expr><name>ip_end</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", ipend=%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
