<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/common/acl_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_htable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_cache.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ring</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>!=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ring</name> <operator>=</operator> <operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ring</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>!=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ring</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>!=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ring</name> <operator>=</operator> <operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>ring</name> <operator>=</operator> <call><name>acl_ring_pred</name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ring</name> <operator>!=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>ring</name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>cache_iter_info</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_RING</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>acl_cache_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CACHE_INFO</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_cache_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): max_size(%d), timeout(%d), no need cache"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>free_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: free_fn null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>=</operator> <ternary><condition><expr><name>max_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>max_size</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>timeout</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"acl_cache"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CACHE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>cache_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>cache_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>cache_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>cache_iter_prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>iter_info</name></name> <operator>=</operator> <name>cache_iter_info</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>cache</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_free</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_cache_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>info</name> <operator>=</operator> <call><name>ACL_RING_FIRST_APPL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: key(%s)'s nrefer(%d) &gt; 0"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* force to set 0 */</comment>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache_delete</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>acl_cache_enter</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_cache_enter"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: key(%s)'s old's"</literal>
				<literal type="string">" value's refer(%d) &gt; 0"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û·¢ÏÖ»º´æ³ØÒç³ö£¬ÔòÓÅÏÈ²ÉÓÃ¹ýÆÚ²ßÂÔ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache_timeout</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÒÀÈ»·¢ÏÖ»º´æ³ØÒç³ö£¬Ôò²ÉÓÃÉ¾³ý×î¾ÉµÄÊý¾Ý²ßÂÔ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

		<comment type="block">/* ¾¡Á¿É¾³ýÒ»¸ö×îÀÏµÄ¶ÔÏó */</comment>
		<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;cache-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>info</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache_delete</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û»º´æ³Ø»¹ÊÇ´¦ÓÚÒç³ö×´Ì¬£¬ÔòÖ±½Ó·µ»Ø²»½øÐÐÈÎÎñÌí¼Ó */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: cache-&gt;size(%d) &gt;= cache-&gt;max_size(%d)"</literal>
			<literal type="string">", add key(%s) error"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_calloc</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: add key(%s) to htable error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>=</operator> <ternary><condition><expr><name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cache</name><operator>-&gt;</operator><name>timeout</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<comment type="block">/* ½«×îÐÂµÄÊý¾ÝÌí¼ÓÔÚ¹ýÆÚÊý¾ÝÁ´µÄÎ²²¿, µ±ÓÉÁ´Í·ÏòÁ´Î²·½Ïò±éÀúÊ±£¬Êý¾Ý×ÜÊÇ
	 * ÓÉ×î¾ÉµÄÊý¾ÝÏò×îÐÂµÄÊý¾Ý¿ªÊ¼£¬¼´£ºacl_ring_succ: ¾É --&gt; ÐÂ
	 */</comment>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_cache_find</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>acl_cache_locate</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache_delete</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>cache</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache_delete2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><call><name>acl_cache_delete</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ÒòÎªÊý¾ÝÁ´µÄÌí¼ÓÊÇÎ²²¿Ìí¼ÓµÄ£¬ËùÒÔ´ÓÊ×²¿ÖÁÎ²²¿Êý¾ÝÒÀ´ÎÓÉ¾É±äÐÂ */</comment>
	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>iter_next</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_cache_delete</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>iter_next</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_update2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<comment type="block">/* ½«×îÐÂµÄÊý¾ÝÌí¼ÓÔÚ¹ýÆÚÊý¾ÝÁ´µÄÎ²²¿, µ±ÓÉÁ´Í·ÏòÁ´Î²·½Ïò±éÀúÊ±£¬Êý¾Ý×ÜÊÇ
	 * ÓÉ×î¾ÉµÄÊý¾ÝÏò×îÐÂµÄÊý¾Ý¿ªÊ¼£¬¼´£ºacl_ring_succ: ¾É --&gt; ÐÂ
	 */</comment>
	<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_update</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_cache_update2</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_refer</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_refer2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_unrefer2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_unrefer</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_cache_unrefer"</literal></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: key(%s)'s nrefer(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_lock</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_unlock</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache_walk</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_CACHE_INFO</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;cache-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>walk_fn</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache_clean</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_cache_clean"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>ring</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_CACHE_INFO</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>force</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: key(%s)'s refer(%d) &gt; 0"</literal></expr></argument>,
					<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
					<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* force set 0 */</comment>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>iter_next</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_cache_delete</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>iter_next</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache_size</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
