<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/common/acl_cache2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_htable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_avl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_cache2.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ACL_CACHE2</name></type>  <name>cache</name></decl>;</decl_stmt>		<comment type="block" format="doxygen">/**&lt; ·â×°ÁË ACL_CACHE2 */</comment>
	<decl_stmt><decl><type><name>ACL_HTABLE</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>		<comment type="block" format="doxygen">/**&lt; ¹þÏ£±íÓÃÓÚ°´¼üÖµ²éÑ¯ */</comment>
	<decl_stmt><decl><type><name>avl_tree_t</name></type>  <name>avl</name></decl>;</decl_stmt>		<comment type="block" format="doxygen">/**&lt; ÓÃÓÚ°´Ê±¼äÅÅÐòµÄÆ½ºâ¶þ²æÊ÷ */</comment>

	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>       <comment type="block" format="doxygen">/**&lt; »º´æ³ØËø */</comment>
}</block></struct></type> <name>CACHE</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>CACHE_INFO</name></name></type> <name>CACHE_INFO</name>;</typedef>

<comment type="block">/* ¾ßÓÐÏàÍ¬¹ýÆÚÊ±¼ä½ØµÄÔªËØ´æ·ÅÀï¸ÃÊ÷½ÚµãÉÏ */</comment>
<typedef>typedef <type><struct>struct <name>TREE_NODE</name> <block>{
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>avl_node_t</name></type>  <name>node</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>time_t</name></type> <name>when_timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>TREE_NODE</name>;</typedef>

<comment type="block">/* Ã¿¸öÔªËØµÄÄÚ²¿¶ÔÏó£¬ËùÓÐÔªËØÁ¬½ÓÔÚÒ»Æð£¬Í¬Ê±±íÃ÷¸ÃÔªËØËùÊôµÄÊ÷½Úµã */</comment>
<struct>struct <name>CACHE_INFO</name> <block>{
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name></type> <name>info</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>tree_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE2</name></name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE2</name></name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name>  <init>= <expr><operator>(</operator><name>CACHE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name>  <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>tree_node</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_tail</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE2</name></name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name>    <operator>=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>avl_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cache_iter_prev</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ACL_CACHE2</name></name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name>  <init>= <expr><operator>(</operator><name>CACHE_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>tree_node</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_PREV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name>  <operator>=</operator> <operator>(</operator><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>cache_iter_info</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>ACL_CACHE2</name></name> <modifier>*</modifier><name>cache2</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * AVL ÓÃµÄ±È½Ï»Øµ÷º¯Êý
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>avl_cmp_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TREE_NODE</name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TREE_NODE</name><operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TREE_NODE</name> <modifier>*</modifier></type><name>n2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TREE_NODE</name><operator>*</operator><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>ret</name> <init>= <expr><name><name>n1</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>-</operator> <name><name>n2</name><operator>-&gt;</operator><name>when_timeout</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>acl_cache2_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_size</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CACHE2_INFO</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>       
	<decl_stmt><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CACHE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>avl_cmp_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cache2</name>            <operator>=</operator> <operator>(</operator><name>ACL_CACHE2</name><operator>*</operator><operator>)</operator> <name>cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name>  <operator>=</operator> <name>max_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>free_fn</name></name>   <operator>=</operator> <name>free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>iter_head</name></name> <operator>=</operator> <name>cache_iter_head</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>iter_next</name></name> <operator>=</operator> <name>cache_iter_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>iter_tail</name></name> <operator>=</operator> <name>cache_iter_tail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>iter_prev</name></name> <operator>=</operator> <name>cache_iter_prev</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>iter_info</name></name> <operator>=</operator> <name>cache_iter_info</name></expr>;</expr_stmt>
	<return>return <expr><name>cache2</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_free</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>       <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name>      <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <name>info</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name>  <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): del key=%s, nrefer=%d"</literal></expr></argument>,
					<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><name><name>info2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* force to set 0 */</comment>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache2_delete</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>info2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>       

	<expr_stmt><expr><call><name>avl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>cache2_enter</name><parameter_list>(<parameter><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"/><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>      <name>when_timeout</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CACHE_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>key</name></name>   <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>cache</name></name></expr>;</expr_stmt>

	<comment type="block">/* ½«¸ÃÔªËØÌí¼Ó½ø¹þÏ£±íÖÐ£¬ÒÔ±ã¿ÉÒÔÍ¨¹ýÔªËØ¼üÖµ½øÐÐ²éÕÒ*/</comment>

	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add key(%s) to htable error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÏÈ´ÓÆ½ºâ¶þ²æÊ÷ÖÐ²éÕÒ¶ÔÓ¦Ê±¼ä½ØµÄ½Úµã£¬Èç¹û²éµ½¶ÔÓ¦½Úµã£¬ÐèÒª½«¸Ã
	 * ÔªËØ¼ÓÈë¸ÃÊ÷½Úµã£¬·ñÔò´´½¨ÐÂµÄÊ÷½Úµã²¢Ìí¼Ó¸ÃÔªËØÖÁÊ÷½Úµã
	 */</comment>

	<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>when_timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>when_timeout</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>when_timeout</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ½«¾ßÓÐÏàÍ¬¹ýÆÚÊ±¼ä½ØµÄÔªËØÓÃË«ÏòÁ´±íÁ¬½ÓÆðÀ´ */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>tree_node</name></name>         <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>when_timeout</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>cache</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>info</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_enter</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>CACHE_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): error=exist, key=%s, refer=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cache2</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>cache2</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
		<return>return <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>info</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹û»º´æ³ØÂú£¬ÔòÓÅÏÈ²ÉÓÃ¹ýÆÚ²ßÂÔ */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache2_timeout</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÃ»ÓÐÏÞ¶¨»º´æÊýÁ¿»ò»º´æÁ¿Î´´ïÏÞÖÆÔòÖ±½ÓÌí¼ÓÐÂ»º´æ¶ÔÏó */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cache2_enter</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* else: cache2-&gt;max_size &gt; 0 &amp;&amp; cache2-&gt;size &gt;= cache2-&gt;max_size */</comment>

	<comment type="block">/* Èç¹û»º´æ³ØÒÀÈ»Âú£¬Ôò²ÉÓÃ LRU ²ßÂÔÉ¾³ý×î¾ÉµÄÊý¾Ý */</comment>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ³¢ÊÔÉ¾³ýÍ¬Ò»¹ýÆÚÊ±¼ä½ØµÄÊ÷½ÚµãÏÂµÄ¶à¸öÔªËØ */</comment>

		<while>while <condition>(<expr><name>info</name> <operator>&amp;&amp;</operator> <name><name>cache2</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name> <init>= <expr><operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <name>info</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache2_delete</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>info2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>

	<comment type="block">/* Èç¹û»º´æ³Ø»¹ÊÇ´¦ÓÚÂú×´Ì¬£¬ÔòÖ±½Ó·µ»Ø²»½øÐÐÈÎÎñÌí¼Ó */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache2</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): size(%d) &gt;= max_size(%d), key=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>cache2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
			<argument><expr><name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>cache2_enter</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_cache2_find</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>info</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_locate</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>info</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache2_delete</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name>  <init>= <expr><operator>(</operator><name>CACHE_INFO</name><operator>*</operator><operator>)</operator> <name>info2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name>  <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>tree_node</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´Ó¹þÏ£±íÖÐÉ¾³ý¶ÔÓ¦ÔªËØ¼üµÄ¶ÔÏó£¬Èç¹û¸ÃÔªËØ²»´æÔÚ£¬ÔòÖ±½Ó·µ»Ø */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache2</name><operator>-&gt;</operator><name>free_fn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>cache2</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name>info2</name></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>info2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>info2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache2</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* µ±¾ßÓÐÏàÍ¬¹ýÆÚÊ±¼ä½ØµÄ½ÚµãÀïµÄÔªËØÎª¿ÕÊ±£¬Ôò¿É½«¸Ã½ÚµãÉ¾³ý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache2_delete2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>acl_cache2_delete</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>info2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache2_timeout</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name>      <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>       <modifier>*</modifier></type><name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>n</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>n</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>&gt;</operator> <name>now</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <name>info</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name>  <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>acl_cache2_delete</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>info2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_update2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>,
	<parameter><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>      <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name> <modifier>*</modifier></type><name>info</name>  <init>= <expr><operator>(</operator><name>CACHE_INFO</name><operator>*</operator><operator>)</operator> <name>info2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>  <modifier>*</modifier></type><name>node</name>  <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>tree_node</name></name></expr></init></decl>, <decl><type ref="prev"/><name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid parameters, max_size=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>cache2</name></expr> ?</condition><then> <expr><name><name>cache2</name><operator>-&gt;</operator><name>max_size</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>.</operator><name>when_timeout</name></name> <operator>=</operator> <ternary><condition><expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>timeout</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>when_timeout</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>tree_node</name></name>     <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>when_timeout</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>when_timeout</name></name></expr>;</expr_stmt>
	<return>return <expr><name>info2</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_update</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info2</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_cache2_update2</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>info2</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>info2</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_upsert</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>exist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>acl_cache2_update</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>exist</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>info</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>exist</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>exist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>acl_cache2_enter</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_head</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>     <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name> <modifier>*</modifier></type><name>node</name>  <init>= <expr><operator>(</operator><name>TREE_NODE</name> <operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><ternary><condition><expr><name>node</name></expr> ?</condition><then> <expr><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>acl_cache2_tail</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>     <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name> <operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name> <modifier>*</modifier></type><name>node</name>  <init>= <expr><operator>(</operator><name>TREE_NODE</name> <operator>*</operator><operator>)</operator> <call><name>avl_last</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><ternary><condition><expr><name>node</name></expr> ?</condition><then> <expr><operator>(</operator><name>ACL_CACHE2_INFO</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>tail</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_refer</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_refer2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_unrefer2</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_unrefer</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key(%s)'s nrefer(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_lock</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_unlock</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name> <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cache2_walk</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_CACHE2_INFO</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name>      <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>       <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <name>info</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>walk_fn</name><argument_list>(<argument><expr><name>info2</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name>  <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache2_clean</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CACHE</name>           <modifier>*</modifier></type><name>cache</name> <init>= <expr><operator>(</operator><name>CACHE</name><operator>*</operator><operator>)</operator> <name>cache2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CACHE2_INFO</name> <modifier>*</modifier></type><name>info2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CACHE_INFO</name>      <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name>       <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>              <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>info2</name> <operator>=</operator> <operator>(</operator><name>ACL_CACHE2_INFO</name><operator>*</operator><operator>)</operator> <name>info</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>info</name>  <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>info2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>force</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_cache2_delete</name><argument_list>(<argument><expr><name>cache2</name></expr></argument>, <argument><expr><name>info2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cache2_size</name><parameter_list>(<parameter><decl><type><name>ACL_CACHE2</name> <modifier>*</modifier></type><name>cache2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cache2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>cache2</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
