<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/acl_vstream.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include> <comment type="block">/* for S_IREAD */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS type"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_sane_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../event/events_fdtable.h"</cpp:file></cpp:include>

 <comment type="block">/*
  * Initialization of the three pre-defined streams. Pre-allocate a static
  * I/O buffer for the standard error fp, so that the error handler can
  * produce a diagnostic even when memory allocation fails.
  */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>__vstream_stdin_buf</name><index>[<expr><name>ACL_VSTREAM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>__vstream_stdout_buf</name><index>[<expr><name>ACL_VSTREAM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>__vstream_stderr_buf</name><index>[<expr><name>ACL_VSTREAM_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>read_char</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>ACL_VSTREAM</name></type> <name><name>acl_vstream_fstd</name><index>[]</index></name> <init>= <expr><block>{              
	<expr><block>{       
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<expr><block>{ <expr><name>STDIN_FILENO</name></expr> }</block></expr>,               <comment type="block">/* h_file */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr><operator>-</operator><literal type="number">1</literal></expr>,                             <comment type="block">/* h_file */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* is_nonblock */</comment>
		<expr><name>ACL_VSTREAM_TYPE_FILE</name></expr>,          <comment type="block">/* type */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* offset */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sys_offset */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf_dlen */</comment>
		<expr><name>__vstream_stdin_buf</name></expr>,            <comment type="block">/* read_buf */</comment>
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>__vstream_stdin_buf</name></expr></argument>)</argument_list></sizeof></expr>,    <comment type="block">/* read_buf_len */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* read_cnt */</comment>
		<expr><name>__vstream_stdin_buf</name></expr>,            <comment type="block">/* read_ptr */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* read_ready */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* total_read_cnt */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* total_write_cnt */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* ioctl_read_ctx */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* ioctl_write_ctx */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fdp */</comment>
		<expr><name>ACL_VSTREAM_FLAG_READ</name></expr>,          <comment type="block">/* flag */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* errnum */</comment>
		<expr><operator>-</operator><literal type="number">1</literal></expr>,                             <comment type="block">/* rw_timeout */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* addr_local */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* addr_peer */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* sa_local */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* sa_peer */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_local_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_peer_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_local_len */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_peer_len */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* path */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* context */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* close_handle_lnk */</comment>
		<expr><name>read_char</name></expr>,                      <comment type="block">/* sys_getc */</comment>
		<expr><name>acl_socket_read</name></expr>,                <comment type="block">/* read_fn */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* write_fn */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* writev_fn */</comment>
		<expr><name>acl_file_read</name></expr>,                  <comment type="block">/* fread_fn */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fwrite_fn */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fwritev_fn */</comment>
		<expr><name>acl_socket_close</name></expr>,               <comment type="block">/* close_fn */</comment>
		<expr><name>acl_file_close</name></expr>,                 <comment type="block">/* fclose_fn */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* oflags */</comment>
		<expr><literal type="number">0600</literal></expr>,                           <comment type="block">/* omode */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* nrefer */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* pid */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* hproc */</comment>
		<expr><name>ACL_SOCKET_INVALID</name></expr>,             <comment type="block">/* iocp_sock */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><name>NULL</name></expr>,				<comment type="block">/* objs_table */</comment>
	}</block></expr>,

	<expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<expr><block>{ <expr><name>STDOUT_FILENO</name></expr> }</block></expr>,              <comment type="block">/* h_file */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr><operator>-</operator><literal type="number">1</literal></expr>,                             <comment type="block">/* h_file */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* is_nonblock */</comment>
		<expr><name>ACL_VSTREAM_TYPE_FILE</name></expr>,          <comment type="block">/* type */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* offset */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sys_offset */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf_dlen */</comment>
		<expr><name>__vstream_stdout_buf</name></expr>,           <comment type="block">/* read_buf */</comment>
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>__vstream_stdout_buf</name></expr></argument>)</argument_list></sizeof></expr>,   <comment type="block">/* read_buf_len */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* read_cnt */</comment>
		<expr><name>__vstream_stdout_buf</name></expr>,           <comment type="block">/* read_ptr */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* read_ready */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* total_read_cnt */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* total_write_cnt */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* ioctl_read_ctx */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* ioctl_write_ctx */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fdp */</comment>
		<expr><name>ACL_VSTREAM_FLAG_WRITE</name></expr>,         <comment type="block">/* flag */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* errnum */</comment>
		<expr><operator>-</operator><literal type="number">1</literal></expr>,                             <comment type="block">/* rw_timeout */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* addr_local */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* addr_peer */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* sa_local */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* sa_peer */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_local_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_peer_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_local_len */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_peer_len */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* path */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* context */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* close_handle_lnk */</comment>
		<expr><name>read_char</name></expr>,                      <comment type="block">/* sys_getc */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* read_fn */</comment>
		<expr><name>acl_socket_write</name></expr>,               <comment type="block">/* write_fn */</comment>
		<expr><name>acl_socket_writev</name></expr>,              <comment type="block">/* writev_fn */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fread_fn */</comment>
		<expr><name>acl_file_write</name></expr>,                 <comment type="block">/* fwrite_fn */</comment>
		<expr><name>acl_file_writev</name></expr>,                <comment type="block">/* fwritev_fn */</comment>
		<expr><name>acl_socket_close</name></expr>,               <comment type="block">/* close_fn */</comment>
		<expr><name>acl_file_close</name></expr>,                 <comment type="block">/* fclose_fn */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* oflags */</comment>
		<expr><literal type="number">0600</literal></expr>,                           <comment type="block">/* omode */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* nrefer */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* pid */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* hproc */</comment>
		<expr><name>ACL_SOCKET_INVALID</name></expr>,             <comment type="block">/* iocp_sock */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><name>NULL</name></expr>,				<comment type="block">/* objs_table */</comment>
	}</block></expr>,
	<expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<expr><block>{ <expr><name>STDERR_FILENO</name></expr> }</block></expr>,              <comment type="block">/* h_file */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr><operator>-</operator><literal type="number">1</literal></expr>,                             <comment type="block">/* h_file */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* is_nonblock */</comment>
		<expr><name>ACL_VSTREAM_TYPE_FILE</name></expr>,          <comment type="block">/* type */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* offset */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sys_offset */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* wbuf_dlen */</comment>
		<expr><name>__vstream_stderr_buf</name></expr>,           <comment type="block">/* read_buf */</comment>
		<expr><sizeof>sizeof<argument_list>(<argument><expr><name>__vstream_stderr_buf</name></expr></argument>)</argument_list></sizeof></expr>,   <comment type="block">/* read_buf_len */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* read_cnt */</comment>
		<expr><name>__vstream_stderr_buf</name></expr>,           <comment type="block">/* read_ptr */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* read_ready */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* total_read_cnt */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* total_write_cnt */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* ioctl_read_ctx */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* ioctl_write_ctx */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fdp */</comment>
		<expr><name>ACL_VSTREAM_FLAG_WRITE</name></expr>,         <comment type="block">/* flag */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* errnum */</comment>
		<expr><operator>-</operator><literal type="number">1</literal></expr>,                             <comment type="block">/* rw_timeout */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* addr_local */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* addr_peer */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* sa_local */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* sa_peer */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_local_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_peer_size */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_local_len */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* sa_peer_len */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* path */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* context */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* close_handle_lnk */</comment>
		<expr><name>read_char</name></expr>,                      <comment type="block">/* sys_getc */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* read_fn */</comment>
		<expr><name>acl_socket_write</name></expr>,               <comment type="block">/* write_fn */</comment>
		<expr><name>acl_socket_writev</name></expr>,              <comment type="block">/* writev_fn */</comment>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* fread_fn */</comment>
		<expr><name>acl_file_write</name></expr>,                 <comment type="block">/* fwrite_fn */</comment>
		<expr><name>acl_file_writev</name></expr>,                <comment type="block">/* fwritev_fn */</comment>
		<expr><name>acl_socket_close</name></expr>,               <comment type="block">/* close_fn */</comment>
		<expr><name>acl_file_close</name></expr>,                 <comment type="block">/* fclose_fn */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* oflags */</comment>
		<expr><literal type="number">0600</literal></expr>,                           <comment type="block">/* omode */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* nrefer */</comment>
		<expr><literal type="number">0</literal></expr>,                              <comment type="block">/* pid */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr><name>NULL</name></expr>,                           <comment type="block">/* hproc */</comment>
		<expr><name>ACL_SOCKET_INVALID</name></expr>,             <comment type="block">/* iocp_sock */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><name>NULL</name></expr>,				<comment type="block">/* objs_table */</comment>
	}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LEN</name></cpp:macro>	<cpp:value>ACL_VSTRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>acl_vstream_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__called</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__called</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>__called</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ACL_VSTREAM_IN-&gt;fd.h_file = (HANDLE) _get_osfhandle(_fileno(stdin));
	ACL_VSTREAM_OUT-&gt;fd.h_file = (HANDLE) _get_osfhandle(_fileno(stdout));
	ACL_VSTREAM_ERR-&gt;fd.h_file = (HANDLE) _get_osfhandle(_fileno(stderr));
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>ACL_VSTREAM_IN</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ACL_VSTREAM_ERR</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sys_read</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>read_cnt</name></decl>, <decl><type ref="prev"/><name>nagain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	 <comment type="block">/* clear the read_ready flag first: we shouldn't clear the flag
	  * after read() API such as read_fn called, because in some case,
	  * the read_ready flag maybe set 1 again in order to invoke the
	  * IO event in non-blocking mode.
	  */</comment>
	<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* in-&gt;read_ready = 0; */</comment>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* in-&gt;read_ready = 0; */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>SAFE_COPY</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SAFE_COPY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ACL_SAFE_STRNCPY((x), (y), sizeof((x)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>AGAIN</name>:</label>

	<comment type="block">/* Çå³ýÏµÍ³´íÎóºÅ */</comment>
	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name><name>in</name><operator>-&gt;</operator><name>fread_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
			<argument><expr><name><name>in</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name><name>in</name><operator>-&gt;</operator><name>read_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
			<argument><expr><name><name>in</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>read_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_BAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>total_read_cnt</name></name> <operator>+=</operator> <name>read_cnt</name></expr>;</expr_stmt>

		<return>return <expr><name>read_cnt</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>read_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>ACL_VSTREAM_FLAG_EOF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nagain</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<goto>goto <name>AGAIN</name>;</goto>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: nagain: %d too much, fd: %lld"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>nagain</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr> ?</condition><then>
			<expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: nagain: %d too much, fd: %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>nagain</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr> ?</condition><then>
			<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TIMEOUT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ½«Êý¾Ý¶ÁÈëÖÁÖ¸¶¨µÄ»º³åÇøÖÐ
 * @param fp {ACL_VSTREAM*}
 * @param buf {void*} Ä¿±ê»º³åÇø
 * @param size {size_t} buf »º³åÇø´óÐ¡
 * @return {int} ·µ»Ø¶Áµ½µÄÊý¾Ý£¬·µ»ØÖµÈçÏÂ£º
 *   &gt; 0 µ±Ç°¶Áµ½»º³åÇøÖÐµÄÊý¾Ý³¤¶È
 *  == 0 ¶Ô¶ËÁ¬½Ó¹Ø±Õ
 *   &lt; 0 ÔÚ×èÈû·½Ê½ÏÂ±íÊ¾¶Á³ö´í£¬²ÉÓÃ·Ç×èÈû·½Ê½Ê±Ò²»á·µ»Ø -1
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>read_to_buffer</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>sys_read</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* ·µ»ØÖµÓ¦¸Ã·ÖÈýÖÖÇéÐÎ£¬ÒÔ±ãÓÚÉÏ²ãµ÷ÓÃÕßÖªµÀ³ö´íµÄÃ÷È·Ô­Òò */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (n &lt;= 0) {
		return -1;
	}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_buffed</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_to_buffer</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_char</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><call><name>ACL_VSTREAM_GETC</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_getc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>*</operator><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_nonb_readn</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>nread</name></decl>, <decl><type ref="prev"/><name>read_cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>rw_timeout</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>flags</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, buf %s, size %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(%d) &lt; 0, fd(%d)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name>acl_vstream_bfcp_some</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>read_cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): error, read_cnt=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>read_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>size</name>  <operator>-=</operator> <name>read_cnt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name>   <operator>+=</operator> <name>read_cnt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>read_cnt</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>read_cnt</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): error, size = %d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fcntl error(%s), fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ÏÈ±£Áô¶ÁÐ´³¬Ê±Ê±¼äÖµ£¬²¢½«¸ÃÁ÷µÄ³¬Ê±ÖµÖÃÎª0£¬ÒÔÃâ
	 * Æô¶¯¶Á³¬Ê±¹ý³Ì(select)¡£
	 */</comment>
	<expr_stmt><expr><name>rw_timeout</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name>rw_timeout</name></expr>;</expr_stmt>

	<comment type="block">/* »Ö¸´¸ÃÌ×½Ó×ÖµÄÔ­ÓÐ±ê¼ÇÎ» */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fcntl error(%s), fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>is_nonblock</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>read_cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>nread</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>nread</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>read_cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>nread</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>read_cnt</name> <operator>=</operator> <call><name>acl_vstream_bfcp_some</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>read_cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): error, read_cnt=%d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>read_cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>read_cnt</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name>rw_timeout</name></expr>;</expr_stmt>
	<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_vstream_probe_status</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>flags</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>rw_timeout</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_read_wait</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>errno</name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fcntl error(%s), fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>rw_timeout</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ±£Áô¶ÁÐ´³¬Ê±Ê±¼äÖµ£¬²¢½«¸ÃÁ÷µÄ³¬Ê±ÖµÖÃÎª0£¬ÒÔÃâ
	 * Æô¶¯¶Á³¬Ê±¹ý³Ì(select)¡£
	 */</comment>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>acl_vstream_getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <name>rw_timeout</name></expr>;</expr_stmt>

	<comment type="block">/* »Ö¸´¸ÃÌ×½Ó×ÖµÄÔ­ÓÐ±ê¼ÇÎ» */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fcntl error(%s), fd=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>is_nonblock</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_non_blocking</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_BLOCKING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* ½«¶Áµ½µÄÊý¾ÝÔÙ·Å»ØÔ­´¦:) */</comment>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&lt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_vstream_ungetc</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_vstream_unread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__vstream_memmove</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dst_saved</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_saved</name> <operator>=</operator> <name>dst</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+</operator> <name>n</name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* ÎªÁË·ÀÖ¹ÄÚ´æÊý¾Ý¸²¸ÇÎÊÌâ, ²ÉÓÃÊý¾Ý´ÓÎ²²¿¿½±´·½Ê½ */</comment>
	<while>while <condition>(<expr><name>src</name> <operator>&gt;=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>dst</name><operator>--</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>dst_saved</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+</operator> <name>n</name></expr></argument>,
			<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_unread</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>capacity</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>k</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, ptr %s, length %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr>
			</then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>ptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>capacity</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name>capacity</name> <operator>-</operator> <name>length</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û¶Á»º³åÖÐÇ°²¿·Ö¿Õ¼ä²»×ã, ÔòÐèÒªµ÷ÕûÊý¾ÝÎ»ÖÃ»òÀ©³ä¶Á»º³åÇø¿Õ¼ä */</comment>

	<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pbuf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>min_delta</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>

		<comment type="block">/* Èç¹û¶Á»º³åÇøºó²¿·Ö¿Õ¼ä¹»ÓÃ, ÔòÖ»ÐèºóÒÆ»º³åÇøÖÐµÄÊý¾Ý */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <operator>(</operator><name>acl_off_t</name><operator>)</operator> <name>length</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>__vstream_memmove</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ËµÃ÷Õû¸ö»º³åÇøµÄ¿Õ¼ä¶¼²»¹»ÓÃ, ËùÒÔÐèÒªÀ©³ä»º³åÇø¿Õ¼ä */</comment>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>min_delta</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>+</operator> <name>min_delta</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>min_delta</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>pbuf</name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>=</operator> <name>pbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name>length</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>length</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_bfcp_some</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<comment type="block">/* input params error */</comment>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input error, fp %s, vptr %s, "</literal>
			<literal type="string">"maxlen %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* internal fatal error */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(=%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* there is no any data in buf */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&gt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>vptr</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name>   <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_readtags</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>taglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>haystack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>needle_end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal>
	    <operator>||</operator> <name>tag</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>taglen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vptr %s, maxlen %d, tag %s,"</literal>
			<literal type="string">" taglen: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tag</name></expr> ?</condition><then> <expr><name>tag</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>taglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>needle_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>tag</name></expr>;</expr_stmt>

	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>taglen</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>taglen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>needle_end</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* left one byte for '\0' */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_FAST_MACRO</name></cpp:ifdef>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>ACL_VSTREAM_GETC</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>acl_vstream_getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* EOF, nodata read */</comment>
				<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>  <comment type="block">/* EOF, some data was read */</comment>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <operator>*</operator><name>needle_end</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>haystack</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>needle</name> <operator>=</operator> <name>needle_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ÒÑ¾­³É¹¦±È½ÏÍê±Ï(Æ¥Åä) */</comment>
				<if_stmt><if>if <condition>(<expr><name>needle</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>tag</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Ô­×Ö·û´®ÓÃÍê¶øÆ¥Åä´®»¹Ã»ÓÐ±È½ÏÍê(²»Æ¥Åä) */</comment>
				<if_stmt><if>if <condition>(<expr><name>haystack</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* ²»ÏàµÈ(²»Æ¥Åä) */</comment>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>haystack</name> <operator>!=</operator> <operator>*</operator><name>needle</name></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>haystack</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>needle</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* null terminate like fgets() */</comment>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_gets</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vptr %s, maxlen %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* left one byte for '\0' */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_FAST_MACRO</name></cpp:ifdef>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>ACL_VSTREAM_GETC</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>acl_vstream_getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* EOF, nodata read */</comment>
				<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>  <comment type="block">/* EOF, some data was read */</comment>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* newline is stored, like fgets() */</comment>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* null terminate like fgets() */</comment>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_gets_nonl</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>maxlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vptr %s, maxlen %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>maxlen</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_FAST_MACRO</name></cpp:ifdef>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>ACL_VSTREAM_GETC</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>acl_vstream_getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* EOF, nodata read */</comment>
				<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>  <comment type="block">/* EOF, some data was read */</comment>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>
			<break>break;</break>  <comment type="block">/* newline is stored, like fgets() */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* null terminate like fgets() */</comment>
	<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>--</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_readn</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>size_saved</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp %s, buf %s, size %d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>

	<comment type="block">/* Èç¹û»º³åÇøÖÐÓÐÉÏ´Î¶Á²ÐÁôÊý¾ÝÊ±£¬ÔòÓÅÏÈ½«Æä¿½±´ÖÁÄ¿±ê»º³åÇø */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_bfcp_some</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name>  <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>size_saved</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Îª¼õÉÙ read ´ÎÊý£¬µ±ÊäÈë»º³åÇø½ÏÐ¡Ê±£¬Ôò×Ô¶¯ÆôÓÃË«»º³å¶Á·½Ê½ */</comment>

	<if_stmt><if>if <condition>(<expr><name>size_saved</name>  <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_bfcp_some</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name>  <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>

	<comment type="block">/* ·ñÔò£¬ÔòÖ±½Ó½«¶Áµ½µÄÊý¾Ý´æÈë»º³åÇø£¬´Ó¶ø±ÜÃâ´óÊý¾ÝµÄ¶þ´Î¿½±´ */</comment>
	<else>else <block>{<block_content>
		<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read_to_buffer</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name>  <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>size_saved</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_read</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp: %s, buf: %s, size: %d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>acl_vstream_bfcp_some</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* fp-&gt;read_cnt == 0 */</comment>

	<comment type="block">/* µ±»º³åÇø½Ï´óÊ±£¬ÔòÖ±½Ó½«Êý¾Ý¶Áµ½¸Ã»º³åÇø´Ó¶ø±ÜÃâ´óÊý¾Ý¿½±´ */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>read_to_buffer</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><ternary><condition><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>ACL_VSTREAM_EOF</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if>
	<comment type="block">/* ·ñÔò½«Êý¾Ý¶Áµ½Á÷»º³åÇøÖÐ£¬È»ºóÔÙ¿½±´£¬´Ó¶ø¼õÉÙ read ´ÎÊý */</comment>
	<else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>acl_vstream_bfcp_some</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bfgets_crlf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ready</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* XXX: sanity check */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/* when get '\n', set ready 1 */</comment>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* when reached the max limit, set ready 1 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>buf</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: line too long: %d, %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>buf</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* set '\0' teminated */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_gets_peek</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ready</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ready</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp %s, buf %s, ready: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then>  <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>ready</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>ready</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bfgets_crlf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ready</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* XXX: µ÷ÓÃÕßÍ¨¹ý¼ì²é *ready ÖµÀ´ÅÐ¶ÏÊÇ·ñ¶Á¹»Êý¾Ý, ÏµÍ³IO¶Á²Ù×÷³ö´í
	 * »ò¹Ø±ÕÊ±·µ»Ø½áÊø±ê¼Ç; Èç¹û·µ»Ø ACL_VSTRING_EOF Ôòµ÷ÓÃÕßÓ¦¸ÃÍ¨¹ý
	 * ¼ì²é»º³åÇø³¤¶ÈÀ´´¦ÀíÎ´±»´¦ÀíµÄÊý¾Ý
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
			<return>return <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>ACL_VSTREAM_EOF</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bfgets_crlf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bfgets_no_crlf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ready</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ch</name> <init>= <expr><call><name>bfgets_crlf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ch</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>acl_vstring_charat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></while>

		<comment type="block">/* reset the offset position */</comment>
		<expr_stmt><expr><call><name>acl_vstring_truncate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* must be '\0' teminated */</comment>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_gets_nonl_peek</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ready</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ready</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp %s, buf %s, ready: %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then>  <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>ready</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_TAGYES</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>ready</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(=%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bfgets_no_crlf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ready</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* XXX: µ÷ÓÃÕßÍ¨¹ý¼ì²é *ready ÖµÀ´ÅÐ¶ÏÊÇ·ñ¶Á¹»Êý¾Ý, ÏµÍ³IO¶Á²Ù×÷³ö´í
	 * »ò¹Ø±ÕÊ±·µ»Ø½áÊø±ê¼Ç; Èç¹û·µ»Ø ACL_VSTRING_EOF Ôòµ÷ÓÃÕßÓ¦¸ÃÍ¨¹ý
	 * ¼ì²é»º³åÇø³¤¶ÈÀ´´¦ÀíÎ´±»´¦ÀíµÄÊý¾Ý
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
			<return>return <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>ACL_VSTREAM_EOF</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bfgets_no_crlf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bfread_cnt</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ready</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<comment type="block">/* XXX: sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <name>cnt</name></expr> ?</condition><then> <expr><name>cnt</name></expr> </then><else>: <expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name>   <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ready</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* set '\0' teminated */</comment>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_readn_peek</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ready</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>cnt_saved</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ready</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid input, fp: %s, buf: %s, "</literal>
			<literal type="string">"cnt: %d, ready: %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name>cnt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ready</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ready</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(=%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <call><name>bfread_cnt</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ready</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>cnt_saved</name> <operator>-</operator> <name>cnt</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* XXX: µ÷ÓÃÕßÍ¨¹ý¼ì²é *ready ÖµÀ´ÅÐ¶ÏÊÇ·ñ¶Á¹»Êý¾Ý, ÏµÍ³IO¶Á²Ù×÷³ö´í
	 * »ò¹Ø±ÕÊ±·µ»Ø½áÊø±ê¼Ç, Èç¹û·µ»Ø ACL_VSTRING_EOF Ôòµ÷ÓÃÕßÓ¦¸ÃÍ¨¹ý
	 * ¼ì²é»º³åÇø³¤¶ÈÀ´´¦ÀíÎ´±»´¦ÀíµÄÊý¾Ý
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>cnt_saved</name> <operator>-</operator> <name>cnt</name></expr></init></decl>;</decl_stmt>
			<return>return <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>ACL_VSTREAM_EOF</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <call><name>bfread_cnt</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>ready</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cnt_saved</name> <operator>-</operator> <name>cnt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bfread</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* XXX: sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name>  <operator>+=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* set '\0' teminated */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_read_peek</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp %s, buf %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(=%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bfread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÏµÍ³IO¶Á²Ù×÷³ö´í»ò¹Ø±ÕÊ±·µ»Ø½áÊø±ê¼Ç, Èç¹û·µ»Ø ACL_VSTRING_EOF
	 * Ôòµ÷ÓÃÕßÓ¦¸ÃÍ¨¹ý¼ì²é»º³åÇø³¤¶ÈÀ´´¦ÀíÎ´±»´¦ÀíµÄÊý¾Ý
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
			<return>return <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>ACL_VSTREAM_EOF</name></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>bfread</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>bfread3</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name>   <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name>  <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_read_peek3</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size_saved</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalid read_cnt=%d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>bfread3</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>size_saved</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_saved</name> <operator>-</operator> <name>size</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name>size_saved</name> <operator>-</operator> <name>size</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>read_to_buffer</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name><operator>)</operator> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_saved</name> <operator>-</operator> <name>size</name> <operator>+</operator> <name>ret</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><ternary><condition><expr><name>size_saved</name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then>
			<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_saved</name> <operator>-</operator> <name>size</name><operator>)</operator></expr> </then><else>: <expr><name>ACL_VSTREAM_EOF</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>size_saved</name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then>
			<expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_saved</name> <operator>-</operator> <name>size</name><operator>)</operator></expr> </then><else>: <expr><name>ACL_VSTREAM_EOF</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <call><name>bfread3</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <name>size_saved</name> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>size_saved</name> <operator>-</operator> <name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_can_read</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): read_cnt(=%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>ACL_VSTREAM_FLAG_ERR</name> <operator>|</operator> <name>ACL_VSTREAM_FLAG_EOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_PREREAD</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>read_buffed</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_readable</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_can_read</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_readable</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_write_once</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): lseek error(%s), "</literal>
				<literal type="string">"offset("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), sys_offset("</literal>
				<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>fp</name><operator>-&gt;</operator><name>fwrite_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>,
			<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>

		<comment type="block">/* ·ÀÖ¹»º³åÇøÄÚµÄÊý¾ÝÓëÊµ¼Ê²»Ò»ÖÂ, ½ö¶ÔÎÄ¼þIOÓÐÐ§ */</comment>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_once</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>neintr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>vptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): vptr null"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): dlen(%d) &lt;= 0"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ACL_EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): h_file invalid"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ACL_EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): sockfd invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ACL_EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<label><name>TAG_AGAIN</name>:</label>

	<comment type="block">/* Çå³ýÏµÍ³´íÎóºÅ */</comment>
	<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>file_write_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_BAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>fp</name><operator>-&gt;</operator><name>write_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>,
			<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>total_write_cnt</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<return>return <expr><name>n</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>neintr</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<goto>goto <name>TAG_AGAIN</name>;</goto>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EAGAIN</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_TIMEOUT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_writev_once</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>!=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): lseek error(%s), "</literal>
				<literal type="string">"offset("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), sys_offset("</literal>
				<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fwrite_fn</name></name> <operator>==</operator> <name>acl_file_write</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>fp</name><operator>-&gt;</operator><name>fwritev_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>

		<comment type="block">/* ·ÀÖ¹»º³åÇøÄÚµÄÊý¾ÝÓëÊµ¼Ê²»Ò»ÖÂ, ½ö¶ÔÎÄ¼þIOÓÐÐ§ */</comment>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>writev_once</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>neintr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vec</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): h_file invalid"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ACL_EINVAL</name></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): sockfd invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <name>ACL_EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<label><name>TAG_AGAIN</name>:</label>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>file_writev_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_BAD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* µ±Ð´½Ó¿Úº¯ÊýÖ¸ÕëÎªÏµÍ³Ä¬ÈÏµÄ½Ó¿ÚÊ±£¬Ö±½ÓÐ´Èë */</comment>
	<if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>write_fn</name></name> <operator>==</operator> <name>acl_socket_write</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>fp</name><operator>-&gt;</operator><name>writev_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
			<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ·ñÔò£¬ÔòÄ£Äâ writev µÄµ÷ÓÃ¹ý³Ì */</comment>
	<else>else <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>write_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>total_write_cnt</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<return>return <expr><name>n</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EINTR</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>neintr</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<goto>goto <name>TAG_AGAIN</name>;</goto>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EAGAIN</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_ERR</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_vstream_write</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vptr %s, dlen %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>write_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_writev</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vec</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vec %s, count %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vec</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>writev_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_writevn</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nskip</name></decl>, <decl><type ref="prev"/><name>nwrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv_saved</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>vec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp %s, vec %s, count %d"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vec</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>iv</name> <operator>=</operator> <operator>(</operator>struct <name>iovec</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>iv_saved</name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>  <comment type="block">/* saving the memory for freeing */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>writev_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>iv_saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nwrite</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nskip</name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* fully written one vector item */</comment>
				<expr_stmt><expr><name>n</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>nskip</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/* partially written */</comment>
				<expr_stmt><expr><name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
					<name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>+</operator> <name>n</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>count</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>iv_saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>nwrite</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>nskip</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iv</name>    <operator>+=</operator> <name>nskip</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_vfprintf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp %s, fmt %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fmt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fmt</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>ACL_VSTREAM_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): alloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstring_vsprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): vsprintf return null"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): len(%d) &lt;= 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_fprintf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_vfprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <operator>(</operator><name>ACL_FILE_HANDLE</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ACL_VSTREAM_OUT can't be inited"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_vfprintf</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_fputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_vstream_buffed_fwrite</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>

		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_buffed_fwrite</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><ternary><condition><expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr> ?</condition><then> <expr><name>ACL_VSTREAM_EOF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_puts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <operator>(</operator><name>ACL_FILE_HANDLE</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ACL_VSTREAM_OUT can't be inited"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_vstream_fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>loop_writen</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>once_dlen</name> <init>= <expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* xxx: ÒÔ 64KB Îªµ¥Î»Ð´ */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nleft</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	time_t begin, end;
	ACL_SOCKET fd = ACL_VSTREAM_SOCK(fp);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>nleft</name> <operator>&gt;</operator> <name>once_dlen</name></expr> ?</condition><then> <expr><name>once_dlen</name></expr> </then><else>: <expr><name>nleft</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>write_once</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name>   <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		if (n == len || fp-&gt;writev_fn == NULL || fp-&gt;rw_timeout &lt;= 0) {
			continue;
		}

		<comment type="block">/* ¶ÔÓÚÌ×½Ó¿ÚÐ´²Ù×÷£¬Èç¹ûÒ»´ÎÐÔÐ´Ã»ÓÐÐ´Íê£¬¿ÉÄÜÊÇÏµÍ³
		 * Ð´»º³åÇøÂú£¬ÐèÒª¼ì²â³¬Ê±Ð´
		 */</comment>
		begin = time(NULL);

		if (acl_write_wait(fd, fp-&gt;rw_timeout) == 0) {
			continue;
		}

		end = time(NULL);
		acl_msg_error("%s(%d), %s: acl_write_wait error,"
			"size: %d, nleft: %d, peer: %s, fd: %d,"
			" timeout: %d, cost: %ld", __FILE__, __LINE__,
			__FUNCTION__, (int) size, nleft, ACL_VSTREAM_PEER(fp),
			fd, fp-&gt;rw_timeout, end - begin);
		return ACL_VSTREAM_EOF;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>vptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_writen</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vptr %s, dlen %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>loop_writen</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_buffed_writen</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>vptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>vptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, vptr %s, dlen %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>vptr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_size</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>loop_writen</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dlen</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name></expr></argument>, <argument><expr><name>vptr</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_buffed_vfprintf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp %s, fmt %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fmt</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>fmt</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>ACL_VSTREAM_BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): alloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstring_vsprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): vsprintf return null"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): len(%d) &lt;= 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_buffed_fprintf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_buffed_vfprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_buffed_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <operator>(</operator><name>ACL_FILE_HANDLE</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ACL_VSTREAM_OUT can't be inited"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstream_buffed_vfprintf</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_buffed_fputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_vstream_buffed_fwrite</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>

		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_buffed_fwrite</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_buffed_puts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <operator>(</operator><name>ACL_FILE_HANDLE</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ACL_VSTREAM_OUT</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): ACL_VSTREAM_OUT can't be inited"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_vstream_buffed_fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_fsync</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not a file fp"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fflush fp fp's buff error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>acl_file_fflush</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fflush to disk error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_buffed_space</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_size</name></name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_fflush</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>loop_writen</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): wbuf_dlen(%d) &lt; 0"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EAGAIN</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name></expr></cpp:if>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EAGAIN</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_peekfd</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_peekfd</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>ACL_VSTREAM_BFRD_CNT</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>n</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not implement yet"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* not reached */</comment>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>
</block_content>}</block></function> 

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_fhopen</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fh invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_SOCKET_INVALID</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>,
		<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>
	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM_RD_FN</name></type> <name>acl_socket_read_fn</name>   <init>= <expr><name>acl_socket_read</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM_WR_FN</name></type> <name>acl_socket_write_fn</name>  <init>= <expr><name>acl_socket_write</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM_WV_FN</name></type> <name>acl_socket_writev_fn</name> <init>= <expr><name>acl_socket_writev</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>acl_socket_close_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_socket_close</name></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>acl_socket_read_hook</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM_RD_FN</name></type> <name>read_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>read_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>acl_socket_read_fn</name> <operator>=</operator> <name>read_fn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_socket_write_hook</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM_WR_FN</name></type> <name>write_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>write_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>acl_socket_write_fn</name> <operator>=</operator> <name>write_fn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_socket_writev_hook</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM_WV_FN</name></type> <name>writev_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>writev_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>acl_socket_writev_fn</name> <operator>=</operator> <name>writev_fn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_socket_close_hook</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>close_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>close_fn</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>acl_socket_close_fn</name> <operator>=</operator> <name>close_fn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ¶¨ÒåÁ÷µÄ»º³åÇøµÄÄ¬ÈÏ´óÐ¡ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_VSTREAM_DEF_MAXLEN</name></cpp:macro>  <cpp:value>8192</cpp:value></cpp:define>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_fdopen</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rw_timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fdtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>fdtype</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_VSTREAM_TYPE_LISTEN_INET</name>
		<operator>|</operator> <name>ACL_VSTREAM_TYPE_LISTEN_UNIX</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): buflen(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* XXX: Ö»ÓÐ·Ç¼àÌýÁ÷²ÅÐèÒªÓÐ¶Á»º³åÇø */</comment>
	<comment type="block">/* XXX: Ä¿Ç° UDP ·þÎñ¶Ë¿ÚºÅÔÚ MASTER ¿ò¼ÜÖÐÔÝÊ±µ±¼àÌýÌ×½Ó¿ÚÓÃ£¬ËùÒÔ
	   ÐèÒª¸øÆä·ÖÅä¶Á»º³åÇø
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&lt;</operator> <name>ACL_VSTREAM_DEF_MAXLEN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>ACL_VSTREAM_DEF_MAXLEN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name>     <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MACOSX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fdtype</name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN_INET</name><operator>)</operator>
	    <operator>||</operator> <operator>(</operator><name>fdtype</name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_LISTEN_UNIX</name><operator>)</operator></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><name>fdtype</name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>fdtype</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>fdtype</name> <operator>=</operator> <name>ACL_VSTREAM_TYPE_SOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fdtype(0), set to ACL_VSTREAM_TYPE_SOCK"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name>             <operator>=</operator> <name>fdtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>iocp_sock</name></name>        <operator>=</operator> <name>ACL_SOCKET_INVALID</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name>         <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>oflags</name></name>           <operator>=</operator> <name>oflags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>omode</name></name>            <operator>=</operator> <literal type="number">0600</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Fixed. when the rw_timeout &lt;= 0, we should force to set it -1. */</comment>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name>       <operator>=</operator> <ternary><condition><expr><name>rw_timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>rw_timeout</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_getc</name></name> <operator>=</operator> <name>read_char</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fdtype</name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fread_fn</name></name>   <operator>=</operator> <name>acl_file_read</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fwrite_fn</name></name>  <operator>=</operator> <name>acl_file_write</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fwritev_fn</name></name> <operator>=</operator> <name>acl_file_writev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fclose_fn</name></name>  <operator>=</operator> <name>acl_file_close</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_fn</name></name>    <operator>=</operator> <name>acl_socket_read_fn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>write_fn</name></name>   <operator>=</operator> <name>acl_socket_write_fn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>writev_fn</name></name>  <operator>=</operator> <name>acl_socket_writev_fn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>close_fn</name></name>   <operator>=</operator> <name>acl_socket_close_fn</name></expr>;</expr_stmt>

		<comment type="block" format="doxygen">/**
		 * bugfix: ²»Ó¦ÔÚ´Ë´¦Ö±½ÓÉèÎª·Ç×èÈû·½Ê½£¬·ñÔò»áÓ°ÏìÉÏ²ãµ÷ÓÃÕß
		 * µÄÐÐÎª£¬Ó¦¸ÃÔÚÓ¦ÓÃ×Ô¼ºÀ´´¦Àí´ËÊÂ¡£---zsx, 2016.11.18
		 */</comment>
		<comment type="block">/* xxx: ¶ÔÓÚ´øÓÐ¶ÁÐ´³¬Ê±µÄÁ÷£¬ÐèÒªÏÈ½« socket ÉèÎª·Ç×èÈûÄ£Ê½£¬
		 * ·ñÔòÔÚÐ´´óÊý¾Ý°üÊ±»áÔì³É×èÈû£¬³¬Ê±×÷ÓÃÊ§Ð§
		 */</comment>
		<comment type="block" format="doxygen">/**
		 * if (rw_timeout &gt; 0 &amp;&amp; acl_getsockfamily(fd) &gt;= 0)
		 *	acl_non_blocking(fd, ACL_NON_BLOCKING);
		 */</comment>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <name>ACL_SOCKET_INVALID</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>fp</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fdtype</name> <operator>&amp;</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* nothing */</comment>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_check_socket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_getsockfamily</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_INET6</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AF_INET</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_LISTEN_INET</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifndef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_LISTEN_UNIX</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <call><name>acl_getsockname</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_vstream_set_local</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_SOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_getpeername</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstream_set_peer</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>handle_from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>handle_to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: from null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>to</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
		<call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>to</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>to</name><operator>-&gt;</operator><name>read_buf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>+</operator> <operator>(</operator><name><name>from</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>-</operator> <name><name>from</name><operator>-&gt;</operator><name>read_buf</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>addr_peer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>addr_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>sa_peer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator>
			<call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sa_peer_size</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sa_peer_len</name></name>  <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sa_peer_len</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>sa_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sa_local</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator>
			<call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sa_local_size</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>sa_local_len</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>sa_local_len</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>ioctl_read_ctx</name></name>   <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>ioctl_write_ctx</name></name>  <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>fdp</name></name>              <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>context</name></name>          <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>oflags</name></name>           <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>oflags</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><operator>-&gt;</operator><name>omode</name></name>            <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>omode</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>to</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>handle_from</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>handle_from</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>handle_from</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>handle_to</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM_CLOSE_HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle_to</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>=</operator> <name><name>handle_from</name><operator>-&gt;</operator><name>close_fn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>handle_to</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name><name>handle_from</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>handle_to</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): acl_array_append error=%s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>to</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_set_fdtype</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fread_fn</name></name>  <operator>=</operator> <name>acl_file_read</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fwrite_fn</name></name> <operator>=</operator> <name>acl_file_write</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fclose_fn</name></name> <operator>=</operator> <name>acl_file_close</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ACL_VSTREAM_TYPE_SOCK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_fn</name></name>  <operator>=</operator> <name>acl_socket_read</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>write_fn</name></name> <operator>=</operator> <name>acl_socket_write</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>=</operator> <name>acl_socket_close</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* acl_vstream_fopen - open buffered file fp */</comment>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>

	<comment type="block">/* for linux2.6 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>_LARGEFILE64_SOURCE</name></cpp:ifdef>
	<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_LARGEFILE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>O_BINARY</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_SOCKET_INVALID</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>fd</name><operator>.</operator><name>h_file</name></name> <operator>=</operator> <name>fh</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name>oflags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>omode</name></name>  <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_set_path</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstream_loadfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstream_loadfile2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstream_loadfile2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>   <name>oflags</name> <init>= <expr><name>O_RDONLY</name> <operator>|</operator> <name>O_BINARY</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>int</name></type>   <name>oflags</name> <init>= <expr><name>O_RDONLY</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_ANDROID</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type>   <name>mode</name> <init>= <expr><literal type="number">0644</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>int</name></type>   <name>mode</name> <init>= <expr><name>S_IREAD</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d):path invalid"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): open file(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>vbuf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_read</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_vstring_export</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstream_ctl - fine control */</comment>

<function><type><name>void</name></type> <name>acl_vstream_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_VSTREAM_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_VSTREAM_CTL_READ_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_RD_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_WRITE_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>write_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_WR_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_CONTEXT</name></expr>:</case>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_PATH</name></expr>:</case>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_FD</name></expr>:</case>
			<expr_stmt><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_SOCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_TIMEOUT</name></expr>:</case>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>rw_timeout</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_CTL_CACHE_SEEK</name></expr>:</case>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_VSTREAM_FLAG_CACHE_SEEK</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): bad name %d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>acl_off_t</name></type> <name>acl_vstream_fseek2</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_off_t</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input error"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): type(%d) not ACL_VSTREAM_TYPE_FILE"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): acl_vstream_fflush error"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<goto>goto <name>SYS_SEEK2</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* »ñµÃÕæÕýµÄµ±Ç°ÎÄ¼þÖ¸ÕëÎ»ÖÃ */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>acl_off_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>  <comment type="block">/* ¼ÆËã³öÕæÊµµÄÎÄ¼þÎ»ÖÃ */</comment>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>  <comment type="block">/* ¼ÆËã³öÕæÊµµÄÎÄ¼þÎ»ÖÃ */</comment>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* fp-&gt;read_cnt &lt; 0 ? */</comment>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalud read_cnt = %d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<label><name>SYS_SEEK2</name>:</label>
	<comment type="block">/* ¶¨Î»µ½ºÏÊÊµÄÎ»ÖÃ */</comment>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>( <argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_off_t</name></type> <name>acl_vstream_fseek</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_off_t</name></type> <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): input error"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): type(%d) not ACL_VSTREAM_TYPE_FILE"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): acl_vstream_fflush error"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_VSTREAM_FLAG_CACHE_SEEK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<goto>goto <name>SYS_SEEK</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ïà¶Ôµ±Ç°Á÷Î»ÖÃ fp-&gt;offset ¿ªÊ¼Æ«ÒÆ offset µÄÎ»ÖÃ */</comment>

		<comment type="block">/* ±ØÐëÑÏ¸ñ¼ìÑé */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>!=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): offset("</literal> <name>ACL_FMT_I64D</name>
				<literal type="string">") + read_cnt(%d) != sys_offset("</literal>
				<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<goto>goto <name>SYS_SEEK</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ÊÇ·ñÔÚ¶Á»º³åÇø¼äÄÚ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÒòÎªÒª´Ó fp-&gt;offset Æ«ÒÆ offset ¸ö×Ö½Úºó, ¶ÁÖ¸Õë
			 * fp-&gt;read_ptr ÒÀÈ»ÔÚ»º³åÇøÄÚ, ËùÒÔÖ»ÐèÒªÒÆ¶¯¶ÁÖ¸Õë
			 * ÇÒ¼õÉÙ»º³åÇø×Ö½ÚÊý¡¢Ôö¼Ó fp-&gt;offset Æ«ÒÆÁ¿¼´¿É.
			 */</comment>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
			<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ÒòÎªÒª¼ÆËã´Óµ±Ç°Á÷Î»ÖÃ fp-&gt;offset ¿ªÊ¼Æ«ÒÆ offset
			 * µÄÎ»ÖÃ,¶øÇÒÁ÷ÖÐ»¹´æÔÚÒ»¶¨µÄ»º´æÊý¾Ý(fp-&gt;read_cnt),
			 * ËùÒÔÐèÒªÏÈ´Ó fp-&gt;offset ¿ªÊ¼ÒÆ¶¯ fp-&gt;read_cnt
			 * ¸ö×Ö½Ú(ÒÆ¶¯³ö¶Á»º³åÇø),È»ºóÔÙÒÆ¶¯Ê£ÓàµÄ×Ö½Ú
			 * (¼´ offset - fp-&gt;read_cnt) ¼´¿É; ÒòÎªÒÑ¾­³Æ³ö¶Á»º
			 * ³åÇø£¬ËùÒÔÐèÒª½« fp-&gt;read_cnt ÖÃ 0.
			 */</comment>
			<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* fp-&gt;read_cnt &lt; 0 ? */</comment>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): invalud read_cnt = %d"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_SET</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		<comment type="block">/* »ñµÃÕæÕýµÄµ±Ç°ÎÄ¼þÖ¸ÕëÎ»ÖÃ */</comment>
		fp-&gt;sys_offset = acl_lseek(ACL_VSTREAM_FILE(fp),
			(off_t) 0, SEEK_CUR);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* ÀûÓÃ»º´æµÄÆ«ÒÆÎ»ÖÃ */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): seek n("</literal> <name>ACL_FMT_I64D</name>
				<literal type="string">") invalid"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<goto>goto <name>SYS_SEEK</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ±ØÐëÑÏ¸ñ¼ìÑé */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>!=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): offset("</literal> <name>ACL_FMT_I64D</name>
				<literal type="string">") + read_cnt(%d) != sys_offset("</literal>
				<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr></argument>,
				<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<goto>goto <name>SYS_SEEK</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Èç¹û¶ÁÊý¾ÝÖ¸Õë¾­¹ýÒÆ¶¯£¬¿ÉÒÔ½«Æä»ØÒÆ£¬ÒòÎª»º³åÇøÄÚÊý¾Ý
		 * ²¢Î´ÆÆ»µ£¬¿ÉÒÔ¸´ÓÃ
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>&gt;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ÅÐ¶ÏÇëÇóµÄÆ«ÒÆÎ»ÖÃÊÇ·ñÔÚ¶Á»º´æÇø¼äÄÚ */</comment>
		<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&lt;=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>offset</name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<label><name>SYS_SEEK</name>:</label>
	<comment type="block">/* µ÷ÓÃÏµÍ³µ÷ÓÃ¶¨Î»Î»ÖÃ */</comment>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>

	<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_off_t</name></type> <name>acl_vstream_ftell</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÏÈ¶¨Î»µ±Ç°Î»ÖÃ£¬È»ºóÔÙ¼õÈ¥¶Á»º³åÇøÀïµÄÊý¾Ý³¤¶È */</comment>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name> <operator>=</operator> <call><name>acl_lseek</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sys_offset</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<function><type><name>int</name></type> <name>acl_file_ftruncate</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>hf</name> <init>= <expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ²Î¼û£ºC:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\crt\src
	 * osfinfo.c
	 * _open_osfhandle: ½«ACL_WINDOWS APIµÄÎÄ¼þ¾ä±ú×ª»»Îª±ê×¼CµÄÎÄ¼þ¾ä±ú
	 * _get_osfhandle: ¸ù¾Ý±ê×¼CÎÄ¼þ¾ä±ú²éÑ¯ACL_WINDOWS APIÎÄ¼þ¾ä±ú
	 * _free_osfhnd: ÊÍ·ÅÓÉ _open_osfhandle ´ò¿ªµÄ±ê×¼CÎÄ¼þ¾ä±úµÄ×ÊÔ´£¬
	 *               µ«²¢²»Êµ¼Ê¹Ø±Õ¸ÃACL_WINDOWS API¾ä±ú£¬ËùÒÔ»¹µÃÒª¶ÔÆäÕæÊµ
	 *               ACL_WINDOWS APIÎÄ¼þ¾ä±ú½øÐÐ¹Ø±Õ
	 * close.c
	 * _close: ¹Ø±Õ²¢ÊÍ·Å±ê×¼CµÄÎÄ¼þ¾ä±ú
	*/</comment>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fseek error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>hf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): SetEndOfFile error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fseek error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type> <name>fp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_BINARY</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fopen file(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_file_ftruncate</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name>int</name></type> <name>acl_file_ftruncate</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>hf</name> <init>= <expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>hf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>acl_file_truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fopen %s error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_file_ftruncate</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>acl_file_truncate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>truncate</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !ACL_WINDOWS, ACL_UNIX */</comment>

<function><type><name>int</name></type> <name>acl_vstream_fstat</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>acl_stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not a file fp"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_fstat</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_vstream_fsize</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ACL_VSTREAM_TYPE_FILE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not a file fp"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>acl_file_fsize</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call>
		<operator>+</operator> <name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_reset</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ptr</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name>     <operator>=</operator> <name>ACL_VSTREAM_FLAG_RW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>total_read_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>total_write_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_clean_close_handle</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fdp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>event_fdtable_reset</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_free</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃÑÓ³ÙÊÍ·Å±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_DEFER_FREE</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
		 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
		 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
				<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Ö»Ëù½«´Ëµ÷ÓÃ·ÅÔÚ close_fn Ç°Ãæ£¬ÊÇÎªÁË·ÀÖ¹ÓÐÈËÎóÔÚ
			 * close_fn Àïµ÷ÓÃÁËÉ¾³ý»Øµ÷º¯ÊýµÄ²Ù×÷¶øÔì³É¶ÔÍ¬Ò»ÄÚ
			 * ´æµÄ¶à´ÎÊÍ·Å
			 */</comment>
			<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fdp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>__vstream_stdin_buf</name>
		<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>__vstream_stdout_buf</name>
		<operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>__vstream_stderr_buf</name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <operator>&amp;</operator><name><name>acl_vstream_fstd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <operator>&amp;</operator><name><name>acl_vstream_fstd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
		<operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <operator>&amp;</operator><name><name>acl_vstream_fstd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_close</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ÉèÖÃÑÓ³ÙÊÍ·Å±êÖ¾Î» */</comment>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>ACL_VSTREAM_FLAG_DEFER_FREE</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf_dlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: fflush fp error=%s"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÐëÔÚµ÷ÓÃ¸÷¸ö¹Ø±Õ»Øµ÷º¯ÊýÖ®Ç°½«Á¬½Ó¹Ø±Õ£¬·ñÔò»áÓ°Ïì iocp µÄÊÂ¼þÒýÇæ
	 * Õý³£¹¤×÷¡£ÔÚÊ¹ÓÃ iocp ÊÂ¼þÒýÇæÊ±£¬µ±Á÷¹Ø±ÕÊ±»áµ÷ÓÃ events_iocp.c ÖÐ
	 * µÄ stream_on_close£¬¸Ãº¯Êý»áÊÍ·Åµô fdp-&gt;event_read/fdp-&gt;event_write
	 * Á½¸ö¶ÔÏó£¬µ«µ±Ì×½Ó¿ÚÎ´¹Ø±ÕÊ±£¬ÕâÁ½¸ö¶ÔÏóÓÐ¿ÉÄÜ»á±» iocp Ê¹ÓÃ£¬µ±Ì×
	 * ½Ó¿Ú¹Ø±ÕÊ±£¬iocp ²Å²»»áÊ¹ÓÃÕâÁ½¸ö¶ÔÏóÖÐµÄ IOCP_EVENT-&gt;overlapped µÈ
	 * ³ÉÔ±. ---2011.5.18, zsx
	 */</comment>
	<comment type="block">/*
	 * 2011.5.18 µÄ¸Ä¶¯Ëä½â¾öÁËÊÂ¼þÒýÇæÎª iocp µÄÎÊÌâ£¬µ«Í¬Ê±Ôì³ÉÁË win32
	 * ´°¿ÚÏûÏ¢ÒýÇæµÄÎÊÌâ£¬ËäÈ» win32 ÏûÏ¢ÒýÇæµÄ·½Ê½ÔÚ¹Ø±ÕÌ×½Ó¿ÚÖ®Ç°»á»Øµ÷
	 * stream_on_close£¬¸Ã»Øµ÷ÒªÇóÌ×½Ó¿Ú±ØÐëÊÇ´ò¿ªµÄ£¬¼ÈÈ»¶þÕß³öÏÖÁË³åÍ»£¬
	 * Ôò iocp µÄÎÊÌâ»¹ÊÇÓÉ iocp ÒýÇæ±¾ÉíÈ¥½â¾ö°É£¬¼´ÔÚ iocp ÒýÇæµÄ
	 * stream_on_close ÖÐ£¬ÔÚÊÍ·Å fdp-&gt;event_read/fdp-&gt;event_write Ç°¹Ø±Õ
	 * Ì×½Ó¿Ú¼´¿É£¬ÔÚ acl_vstream_close ×îºóÐèÒª¹Ø±ÕÌ×½Ó¿ÚÊ±Ö»Òª¸ù¾Ý¾ä±ú
	 * ÊÇ·ñÓÐÐ§À´ÅÐ¶ÏÊÇ·ñµ÷ÓÃ¹Ø±Õ¹ý³Ì. ---2011.5.19, zsx
	 */</comment>
	<comment type="block">/*
	if (fp-&gt;read_buf != NULL)
		acl_myfree(fp-&gt;read_buf);
	if (ACL_VSTREAM_SOCK(fp) != ACL_SOCKET_INVALID &amp;&amp; fp-&gt;close_fn)
		ret = fp-&gt;close_fn(ACL_VSTREAM_SOCK(fp));
	else if (ACL_VSTREAM_FILE(fp) != ACL_FILE_INVALID &amp;&amp; fp-&gt;fclose_fn)
		ret = fp-&gt;fclose_fn(ACL_VSTREAM_FILE(fp));
	ACL_VSTREAM_SOCK(fp) = ACL_SOCKET_INVALID;
	ACL_VSTREAM_FILE(fp) = ACL_FILE_INVALID;
	*/</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
		 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
		 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
				<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Ö»Ëù½«´Ëµ÷ÓÃ·ÅÔÚ close_fn Ç°Ãæ£¬ÊÇÎªÁË·ÀÖ¹ÓÐÈËÎóÔÚ
			 * close_fn Àïµ÷ÓÃÁËÉ¾³ý»Øµ÷º¯ÊýµÄ²Ù×÷¶øÔì³É¶ÔÍ¬Ò»ÄÚ´æ
			 * µÄ¶à´ÎÊÍ·Å
			 */</comment>
			<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_SOCKET_INVALID</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>close_fn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>fp</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ACL_FILE_INVALID</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>fclose_fn</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>fp</name><operator>-&gt;</operator><name>fclose_fn</name></name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>fdp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>event_fdtable_free</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>fdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>read_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>wbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>set_sock_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sa_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SOCKADDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>sa_size</name> <operator>=</operator> <call><name>acl_sane_pton</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sa_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>sa</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>sa_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_set_local</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, addr %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><name>addr</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name>     <operator>=</operator> <call><name>set_sock_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_INET4</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_INET6</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_UNIX</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local_len</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_set_local_addr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>sa_local_size</name></name> <operator>=</operator> <call><name>acl_inet_ntop</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get local addr error %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local</name></name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_local_len</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sa_local_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_local</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_INET4</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AF_INET6</name></cpp:ifdef>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_INET6</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>ACL_VSTREAM_TYPE_UNIX</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_set_peer</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, addr %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>=</operator> <call><name>set_sock_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fp</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer_len</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_set_peer_addr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>addr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fp</name><operator>-&gt;</operator><name>sa_peer_size</name></name> <operator>=</operator> <call><name>acl_inet_ntop</name><argument_list>(<argument><expr><name>sa</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get peer addr error %s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer</name></name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>sa_peer_len</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>sa_peer_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>addr_peer</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_set_path</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, path %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>path</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_call_close_handles</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
		 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
		 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
				<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Ö»Ëù½«´Ëµ÷ÓÃ·ÅÔÚ close_fn Ç°Ãæ£¬ÊÇÎªÁË·ÀÖ¹ÓÐÈËÎóÔÚ
			 * close_fn Àïµ÷ÓÃÁËÉ¾³ý»Øµ÷º¯ÊýµÄ²Ù×÷¶øÔì³É¶ÔÍ¬Ò»ÄÚ´æ
			 * µÄ¶à´ÎÊÍ·Å
			 */</comment>
			<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_add_close_handle</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type>  <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): fp null"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>close_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): close_fn null"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>fp-&gt;close_handle_lnk</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>close_fn</name>
			<operator>&amp;&amp;</operator> <name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>context</name></expr>)</condition> <block>{<block_content>

			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM_CLOSE_HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): calloc error=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>=</operator> <name>close_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>close_handle</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): acl_array_append error=%s"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_delete_close_handle</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fp null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>close_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): close_fn null"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
	 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
	 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>close_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>close_handle</name><operator>-&gt;</operator><name>close_fn</name></name> <operator>==</operator> <name>close_fn</name>
		    <operator>&amp;&amp;</operator> <name><name>close_handle</name><operator>-&gt;</operator><name>context</name></name> <operator>==</operator> <name>context</name></expr>)</condition> <block>{<block_content>

			<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstream_clean_close_handle</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM_CLOSE_HANDLE</name> <modifier>*</modifier></type><name>close_handle</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ÒòÎªÌí¼ÓÊ±ÊÇÕýÐòµÄ, ËùÒÔÔÚÉ¾³ýÊ±ÊÇµ¹ÐòµÄ,
	 * ÕâÑù¶Ô¶¯Ì¬Êý×éµÄÊ¹ÓÃµÄÐ§ÂÊ²Å»á±È½Ï¸ß, 
	 * ±ÜÃâÁË¶¯Ì¬Êý×éÄÚ²¿ÒÆ¶¯µÄÇé¿ö
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>close_handle</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM_CLOSE_HANDLE</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>close_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_array_clean</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>close_handle_lnk</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_vstream_strerror</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>err</name><index>[]</index></name> <init>= <expr><literal type="string">"input error"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>err</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_strerror1</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_add_object</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>key</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>obj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, key %s, obj %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>key</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>key</name></expr> ?</condition><then> <expr><name>key</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>obj</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ACL_HTABLE_FLAG_KEY_LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_vstream_del_object</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, key %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>key</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>key</name></expr> ?</condition><then> <expr><name>key</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_htable_delete</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_vstream_get_object</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>key</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>key</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: fp %s, key %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fp</name></expr> ?</condition><then> <expr><literal type="string">"not null"</literal></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><name>key</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>key</name></expr> ?</condition><then> <expr><name>key</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>acl_htable_find</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>objs_table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function></block_content></block></function>
</unit>
