<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/string/acl_split_nameval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* acl_split_nameval - split text into name and value */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_split_nameval</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>				<comment type="block">/* name substring */</comment>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>				<comment type="block">/* value substring */</comment>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Ugly macros to make complex expressions less unreadable.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>for (var = start; *var &amp;&amp; (cond); var++) {}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRIM</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	char *p; \
	for (p = (s) + strlen(s); p &gt; (s) &amp;&amp; ACL_ISSPACE(p[-1]); p--) {} \
	*p = 0; \
}</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>np</name></expr></argument>, <argument><expr><call><name>ACL_ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>np</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* find name begin */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>np</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="string">"missing attribute name"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><operator>!</operator><call><name>ACL_ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>ep</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* find name end */</comment>
	<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><call><name>ACL_ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* skip blanks before '=' */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* need '=' */</comment>
		<return>return <expr><operator>(</operator><literal type="string">"missing '=' after attribute name"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* terminate name */</comment>
	<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>					<comment type="block">/* skip over '=' */</comment>
	<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>ACL_ISSPACE</name><argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* skip leading blanks */</comment>
	<expr_stmt><expr><call><name>TRIM</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* trim trailing blanks */</comment>
	<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name>np</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
