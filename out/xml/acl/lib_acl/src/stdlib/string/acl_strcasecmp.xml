<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/string/acl_strcasecmp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../charmap.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>acl_strcasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>maptolower</name></expr></init></decl>,
	      <decl><type ref="prev"><modifier>*</modifier></type><name>us1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name></expr></init></decl>,
	      <decl><type ref="prev"><modifier>*</modifier></type><name>us2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>==</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>us1</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>us1</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>us2</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>-</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_strncasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>maptolower</name></expr></init></decl>,
		      <decl><type ref="prev"><modifier>*</modifier></type><name>us1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name></expr></init></decl>,
		      <decl><type ref="prev"><modifier>*</modifier></type><name>us2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name></expr></init></decl>;</decl_stmt>

		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>!=</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>-</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>us1</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>us1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>us2</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_strrncasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>maptolower</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>us1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>s2</name><operator>)</operator><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>s1</name><operator>)</operator><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>us1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>us2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>!=</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><name><name>cm</name><index>[<expr><operator>*</operator><name>us1</name></expr>]</index></name> <operator>-</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>us2</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>us1</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s1</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>us2</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s2</name> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><name><name>cm</name><index>[<expr><operator>*</operator><operator>--</operator><name>us2</name></expr>]</index></name><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>us2</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>us1</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s1</name> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><name><name>cm</name><index>[<expr><operator>*</operator><operator>--</operator><name>us1</name></expr>]</index></name><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>us1</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>us2</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_strrncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>us1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>us2</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>s2</name><operator>)</operator><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>s1</name><operator>)</operator><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>us1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s1</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>us2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>s2</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>us1</name> <operator>!=</operator> <operator>*</operator><name>us2</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><operator>*</operator><name>us1</name> <operator>-</operator> <operator>*</operator><name>us2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>us1</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s1</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>us2</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s2</name> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>*</operator><operator>--</operator><name>us2</name><operator>)</operator><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>us2</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s2</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>us1</name> <operator>==</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>s1</name> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><operator>(</operator><operator>*</operator><operator>--</operator><name>us1</name><operator>)</operator><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>us1</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>us2</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
