<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/string/acl_hex_code.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_hex_code.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Application-specific. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>acl_hex_chars</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHAR_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((const unsigned char *)(x))</cpp:value></cpp:define>

<comment type="block">/* acl_hex_encode - raw data to encoded */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_hex_encode</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <call><name>UCHAR_PTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>count</name><operator>--</operator></expr><operator>,</operator> <expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>acl_hex_chars</name><index>[<expr><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>acl_hex_chars</name><index>[<expr><name>ch</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_hex_decode - encoded data to raw */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_hex_decode</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bin</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <call><name>UCHAR_PTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <name>len</name></expr>;</init> <condition><expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>count</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>hex</name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator><name>hex</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator><name>hex</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>(</operator><name>hex</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>hex</name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin</name> <operator>|=</operator> <operator>(</operator><name>hex</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr> ;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin</name> <operator>|=</operator> <operator>(</operator><name>hex</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr> ;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>hex</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>hex</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bin</name> <operator>|=</operator> <operator>(</operator><name>hex</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr> ;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>

 <comment type="block">/*
  * Proof-of-concept test program: convert to hexadecimal and back.
  */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>vstring_str(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>ACL_VSTRING_LEN(x)</cpp:value></cpp:define>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unused_argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>unused_argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><call><name>vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>test</name> <init>= <expr><literal type="string">"this is a test"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	if (acl_hex_decode((b),(x),(l)) == 0) \
	    acl_msg_panic("bad hex: %s", (x)); \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	if (strcmp((b), (t)) != 0) \
	    acl_msg_panic("bad test: %s", (b)); \
    }</cpp:value></cpp:define>

    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>acl_hex_encode</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DECODE</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>vstring_free</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vstring_free</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
