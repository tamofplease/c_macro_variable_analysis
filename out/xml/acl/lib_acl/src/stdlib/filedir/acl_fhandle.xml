<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/filedir/acl_fhandle.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include> <comment type="block">/* for S_IREAD */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_htable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sane_basename.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_make_dirs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_myflock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_fhandle.h"</cpp:file></cpp:include>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>pthread_mutexattr_settype</name> <parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type><name>__attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__kind</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>pthread_mutexattr_settype</name> <parameter_list>(<parameter><decl><type><name>pthread_mutexattr_t</name> <modifier>*</modifier></type><name>__attr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>__kind</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_PREPARE_COMPILE */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>PATH</name></cpp:macro>	<cpp:value>ACL_VSTREAM_PATH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>STR</name></cpp:macro>	<cpp:value>acl_vstring_str</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__cache_max_size</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__debug_section</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_RING</name></type> <name>__fhandle_free_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_HTABLE</name> <modifier>*</modifier></type><name>__fhandle_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__fhandle_mutex</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MUTEX_LOCK</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_thread_mutex_lock((mutex))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MUTEX_UNLOCK</name><parameter_list>(<parameter><type><name>mutex</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_thread_mutex_unlock((mutex))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<comment type="block">/* ¿ÉÇ¶Ì×Ê½¼ÓËø */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LOCK_FS</name></cpp:macro>	<cpp:value>do {  \
	int  __ret;  \
	if ((__flags &amp; ACL_FHANDLE_F_LOCK ) != 0 &amp;&amp; (__ret = MUTEX_LOCK(&amp;__fhandle_mutex)) != 0)  \
		acl_msg_fatal("%s: lock fs error(%d)", myname, __ret);  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>UNLOCK_FS</name></cpp:macro> <cpp:value>do {  \
	int  __ret;  \
	if ((__flags &amp; ACL_FHANDLE_F_LOCK ) != 0 &amp;&amp; (__ret = MUTEX_UNLOCK(&amp;__fhandle_mutex)) != 0)  \
		acl_msg_fatal("%s: unlock fs error(%d)", myname, __ret);  \
} while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>LOCK_FS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>UNLOCK_FS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>__fhandle_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__fhandle_alloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FHANDLE</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): size(%d) &lt; ACL_FHANDLE's size(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FHANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>ACL_FHANDLE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>oflags</name></name> <operator>=</operator> <name>oflags</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_MLOCK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
		<decl_stmt><decl><type><name>acl_pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if># <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_FREEBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_SUNOS5</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif># <cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALPINE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>fs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__fhandle_free</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* ÎÄ¼þËø×Ô¶¯ÊÍ·Å */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_MLOCK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>acl_fhandle_open</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_path</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>on_open</name>)<parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>open_arg</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_close</name>)<parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_fhandle_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fopen_flags</name> <init>= <expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>LOCK_FS</name></expr>;</expr_stmt>

	<comment type="block">/* ÏÈ²éÑ¯»º´æÖÐÊÇ·ñ´æÔÚ */</comment>
	<expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>ACL_FHANDLE</name> <operator>*</operator><operator>)</operator> <call><name>acl_htable_find</name><argument_list>(<argument><expr><name>__fhandle_table</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fs</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt> <comment type="block">/* Ôö¼ÓÒýÓÃ¼ÆÊý£¬ÒÔ·ÀÖ¹±»¶à´ÎÒýÓÃÊ±ÌáÇ°ÊÍ·Å */</comment>
		<comment type="block">/* Èç¹û¸Ã»º´æ¶ÔÏó´¦ÓÚÑÓ³Ù¹Ø±Õ¶ÓÁÐÖÐ£¬ÔòÐèÒª´ÓÖÐÉ¾³ý */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>when_free</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ´ÓÑÓ³Ù¹Ø±Õ»º³åÖÐÈ¥³ý */</comment>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>when_free</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>

		<comment type="block">/* ÊÇ·ñ´ò¿ªºó×Ô¶¯¼ÓËø */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_EXCL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_fhandle_lock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><operator>(</operator><name>fs</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* sanity check */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FHANDLE</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_FHANDLE</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/* ·ÖÅäÐÂµÄ»º´æ¶ÔÏó */</comment>
	<expr_stmt><expr><name>fs</name> <operator>=</operator> <call><name>__fhandle_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>on_close</name></name> <operator>=</operator> <name>on_close</name></expr>;</expr_stmt>

	<comment type="block">/* ÊÇ·ñ×Ô¶¯¼ì²é²¢´´½¨²»´æÔÚµÄÄ¿Â¼ */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_MKDIR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>tmpbuf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* ±ØÐë±£Ö¤Ä¿Â¼´æÔÚ£¬Èç¹û²»´æÔÚÔòÇ¿ÐÐ´´½¨¸ÃÄ¿Â¼ */</comment>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_sane_dirname</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_make_dirs</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNUX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_NOATIME</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fopen_flags</name> <operator>|=</operator> <name>O_NOATIME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_DIRECT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fopen_flags</name> <operator>|=</operator> <name>O_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_SYNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fopen_flags</name> <operator>|=</operator> <name>O_SYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ´´½¨ÐÂÎÄ¼þ */</comment>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>fopen_flags</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fopen %s error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>file_path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__fhandle_free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <call><name>acl_vstream_fsize</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>fsize</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get %s size error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__fhandle_free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>on_open</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* maybe first open, need init the store */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>on_open</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>open_arg</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): on_create return &lt; 0 for %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>__fhandle_free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_htable_enter</name><argument_list>(<argument><expr><name>__fhandle_table</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add fpath(%s) to htable error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>

	<comment type="block">/* ÊÇ·ñ´ò¿ªºó×Ô¶¯¼ÓËø */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_EXCL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fhandle_lock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>fs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÕæÕý¹Ø±Õ²¢ÊÍ·Å´æ´¢¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__fhandle_close</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__fhandle_close"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: nrefer: %d != 0"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>on_close</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>fs</name><operator>-&gt;</operator><name>on_close</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_htable_delete</name><argument_list>(<argument><expr><name>__fhandle_table</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>__fhandle_free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fhandle_close</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delay_timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_fhandle_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>  <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>ring_iter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>LOCK_FS</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fhandle_iter</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>delay_timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>__fhandle_close</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_fhandle_unlock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>when_free</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>delay_timeout</name></expr>;</expr_stmt>  <comment type="block">/* Ä¬ÈÏµÄ¹Ø±ÕÊ±¼ä½Ø */</comment>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <operator>&amp;</operator><name>__fhandle_free_list</name></expr>;</expr_stmt>

		<comment type="block">/* Êý¾ÝÁ´µÄ´æ´¢·½Ê½Îª£¬ÓÉÍ· --&gt; Î²£¬ÔòÊý¾ÝÓÉ ¾É --&gt; ÐÂ, ¼´: Ê±¼äÖµ Ð¡ --&gt; ´ó */</comment>
		
		<comment type="block">/* ´ÓÎ²²¿¿ªÊ¼É¨Ãè£¬¼´É¨ÃèÊ±¼ä¹ýÆÚÖµÓÉ´óÏòÐ¡µÄ·½ÏòÉ¨ÃèËùÓÐ¶ÔÏó£¬ÕÒµ½
		 * ¹ýÆÚÊ±¼äÖµ±Èµ±Ç°¶ÔÏóµÄÊ±¼äÖµÐ¡»òÏàµÈµÄµÚÒ»¸ö¶ÔÏó
		 */</comment>
		<macro><name>acl_ring_foreach_reverse</name><argument_list>(<argument>ring_iter</argument>, <argument>&amp;__fhandle_free_list</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><name>fhandle_iter</name> <operator>=</operator> <call><name>acl_ring_to_appl</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_FHANDLE</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>when_free</name></name> <operator>&gt;=</operator> <name><name>fhandle_iter</name><operator>-&gt;</operator><name>when_free</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<comment type="block">/* ·ÅÔÚ±ÈÉ¨Ãè¶ÔÏóºó´Ó¶ø±£³ÖÊý¾ÝÁ´µÄ´óÐ¡Ë³Ðò²»±ä */</comment>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ½âËø */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_fhandle_unlock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* ÓÉÍ·²¿É¨ÃèµÄ·½·¨Ð§ÂÊ½ÏµÍ
		 * ´ÓÍ·²¿¿ªÊ¼É¨Ãè£¬¼´É¨ÃèÊ±¼ä¹ýÆÚÖµÓÉÐ¡Ïò´óµÄ·½ÏòÉ¨ÃèËùÓÐ¶ÔÏó£¬ÕÒµ½
		 * ¹ýÆÚÊ±¼äÖµ±Èµ±Ç°¶ÔÏóµÄ¹ýÆÚÊ±¼ä´ó»òÏàµÈµÄµÚÒ»¸ö¶ÔÏó
		 * acl_foreach_ring(iter_next, &amp;__fhandle_free_list) {
		 *	fhandle_iter = ACL_RING_TO_APPL(iter_next, ACL_FHANDLE, ring);
		 *	if (fs-&gt;when_free &lt;= fhandle_iter-&gt;when_free) {
		 *		iter = iter_next;
		 *		break;
		 *	}
		 * }
		 * ½«µ±Ç°¶ÔÏó·ÅÔÚÉ¨Ãè¶ÔÏóµÄÇ°Ãæ´Ó¶ø±£³ÖÊý¾ÝÁ´µÄ´óÐ¡Ë³Ðò²»±ä
		 * acl_ring_prepend(iter, &amp;fs-&gt;ring);
		 */</comment>
		
		<if_stmt><if>if <condition>(<expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_free_list</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>__cache_max_size</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* µ¯³ö×îÀÏµÄ¶ÔÏó½øÐÐÊÍ·Å */</comment>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_free_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fs</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_FHANDLE</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fpath: nrefer: %d != 0, list size: %d"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>, <argument><expr><call><name>acl_ring_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_free_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_fhandle_unlock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>__fhandle_close</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_fhandle_unlock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÒòÎªÊý¾ÝÁ´ÖÐµÄ¶ÔÏóµÄ¹ýÆÚÊ±¼äÖµÓÉÍ· --&gt; Î²ÊÇ°´ÓÉ Ð¡ --&gt; ´óµÄË³Ðò´æ´¢µÄ,
	 * ËùÒÔÍ·²¿µÄÊý¾ÝÓ¦×îÏÈ¹ýÆÚ; ÊÍ·Åµô¹ýÆÚµÄÑÓÆÚ¹Ø±ÕµÄ»º´æ¶ÔÏó
	 */</comment>
        <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_free_list</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name>__fhandle_free_list</name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>fs</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_FHANDLE</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>when_free</name></name> <operator>&gt;</operator> <name>now</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: fs(%s)'s nrefer(%d) &gt; 0, which in free list"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>iter_next</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>__debug_section</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
				<argument_list>(<argument><expr><literal type="string">"%s: fpath: %s, when_free: %ld, now: %ld"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>when_free</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>__fhandle_close</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>iter_next</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>UNLOCK_FS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fhandle_lock</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_fhandle_lock"</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tid</name> <init>= <expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>acl_pthread_t</name></type> <name>tid</name> <init>= <expr><call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_MLOCK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ACL_FHANDLE_O_MLOCK not set"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* ¼ÓÏß³ÌËø£¬Í¬Ê±ÔÊÐíÍ¬Ò»Ïß³Ì¿ÉÒÔ¶ÔÍ¬Ò»Ëø¼ÓËø¶à´Î */</comment>
	<expr_stmt><expr><call><name>MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>lock_mutex_tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>

	<comment type="block">/* ¼Ó½ø³ÌÎÄ¼þËøÒÔ·ÀÖ¹²»Í¬½ø³ÌÍ¬Ê±·ÃÎÊ */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_FLOCK</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_FLOCK_ON</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_myflock</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>ACL_FLOCK_STYLE_FCNTL</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_EXCLUSIVE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: lock file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>ACL_FHANDLE_S_FLOCK_ON</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fhandle_unlock</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_fhandle_unlock"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* sanity check */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_O_MLOCK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>lock_mutex_tid</name></name> <operator>!=</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): thread not locked mutex for %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): thread not locked mutex for %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* xxx: ±ØÐëÇå³ýÏß³ÌËøµÄËùÓÐÕß */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>lock_mutex_tid</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>lock_mutex_tid</name></name> <operator>=</operator> <operator>(</operator><name>acl_pthread_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_FHANDLE_S_MUTEX_ON</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_FLOCK_ON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_FHANDLE_S_FLOCK_ON</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_myflock</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>ACL_FLOCK_STYLE_FCNTL</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unlock file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unlock mutex for %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fhandle_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cache_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>debug_section</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_fhandle_init"</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>acl_pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>__fhandle_table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __fhandle_table not null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__cache_max_size</name> <operator>=</operator> <ternary><condition><expr><name>cache_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>cache_size</name></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>__debug_section</name> <operator>=</operator> <name>debug_section</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<comment type="block">/* win32 ÏÂÎÄ¼þÃû¼°Â·¾¶ÃûÊÇ²»Çø·Ö´óÐ¡Ð´µÄ£¬ËùÒÔ»ùÓÚÎÄ¼þÂ·¾¶Îª¼üµÄ¹þÏ£±í
	 * ÐèÒªÉèÖÃÎª×Ô¶¯×ªÎªÐ¡Ð´¼üÖµµÄÇé¿ö
	 */</comment>
	<expr_stmt><expr><name>__fhandle_table</name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>ACL_HTABLE_FLAG_KEY_LOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>__fhandle_table</name> <operator>=</operator> <call><name>acl_htable_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>__flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_free_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if># <cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_FREEBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_SUNOS5</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif># <cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ALPINE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE_NP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_mutex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__fhandle_close2</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__fhandle_close2"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: nrefer: %d != 0, name: %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>, <argument><expr><call><name>ACL_FHANDLE_PATH</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>on_close</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>fs</name><operator>-&gt;</operator><name>on_close</name></name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ACL_FHANDLE_S_MUTEX_ON</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: fpath: %s, mutex not release yet"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fs</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>fs</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ACL_FHANDLE_S_MUTEX_ON</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>__fhandle_free</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_fhandle_end</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_fhandle_end"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): close all ACL_FHANDLE now"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>__fhandle_table</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __fhandle_table null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_htable_free</name><argument_list>(<argument><expr><name>__fhandle_table</name></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <name>__fhandle_close2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fhandle_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__fhandle_table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
