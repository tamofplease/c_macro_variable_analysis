<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/filedir/acl_scan_dir.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_BCB_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_scan_dir.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_dir.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_RMDIR</name></cpp:macro> <cpp:value>_rmdir</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_UNLINK</name></cpp:macro> <cpp:value>_unlink</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_RMDIR</name></cpp:macro> <cpp:value>rmdir</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SANE_UNLINK</name></cpp:macro> <cpp:value>unlink</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir_sys_patch.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>MAX_PATH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MAX_PATH</name></cpp:macro>	<cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <comment type="block">/*
  * The interface is based on an opaque structure, so we don't have to expose
  * the user to the guts. Subdirectory info sits in front of parent directory
  * info: a simple last-in, first-out list.
  */</comment>
<typedef>typedef <type><name><name>struct</name> <name>ACL_SCAN_INFO</name></name></type> <name>ACL_SCAN_INFO</name>;</typedef>

<struct>struct <name>ACL_SCAN_INFO</name> <block>{
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>               <comment type="block">/* directory name */</comment>
	<decl_stmt><decl><type><name>DIR</name>    <modifier>*</modifier></type><name>dir_name</name></decl>;</decl_stmt>           <comment type="block">/* directory structure */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nfiles</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ndirs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>nsize</name></decl>;</decl_stmt>            <comment type="block">/* total size of all files of current */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>       <comment type="block">/* the stat of the dir or file of scanning */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>attr</name></decl>;</decl_stmt>       <comment type="block">/* the current dir's stat */</comment>
	<decl_stmt><decl><type><name>ACL_SCAN_INFO</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>      <comment type="block">/* linkage */</comment>
}</block>;</struct>

<struct>struct <name>ACL_SCAN_DIR</name> <block>{
	<decl_stmt><decl><type><name>ACL_SCAN_INFO</name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>     <comment type="block">/* current scan */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name></decl>;</decl_stmt>             <comment type="block">/* define as: ACL_SCAN_FLAGS_XXX */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>nfiles</name></decl>;</decl_stmt>            <comment type="block">/* total files' count */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ndirs</name></decl>;</decl_stmt>             <comment type="block">/* total dirs' count */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>nsize</name></decl>;</decl_stmt>            <comment type="block">/* total size of all files */</comment>
	<decl_stmt><decl><type><name>ACL_SCAN_DIR_FN</name></type>   <name>scan_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_RMDIR_FN</name></type> <name>rmdir_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>scan_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>file_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>       <comment type="block">/* if is file set it */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN_PATH</name><parameter_list>(<parameter><type><name>scan</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(scan-&gt;current-&gt;path)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN_RECURSIVE</name><parameter_list>(<parameter><type><name>scan</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(scan-&gt;flags &amp; ACL_SCAN_FLAG_RECURSIVE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN_RMDIR</name><parameter_list>(<parameter><type><name>scan</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(scan-&gt;flags &amp; ACL_SCAN_FLAG_RMDIR)</cpp:value></cpp:define>

<comment type="block">/* acl_scan_dir_open - start directory scan */</comment>

<function><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>acl_scan_dir_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_scan_dir_open2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><ternary><condition><expr><name>recursive</name></expr> ?</condition><then> <expr><name>ACL_SCAN_FLAG_RECURSIVE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>acl_scan_dir_open2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_open2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <operator>(</operator><name>ACL_SCAN_DIR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_push</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat %s error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_scan_dir_close</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>scan</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_scan_dir_close - terminate directory scan */</comment>

<function><type><name>void</name></type> <name>acl_scan_dir_close</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_scan_dir_pop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_scan_dir_reset</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_scan_dirctl - ctl interface for set option */</comment>

<function><type><name>void</name></type> <name>acl_scan_dir_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_SCAN_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch<condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_SCAN_CTL_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_SCAN_DIR_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_SCAN_CTL_RMDIR_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>rmdir_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_SCAN_RMDIR_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_SCAN_CTL_CTX</name></expr>:</case>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>scan_ctx</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_scan_dir_path - return the path of the directory being read.  */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_scan_dir_path</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_scan_dir_file</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>acl_scan_dir_ndirs</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>acl_scan_dir_nfiles</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_scan_dir_nsize</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_scan_stat</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>acl_stat</name></name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>acl_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_scan_dir_stat</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>acl_stat</name></name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>acl_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_scan_dir_end</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<comment type="block">/* acl_scan_dir_push - enter directory */</comment>

<function><type><name>int</name></type> <name>acl_scan_dir_push</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_push"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: path null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><name>ACL_SCAN_INFO</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dpath</name> <init>= <expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dpath</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>dpath</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>dpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>dpath</name></expr></argument>, <argument><expr><name>PATH_SEP_S</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>path</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
		<while>while <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<while>while <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>path</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>path</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>dir_name</name></name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open directory(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

<comment type="block">/* acl_scan_dir_pop - leave directory */</comment>

<function><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>acl_scan_dir_pop</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_pop"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_INFO</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>closedir</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: close directory(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SCAN_RMDIR</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>parent</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>ndirs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>nfiles</name></name>
		<operator>&amp;&amp;</operator> <name><name>scan</name><operator>-&gt;</operator><name>rmdir_fn</name></name>
		<operator>&amp;&amp;</operator> <call><name><name>scan</name><operator>-&gt;</operator><name>rmdir_fn</name></name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>scan_ctx</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>ndirs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>ndirs</name></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: parent=%s ndirs=0"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: total ndirs=0"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name>parent</name></expr> ?</condition><then> <expr><name>scan</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_scan_dir_next - find next entry */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_scan_dir_next</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_next"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_INFO</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(strcmp((x),(y)) == 0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>acl_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>ERROR_NO_MORE_FILES</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: readdir error=%s, "</literal>
					<literal type="string">"name=%s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>STREQ</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>STREQ</name><argument_list>(<argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></while>

<comment type="block">/* acl_scan_dir_next_file - find next valid file */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_scan_dir_next_file</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_next_file"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>pathbuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_scan_dir_next</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_pop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,
			<argument><expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_SEP_C</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCAN_RECURSIVE</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="block">/* none */</comment>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_scan_dir_push</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: push dir(%s) error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* acl_scan_dir_next_dir - find next valid dir */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_scan_dir_next_dir</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_next_dir"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>pathbuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_scan_dir_next</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_pop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,
			<argument><expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_SEP_C</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCAN_RECURSIVE</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_push</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: push dir(%s) error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_scan_dir_next_name</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_next_name"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>pathbuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_scan_dir_next</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_pop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,
			<argument><expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_SEP_C</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_file</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>is_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SCAN_RECURSIVE</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_file</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>is_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_push</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_file</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>is_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>attr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: push dir(%s) error %s"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_scan_dir_size2</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ndir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_size2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>pathbuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_scan_dir_next</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_pop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pathbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,
			<argument><expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_SEP_C</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>SCAN_RECURSIVE</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <call><name>acl_scan_dir_push</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name> <operator>&amp;&amp;</operator> <call><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>scan_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>nfile</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>nfile</name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ndir</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ndir</name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_scan_dir_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ndir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_size"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>size</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pathname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: pathname null"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>acl_scan_dir_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: dir_open error: %s, path: %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>acl_scan_dir_size2</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>nfile</name></expr></argument>, <argument><expr><name>ndir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_scan_dir_close</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_scan_dir_rmall - remove all directoies and file in the dir */</comment>

<function><type><name>acl_int64</name></type> <name>acl_scan_dir_rm2</name><parameter_list>(<parameter><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ndir</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_rm2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>acl_scan_dir_next</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,
					<argument><expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* ±ØÐëÍË³ö¸Ã¿ÕÄ¿Â¼ºó²Å¿ÉÒÔÉ¾³ý¸ÃÄ¿Â¼ */</comment>

			<if_stmt><if>if <condition>(<expr><call><name>acl_scan_dir_pop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* É¾³ý×î¶¥²ã¿ÕÄ¿Â¼ */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>SANE_RMDIR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* É¾³ý¿ÕÄ¿Â¼ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>SANE_RMDIR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,
			<argument><expr><call><name>SCAN_PATH</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_SEP_C</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat file(%s) error(%s)"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_SAFE_STRNCPY</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name> <operator>&amp;&amp;</operator> <call><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name><argument_list>(<argument><expr><name>scan</name></expr></argument>,
						<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>scan_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name> <operator>+=</operator> <name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SANE_UNLINK</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>file_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>SCAN_RECURSIVE</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>acl_scan_dir_push</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name> <operator>&amp;&amp;</operator> <call><name><name>scan</name><operator>-&gt;</operator><name>scan_fn</name></name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>scan_ctx</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ndir</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ndir</name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>ndirs</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>nfile</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>nfile</name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>nfiles</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_scan_dir_rm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ndir</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_scan_dir_rmall"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SCAN_DIR</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>nsize</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ndir</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ndir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>nfile</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>nfile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: stat pathname(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>sbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nfile</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>nfile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SANE_UNLINK</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>acl_scan_dir_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: open path(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_scan_dir_rm2</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>ndir</name></expr></argument>, <argument><expr><name>nfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nsize</name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>nsize</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_scan_dir_close</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>nsize</name></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function>
</unit>
