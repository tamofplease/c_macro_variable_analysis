<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/filedir/acl_sane_basename.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sane_basename.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>acl_vstring_str(x)</cpp:value></cpp:define>

<comment type="block">/* acl_sane_basename - skip directory prefix */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_sane_basename</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_sane_basename"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Your buffer or mine?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): bp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Special case: return "." for null or zero-length input.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Remove trailing '/' characters from input. Return "/" if input is all
	 * '/' characters.
	 */</comment>
	<expr_stmt><expr><name>last</name> <operator>=</operator> <name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<while>while <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>path</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * The pathname does not end in '/'. Skip to last '/' character if any.
	 */</comment>
	<expr_stmt><expr><name>first</name> <operator>=</operator> <name>last</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<while>while <condition>(<expr><name>first</name> <operator>&gt;=</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>first</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><name>first</name> <operator>&gt;=</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>first</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>first</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>first</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></while>

	<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></while>

<comment type="block">/* acl_sane_dirname - keep directory prefix */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_sane_dirname</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_sane_dirname"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Your buffer or mine?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): bp null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Special case: return "." for null or zero-length input.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Remove trailing '/' characters from input. Return "/" if input is all
	 * '/' characters.
	 */</comment>
	<expr_stmt><expr><name>last</name> <operator>=</operator> <name>path</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<while>while <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>path</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * This pathname does not end in '/'. Skip to last '/' character if any.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<while>while <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>last</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>last</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>last</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></while>
	<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&lt;</operator> <name>path</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* no '/' */</comment>
		<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Strip trailing '/' characters from dirname (not strictly needed).
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<while>while <condition>(<expr><name>last</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<while>while <condition>(<expr><name>last</name> <operator>&gt;</operator> <name>path</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <operator>*</operator><name>last</name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>last</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></while>

	<return>return <expr><operator>(</operator><call><name>STR</name><argument_list>(<argument><expr><call><name>acl_vstring_strncpy</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>path</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring_vstream.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>     <name>main</name><parameter_list>(<parameter><decl><type><name>int</name> <name>argc</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>argv</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><call><name>acl_vstring_gets_nonl</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_IN</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>acl_sane_dirname</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>acl_sane_basename</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstream_printf</name><argument_list>(<argument><expr><literal type="string">"input=\"%s\" dir=\"%s\" base=\"%s\"\n"</literal></expr></argument>,
				<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><name>ACL_VSTREAM_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
