<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/acl_atomic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_atomic.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* In lower NDK, atomic not support for lower Android, see:
 * https://android.googlesource.com/toolchain/gcc/+/refs/heads/master/gcc-4.9/libgcc/config/arm/linux-atomic-64bit.c#53
 * So, we must exclude atomic for lower Android version.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ACL_ANDROID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ATOMIC</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_FREEBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ATOMIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
#ifdef arm64
#error "arm64"
#endif

#ifdef arm64e
#error "arm64e"
#endif

#ifdef armv7
#error "armv7"
#endif

#ifdef armv7s
#error "arm7s"
#endif

#ifdef i386
#error "i386"
#endif

#ifdef x86_64
#error "x86_64"
#endif

*/</comment>
<comment type="block">/* don't use atomic for IOS and MacOS */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#  <cpp:directive>undef</cpp:directive> <name>HAS_ATOMIC</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_ATOMIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
#if !defined(HAS_ATOMIC)
# pragma message "Atomic not support, using thread mutex instead!"
#endif
*/</comment>

<struct>struct <name>ACL_ATOMIC</name> <block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>acl_pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>acl_atomic_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>ACL_ATOMIC</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_ATOMIC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>self</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_atomic_free</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>acl_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_atomic_set</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_atomic_cas</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cmp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>old</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedCompareExchangePointer</name><argument_list>(
		<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_atomic_xchg</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old</name> <operator>=</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>old</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_atomic_int64_set</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>PVOID</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>__sync_lock_test_and_set</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_int64_fetch_add</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>v</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>LONGLONG</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_int64_add_fetch</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAS_ATOMIC</name></cpp:ifndef>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><name>n</name> <operator>+</operator> <call><name>InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>LONGLONG</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_int64_cas</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>cmp</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAS_ATOMIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>acl_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>old</name> <init>= <expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>cmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>self</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>old</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><call><name>InterlockedCompareExchange64</name><argument_list>(
		<argument><expr><operator>(</operator><specifier>volatile</specifier> <name>LONGLONG</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <call><name>__sync_val_compare_and_swap</name><argument_list>(
			<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>*</operator><operator>)</operator> <name><name>self</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<struct>struct <name>ACL_ATOMIC_CLOCK</name> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type>   <name>atime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type>   <name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type>   <name>users</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>atime_atomic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>count_atomic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ATOMIC</name> <modifier>*</modifier></type><name>users_atomic</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>acl_atomic_clock_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name> <init>= <expr><operator>(</operator><name>ACL_ATOMIC_CLOCK</name> <operator>*</operator><operator>)</operator>
		<call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_ATOMIC_CLOCK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>clk</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clk</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clk</name><operator>-&gt;</operator><name>users</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clk</name><operator>-&gt;</operator><name>count_atomic</name></name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clk</name><operator>-&gt;</operator><name>users_atomic</name></name> <operator>=</operator> <call><name>acl_atomic_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clk</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>count_atomic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clk</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_set</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>users_atomic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>clk</name><operator>-&gt;</operator><name>users</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>clk</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_atomic_clock_free</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>count_atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_free</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>users_atomic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>clk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_clock_count_add</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_int64_set</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>count_atomic</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_clock_users_add</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_int64_set</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>users_atomic</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_atomic_clock_users_count_inc</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_int64_set</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>count_atomic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>users_atomic</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_clock_count</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>count_atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_clock_atime</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>atime_atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>acl_atomic_clock_users</name><parameter_list>(<parameter><decl><type><name>ACL_ATOMIC_CLOCK</name> <modifier>*</modifier></type><name>clk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_atomic_int64_add_fetch</name><argument_list>(<argument><expr><name><name>clk</name><operator>-&gt;</operator><name>users_atomic</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
