<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/sys/unix/acl_safe_open.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_safe_open.h"</cpp:file></cpp:include>

<comment type="block">/* safe_open_exist - open existing file */</comment>

<function><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_safe_open_exist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type> <name>fstat_st</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>why</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>local_statbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>lstat_st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>saved_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Open an existing file.
	 */</comment>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>saved_error</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"cannot open file %s: %s"</literal></expr></argument>,
				<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>saved_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Examine the modes from the open file: it must have exactly one hard
	 * link (so that someone can't lure us into clobbering a sensitive file
	 * by making a hard link to it), and it must be a non-symlink file.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>fstat_st</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fstat_st</name> <operator>=</operator> <operator>&amp;</operator><name>local_statbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fstat_st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: bad open file status: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
			<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fstat_st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"file is a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EISDIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fstat_st</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"file has %d hard links"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fstat_st</name><operator>-&gt;</operator><name>st_nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Look up the file again, this time using lstat(). Compare the fstat()
	 * (open file) modes with the lstat() modes. If there is any difference,
	 * either we followed a symlink while opening an existing file, someone
	 * quickly changed the number of hard links, or someone replaced the file
	 * after the open() call. The link and mode tests aren't really necessary
	 * in daemon processes. Set-uid programs, on the other hand, can be
	 * slowed down by arbitrary amounts, and there it would make sense to
	 * compare even more file attributes, such as the inode generation number
	 * on systems that have one.
	 * 
	 * Grr. Solaris /dev/whatever is a symlink. We'll have to make an exception
	 * for symlinks owned by root. NEVER, NEVER, make exceptions for symlinks
	 * owned by a non-root user. This would open a security hole when
	 * delivering mail to a world-writable mailbox directory.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lstat_st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"file status changed unexpectedly: %s"</literal></expr></argument>,
				<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>lstat_st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>lstat_st</name><operator>.</operator><name>st_uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"file is a symbolic link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fstat_st</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>!=</operator> <name><name>lstat_st</name><operator>.</operator><name>st_dev</name></name>
		   <operator>||</operator> <name><name>fstat_st</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>!=</operator> <name><name>lstat_st</name><operator>.</operator><name>st_ino</name></name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_ST_GEN</name></cpp:ifdef>
		   <operator>||</operator> <name><name>fstat_st</name><operator>-&gt;</operator><name>st_gen</name></name> <operator>!=</operator> <name><name>lstat_st</name><operator>.</operator><name>st_gen</name></name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		   <operator>||</operator> <name><name>fstat_st</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>!=</operator> <name><name>lstat_st</name><operator>.</operator><name>st_nlink</name></name>
		   <operator>||</operator> <name><name>fstat_st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>!=</operator> <name><name>lstat_st</name><operator>.</operator><name>st_mode</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"file status changed unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * We are almost there...
	 */</comment>
	<else>else <block>{<block_content>
		<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * End up here in case of fstat()/lstat() problems or inconsistencies.
	 */</comment>
	<expr_stmt><expr><call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_safe_open_create - create new file */</comment>

<function><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_safe_open_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>why</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Create a non-existing file. This relies on O_CREAT | O_EXCL to not
	 * follow symbolic links.
	 */</comment>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>why</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>why</name></expr></argument>, <argument><expr><literal type="string">"cannot create file exclusively: %s"</literal></expr></argument>,
				<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Optionally change ownership after creating a new file. If there
	 * is a problem we should not attempt to delete the file. Something
	 * else may have opened the file in the mean time.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHANGE_OWNER</name><parameter_list>(<parameter><type><name>user</name></type></parameter>, <parameter><type><name>group</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(user != (uid_t) -1 || group != (gid_t) -1)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><call><name>CHANGE_OWNER</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fchown</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: cannot change file ownership: %s"</literal></expr></argument>,
			<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Optionally look up the file attributes.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>st</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>fstat</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: bad open file status: %s"</literal></expr></argument>,
			<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * We are almost there...
	 */</comment>
	<else>else <block>{<block_content>
		<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * End up here in case of trouble.
	 */</comment>
	<expr_stmt><expr><call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_safe_open - safely open or create file */</comment>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_safe_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>why</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

	<comment type="block">/*
	 * Open an existing file, carefully.
	 */</comment>
	<case>case <expr><literal type="number">0</literal></expr>:</case>
		<return>return <expr><operator>(</operator><call><name>acl_safe_open_exist</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

		<comment type="block">/*
		 * Create a new file, carefully.
		 */</comment>
	<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
		<return>return <expr><operator>(</operator><call><name>acl_safe_open_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
						<argument><expr><name>st</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

		<comment type="block">/*
		 * Open an existing file or create a new one, carefully.
		 * When opening an existing file, we are prepared to deal
		 * with "no file" errors only. When creating a file, we
		 * are prepared for "file exists" errors only. Any other
		 * error means we better give up trying.
		 */</comment>
	<case>case <expr><name>O_CREAT</name></expr>:</case>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_safe_open_exist</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_safe_open_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>st</name></expr></argument>,
						<argument><expr><name>user</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_safe_open_exist</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>fp</name><operator>)</operator></expr>;</return>

		<comment type="block">/*
		 * Interface violation. Sorry, but we must be strict.
		 */</comment>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"acl_safe_open: O_EXCL flag without O_CREAT flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* no reache here */</comment>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>

</unit>
