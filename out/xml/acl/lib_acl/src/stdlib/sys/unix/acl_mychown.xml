<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/sys/unix/acl_mychown.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_mychown.h"</cpp:file></cpp:include>


<comment type="block">/* ×¢Òâ, ´Ëº¯ÊýÊÇÏß³Ì²»°²È«µÄ, Èç¹ûÃ¿´ÎµÄ s_owner Óë s_group ¶¼Ò»ÑùÔòÎÞËùÎ½ */</comment>
<function><type><name>int</name></type> <name>acl_mychown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_owner</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name>	<name>passwd</name></name>	<modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name>	<name>group</name></name>	<modifier>*</modifier></type><name>grp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uid_t</name></type>	<name>uid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gid_t</name></type>	<name>gid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s_owner</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s_group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pwd</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>s_owner</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>grp</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>s_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>grp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>chown</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* no such user */</comment>
	<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ×¢Òâ, ´Ëº¯ÊýÊÇÏß³Ì²»°²È«µÄ, Èç¹ûÃ¿´ÎµÄ s_owner Óë s_group ¶¼Ò»ÑùÔòÎÞËùÎ½ */</comment>
<function><type><name>int</name></type> <name>acl_myfchown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_owner</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_group</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name>	<name>passwd</name></name>	<modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name>	<name>group</name></name>	<modifier>*</modifier></type><name>grp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uid_t</name></type>	<name>uid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gid_t</name></type>	<name>gid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>s_owner</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>s_group</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pwd</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>s_owner</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>grp</name> <operator>=</operator> <call><name>getgrnam</name><argument_list>(<argument><expr><name>s_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>grp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>grp</name><operator>-&gt;</operator><name>gr_gid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fchown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* no such user */</comment>
	<return>return<expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>
</unit>
