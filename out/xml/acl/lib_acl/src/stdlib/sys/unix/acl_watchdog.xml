<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/sys/unix/acl_watchdog.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_signals.h"</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_watchdog.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific. */</comment>

 <comment type="block">/*
  * Rather than having one timer that goes off when it is too late, we break
  * up the time limit into smaller intervals so that we can deal with clocks
  * that jump occasionally.
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_WATCHDOG_STEPS</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>

 <comment type="block">/*
  * UNIX alarms are not stackable, but we can save and restore state, so that
  * watchdogs can at least be nested, sort of.
  */</comment>
 <struct>struct <name>ACL_WATCHDOG</name> <block>{
	 <decl_stmt><decl><type><name>unsigned</name></type> <name>timeout</name></decl>;</decl_stmt>		<comment type="block">/* our time resolution */</comment>
	 <decl_stmt><decl><type><name>ACL_WATCHDOG_FN</name></type> <name>action</name></decl>;</decl_stmt>	<comment type="block">/* application routine */</comment>
	 <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>		<comment type="block">/* application context */</comment>
	 <decl_stmt><decl><type><name>int</name></type>     <name>trip_run</name></decl>;</decl_stmt>		<comment type="block">/* number of successive timeouts */</comment>
	 <decl_stmt><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>saved_watchdog</name></decl>;</decl_stmt>	<comment type="block">/* saved state */</comment>
	 <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>saved_action</name></decl>;</decl_stmt>	<comment type="block">/* saved state */</comment>
	 <decl_stmt><decl><type><name>unsigned</name></type> <name>saved_time</name></decl>;</decl_stmt>		<comment type="block">/* saved state */</comment>
 }</block>;</struct>

 <comment type="block">/*
  * However, only one watchdog instance can be current, and the caller has to
  * restore state before a prior watchdog instance can be manipulated.
  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>acl_watchdog_curr</name></decl>;</decl_stmt>

<comment type="block">/* acl_watchdog_event - handle timeout event */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_watchdog_event</name><parameter_list>(<parameter><decl><type><name>int</name> <name>unused_sig</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_watchdog_event"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * This routine runs as a signal handler. We should not do anything
	 * that could involve memory allocation/deallocation, but exiting
	 * without proper explanation would be unacceptable.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wp</name> <operator>=</operator> <name>acl_watchdog_curr</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: no instance"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %p %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>trip_run</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>++</operator><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>trip_run</name></name><operator>)</operator> <operator>&lt;</operator> <name>ACL_WATCHDOG_STEPS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>wp</name><operator>-&gt;</operator><name>action</name></name><argument_list>(<argument><expr><name>wp</name></expr></argument>, <argument><expr><name><name>wp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"watchdog timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_watchdog_create - create watchdog instance */</comment>

<function><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>acl_watchdog_create</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>timeout</name></decl></parameter>,
	<parameter><decl><type><name>ACL_WATCHDOG_FN</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_watchdog_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sig_action</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>wp</name> <operator>=</operator> <operator>(</operator><name>ACL_WATCHDOG</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>wp</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <name>ACL_WATCHDOG_STEPS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: timeout %d too small"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>saved_watchdog</name></name> <operator>=</operator> <name>acl_watchdog_curr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>saved_time</name></name> <operator>=</operator> <call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sig_action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SA_RESTART</name></cpp:ifdef>
	<expr_stmt><expr><name><name>sig_action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_RESTART</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>sig_action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>sig_action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>acl_watchdog_event</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sig_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>saved_action</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: sigaction(SIGALRM): %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %p %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>wp</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>acl_watchdog_curr</name> <operator>=</operator> <name>wp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_watchdog_destroy - destroy watchdog instance, restore state */</comment>

<function><type><name>void</name></type>    <name>acl_watchdog_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_watchdog_destroy"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_watchdog_stop</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>acl_watchdog_curr</name> <operator>=</operator> <name><name>wp</name><operator>-&gt;</operator><name>saved_watchdog</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wp</name><operator>-&gt;</operator><name>saved_action</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sigaction</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: sigaction(SIGALRM): %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>wp</name><operator>-&gt;</operator><name>saved_time</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>saved_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %p"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_watchdog_start - enable watchdog timer */</comment>

<function><type><name>void</name></type>    <name>acl_watchdog_start</name><parameter_list>(<parameter><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_watchdog_start"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>acl_watchdog_curr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: wrong watchdog instance"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>wp</name><operator>-&gt;</operator><name>trip_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><name><name>wp</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %p"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_watchdog_stop - disable watchdog timer */</comment>

<function><type><name>void</name></type>    <name>acl_watchdog_stop</name><parameter_list>(<parameter><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>wp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_watchdog_stop"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>wp</name> <operator>!=</operator> <name>acl_watchdog_curr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: wrong watchdog instance"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %p"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>wp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_watchdog_pat - pat the dog so it stays quiet */</comment>

<function><type><name>void</name></type>    <name>acl_watchdog_pat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_watchdog_pat"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_watchdog_curr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>acl_watchdog_curr</name><operator>-&gt;</operator><name>trip_run</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: %p"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>acl_watchdog_curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>
</unit>
