<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/sys/unix/posix_signals.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library.*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"posix_signals.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MISSING_SIGSET_T</name></cpp:ifdef>

<function><type><name>int</name></type> <name>sigemptyset</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>*</operator><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sigaddset</name><parameter_list>(<parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>set</name> <operator>|=</operator> <call><name>sigmask</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sigprocmask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>sigset_t</name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>previous</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>how</name> <operator>==</operator> <name>SIG_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>sigblock</name><argument_list>(<argument><expr><operator>*</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>how</name> <operator>==</operator> <name>SIG_SETMASK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>sigsetmask</name><argument_list>(<argument><expr><operator>*</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>how</name> <operator>==</operator> <name>SIG_UNBLOCK</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>     <name>m</name> <init>= <expr><call><name>sigblock</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>sigsetmask</name><argument_list>(<argument><expr><name>m</name> <operator>&amp;</operator> <operator>~</operator><operator>*</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>old</name> <operator>=</operator> <name>previous</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MISSING_SIGACTION</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sigaction</name></name></type> <name><name>actions</name><index>[<expr><name>NSIG</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sighandle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* XXX If the child is just stopped, don't invoke the handler */</comment>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>actions</name><index>[<expr><name>signum</name></expr>]</index></name><operator>.</operator><call><name>sa_handler</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>act</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>oact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>     <name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NSIG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>actions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sa_handler</name> <operator>=</operator> <name>SIG_DFL</name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>sig</name> <operator>&gt;=</operator> <name>NSIG</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>oact</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>oact</name> <operator>=</operator> <name><name>actions</name><index>[<expr><name>sig</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>sigvec</name></name></type> <name>mine</name> <init>= <expr><block>{
			<expr><name>sighandle</name></expr>, <expr><name><name>act</name><operator>-&gt;</operator><name>sa_mask</name></name></expr>,
			<expr><name><name>act</name><operator>-&gt;</operator><name>sa_flags</name></name> <operator>&amp;</operator> <name>SA_RESTART</name> <operator>?</operator> <name>SV_INTERRUPT</name> <operator>:</operator> <literal type="number">0</literal></expr>
		}</block></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>sigvec</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mine</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name><name>actions</name><index>[<expr><name>sig</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>act</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX*/</comment>
</unit>
