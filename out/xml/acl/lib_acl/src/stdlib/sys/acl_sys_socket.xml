<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/sys/acl_sys_socket.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_read_fn</name></type>   <name>__sys_read</name>   <init>= <expr><name>read</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_write_fn</name></type>  <name>__sys_write</name>  <init>= <expr><name>write</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_writev_fn</name></type> <name>__sys_writev</name> <init>= <expr><operator>(</operator><name>acl_writev_fn</name><operator>)</operator> <name>writev</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>acl_set_read</name><parameter_list>(<parameter><decl><type><name>acl_read_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_read</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_set_write</name><parameter_list>(<parameter><decl><type><name>acl_write_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_write</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_set_writev</name><parameter_list>(<parameter><decl><type><name>acl_writev_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_writev</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_close_socket_fn</name></type>  <name>__sys_close</name> <init>= <expr><name>close</name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_close_socket_fn</name></type>  <name>__sys_close</name> <init>= <expr><name>closesocket</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_recv_fn</name></type>   <name>__sys_recv</name>   <init>= <expr><operator>(</operator><name>acl_recv_fn</name><operator>)</operator> <name>recv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_send_fn</name></type>   <name>__sys_send</name>   <init>= <expr><operator>(</operator><name>acl_send_fn</name><operator>)</operator> <name>send</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>acl_set_close_socket</name><parameter_list>(<parameter><decl><type><name>acl_close_socket_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_close</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_set_recv</name><parameter_list>(<parameter><decl><type><name>acl_recv_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_recv</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_set_send</name><parameter_list>(<parameter><decl><type><name>acl_send_fn</name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__sys_send</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__socket_inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__socket_ended</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>acl_socket_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_socket_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WORD</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WSADATA</name></type> <name>data</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__socket_inited</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): has been inited"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__socket_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FillMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WSADATA</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSAStartup</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WSAStartup error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): LOBYTE(data.wVersion) = %d"</literal>
			<literal type="string">", HIBYTE(data.wVersion) = %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>LOBYTE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HIBYTE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>wVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__socket_ended</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_socket_end"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__socket_ended</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): has been ended"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>__socket_ended</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>WSACleanup</name><argument_list>()</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): WSACleanup error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>__socket_inited</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_close</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>__sys_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_read</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	WSABUF wsaData;
	DWORD dwBytes = 0;
	DWORD flags = 0;
	int   ret;

	wsaData.len = (u_long) size;
	wsaData.buf = (char*) buf;
	ret = WSARecv(fd, &amp;wsaData, 1, &amp;dwBytes, &amp;flags, NULL, NULL);
	if (ret == SOCKET_ERROR) {
		return -1;
	}
	if (dwBytes == 0) {
		return -1;
	}
	return dwBytes;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ACL_VSTREAM_IS_MS</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_read_wait_ms</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_read_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>SYS_WSA_API</name></cpp:ifdef>
	<decl_stmt><decl><type><name>WSABUF</name></type> <name>wsabuf</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>wsabuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wsabuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>WSARecv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsabuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>__sys_recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>__sys_recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_write</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WRITEABLE_CHECK</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ACL_VSTREAM_IS_MS</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_write_wait_ms</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_write_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>__sys_send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>ret</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_socket_writev</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_send</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>  <comment type="block">/* defined in StdAfx.h */</comment>
<comment type="block">/* for vc2003 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&lt;=</operator> <literal type="number">1310</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLRDNORM</name></cpp:macro>  <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLRDBAND</name></cpp:macro>  <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLIN</name></cpp:macro>      <cpp:value>(POLLRDNORM | POLLRDBAND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLPRI</name></cpp:macro>     <cpp:value>0x0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLWRNORM</name></cpp:macro>  <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLOUT</name></cpp:macro>     <cpp:value>(POLLWRNORM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLWRBAND</name></cpp:macro>  <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLERR</name></cpp:macro>     <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLHUP</name></cpp:macro>     <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLNVAL</name></cpp:macro>    <cpp:value>0x0004</cpp:value></cpp:define>

typedef struct pollfd {
	SOCKET fd;
	short  events;
	short  revents;
} WSAPOLLFD, *PWSAPOLLFD, *LPWSAPOLLFD;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

int WSAAPI WSAPoll(LPWSAPOLLFD fds, ULONG nfds, INT timeout) {
	int ret;
	unsigned long i;
	struct timeval tv, *ptv;

	FD_SET rset;
	FD_SET wset;
	FD_SET eset;

	FD_ZERO(&amp;rset);
	FD_ZERO(&amp;wset);
	FD_ZERO(&amp;eset);

	for (i = 0; i &lt; nfds; i++) {
		if (fds[i].events &amp; POLLRDNORM) {
			FD_SET(fds[i].fd, &amp;rset);
		}
		if (fds[i].events &amp; POLLWRNORM) {
			FD_SET(fds[i].fd, &amp;wset);
		}
		FD_SET(fds[i].fd, &amp;eset);
	}

	if (timeout &gt;= 0) {
		tv.tv_sec  = timeout / 1000;
		tv.tv_usec = (timeout % 1000) * 1000;
		ptv = &amp;tv;
	} else {
		ptv = NULL;
	}

	ret = select((int) fds, &amp;rset, &amp;wset, &amp;eset, ptv);
	if (ret == SOCKET_ERROR) {
		return SOCKET_ERROR;
	}

	for(i = 0; i &lt; nfds; i++) {
		if ((fds[i].events &amp; POLLRDNORM) &amp;&amp; FD_ISSET(fds[i].fd, &amp;rset)) {
			fds[i].revents |= POLLRDNORM;
		}
		if ((fds[i].events &amp; POLLWRNORM) &amp;&amp; FD_ISSET(fds[i].fd, &amp;wset)) {
			fds[i].revents |= POLLWRNORM;
		}
		if (FD_ISSET(fds[i].fd, &amp;eset)) {
			fds[i].revents |= POLLERR;
		}
	}

	return ret;
}

int inet_pton(int af, const char *src, void *dst)
{
	struct sockaddr_storage ss;
	int size = sizeof(ss);
	char src_copy[INET6_ADDRSTRLEN+1];

	ZeroMemory(&amp;ss, sizeof(ss));
	<comment type="block">/* stupid non-const API */</comment>
	strncpy (src_copy, src, INET6_ADDRSTRLEN+1);
	src_copy[INET6_ADDRSTRLEN] = 0;

	if (WSAStringToAddress(src_copy, af, NULL, (struct sockaddr *)&amp;ss, &amp;size) == 0) {
		switch(af) {
		case AF_INET:
			*(struct in_addr *)dst = ((struct sockaddr_in *)&amp;ss)-&gt;sin_addr;
			return 1;
		case AF_INET6:
			*(struct in6_addr *)dst = ((struct sockaddr_in6 *)&amp;ss)-&gt;sin6_addr;
			return 1;
		}
	}
	return 0;
}

const char *inet_ntop(int af, const void *src, char *dst, socklen_t size)
{
	struct sockaddr_storage ss;
	unsigned long s = size;

	ZeroMemory(&amp;ss, sizeof(ss));
	ss.ss_family = af;

	switch(af) {
	case AF_INET:
		((struct sockaddr_in *)&amp;ss)-&gt;sin_addr = *(struct in_addr *)src;
		break;
	case AF_INET6:
		((struct sockaddr_in6 *)&amp;ss)-&gt;sin6_addr = *(struct in6_addr *)src;
		break;
	default:
		return NULL;
	}
	<comment type="block">/* cannot direclty use &amp;size because of strict aliasing rules */</comment>
	return (WSAAddressToString((struct sockaddr *)&amp;ss, sizeof(ss),
		NULL, dst, &amp;s) == 0) ? dst : NULL;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name>int</name></type> <name>acl_socket_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_close</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>__sys_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int acl_socket_read(ACL_SOCKET fd, void *buf, size_t size,
	int timeout, ACL_VSTREAM *fp, void *arg acl_unused)
{
	int ret, error;

	if (fp != NULL &amp;&amp; fp-&gt;read_ready) {
		fp-&gt;read_ready = 0;
		return read(fd, buf, size);
	}

	ret = read(fd, buf, size);
	if (ret &gt; 0) {
		return ret;
	}

	if (timeout &lt;= 0) {
		return ret;
	}

	error = acl_last_error();

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
	if (error != ACL_EWOULDBLOCK) {
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	if (error != ACL_EWOULDBLOCK &amp;&amp; error != ACL_EAGAIN) {
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		return ret;
	}

	if (acl_read_wait(fd, timeout) &lt; 0) {
		return -1;
	}

	return read(fd, buf, size);
}

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>acl_socket_read</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ACL_VSTREAM_IS_MS</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>acl_read_wait_ms</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_read_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>__sys_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>acl_socket_write</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>__sys_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WRITEABLE_CHECK</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ACL_VSTREAM_IS_MS</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>acl_write_wait_ms</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>acl_write_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type> <name>acl_socket_writev</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>__sys_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ACL_EWOULDBLOCK</name> <operator>==</operator> <name>ACL_EAGAIN</name></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>ACL_EAGAIN</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WRITEABLE_CHECK</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>acl_write_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>__sys_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS type"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>acl_socket_shutdown</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>shutdown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_socket_alive</name><parameter_list>(<parameter><decl><type><name>ACL_SOCKET</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><call><name>acl_readable</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>__sys_recv</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ACL_EWOULDBLOCK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function></block_content></block></function></block_content></block></function></block_content></block></function>
</unit>
