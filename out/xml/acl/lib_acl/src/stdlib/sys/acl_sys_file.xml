<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/sys/acl_sys_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>

<function><type><name>ACL_FILE_HANDLE</name></type> <name>acl_file_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>fileaccess</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fileshare</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>filecreate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fileattr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* decode the access flags */</comment>
	<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_RDONLY</name> <operator>|</operator> <name>O_WRONLY</name> <operator>|</operator> <name>O_RDWR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>O_RDONLY</name></expr>:</case>         <comment type="block">/* read access */</comment>
		<expr_stmt><expr><name>fileaccess</name> <operator>=</operator> <name>GENERIC_READ</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>O_WRONLY</name></expr>:</case>         <comment type="block">/* write access */</comment>
		<expr_stmt><expr><name>fileaccess</name> <operator>=</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fileaccess</name> <operator>|=</operator> <name>FILE_APPEND_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>O_RDWR</name></expr>:</case>           <comment type="block">/* read and write access */</comment>
		<expr_stmt><expr><name>fileaccess</name> <operator>=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fileaccess</name> <operator>=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>FILE_APPEND_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<break>break;</break>
	<default>default:</default>                <comment type="block">/* error, bad flags */</comment>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_FILE_INVALID</name></expr>;</return>
	</block_content>}</block></switch>

        <comment type="block">/* decode open/create method flags */</comment>
	<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_TRUNC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">0</literal></expr>:</case>
	<case>case <expr><name>O_EXCL</name></expr>:</case>            <comment type="block">/* ignore EXCL w/o CREAT */</comment>
		<expr_stmt><expr><name>filecreate</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>O_CREAT</name></expr>:</case>
		<expr_stmt><expr><name>filecreate</name> <operator>=</operator> <name>OPEN_ALWAYS</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
	<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>
		<expr_stmt><expr><name>filecreate</name> <operator>=</operator> <name>CREATE_NEW</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>O_TRUNC</name></expr>:</case>
	<case>case <expr><name>O_TRUNC</name> <operator>|</operator> <name>O_EXCL</name></expr>:</case>  <comment type="block">/* ignore EXCL w/o CREAT */</comment>
		<expr_stmt><expr><name>filecreate</name> <operator>=</operator> <name>TRUNCATE_EXISTING</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr>:</case>
		<expr_stmt><expr><name>filecreate</name> <operator>=</operator> <name>CREATE_ALWAYS</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<comment type="block">/* this can't happen ... all cases are covered */</comment>
		<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_FILE_INVALID</name></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>fileshare</name> <operator>|=</operator> <name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fileattr</name> <operator>=</operator> <name>FILE_ATTRIBUTE_NORMAL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>CreateFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>fileaccess</name></expr></argument>, <argument><expr><name>fileshare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><name>filecreate</name></expr></argument>, <argument><expr><name>fileattr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fh</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_close</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_off_t</name></type> <name>acl_lseek</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_lseek"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>method</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_CUR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>method</name> <operator>=</operator> <name>FILE_CURRENT</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_SET</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>method</name> <operator>=</operator> <name>FILE_BEGIN</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whence</name> <operator>==</operator> <name>SEEK_END</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>method</name> <operator>=</operator> <name>FILE_END</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid whence(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>li</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <call><name>SetFilePointer</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name><name>li</name><operator>.</operator><name>LowPart</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>li</name><operator>.</operator><name>HighPart</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>li</name><operator>.</operator><name>LowPart</name></name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal> <operator>&amp;&amp;</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NO_ERROR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>li</name><operator>.</operator><name>QuadPart</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_read</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>nRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>nRead</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_write</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>nWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWritten</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>nWritten</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_writev</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vector</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>nWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name></expr></argument>,
			<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWritten</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>ACL_VSTREAM_EOF</name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nWritten</name> <operator>!=</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nWritten</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_fflush</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_file_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_file_fsize</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type>  <name>nLow</name></decl>, <decl><type ref="prev"/><name>nHigh</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nLow</name> <operator>=</operator> <call><name>GetFileSize</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nLow</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>nHigh</name></expr>;</expr_stmt>
	<return>return <expr><name>nLow</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* this function comes from MS'S C Library */</comment>

<function><type><name>int</name></type> <name>acl_fstat</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>acl_stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>isdev</name></decl>;</decl_stmt>          <comment type="block">/* 0 for a file, 1 for a device */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* assume good return */</comment>
	<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>bhfi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILETIME</name></type> <name>LocalFTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>SystemTime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>isdev</name> <operator>=</operator> <call><name>GetFileType</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>FILE_TYPE_REMOTE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isdev</name> <operator>!=</operator> <name>FILE_TYPE_DISK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>isdev</name> <operator>==</operator> <name>FILE_TYPE_CHAR</name> <operator>||</operator> <name>isdev</name> <operator>==</operator> <name>FILE_TYPE_PIPE</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isdev</name> <operator>==</operator> <name>FILE_TYPE_CHAR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>_S_IFCHR</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>_S_IFIFO</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_gid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_atime</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_mtime</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_ctime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>isdev</name> <operator>==</operator> <name>FILE_TYPE_CHAR</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulAvail</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>ulAvail</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>_off_t</name><operator>)</operator> <name>ulAvail</name></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><name>_off_t</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>

			<goto>goto <name>done</name>;</goto>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>isdev</name> <operator>==</operator> <name>FILE_TYPE_UNKNOWN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<goto>goto <name>done</name>;</goto>      <comment type="block">/* join common return code */</comment>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<goto>goto <name>done</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* set the common fields
	 */</comment>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_gid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* use the file handle to get all the info about the file */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bhfi</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<goto>goto <name>done</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bhfi</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <operator>(</operator><name>_S_IREAD</name> <operator>+</operator> <operator>(</operator><name>_S_IREAD</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>_S_IREAD</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>_S_IREAD</name><operator>|</operator><name>_S_IWRITE</name><operator>)</operator>
			<operator>+</operator> <operator>(</operator><operator>(</operator><name>_S_IREAD</name><operator>|</operator><name>_S_IWRITE</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator>
			<operator>+</operator> <operator>(</operator><operator>(</operator><name>_S_IREAD</name><operator>|</operator><name>_S_IWRITE</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* set file date fields */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileTimeToLocalFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bhfi</name><operator>.</operator><name>ftLastWriteTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>LocalFTime</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <operator>!</operator><call><name>FileTimeToSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LocalFTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SystemTime</name></expr></argument> )</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<goto>goto <name>done</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wYear</name></name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wMonth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wDay</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wHour</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wMinute</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wSecond</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mtime</name></name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bhfi</name><operator>.</operator><name>ftLastAccessTime</name><operator>.</operator><name>dwLowDateTime</name></name>
		<operator>||</operator><name><name>bhfi</name><operator>.</operator><name>ftLastAccessTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr>)</condition>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileTimeToLocalFileTime</name><argument_list>(
			<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bhfi</name><operator>.</operator><name>ftLastAccessTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>LocalFTime</name></expr></argument> )</argument_list></call>
			<operator>||</operator> <operator>!</operator><call><name>FileTimeToSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LocalFTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SystemTime</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<goto>goto <name>done</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wYear</name></name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wMonth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wDay</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wHour</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wMinute</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wSecond</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_atime</name></name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_atime</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_mtime</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bhfi</name><operator>.</operator><name>ftCreationTime</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>||</operator> <name><name>bhfi</name><operator>.</operator><name>ftCreationTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileTimeToLocalFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>bhfi</name><operator>.</operator><name>ftCreationTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>LocalFTime</name></expr></argument>)</argument_list></call>
			<operator>||</operator> <operator>!</operator><call><name>FileTimeToSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LocalFTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>SystemTime</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<goto>goto <name>done</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wYear</name></name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wMonth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wDay</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wHour</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wMinute</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>SystemTime</name><operator>.</operator><name>wSecond</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_ctime</name></name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_ctime</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_mtime</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>__int64</name><operator>)</operator><operator>(</operator><name><name>bhfi</name><operator>.</operator><name>nFileSizeHigh</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">0x100000000i64</literal><operator>)</operator>
					<operator>+</operator> <operator>(</operator><name>__int64</name><operator>)</operator><operator>(</operator><name><name>bhfi</name><operator>.</operator><name>nFileSizeLow</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <name>_S_IFREG</name></expr>;</expr_stmt>

	<comment type="block">/* On DOS, this field contains the drive number, but
	 * the drive number is not available on this platform.
	 * Also, for UNC network names, there is no drive number.
	 */</comment>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<comment type="block">/* Common return code */</comment>
<label><name>done</name>:</label>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><name>ACL_FILE_HANDLE</name></type> <name>acl_file_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_close</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>close</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_off_t</name></type> <name>acl_lseek</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>acl_off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive>	<expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_LINUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ACL_SUNOS5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive>    <expr><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<return>return <expr><call><name>lseek</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>lseek64</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>lseek</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_read</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>read_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>read</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_write</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>write</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_writev</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>vector</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
	<parameter><decl><type><name>int</name> <name>timeout</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>writev</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>vector</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_file_fflush</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fsync</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_file_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_stat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_file_fsize</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fh</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>fp</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier><name>arg</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>acl_stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_fstat</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>sbuf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS type"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
