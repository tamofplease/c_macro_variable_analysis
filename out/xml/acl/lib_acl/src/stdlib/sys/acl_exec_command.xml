<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/sys/acl_exec_command.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_argv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_exec_command.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Application-specific. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE_TAB</name></cpp:macro>	<cpp:value>" \t"</cpp:value></cpp:define>

<comment type="block">/* exec_command - exec command */</comment>

<function><type><name>void</name></type> <name>acl_exec_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name>   <modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Character filter. In this particular case, we allow space and tab in
	 * addition to the regular character set.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>ok_chars</name><index>[]</index></name> <init>= <expr><literal type="string">"1234567890!@%-_=+:,./"</literal>
				  <literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal>
				  <literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal> <name>SPACE_TAB</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * See if this command contains any shell magic characters.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>command</name><index>[<expr><call><name>strspn</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>ok_chars</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<comment type="block">/*
		 * No shell meta characters found, so we can try to avoid the overhead
		 * of running a shell. Just split the command on whitespace and exec
		 * the result directly.
		 */</comment>
		<expr_stmt><expr><name>argv</name> <operator>=</operator> <call><name>acl_argv_split</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>SPACE_TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>execvp</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_execvp</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * Auch. Perhaps they're using some shell built-in command.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"execvp %s: %s"</literal></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Not really necessary, but...
		 */</comment>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Pass the command to a shell.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>execl</name><argument_list>(<argument><expr><name>ACL_PATH_BSHELL</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"execl %s: %s"</literal></expr></argument>, <argument><expr><name>ACL_PATH_BSHELL</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_execl</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>_execl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"execl %s: %s"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
