<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/acl_vstring.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<comment type="block">/* System libraries. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>			<comment type="block">/* 44BSD stdarg.h uses abort() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vbuf_print.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"charmap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PREALLOC</name></cpp:macro>	<cpp:value>(1024*1024)</cpp:value></cpp:define>

<comment type="block">/* vstring_extend - variable-length string buffer extension policy */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vstring_extend</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>incr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"vstring_extend"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>used</name> <init>= <expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>new_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <name>bp</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: overflow maxlen: %ld, %ld"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>ACL_VBUF_FLAG_EOF</name></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VBUF_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <name>ACL_FILE_INVALID</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_FIXED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_FIXED</name><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: can't extend fixed buffer"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ACL_VBUF_EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Note: vp-&gt;vbuf.len is the current buffer size (both on entry and on
	 * exit of this routine). We round up the increment size to the buffer
	 * size to avoid silly little buffer increments. With really large
	 * strings we might want to abandon the length doubling strategy, and
	 * go to fixed increments.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>INCR_NO_DOUBLE</name></cpp:ifdef>
	<comment type="block">/* below come from redis-server/sds.c/sdsMakeRoomFor, which can
	 * avoid memory double growing too large --- 2015.2.2, zsx
	 */</comment>
	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>incr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&lt;</operator> <name>MAX_PREALLOC</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>new_len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>new_len</name> <operator>+=</operator> <name>MAX_PREALLOC</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>incr</name></expr> ?</condition><then> <expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name></expr> </then><else>: <expr><name>incr</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_len</name> <operator>&gt;</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_SLICE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_realloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>slice</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_DBUF</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_dbuf_pool_free</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>alloc</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
		<decl_stmt><decl><type><name>acl_off_t</name></type> <name>off</name> <init>= <expr><name>new_len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_lseek</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>acl_off_t</name><operator>)</operator> <name>off</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"lseek failed: %s, off: %lld"</literal></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_file_write</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
			<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"write error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_myrealloc</name><argument_list>(<argument><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>bp</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>used</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_put_ready - vbuf callback for write buffer full condition */</comment>

<function><type><name>int</name></type> <name>acl_vstring_put_ready</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>vstring_extend</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_space - vbuf callback to reserve space */</comment>

<function><type><name>int</name></type> <name>acl_vstring_space</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>need</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>bp</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad length %ld"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>need</name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>vstring_extend</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>need</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstring_init</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"acl_vstring_alloc: bad input, len &lt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name>       <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vp-&gt;vbuf.get_ready = acl_vstring_get_ready;
	vp-&gt;vbuf.put_ready = acl_vstring_put_ready;
	vp-&gt;vbuf.space     = acl_vstring_space;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name>        <operator>=</operator> <name>ACL_FILE_INVALID</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstring_free_buf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>munmap</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: munmap error %s"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name> <operator>&amp;&amp;</operator> <name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_SLICE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_DBUF</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_alloc - create variable-length string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstring_slice_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_slice_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>slice</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>slice</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>ACL_VBUF_FLAG_SLICE</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name>       <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vp-&gt;vbuf.get_ready = acl_vstring_get_ready;
	vp-&gt;vbuf.put_ready = acl_vstring_buf_ready;
	vp-&gt;vbuf.space     = acl_vstring_space;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name>        <operator>=</operator> <name>ACL_FILE_INVALID</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_dbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dbuf</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>dbuf</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>ACL_VBUF_FLAG_DBUF</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>dbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name>  <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name>       <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vp-&gt;vbuf.get_ready = acl_vstring_get_ready;
	vp-&gt;vbuf.put_ready = acl_vstring_put_ready;
	vp-&gt;vbuf.space     = acl_vstring_space;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name>         <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name>        <operator>=</operator> <name>ACL_FILE_INVALID</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmap_buf_init</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>acl_lseek</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"lseek failed: %s, off: %ld"</literal></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_file_write</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"write error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>,
		<argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"mmap error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"CreateFileMapping: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	DWORD dwFileOffsetHigh = (DWORD) (offset / (unsigned int) -1);
	DWORD dwFileOffsetLow  = (DWORD) (offset % (unsigned int) -1);
	vp-&gt;vbuf.data = (unsigned char *) MapViewOfFile(vp-&gt;vbuf.hmap,
		FILE_MAP_READ | FILE_MAP_WRITE, dwFileOffsetHigh,
		dwFileOffsetLow, 0);
	*/</comment>
	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"MapViewOfFile error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported yet!"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_mmap_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>init_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstring_mmap_alloc2</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>max_len</name></expr></argument>, <argument><expr><name>init_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__page_size</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_pagesize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_UNIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>getpagesize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__page_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYSTEM_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>dwPageSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__page_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>dwPageSize</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_mmap_alloc2</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>max_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>init_len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstring_mmap_alloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>init_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad length %ld"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>init_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name>offset</name> <operator>%</operator> <name>__page_size</name>  <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__once_control</name></expr></argument>, <argument><expr><name>get_pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>offset</name> <operator>/</operator> <name>__page_size</name><operator>)</operator> <operator>*</operator> <name>__page_size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_len</name> <operator>&lt;</operator> <name>init_len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>init_len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_len</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name>     <operator>=</operator> <name>ACL_VBUF_FLAG_MMAP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name>       <operator>=</operator> <name>init_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vp-&gt;vbuf.get_ready = acl_vstring_get_ready;
	vp-&gt;vbuf.put_ready = acl_vstring_put_ready;
	vp-&gt;vbuf.space     = acl_vstring_space;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name>         <operator>=</operator> <name>max_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name>        <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name>      <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>mmap_buf_init</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_free - destroy variable-length string */</comment>

<function><type><name>void</name></type> <name>acl_vstring_free</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_vstring_free_buf</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_SLICE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_DBUF</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_ctl - modify memory management policy */</comment>

<function><type><name>void</name></type>  <name>acl_vstring_ctl</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstring_ctl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>code</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ACL_VSTRING_CTL_END</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown code: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTRING_CTL_MAXLEN</name></expr>:</case>
			<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad max length %ld"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_truncate - truncate string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_truncate</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_strcpy - copy string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_strcpy</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstring_memcpy</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_strncpy - copy string of limited length */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_strncpy</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>acl_vstring_memcpy</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_strcat - append string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_strcat</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_strncat - append string of limited length */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_strncat</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_memcpy - copy buffer of limited length */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_memcpy</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstring_avail</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): space not enough, avail: %ld, "</literal>
				<literal type="string">"len: %ld"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no space, avail: 0, len: %ld"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_memmove - move buffer of limited length */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_memmove</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>vp</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&gt;=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call>
		<operator>&amp;&amp;</operator> <operator>(</operator><name>src</name> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ACL_VSTRING_SIZE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* ËµÃ÷ÊÇÍ¬Ò»ÄÚ´æÇø¼äµÄÊý¾ÝÒÆ¶¯ */</comment>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>vp</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ËµÃ÷²»ÊÇÍ¬Ò»ÄÚ´æÇø¼äµÄÊý¾ÝÒÆ¶¯ */</comment>

	<expr_stmt><expr><call><name>acl_vstring_free_buf</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_SLICE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>slice</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>ACL_VBUF_FLAG_DBUF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>mmap_buf_init</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if type="elseif">else if <condition>(<expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>fd</name></name> <operator>!=</operator> <name>ACL_FILE_INVALID</name> <operator>&amp;&amp;</operator> <name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>hmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>mmap_buf_init</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_memcat - append buffer of limited length */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_memcat</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">100000000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): len=%ld maybe too large"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstring_avail</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): space not enough, avail: %ld, "</literal>
				<literal type="string">"len: %ld"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no space, avail: 0, len: %ld"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_memchr - locate byte in buffer */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstring_memchr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</init>
		<condition><expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_strstr - locate byte in buffer */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstring_strstr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>startn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>needle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>needle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</init>
		<condition><expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <operator>*</operator><name>np</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>np</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>startn</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>np</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>needle</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>np</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>startn</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_strcasestr - locate byte in buffer */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstring_strcasestr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>maptolower</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>startn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>needle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>needle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</init>
		<condition><expr><name>cp</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cm</name><index>[<expr><operator>*</operator><name>cp</name></expr>]</index></name> <operator>!=</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>np</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>np</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>startn</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>np</name> <operator>&amp;&amp;</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>cp</name></expr>]</index></name> <operator>==</operator> <name><name>cm</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>needle</name><operator>)</operator></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>np</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>np</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>startn</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_rstrstr - locate byte in buffer */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstring_rstrstr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>needle_end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>needle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>needle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>needle_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>needle</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init>
		<condition><expr><name>cp</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <operator>*</operator><name>np</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>--</operator><name>np</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name></expr>)</condition> <block>{<block_content>
					<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>np</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <operator>*</operator><name>needle_end</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>np</name> <operator>=</operator> <name>needle_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>np</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_rstrcasestr - locate byte in buffer */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_vstring_rstrcasestr</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>needle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cm</name> <init>= <expr><name>maptolower</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>np</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>needle_end</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>needle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>needle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>needle_end</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>needle</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init>
		<condition><expr><name>cp</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>np</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>np</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>--</operator><name>np</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name></expr>)</condition> <block>{<block_content>
					<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name><operator>)</operator></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>np</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>np</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <name><name>cm</name><index>[<expr><operator>*</operator><name>needle_end</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>np</name> <operator>=</operator> <name>needle_end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>np</name> <operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>needle</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_insert - insert text into string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_insert</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstring_insert"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s(%d): bad start %ld"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Move the existing content and copy the new content.
	 */</comment>
	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstring_avail</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name> <operator>+</operator> <name>len</name></expr></argument>,
			<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr></argument>,
			<argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_prepend - prepend text to string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_prepend</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>new_len</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Move the existing content and copy the new content.
	 */</comment>
	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <operator>(</operator><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_vstring_avail</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_export - VSTRING to bare string */</comment>

<function><type><name>char</name>   <modifier>*</modifier></type><name>acl_vstring_export</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>cp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_import - bare string to vstring */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_import</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>vp</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>vp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>alloc</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_vstring_glue</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vp-&gt;vbuf.get_ready = acl_vstring_get_ready;
	vp-&gt;vbuf.put_ready = acl_vstring_put_ready;
	vp-&gt;vbuf.space     = acl_vstring_space;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_charat -- get the position char */</comment>

<function><type><name>char</name></type> <name>acl_vstring_charat</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstring_charat"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid input"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): offset(%d) &gt;= strlen(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>ACL_VBUF_CHARAT</name><argument_list>(<argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_sprintf - formatted string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_sprintf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>acl_vstring_vsprintf</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_vsprintf - format string, vsprintf-like interface */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_vsprintf</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vbuf_print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_sprintf_append - append formatted string */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_sprintf_append</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>acl_vstring_vsprintf_append</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_vsprintf_append - append format string, vsprintf-like interface */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_vsprintf_append</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_vbuf_print</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstring_sprintf_prepend - format + prepend string, vsprintf-like interface */</comment>

<function><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_vstring_sprintf_prepend</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>old_len</name> <init>= <expr><operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>result_len</name></decl>;</decl_stmt>

	<comment type="block">/* Construct: old|new|free */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>acl_vstring_vsprintf_append</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result_len</name> <operator>=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Construct: old|new|old|free */</comment>
	<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>old_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* avoid dangling pointer */</comment>
	<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Construct: new|old|free */</comment>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>old_len</name></expr></argument>, <argument><expr><name>result_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_AT_OFFSET</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>result_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_buffer_gets_nonl</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_buffer_gets_nonl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pbegin</name> <init>= <expr><operator>*</operator><name>src</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dlen(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>pbegin</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>pbegin</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>src</name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>  <comment type="block">/* ÒÆ¶¯ *src Ö¸ÕëÎ»ÖÃ */</comment>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* ÒÆ¶¯ *src Ö¸ÕëÎ»ÖÃ */</comment>
	<expr_stmt><expr><name>pend</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

	<comment type="block">/* È¥³ý¶àÓàµÄ \r\n */</comment>
	<while>while <condition>(<expr><name>pend</name> <operator>&gt;=</operator> <name>pbegin</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pend</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pend</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>pend</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>&lt;</operator> <name>pbegin</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷ data ÖÐÖ»°üÀ¨ \r, \n */</comment>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>vp</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>pbegin</name></expr></argument>, <argument><expr><name>pend</name> <operator>-</operator> <name>pbegin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>acl_buffer_gets</name><parameter_list>(<parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_buffer_gets"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dlen(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>src</name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <operator>*</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* ÐÞ¸Ä *src Ö¸ÕëÎ»ÖÃ */</comment>
	<return>return <expr><name>vp</name></expr>;</return>
</block_content>}</block></function>
</unit>
