<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/acl_vsprintf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vsprintf.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZEROPAD</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>		<comment type="block">/* pad with zero */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>		<comment type="block">/* unsigned/signed long */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUS</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>		<comment type="block">/* show plus */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>		<comment type="block">/* space if plus */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT</name></cpp:macro>	<cpp:value>16</cpp:value></cpp:define>		<comment type="block">/* left justified */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECIAL</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>		<comment type="block">/* 0x */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LARGE</name></cpp:macro>	<cpp:value>64</cpp:value></cpp:define>		<comment type="block">/* use 'ABCDEF' instead of 'abcdef' */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>number</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator> <name>buf</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator> <name>end</name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>int</name> <name>num</name></expr></argument>,
	<argument><expr><name>int</name> <name>base</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>, <argument><expr><name>int</name> <name>precision</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>char</name> <modifier>*</modifier> <name>number</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator> <name>buf</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator> <name>end</name></expr></argument>, <argument><expr><name>long</name> <name>int</name> <name>num</name></expr></argument>,
	<argument><expr><name>int</name> <name>base</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>, <argument><expr><name>int</name> <name>precision</name></expr></argument>, <argument><expr><name>int</name> <name>type</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>sign</name></decl>,<decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">66</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>digits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>small_digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>large_digits</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>digits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>LARGE</name><operator>)</operator></expr> ?</condition><then> <expr><name>large_digits</name></expr> </then><else>: <expr><name>small_digits</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>LEFT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <operator>~</operator><name>ZEROPAD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>base</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>base</name></expr></argument> &gt;</argument_list></name> <literal type="number">36</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ZEROPAD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SIGN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>-</operator><name>num</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>PLUS</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SPACE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SPECIAL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<while>while <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
			<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>__res</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>__res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <name>num</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>base</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <name>num</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>base</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>__res</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>__res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <name>num</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>base</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>int</name><operator>)</operator> <name>num</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name>base</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>digits</name><index>[<expr><name>__res</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>precision</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>precision</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>precision</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name><operator>&amp;</operator><operator>(</operator><name>ZEROPAD</name><operator>+</operator><name>LEFT</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<while>while<condition>(<expr><name>size</name><operator>--</operator><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SPECIAL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>base</name><operator>==</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>base</name><operator>==</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>digits</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>precision</name><operator>--</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>i</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<while>while <condition>(<expr><name>size</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_atoi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>*</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>s</name><operator>)</operator><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
* vsnprintf - Format a string and place it in a buffer
* @buf: The buffer to place the result into
* @size: The size of the buffer, including the trailing null space
* @fmt: The format string to use
* @args: Arguments for the format string
*
* Call this function if you are already dealing with a va_list.
* You probably want snprintf instead.
 */</comment>
<function><type><name>int</name></type> <name>acl_vsnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>		<comment type="block">/* flags to number() */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>field_width</name></decl>;</decl_stmt>	<comment type="block">/* width of output field */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>precision</name></decl>;</decl_stmt>		<comment type="block">/* min. # of digits for integers; max
				   number of chars for from string */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>qualifier</name></decl>;</decl_stmt>		<comment type="block">/* 'h', 'l', or 'L' for integer fields */</comment>
				<comment type="block">/* 'z' support added 23/7/1999 S.H.    */</comment>
				<comment type="block">/* 'z' changed to 'Z' --davidm 1/25/99 */</comment>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>end</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>buf</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>fmt</name></expr> ;</condition> <incr><expr><operator>++</operator><name>fmt</name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* process flags */</comment>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<label><name>repeat</name>:</label>
			<expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>		<comment type="block">/* this also skips first '%' */</comment>
			<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
				<case>case <expr><literal type="char">'-'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LEFT</name></expr>;</expr_stmt> <goto>goto <name>repeat</name>;</goto>
				<case>case <expr><literal type="char">'+'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>PLUS</name></expr>;</expr_stmt> <goto>goto <name>repeat</name>;</goto>
				<case>case <expr><literal type="char">' '</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SPACE</name></expr>;</expr_stmt> <goto>goto <name>repeat</name>;</goto>
				<case>case <expr><literal type="char">'#'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SPECIAL</name></expr>;</expr_stmt> <goto>goto <name>repeat</name>;</goto>
				<case>case <expr><literal type="char">'0'</literal></expr>:</case> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ZEROPAD</name></expr>;</expr_stmt> <goto>goto <name>repeat</name>;</goto>
			</block_content>}</block></switch>

		<comment type="block">/* get field width */</comment>
		<expr_stmt><expr><name>field_width</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>field_width</name> <operator>=</operator> <call><name>skip_atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>
			<comment type="block">/* it's the next argument */</comment>
			<expr_stmt><expr><name>field_width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>field_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>field_width</name> <operator>=</operator> <operator>-</operator><name>field_width</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LEFT</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* get the precision */</comment>
		<expr_stmt><expr><name>precision</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>	
			<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>skip_atoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>
				<comment type="block">/* it's the next argument */</comment>
				<expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* get the conversion qualifier */</comment>
		<expr_stmt><expr><name>qualifier</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <operator>*</operator><name>fmt</name> <operator>==</operator> <literal type="char">'L'</literal> <operator>||</operator> <operator>*</operator><name>fmt</name> <operator>==</operator><literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>qualifier</name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* default base */</comment>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<while>while <condition>(<expr><operator>--</operator><name>field_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			<while>while <condition>(<expr><operator>--</operator><name>field_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			</block_content>}</block></while>
			<continue>continue;</continue>

		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;NULL&gt;"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_strnlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>field_width</name><operator>--</operator></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></if></if_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>field_width</name><operator>--</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			</block_content>}</block></while>
			<continue>continue;</continue>

		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>field_width</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>field_width</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ZEROPAD</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
			<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>number</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
					<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>field_width</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>number</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
					<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>field_width</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<continue>continue;</continue>

		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<comment type="block">/* FIXME:
			* What does C99 say about the overflow case here? */</comment>
			<if_stmt><if>if <condition>(<expr><name>qualifier</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>long</name> <modifier>*</modifier></type> <name>ip</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>str</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qualifier</name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type> <name>ip</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>str</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>*</operator><name>ip</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>str</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<continue>continue;</continue>

		<case>case <expr><literal type="char">'%'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			<continue>continue;</continue>

			<comment type="block">/* integer number formats - set up the flags and "break" */</comment>
		<case>case <expr><literal type="char">'o'</literal></expr>:</case>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><literal type="char">'X'</literal></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LARGE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'x'</literal></expr>:</case>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
		<case>case <expr><literal type="char">'i'</literal></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SIGN</name></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'u'</literal></expr>:</case>
			<break>break;</break>

		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><operator>--</operator><name>fmt</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></switch>
		<if_stmt><if>if <condition>(<expr><name>qualifier</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>args</argument>, <argument>long int</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>qualifier</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>args</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIGN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>long</name><operator>)</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qualifier</name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>qualifier</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIGN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>short</name><operator>)</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>num</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>args</argument>, <argument>unsigned int</argument>)</argument_list></macro></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIGN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>int</name><operator>)</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>number</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
				<argument><expr><name>field_width</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* don't write out a null byte if the buf size is zero */</comment>
		<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* the trailing null byte doesn't count towards the total
	* ++str;
	*/</comment>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>str</name> <operator>-</operator> <name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * snprintf - Format a string and place it in a buffer
 * @buf: The buffer to place the result into
 * @size: The size of the buffer, including the trailing null space
 * @fmt: The format string to use
 * @...: Arguments for the format string
 */</comment>
<function><type><name>int</name></type> <name>acl_snprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name><operator>=</operator><call><name>acl_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>size</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * vsprintf - Format a string and place it in a buffer
 * @buf: The buffer to place the result into
 * @fmt: The format string to use
 * @args: Arguments for the format string
 *
 * Call this function if you are already dealing with a va_list.
 * You probably want sprintf instead.
 */</comment>
<function><type><name>int</name></type> <name>acl_vsprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>acl_vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFUL</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * sprintf - Format a string and place it in a buffer
 * @buf: The buffer to place the result into
 * @fmt: The format string to use
 * @...: Arguments for the format string
 */</comment>
<function><type><name>int</name></type> <name>acl_sprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name><operator>=</operator><call><name>acl_vsprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><name>fmt</name></expr></argument>,<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

</unit>
