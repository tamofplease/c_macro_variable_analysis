<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/acl_getopt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_getopt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_optarg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* Global argument pointer. */</comment>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_optind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* Global argv index. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>scan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* Private scan pointer. */</comment>

<function><type><name>void</name></type> <name>acl_getopt_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_getopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optstring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>place</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>acl_optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>scan</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>acl_optind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>acl_optind</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
		<if_stmt><if>if <condition>(<expr><name>acl_optind</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name><name>argv</name><index>[<expr><name>acl_optind</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><name>acl_optind</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>acl_optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>acl_optind</name><operator>++</operator></expr>;</expr_stmt>
			<return>return<expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	
		<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>acl_optind</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>acl_optind</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>scan</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>place</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>optstring</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>place</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: unknown option -%c\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return<expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>place</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>place</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>acl_optarg</name> <operator>=</operator> <name>scan</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>acl_optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>acl_optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>acl_optind</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>acl_optind</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: -%c argument missing\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return<expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return<expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
