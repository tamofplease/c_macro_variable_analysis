<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/acl_chunk_chain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_ring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_chunk_chain.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>ACL_CHUNK</name> <block>{
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>from</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type>  <name>dlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ACL_RING</name></type>   <name>entry</name></decl>;</decl_stmt>          <comment type="block">/* linkage */</comment>
}</block></struct></type> <name>ACL_CHUNK</name>;</typedef>

<struct>struct <name>ACL_CHAIN</name> <block>{
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>from_next</name></decl>;</decl_stmt>       <comment type="block">/* µ±Ç°Á¬ÐøÊý¾ÝÁ´µÄÎ»ÖÃ */</comment>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>off_begin</name></decl>;</decl_stmt>       <comment type="block">/* Æ«ÒÆÁ¿ÆðÊ¼Î»ÖÃ */</comment>

	<decl_stmt><decl><type><name>ACL_RING</name></type>     <name>ring</name></decl>;</decl_stmt>         <comment type="block">/* ¶à¸ö DBUF Êý¾Ý¿é×é³ÉµÄÊý¾ÝÁ´ */</comment>
	<decl_stmt><decl><type><name>ACL_VSTRING</name></type>  <name>sbuf</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>ACL_CHUNK</name> <modifier>*</modifier></type><name>acl_chunk_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><operator>(</operator><name>ACL_CHUNK</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CHUNK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name>  <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name>   <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymemdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>chunk</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_chunk_free</name><parameter_list>(<parameter><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>acl_chunk_merge</name><parameter_list>(<parameter><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdata</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>to</name> <init>= <expr><name>from</name> <operator>+</operator> <name>dlen</name></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>chunk_to</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* sanity check: ±ØÐë±£Ö¤ÐÂÌíÊý¾Ý±ØÐëÓëÊý¾Ý¿éÓÐÊý¾Ý½»²æ */</comment>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<comment type="block">/* from &lt; chunk-&gt;from &lt;= to */</comment>

		<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* from &lt; chunk-&gt;from &lt;= to &lt; chunk_to */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>tmpbuf</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>+</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pdata</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>-</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* from &lt; chunk-&gt;from &lt; chunk_to &lt;= to */</comment>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mymemdup</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* chunk-&gt;from &lt;= from &lt;= chunk_to */</comment>
		<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* chunk-&gt;from &lt;= from &lt;= chunk_to &lt; to */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>chunk_to</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>tmpbuf</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>+</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pdata</name> <operator>+=</operator> <name>chunk_to</name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>to</name> <operator>-</operator> <name>chunk_to</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<comment type="block">/* chunk-&gt;from no changed */</comment>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* else: chunk-&gt;from &lt;= from &lt;= to &lt;= chunk_to, do nothing */</comment>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* else: chunk-&gt;from &lt;= chunk_to &lt; from &lt;= to, do nothing */</comment>
</block_content>}</block></function>

<function><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>acl_chain_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>init_size</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>off_begin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>chain</name> <operator>=</operator> <operator>(</operator><name>ACL_CHAIN</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CHAIN</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><name>init_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off_begin</name></name> <operator>=</operator> <name>off_begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name> <operator>=</operator> <name>off_begin</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>chain</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_chain_free</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ring_iter</name> <operator>=</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>ring_iter</name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_chunk_free</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_vstring_free_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_chain_set_from_next</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>from_next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name> <operator>=</operator> <name>from_next</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_chain_reset</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>off_begin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>off_begin</name></name> <operator>=</operator> <name>off_begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name> <operator>=</operator> <name>off_begin</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ACL_VSTRING_RESET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_chain_from_next</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>acl_int64</name></type> <name>acl_chain_off_begin</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>chain</name><operator>-&gt;</operator><name>off_begin</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_chain_data</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>acl_vstring_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_chain_data_len</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_chain_size</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;chain-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_chain_chunk_data_len</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;chain-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>chunk_iter</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_chain_add</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
	<parameter><decl><type><name>acl_int64</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_chain_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk_iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chunk</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chunk_saved</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING</name> <modifier>*</modifier></type><name>ring_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ring_next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>ring_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>chunk_to</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>to</name> <operator>=</operator> <name>from</name> <operator>+</operator> <name>dlen</name></expr>;</expr_stmt>
	<comment type="block">/* ¹ýÂËµôÖØ¸´Êý¾Ý */</comment>
	<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): past data, to("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") &lt; from_next("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">"), from="</literal> <name>ACL_FMT_I64D</name> <literal type="string">", dlen=%d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* make sure: from &gt;= chain-&gt;from_next */</comment>
	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name> <operator>-</operator> <name>from</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dlen</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pdata</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ½«Á¬ÐøµÄÊý¾Ý¿é¿½±´ÖÁÁ¬½ÓÊý¾Ý»º³åÇøÖÐ */</comment>
		<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name> <operator>+=</operator> <name>dlen</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>chunk_iter</name> <operator>=</operator> <call><name>ACL_RING_FIRST_APPL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>acl_int64</name></type> <name>to_first</name></decl>;</decl_stmt>

			<comment type="block">/* Èç¹ûÓöµ½·ÇÁ¬½Ó¿éÔòÍË³öÑ­»· */</comment>
			<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/* ´¦ÀíÁ¬½ÓÊý¾Ý¿éµÄÇé¿ö */</comment>

			<comment type="block">/* È¥µô¸Ã½»²æÊý¾Ý¿éµÄÁ´½Ó½áµã */</comment>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_ring_pop_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>to_first</name> <operator>=</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>from</name></name> <operator>+</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>

			<comment type="block">/* Èç¹ûÐÂÊý¾Ý¿é°üº¬¾ÉÊý¾Ý¿é£¬ÔòÈ¥³ýÖØ¸´µÄ¾ÉÊý¾Ý¿é */</comment>
			<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;=</operator> <name>to_first</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_chunk_free</name><argument_list>(<argument><expr><name>chunk_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Êý¾Ý¿é½»²æÇé¿ö */</comment>

			<comment type="block">/* from &lt;= to &lt; to_first
			 * chunk_iter-&gt;from &lt;= from &lt;= to &lt; to_first
			 * or:
			 * from &lt;= chunk_iter-&gt;from &lt;= to &lt; to_first
			 */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name>to_first</name> <operator>-</operator> <name>to</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pdata</name> <operator>=</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>acl_chunk_free</name><argument_list>(<argument><expr><name>chunk_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></while>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ´¦Àí¾Ý¿é²»Á¬ÐøÊýµÄÌí¼ÓÇéÐÎ */</comment>

	<comment type="block">/* chain-&gt;from_next &lt; from &lt;= to*/</comment>
	<expr_stmt><expr><name>chunk_iter</name> <operator>=</operator> <call><name>ACL_RING_FIRST_APPL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>chunk_iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷ÊÇµÚÒ»¸öÊý¾Ý¿é */</comment>
		<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>acl_chunk_new</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>chunk_saved</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>ring_iter</argument>, <argument>&amp;chain-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>chunk_iter</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_to</name> <operator>=</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>from</name></name> <operator>+</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>

		<comment type="block">/* chunk_iter-&gt;from &lt;= to */</comment>
		<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>chunk_iter</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* ËµÃ÷ÐÂÊý¾Ý¿éÓëÊý¾ÝÁ´ÖÐµÄÊý¾Ý¿éÎÞ½»¼¯ */</comment>
				<comment type="block">/* from &lt;= to &lt; chunk_iter-&gt;from &lt;= chunk_to */</comment>
				<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>acl_chunk_new</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Ç°²åÊý¾Ý¿é½áµã */</comment>
				<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chunk_iter</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* from &lt;= chunk_iter-&gt;from &lt;= to */</comment>
			<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;=</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* from &lt;= chunk_iter-&gt;from &lt;= to &lt;= chunk_to */</comment>
				<expr_stmt><expr><call><name>acl_chunk_merge</name><argument_list>(<argument><expr><name>chunk_iter</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* else: from &lt;= chunk_iter-&gt;from &lt;= chunk_to &lt; to */</comment>
			<comment type="block">/* ½»¼¯Êý¾Ý¿ÉÄÜ´æÔÚÓÚ¶à¸öÊý¾Ý½áµãÖÐ */</comment>
			<expr_stmt><expr><name>chunk_saved</name> <operator>=</operator> <name>chunk_iter</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* chunk_iter-&gt;from &lt; from &lt;= chunk_to */</comment>
			<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;=</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* chunk_iter-&gt;from &lt;= from &lt;= to &lt;= chunk_to */</comment>
				<expr_stmt><expr><call><name>acl_chunk_merge</name><argument_list>(<argument><expr><name>chunk_iter</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* else: chunk_iter-&gt;from &lt; from &lt;= chunk_to &lt; to */</comment>
			<comment type="block">/* ½»¼¯Êý¾Ý¿ÉÄÜ´æÔÚÓÚ¶à¸öÊý¾Ý½áµãÖÐ */</comment>
			<expr_stmt><expr><name>chunk_saved</name> <operator>=</operator> <name>chunk_iter</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* else: from &gt; chunk_to, continue */</comment>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>chunk_saved</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷ÐÂÊý¾Ý¿éÓëÊý¾ÝÁ´ÖÐµÄÊý¾Ý¿éÎÞ½»¼¯ */</comment>
		<comment type="block">/* from &lt;= to &lt; chunk_iter-&gt;from &lt;= chunk_to */</comment>
		<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>acl_chunk_new</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Ç°²åÊý¾Ý¿é½áµã */</comment>
		<expr_stmt><expr><call><name>acl_ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* from &lt;= chunk_iter-&gt;from &lt;= chunk_to &lt; to
	 * or:
	 * chunk_iter-&gt;from &lt; from &lt;= chunk_to &lt; to
	 */</comment>
	<expr_stmt><expr><call><name>acl_chunk_merge</name><argument_list>(<argument><expr><name>chunk_saved</name></expr></argument>, <argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ring_next</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>ring_next</name> <operator>!=</operator> <operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>ring</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name>ring_next</name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<comment type="block">/* to &gt;= chunk-&gt;from */</comment>
		<expr_stmt><expr><name>chunk_to</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;=</operator> <name>chunk_to</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* from &lt; chunk-&gt;from &lt;= chunk_to &lt;= to
			 * or:
			 * chunk_iter-&gt;from &lt; from &lt; chunk_to &lt;= to
			 */</comment>
			<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <name>ring_next</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ring_next</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>ring_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_chunk_free</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* from &lt;= chunk-&gt;from &lt; to &lt; chunk_to
		 * or:
		 * chunk_iter-&gt;from &lt; from &lt; to &lt; chunk_to
		 */</comment>
		<expr_stmt><expr><call><name>acl_chunk_merge</name><argument_list>(<argument><expr><name>chunk_saved</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ring_ptr</name> <operator>=</operator> <name>ring_next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ring_next</name> <operator>=</operator> <call><name>acl_ring_succ</name><argument_list>(<argument><expr><name>ring_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_ring_detach</name><argument_list>(<argument><expr><name>ring_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_chunk_free</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_chain_list</name><parameter_list>(<parameter><decl><type><name>ACL_CHAIN</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_RING_ITER</name></type> <name>ring_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CHUNK</name> <modifier>*</modifier></type><name>chunk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>chunk_to</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"from="</literal> <name>ACL_FMT_I64D</name> <literal type="string">", next to="</literal> <name>ACL_FMT_I64D</name> <literal type="string">" , dlen=%d\r\n"</literal></expr></argument>,
			<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>off_begin</name></name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>from_next</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>chain</name><operator>-&gt;</operator><name>sbuf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>acl_ring_foreach</name><argument_list>(<argument>ring_iter</argument>, <argument>&amp;chain-&gt;ring</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>chunk</name> <operator>=</operator> <call><name>ACL_RING_TO_APPL</name><argument_list>(<argument><expr><name><name>ring_iter</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>ACL_CHUNK</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_to</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>from</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"from="</literal> <name>ACL_FMT_I64D</name> <literal type="string">", next to="</literal> <name>ACL_FMT_I64D</name> <literal type="string">", dlen=%d\r\n"</literal></expr></argument>,
			<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>from</name></name></expr></argument>, <argument><expr><name>chunk_to</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>chunk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
