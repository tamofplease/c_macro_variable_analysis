<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/acl_myflock.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_myflock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>  <comment type="block">/* printf() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_HAS_FCNTL_LOCK</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_HAS_FLOCK_LOCK</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* acl_myflock - lock/unlock entire open file */</comment>

<function><type><name>int</name></type> <name>acl_myflock</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock_style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_FLOCK_OP_BITS</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>operation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"myflock: improper operation type: 0x%x"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>lock_style</name></expr>)</condition> <block>{<block_content>

	<comment type="block">/*
	 * flock() does exactly what we need. Too bad it is not standard.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_HAS_FLOCK_LOCK</name></cpp:ifdef>
	<case>case <expr><name>ACL_FLOCK_STYLE_FLOCK</name></expr>:</case>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>lock_ops</name><index>[]</index></name> <init>= <expr><block>{
			<expr><name>LOCK_UN</name></expr>, <expr><name>LOCK_SH</name></expr>, <expr><name>LOCK_EX</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
			<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>LOCK_SH</name> <operator>|</operator> <name>LOCK_NB</name></expr>, <expr><name>LOCK_EX</name> <operator>|</operator> <name>LOCK_NB</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>lock_ops</name><index>[<expr><name>operation</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * fcntl() is standard and does more than we need, but we can handle
	 * it.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_HAS_FCNTL_LOCK</name></cpp:ifdef>
	<case>case <expr><name>ACL_FLOCK_STYLE_FCNTL</name></expr>:</case>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>     <name>request</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>lock_ops</name><index>[]</index></name> <init>= <expr><block>{
			<expr><name>F_UNLCK</name></expr>, <expr><name>F_RDLCK</name></expr>, <expr><name>F_WRLCK</name></expr>
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name><name>lock_ops</name><index>[<expr><name>operation</name> <operator>&amp;</operator> <operator>~</operator><name>ACL_FLOCK_OP_NOWAIT</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>request</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr> ?</condition><then> <expr><name>F_SETLK</name></expr> </then><else>: <expr><name>F_SETLKW</name></expr></else></ternary></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>status</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name>request</name> <operator>==</operator> <name>F_SETLKW</name>
			<operator>&amp;&amp;</operator> <operator>(</operator><call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ACL_EINTR</name>
			    <operator>||</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ENOLCK</name>
				<operator>||</operator> <call><name>acl_last_error</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EDEADLK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
		<break>break;</break>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<default>default:</default>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"myflock: unsupported lock style: 0x%x"</literal></expr></argument>, <argument><expr><name>lock_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Return a consistent result. Some systems return EACCES when a lock is
	 * taken by someone else, and that would complicate error processing.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name>error</name> <init>= <expr><call><name>acl_last_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <name>ACL_EAGAIN</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>ACL_EWOULDBLOCK</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_set_error</name><argument_list>(<argument><expr><name>ACL_EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>status</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>USE_LOCK_FILE</name></cpp:ifdef>
<comment type="block">/* use LockFile/UnlockFile */</comment>
<function><type><name>int</name></type> <name>acl_myflock</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>lock_style</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_myflock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lock_op</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_FLOCK_OP_BITS</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>operation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"myflock: improper operation type: 0x%x"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>lock_op</name> <operator>=</operator> <name>operation</name> <operator>&amp;</operator> <operator>~</operator><name>ACL_FLOCK_OP_NOWAIT</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock_op</name> <operator>==</operator> <name>ACL_FLOCK_OP_NONE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>UnlockFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lock_op</name> <operator>==</operator> <name>ACL_FLOCK_OP_SHARED</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>LockFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lock_op</name> <operator>==</operator> <name>ACL_FLOCK_OP_EXCLUSIVE</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>LockFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid lock_op(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>lock_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* use LockFileEx/UnlockFileEx */</comment>
<function><type><name>int</name></type> <name>acl_myflock</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>lock_style</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_myflock"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>lock_op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ovlp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <operator>(</operator><name>ACL_FLOCK_OP_BITS</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>operation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"myflock: improper operation type: 0x%x"</literal></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ovlp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ovlp</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>lock_op</name> <operator>=</operator> <name>operation</name> <operator>&amp;</operator> <operator>~</operator><name>ACL_FLOCK_OP_NOWAIT</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>lock_op</name> <operator>==</operator> <name>ACL_FLOCK_OP_NONE</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>UnlockFileEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unlock error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lock_op</name> <operator>==</operator> <name>ACL_FLOCK_OP_SHARED</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LOCKFILE_FAIL_IMMEDIATELY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): lock error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lock_op</name> <operator>==</operator> <name>ACL_FLOCK_OP_EXCLUSIVE</name></expr>)</condition> <block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>LOCKFILE_EXCLUSIVE_LOCK</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LOCKFILE_FAIL_IMMEDIATELY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>LockFileEx</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>operation</name> <operator>&amp;</operator> <name>ACL_FLOCK_OP_NOWAIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): lock error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid lock_op(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>lock_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* #if 0 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


</unit>
