<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/memory/acl_dbuf_pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_dbuf_pool.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>ACL_DBUF</name> <block>{
        <decl_stmt><decl><type><name><name>struct</name> <name>ACL_DBUF</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type>  <name>used</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type>  <name>keep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ACL_DBUF</name>;</typedef>

<struct>struct <name>ACL_DBUF_POOL</name> <block>{
        <decl_stmt><decl><type><name>size_t</name></type> <name>block_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>huge</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>acl_dbuf_pool_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>block_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>page_size</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>page_size</name> <operator>=</operator> <call><name>getpagesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYSTEM_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>page_size</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>dwPageSize</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>page_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>page_size</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>page_size</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>block_size</name> <operator>/</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>page_size</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>page_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>page_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>page_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* xxx: ÎªÁË¾¡Á¿±£Ö¤ÔÚµ÷ÓÃ acl_mymalloc ·ÖÅäÄÚ´æÊ±ÎªÄÚ´æÒ³µÄÕûÊý±¶£¬
	 * ÐèÒª¼õÈ¥ sizeof(ACL_DBUF) ºÍ 16 ×Ö½Ú£¬ÆäÖÐ 16 ×Ö½ÚÊÇ acl_mymalloc
	 * ÄÚ²¿¸øÃ¿¸öÄÚ´æ¿é¶îÍâÌí¼ÓµÄ¿ØÖÆÍ·£¬ÔÚ acl_mymalloc ÄÚ²¿ 16 ×Ö½ÚÎª£º
	 * offsetof(MBLOCK, u.payload[0])
	 */</comment>
	<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">16</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DBUF</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_VALLOC</name></cpp:ifdef>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_DBUF_POOL</name><operator>*</operator><operator>)</operator> <call><name>valloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ACL_DBUF_POOL</name></expr></argument>)</argument_list></sizeof>
			<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DBUF</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <operator>(</operator><name>ACL_DBUF_POOL</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ACL_DBUF_POOL</name></expr></argument>)</argument_list></sizeof>
			<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DBUF</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>huge</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name>       <operator>=</operator> <operator>(</operator><name>ACL_DBUF</name><operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>keep</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>count</name></name>      <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dbuf_pool_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>tmp</name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>huge</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_VALLOC</name></cpp:ifdef>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_VALLOC</name></cpp:ifdef>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dbuf_pool_reset</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d) off(%ld) &gt; pool-&gt;off(%ld)"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>off</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>off</name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Èç¹ûµ±Ç°ÄÚ´æ¿éÓÐ±£ÁôÄÚ´æÇø£¬Ôò±£ÁôÕû¸öÄÚ´æ¿é */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* ¼ÆËãµ±Ç°ÄÚ´æ¿é±»Ê¹ÓÃµÄÄÚ´æ´óÐ¡ */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

		<comment type="block">/* µ± off Ïà¶ÔÆ«ÒÆÁ¿ÔÚµ±Ç°ÄÚ´æ¿éÊ±£¬ÔòÍË³öÑ­»· */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;=</operator> <name>off</name> <operator>+</operator> <name>n</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <name><name>pool</name><operator>-&gt;</operator><name>off</name></name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name>  <operator>=</operator> <name>off</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ³ýÍ·²¿½ÚµãÍâ£¬ÖÁÉÙÔÙ±£ÁôÒ»¸ö¿ÕÏÐµÄ½Úµã£¬ÒÔ±ãÖØ¸´Ê¹ÓÃ */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><operator>(</operator><name>ACL_DBUF</name><operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name>        <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ±£Áôµ±Ç°ÄÚ´æ¿éÖ¸ÕëÒÔ±ãÓÚÏÂÃæ½øÐÐÊÍ·Å */</comment>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
		<comment type="block">/* Ö¸ÏòÏÂÒ»¸öÄÚ´æ¿éµØÖ· */</comment>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>

		<comment type="block">/* off ÎªÏÂÒ»¸öÄÚ´æ¿éµÄ addr ËùÔÚµÄÏà¶ÔÆ«ÒÆÎ»ÖÃ  */</comment>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator><name>n</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>huge</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_VALLOC</name></cpp:ifdef>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dbuf_pool_free</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>addr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name> <init>= <expr><name>iter</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>used</name></name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d), not found addr: %p"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>used</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d), used(%d) &lt; 0"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>iter</name><operator>-&gt;</operator><name>keep</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* should free the ACL_DBUF block */</comment>

	<if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name> <operator>-=</operator> <name><name>iter</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name><name>iter</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>huge</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_DBUF</name> <modifier>*</modifier></type><name>acl_dbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>USE_VALLOC</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>dbuf</name> <init>= <expr><operator>(</operator><name>ACL_DBUF</name><operator>*</operator><operator>)</operator> <call><name>valloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DBUF</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>dbuf</name> <init>= <expr><operator>(</operator><name>ACL_DBUF</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DBUF</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>dbuf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>keep</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>dbuf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>dbuf</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>huge</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>dbuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_dbuf_pool_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>dbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>length</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>length</name> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <call><name>acl_dbuf_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <call><name>acl_dbuf_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>addr</name></name>
		<operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>+</operator> <name>length</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <call><name>acl_dbuf_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>dbuf</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>dbuf</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>dbuf</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>off</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dbuf</name><operator>-&gt;</operator><name>used</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_dbuf_pool_calloc</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_dbuf_pool_strdup</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_dbuf_pool_strndup</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_dbuf_pool_memdup</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dbuf_pool_keep</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>addr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name> <operator>&lt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>used</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d), keep(%d) &gt; used(%d)"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d), not found addr: %p"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dbuf_pool_unkeep</name><parameter_list>(<parameter><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>addr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DBUF</name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><name><name>pool</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>iter</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;&amp;</operator> <name>ptr</name> <operator>&gt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d), keep(%d) &lt; 0"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"warning: %s(%d), not found addr: %p"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dbuf_pool_test</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DBUF_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"begin alloc, max: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>acl_dbuf_pool_create</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1999</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">230</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">199</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">29</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">399</literal></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">88</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_dbuf_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"alloc over now, sleep(10)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_dbuf_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

</unit>
