<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/memory/acl_malloc_glue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"malloc_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../private/thread.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__debug_mem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type>  <name>__alloc_max</name> <init>= <expr><literal type="number">1024000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>__alloc_stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>__alloc_over_1MB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__fastmutex_stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>__malloc_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__malloc_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__calloc_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__realloc_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__strdup_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__strndup_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__memdup_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__free_call_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__mem_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__mem_stack</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<comment type="block">/* debug memory and display memory status */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MSTAT_LOCK</name></cpp:macro>	<cpp:value>thread_mutex_lock(&amp;__fastmutex_stat)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MSTAT_UNLOCK</name></cpp:macro>	<cpp:value>thread_mutex_unlock(&amp;__fastmutex_stat)</cpp:value></cpp:define>

<function><type><name>int</name> <modifier>*</modifier></type><name>acl_memory_debug_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>__alloc_max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__alloc_stat</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__alloc_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>thread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fastmutex_stat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__debug_mem</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_memory_debug_stop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>__alloc_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__alloc_stat</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__debug_mem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>thread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__fastmutex_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_memory_debug_stack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__mem_stack</name> <operator>=</operator> <name>onoff</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__mem_alloc_stat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__alloc_max</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>__alloc_stat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"----------------alloc status---------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__alloc_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__alloc_stat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%d byte: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><name><name>__alloc_stat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_memory_stat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"Please call acl_memory_debug first!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"-----------------mem status----------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__malloc_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__malloc_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__calloc_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__calloc_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__realloc_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__realloc_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__strdup_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__strdup_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__strndup_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__strndup_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__memdup_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__memdup_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__free_call_counter = %d\r\n"</literal></expr></argument>, <argument><expr><name>__free_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"__malloc_length = %u\r\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>__malloc_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>__malloc_call_counter</name>
		<operator>+</operator> <name>__calloc_call_counter</name>
		<operator>+</operator> <name>__strdup_call_counter</name>
		<operator>+</operator> <name>__strndup_call_counter</name>
		<operator>+</operator> <name>__memdup_call_counter</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"total malloc = %d, total free = %d, inter = %d\r\n"</literal></expr></argument>,
		<argument><expr><name>n</name></expr></argument>, <argument><expr><name>__free_call_counter</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>__free_call_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"---------------------------------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_memory_alloc_stat</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>__mem_alloc_stat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__malloc_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_default_malloc</name></expr></init>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__calloc_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_default_calloc</name></expr></init>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__realloc_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_default_realloc</name></expr></init>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__strdup_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>  <init>= <expr><name>acl_default_strdup</name></expr></init>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__strndup_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_default_strndup</name></expr></init>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__memdup_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_default_memdup</name></expr></init>;</function_decl>
<function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>__free_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>acl_default_free</name></expr></init>;</function_decl>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_malloc_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>__alloc_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__alloc_over_1MB</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__alloc_stat</name><index>[<expr><name>size</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__malloc_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__malloc_length</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"malloc: file=%s, line=%d"</literal></expr></argument>,
				<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__malloc_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_calloc_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>__alloc_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__alloc_over_1MB</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__alloc_stat</name><index>[<expr><name>size</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__calloc_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__malloc_length</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"calloc: file=%s, line=%d"</literal></expr></argument>,
				<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__calloc_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>nmemb</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_realloc_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>__alloc_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__alloc_over_1MB</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__alloc_stat</name><index>[<expr><name>size</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__realloc_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__realloc_fn</name> <operator>==</operator> <name>acl_default_realloc</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type>   <name>len</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>acl_default_memstat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>__malloc_length</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>__malloc_length</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"realloc: file=%s, line=%d"</literal></expr></argument>,
				<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__realloc_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_strdup_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type>  <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>__alloc_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__alloc_over_1MB</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__alloc_stat</name><index>[<expr><name>len</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__strdup_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__malloc_length</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"strdup: file=%s, line=%d"</literal></expr></argument>,
				<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__strdup_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_strndup_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type>  <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>n</name> <operator>&gt;</operator> <name>len</name></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>__alloc_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__alloc_over_1MB</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__alloc_stat</name><index>[<expr><name>n</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type>   <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__strndup_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__malloc_length</name> <operator>+=</operator> <ternary><condition><expr><name>len</name> <operator>&gt;</operator> <name>n</name></expr> ?</condition><then> <expr><name>n</name></expr></then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"strndup: file=%s, line=%d"</literal></expr></argument>,
				<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__strndup_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_memdup_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__alloc_stat</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>__alloc_max</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__alloc_over_1MB</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>__alloc_stat</name><index>[<expr><name>len</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__memdup_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__malloc_length</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"memdup: file=%s, line=%d"</literal></expr></argument>,
				<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name>__memdup_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_free_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__free_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__free_fn</name> <operator>==</operator> <name>acl_default_free</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type>   <name>len</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>acl_default_memstat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>__malloc_length</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__mem_stack</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"free: file=%s, line=%d"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>__free_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_free_fn_glue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__debug_mem</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>MSTAT_LOCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>__free_call_counter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__mem_counter</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>__free_fn</name> <operator>==</operator> <name>acl_default_free</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type>   <name>len</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>acl_default_memstat</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>__malloc_length</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>MSTAT_UNLOCK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>__free_fn</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
