<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/memory/acl_default_malloc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>	<comment type="block">/* for offsetof */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_GLIB</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;glib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_trace.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>__FILENAME_UNKNOWN</name><index>[]</index></name> <init>= <expr><literal type="string">"unknown file"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type>  <name>__malloc_limit</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
  * Structure of an annotated memory block. In order to detect spurious
  * free() calls we prepend a signature to memory given to the application.
  * In order to detect access to free()d blocks, overwrite each block as soon
  * as it is passed to myfree(). With the code below, the user data has
  * integer alignment or better.
  */</comment>
<typedef>typedef <type><struct>struct <name>MBLOCK</name> <block>{
	<decl_stmt><decl><type><name>size_t</name></type> <name>signature</name></decl>;</decl_stmt>		<comment type="block">/* set when block is active */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>			<comment type="block">/* user requested length */</comment>
	<union>union <block>{
		<decl_stmt><decl><type><name>ALIGN_TYPE</name></type> <name>align</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* actually a bunch of bytes */</comment>
	}</block> <decl><name>u</name></decl>;</union>
}</block></struct></type> <name>MBLOCK</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNATURE</name></cpp:macro>	<cpp:value>0xdead</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILLER</name></cpp:macro>		<cpp:value>0x0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PTR</name><parameter_list>(<parameter><type><name>_ptr_</name></type></parameter>, <parameter><type><name>_real_ptr_</name></type></parameter>, <parameter><type><name>_len_</name></type></parameter>, <parameter><type><name>_fname_</name></type></parameter>, <parameter><type><name>_line_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
  if (_ptr_ == 0) \
    acl_msg_fatal("%s(%d): null pointer input", _fname_, _line_); \
  _real_ptr_ = (MBLOCK *) (((char*)_ptr_) - offsetof(MBLOCK, u.payload[0])); \
  if (_real_ptr_-&gt;signature != SIGNATURE) \
    acl_msg_fatal("%s(%d): corrupt or unallocated block(%d, 0x%x, 0x%x)", \
      _fname_, _line_, (int) _real_ptr_-&gt;length, \
      (int) _real_ptr_-&gt;signature, SIGNATURE); \
  if ((_len_ = _real_ptr_-&gt;length) &lt; 1) \
    acl_msg_fatal("%s(%d): corrupt memory block length", _fname_, _line_); \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_IN_PTR</name><parameter_list>(<parameter><type><name>_ptr_</name></type></parameter>, <parameter><type><name>_real_ptr_</name></type></parameter>, <parameter><type><name>_len_</name></type></parameter>, <parameter><type><name>_fname_</name></type></parameter>, <parameter><type><name>_line_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
  if (_ptr_ == 0) \
    acl_msg_fatal("%s(%d): null pointer input", _fname_, _line_); \
  _real_ptr_ = (MBLOCK *) (((char*)_ptr_) - offsetof(MBLOCK, u.payload[0])); \
  if (_real_ptr_-&gt;signature != SIGNATURE) \
    acl_msg_fatal("%s(%d): corrupt or unallocated block(%d, 0x%x, 0x%x)", \
      _fname_, _line_, (int) _real_ptr_-&gt;length, \
      (int) _real_ptr_-&gt;signature, SIGNATURE); \
  _real_ptr_-&gt;signature = 0; \
  if ((_len_ = _real_ptr_-&gt;length) &lt; 1) \
    acl_msg_fatal("%s(%d): corrupt memory block length", _fname_, _line_); \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_OUT_PTR</name><parameter_list>(<parameter><type><name>_ptr_</name></type></parameter>, <parameter><type><name>_real_ptr_</name></type></parameter>, <parameter><type><name>_len_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
  _real_ptr_-&gt;signature = SIGNATURE; \
  _real_ptr_-&gt;length = _len_; \
  _ptr_ = _real_ptr_-&gt;u.payload; \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE_FOR</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(offsetof(MBLOCK, u.payload[0]) + len)</cpp:value></cpp:define>

<comment type="block">/*
  * Optimization for short strings. We share one copy with multiple callers.
  * This differs from normal heap memory in two ways, because the memory is
  * shared:
  * 
  * -  It must be read-only to avoid horrible bugs. This is OK because there is
  * no legitimate reason to modify the null terminator.
  * 
  * - myfree() cannot overwrite the memory with a filler pattern like it can do
  * with heap memory. Therefore, some dangling pointer bugs will be masked.
  */</comment>

<comment type="block">/*
#define	NO_SHARED_EMPTY_STRINGS
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SHARED_EMPTY_STRINGS</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>empty_string</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* acl_malloc - allocate memory or bust */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FILE</name><parameter_list>(<parameter><type><name>_ptr_</name></type></parameter>, <parameter><type><name>_filename_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	_ptr_ = strrchr(_filename_, '/');  \
	if (_ptr_ == NULL) {  \
		_ptr_ = strrchr(_filename_, '\\');  \
	}  \
	if (_ptr_ == NULL)  \
		_ptr_ = filename;  \
	else  \
		_ptr_++;  \
} while (0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FILE</name><parameter_list>(<parameter><type><name>_ptr_</name></type></parameter>, <parameter><type><name>_filename_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	_ptr_ = strrchr(_filename_, '/');  \
	if (_ptr_ == NULL)  \
		_ptr_ = filename;  \
	else  \
		_ptr_++;  \
} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_WINDOWS */</comment>

<comment type="block">/* #define DEBUG_MEM */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>DEBUG_MEM</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__nmalloc</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__ncalloc</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__nrealloc</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__nfree</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__nstrdup</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__nstrndup</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__nmemdup</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ssize_t</name></type> <name>__nsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>acl_default_memstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>real_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MBLOCK</name> <modifier>*</modifier></type><name>real_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>real_ptr</name></expr></argument>, <argument><expr><name>old_len</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>real_ptr</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>real_len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>real_len</name> <operator>=</operator> <call><name>SPACE_FOR</name><argument_list>(<argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
 
<function><type><name>void</name></type> <name>acl_default_meminfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_MEM</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s(%d): __nmalloc: %llu, __ncalloc: %llu, __nrealloc: %llu, "</literal>
		<literal type="string">"__nfree: %llu, diff: %llu, __nsize: %lu\r\n"</literal></expr></argument>,
		<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__nmalloc</name></expr></argument>, <argument><expr><name>__ncalloc</name></expr></argument>, <argument><expr><name>__nrealloc</name></expr></argument>,
		<argument><expr><name>__nfree</name></expr></argument>, <argument><expr><name>__nmalloc</name> <operator>-</operator> <name>__nfree</name></expr></argument>,
		<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>__nsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_default_set_memlimit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__malloc_limit</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>acl_default_get_memlimit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__malloc_limit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_default_malloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_default_malloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBLOCK</name> <modifier>*</modifier></type><name>real_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	printf("%s:%d, len: %d\r\n", filename, line, (int) len);
	acl_trace_info();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: malloc: length %ld invalid"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_trace_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <call><name>SPACE_FOR</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): new_len(%d) &lt;= 0"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>new_len</name> <operator>&gt;=</operator> <name>__malloc_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): new_len(%d) too large"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_trace_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
	<expr_stmt><expr><name>__nmalloc</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nsize</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<comment type="line">//printf("malloc: %llu, filename=%s, line=%d\r\n", __nmalloc, filename, line);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_GLIB</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>real_ptr</name> <operator>=</operator> <operator>(</operator><name>MBLOCK</name> <operator>*</operator><operator>)</operator> <call><name>g_malloc</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: new_len: %d, g_malloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>real_ptr</name> <operator>=</operator> <operator>(</operator><name>MBLOCK</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: malloc: insufficient memory: %s, "</literal>
			<literal type="string">"new_len: %d"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_OUT_PTR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>real_ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_default_calloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
	<expr_stmt><expr><name>__ncalloc</name><operator>++</operator></expr>;</expr_stmt>
	<comment type="line">//printf("calloc: %llu, file=%s, line=%d\r\n", __ncalloc, filename, line);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>nmemb</name> <operator>*</operator> <name>size</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>FILLER</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_default_realloc - reallocate memory or bust */</comment>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_default_realloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_default_realloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBLOCK</name> <modifier>*</modifier></type><name>real_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name></decl>, <decl><type ref="prev"/><name>new_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SHARED_EMPTY_STRINGS</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>empty_string</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: realloc: requested length %ld"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_trace_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CHECK_IN_PTR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>real_ptr</name></expr></argument>, <argument><expr><name>old_len</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <call><name>SPACE_FOR</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): new_len(%d) &lt;= 0"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>new_len</name> <operator>&gt;=</operator> <name>__malloc_limit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): new_len(%d) too large"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_trace_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__nrealloc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>__nmalloc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>__nsize</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__nsize</name> <operator>-=</operator> <name>old_len</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_GLIB</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>real_ptr</name> <operator>=</operator> <operator>(</operator><name>MBLOCK</name> <operator>*</operator><operator>)</operator> <call><name>g_realloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>real_ptr</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: realloc: insufficient memory: %s"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>real_ptr</name> <operator>=</operator> <operator>(</operator><name>MBLOCK</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>real_ptr</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: realloc: insufficient memory: %s"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>CHECK_OUT_PTR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>real_ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	if (len &gt; old_len)
		memset((char *) ptr + old_len, FILLER, len - old_len);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_default_free - release memory */</comment>

<function><type><name>void</name></type> <name>acl_default_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_default_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBLOCK</name> <modifier>*</modifier></type><name>real_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: ptr null"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>NO_SHARED_EMPTY_STRINGS</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>empty_string</name></expr>)</condition> <block>{<block_content>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>CHECK_IN_PTR</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>real_ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
		memset((char *) real_ptr, FILLER, SPACE_FOR(len));
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
		<expr_stmt><expr><name>__nfree</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>__nsize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
		<comment type="line">//printf("free: %llu, filename=%s, line=%d\n", __nfree, filename, line);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_USE_GLIB</name></cpp:ifdef>
		<expr_stmt><expr><call><name>g_free</name><argument_list>(<argument><expr><name>real_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>real_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>NO_SHARED_EMPTY_STRINGS</name></cpp:ifndef>
	</block_content>}</block></if></if_stmt> 
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* acl_default_strdup - save string to heap */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_default_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_default_strdup"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: null pointer argument"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SHARED_EMPTY_STRINGS</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>empty_string</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
	<expr_stmt><expr><name>__nstrdup</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>strcpy</name><argument_list>(<argument><expr><call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_default_strndup - save substring to heap */</comment>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_default_strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_default_strndup"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: null pointer argument"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SHARED_EMPTY_STRINGS</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>empty_string</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cp</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>cp</name> <operator>-</operator> <name>str</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
	<expr_stmt><expr><name>__nstrndup</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>memcpy</name><argument_list>(<argument><expr><call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_default_memdup - copy memory */</comment>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_default_memdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_default_memdup"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SET_FILE</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pname</name> <operator>=</operator> <name>__FILENAME_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: null pointer argument"</literal></expr></argument>,
			<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> 	<name>DEBUG_MEM</name></cpp:ifdef>
	<expr_stmt><expr><name>__nmemdup</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>pname</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
