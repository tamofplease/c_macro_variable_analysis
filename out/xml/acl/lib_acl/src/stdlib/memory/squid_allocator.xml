<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/memory/squid_allocator.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stack.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"squid_allocator.h"</cpp:file></cpp:include>

<comment type="block">/* huge constant to set mem_idle_limit to "unlimited" */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MB</name></cpp:macro> <cpp:value>((size_t)1024*1024)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>mem_unlimited_size</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <name>MB</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* gb_type operations */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gb_flush_limit</name></cpp:macro> <cpp:value>(0x3FFFFFFF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gb_inc</name><parameter_list>(<parameter><type><name>gb</name></type></parameter>, <parameter><type><name>delta</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	if ((gb)-&gt;bytes &gt; gb_flush_limit || delta &gt; gb_flush_limit) \
		gb_flush(gb); \
	(gb)-&gt;bytes += delta; \
	(gb)-&gt;count++; \
}</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>memPoolInUseSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>memPoolInUseCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* MemMeter */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>memMeterSyncHWater</name><parameter_list>(<parameter><decl><type><name>MemMeter</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memMeterCheckHWater</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if ((m).hwater_level &lt; (m).level) \
	memMeterSyncHWater(&amp;(m)); \
} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memMeterInc</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (m).level++; memMeterCheckHWater(m); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memMeterDec</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (m).level--; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memMeterAdd</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (m).level += (sz); memMeterCheckHWater(m); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>memMeterDel</name><parameter_list>(<parameter><type><name>m</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (m).level -= (sz); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type> <name>toMB</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>size</name><operator>)</operator> <operator>/</operator> <name>MB</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>toKB</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">1024</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">1024</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* to-do: make debug level a parameter? */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memPoolDescribe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%-20s: %6d x %4d bytes = %5ld KB"</literal></expr></argument>,
		<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><call><name>memPoolInUseCount</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <call><name>toKB</name><argument_list>(<argument><expr><call><name>memPoolInUseSize</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>ACL_MEM_POOL</name> <operator>*</operator><operator>)</operator><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* MemMeter */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memMeterSyncHWater</name><parameter_list>(<parameter><decl><type><name>MemMeter</name> <modifier>*</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>hwater_level</name></name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>hwater_level</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>hwater_stamp</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memPoolShrink</name><parameter_list>(<parameter><decl><type><name>SQUID_MEM_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
	<parameter><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name> <operator>&gt;</operator> <name>new_limit</name>
		<operator>&amp;&amp;</operator> <call><name>acl_stack_size</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ACL_MEM_POOL</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator><operator>-&gt;</operator><name>pstack</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memMeterDec</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterDec</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterDel</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name></name></expr></argument>,
			<argument><expr><operator>(</operator><operator>(</operator><name>ACL_MEM_POOL</name> <operator>*</operator><operator>)</operator><name>pool</name><operator>)</operator><operator>-&gt;</operator><name>obj_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterDel</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>alloc</name></name></expr></argument>,
			<argument><expr><operator>(</operator><operator>(</operator><name>ACL_MEM_POOL</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator><operator>-&gt;</operator><name>obj_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_stack_pop</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ACL_MEM_POOL</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator><operator>-&gt;</operator><name>pstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name> <operator>&lt;=</operator> <name>new_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* paranoid */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memShrink</name><parameter_list>(<parameter><decl><type><name>SQUID_MEM_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>new_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>start_limit</name> <init>= <expr><name><name>allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<comment type="block">/* first phase: cut proportionally to the pool idle size */</comment>

	<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>((ACL_ALLOCATOR *) allocator)-&gt;pools</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>MemPool</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>target_pool_size</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator>
			<name><name>pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name> <operator>*</operator> <name>new_limit</name><operator>)</operator> <operator>/</operator> <name>start_limit</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memPoolShrink</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>target_pool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"memShrink: 1st phase done with %ld KB left"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <call><name>toKB</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* second phase: cut to 0 */</comment>

	<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>((ACL_ALLOCATOR *) allocator)-&gt;pools</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>MemPool</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memPoolShrink</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"memShrink: 2nd phase done with %ld KB left"</literal></expr></argument>,
		<argument><expr><operator>(</operator><name>long</name> <name>int</name><operator>)</operator> <call><name>toKB</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name> <operator>&lt;=</operator> <name>new_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* paranoid */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memCleanModule</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>dirty_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>allocator-&gt;pools</argument>)</argument_list></macro> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><operator>(</operator><name>ACL_MEM_POOL</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pool</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>memPoolInUseCount</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>memPoolDescribe</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dirty_count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_destroy_fn</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>dirty_count</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"memCleanModule: %d pools are left dirty"</literal></expr></argument>,
			<argument><expr><name>dirty_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* we clean the stack anyway */</comment>

	<expr_stmt><expr><call><name>acl_stack_clean</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>pools</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Initialization */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memConfigure</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mem_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>new_pool_limit</name> <init>= <expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_idle_limit</name></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* set to configured value first */</comment>

	<if_stmt><if>if <condition>(<expr><name>mem_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_pool_limit</name> <operator>=</operator> <name>mem_limit</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>mem_limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_pool_limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>new_pool_limit</name> <operator>=</operator> <name>mem_unlimited_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<comment type="block">/* shrink memory pools if needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name><operator>)</operator><operator>-&gt;</operator><name><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name>
		<operator>&gt;</operator> <name>new_pool_limit</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"Shrinking idle mem pools to %.2f MB"</literal></expr></argument>,
			<argument><expr><call><name>toMB</name><argument_list>(<argument><expr><name>new_pool_limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memShrink</name><argument_list>(<argument><expr><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name></expr></argument>, <argument><expr><name>new_pool_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name><operator>)</operator><operator>-&gt;</operator><name><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name>
		<operator>&lt;=</operator> <name>new_pool_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_idle_limit</name></name> <operator>=</operator> <name>new_pool_limit</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* MemPool */</comment>

<function><type><specifier>static</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>memPoolCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name> <init>= <expr><call><name>acl_default_calloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemPool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>squid_pool</name> <init>= <expr><operator>(</operator><name>MemPool</name> <operator>*</operator><operator>)</operator> <name>pool</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memPoolDestroy</name><parameter_list>(<parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<macro><name>acl_foreach_reverse</name><argument_list>(<argument>iter</argument>, <argument>pool-&gt;pstack</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>obj</name> <operator>=</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMPOOL_COOKIE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)((unsigned long)(p) ^ 0xDEADBEEF))</cpp:value></cpp:define>
<struct>struct <name>mempool_cookie</name> <block>{
	<decl_stmt><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memPoolAlloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SQUID_MEM_ALLOCATOR</name> <modifier>*</modifier></type><name>squid_allocator</name> <init>=
		<expr><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>squid_pool</name> <init>= <expr><operator>(</operator><name>MemPool</name> <operator>*</operator><operator>)</operator> <name>pool</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memMeterInc</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>inuse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gb_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>total</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gb_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>total</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memMeterAdd</name><argument_list>(<argument><expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>inuse</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gb_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squid_allocator</name><operator>-&gt;</operator><name>mem_traffic_volume</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_pool_alloc_calls</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_stack_size</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pstack</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterDec</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterDel</name><argument_list>(<argument><expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gb_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>saved</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gb_inc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>saved</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>acl_stack_pop</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pstack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_READABLE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name>
			<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mempool_cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_READABLE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>mempool_cookie</name></name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>obj</name><operator>)</operator> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>cookie</name></name> <operator>==</operator> <call><name>MEMPOOL_COOKIE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_NOACCESS</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterInc</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterAdd</name><argument_list>(<argument><expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>alloc</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>mempool_cookie</name></name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
				<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name>
				<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mempool_cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cookie</name> <operator>=</operator> <operator>(</operator>struct <name>mempool_cookie</name> <operator>*</operator><operator>)</operator>
				<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>obj</name><operator>)</operator> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>cookie</name></name> <operator>=</operator> <call><name>MEMPOOL_COOKIE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cookie</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_NOACCESS</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>after_alloc_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>after_alloc_fn</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>memPoolFree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SQUID_MEM_ALLOCATOR</name> <modifier>*</modifier></type><name>squid_allocator</name> <init>=
		<expr><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemPool</name> <modifier>*</modifier></type><name>squid_pool</name> <init>= <expr><operator>(</operator><name>MemPool</name> <operator>*</operator><operator>)</operator> <name>pool</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pool</name> <operator>&amp;&amp;</operator> <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memMeterDec</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>inuse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memMeterDel</name><argument_list>(<argument><expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>inuse</name></name></expr></argument>,	<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_pool_free_calls</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_CHECK_WRITABLE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>mempool_cookie</name></name> <modifier>*</modifier></type><name>cookie</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
			<operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>obj</name><operator>)</operator> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_READABLE</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>cookie</name></name> <operator>==</operator> <call><name>MEMPOOL_COOKIE</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>cookie</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name> <operator>+</operator> <name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name>
		<operator>&lt;=</operator> <name><name>allocator</name><operator>-&gt;</operator><name>mem_idle_limit</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memMeterInc</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterAdd</name><argument_list>(<argument><expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>idle</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_NOACCESS</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name>
				<operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mempool_cookie</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>VALGRIND_MAKE_NOACCESS</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* xxx: I should add some here--zsx */</comment>
		<comment type="block">/* memset(obj, 0, pool-&gt;obj_size); */</comment>
		<expr_stmt><expr><call><name>acl_stack_append</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pstack</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>memMeterDec</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memMeterDel</name><argument_list>(<argument><expr><name><name>squid_allocator</name><operator>-&gt;</operator><name>TheMeter</name><operator>.</operator><name>alloc</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>idle</name><operator>.</operator><name>level</name></name>
		<operator>&lt;=</operator> <name><name>squid_pool</name><operator>-&gt;</operator><name>meter</name><operator>.</operator><name>alloc</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>memPoolWasUsed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>MemPool</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator><operator>-&gt;</operator><name><name>meter</name><operator>.</operator><name>alloc</name><operator>.</operator><name>hwater_level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>memPoolInUseCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>MemPool</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator><operator>-&gt;</operator><name><name>meter</name><operator>.</operator><name>inuse</name><operator>.</operator><name>level</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>memPoolInUseSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>MemPool</name> <operator>*</operator><operator>)</operator> <name>pool</name><operator>)</operator><operator>-&gt;</operator><name><name>meter</name><operator>.</operator><name>inuse</name><operator>.</operator><name>level</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>memTotalAllocated</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name><operator>)</operator><operator>-&gt;</operator><name><name>TheMeter</name><operator>.</operator><name>alloc</name><operator>.</operator><name>level</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>squid_allocator_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>allocator</name> <operator>=</operator> <call><name>allocator_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQUID_MEM_ALLOCATOR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_create_fn</name></name> <operator>=</operator> <name>memPoolCreate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_config_fn</name></name> <operator>=</operator> <name>memConfigure</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_destroy_fn</name></name> <operator>=</operator> <name>memPoolDestroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_clean_fn</name></name> <operator>=</operator> <name>memCleanModule</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_if_used</name></name> <operator>=</operator> <name>memPoolWasUsed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_inuse_count</name></name> <operator>=</operator> <name>memPoolInUseCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_inuse_size</name></name> <operator>=</operator> <name>memPoolInUseSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_total_allocated</name></name> <operator>=</operator> <name>memTotalAllocated</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_alloc_fn</name></name> <operator>=</operator> <name>memPoolAlloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_free_fn</name></name> <operator>=</operator> <name>memPoolFree</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SQUID_MEM_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name><operator>)</operator><operator>-&gt;</operator><name>TheMeter</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemPoolMeter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <name>allocator</name></expr>;</return>
</block_content>}</block></function>
</unit>
