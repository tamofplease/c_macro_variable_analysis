<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/memory/squid_allocator_tools.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"squid_allocator.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>kb_incr</name><parameter_list>(<parameter><decl><type><name>kb_t</name> <modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>kb</name></name> <operator>+=</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;=</operator> <literal type="number">0x3FF</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>kb</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/*
		 * If kb overflows and becomes negative then add powers of
		 * 2 until it becomes positive again.
		 */</comment>
		<decl_stmt><decl><type><name>kb_t</name></type> <name>x</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>x</name><operator>.</operator><name>kb</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name><name>x</name><operator>.</operator><name>kb</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>kb</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>kb</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>x</name><operator>.</operator><name>kb</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name><name>k</name><operator>-&gt;</operator><name>kb</name></name> <operator>+=</operator> <name><name>x</name><operator>.</operator><name>kb</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_flush</name><parameter_list>(<parameter><decl><type><name>gb_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>gb</name></name> <operator>+=</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>gb_to_double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gb_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>g</name><operator>-&gt;</operator><name>gb</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>g</name><operator>-&gt;</operator><name>bytes</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gb_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gb_t</name> <modifier>*</modifier></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* it is often convenient to call gb_to_str
	 * several times for _one_ printf
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_cc_calls</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
	<typedef>typedef <type><name>char</name></type> <name><name>GbBuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name>;</typedef>
	<decl_stmt><decl><type><specifier>static</specifier> <name>GbBuf</name></type> <name><name>bufs</name><index>[<expr><name>max_cc_calls</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>call_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name>gb_to_double</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>bufs</name><index>[<expr><name>call_id</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>call_id</name> <operator>&gt;=</operator> <name>max_cc_calls</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>call_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* select format */</comment>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1e9</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GbBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.2f MB"</literal></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <literal type="number">1e6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">1e12</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GbBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.2f GB"</literal></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <literal type="number">1e9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GbBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.2f TB"</literal></expr></argument>, <argument><expr><name>value</name> <operator>/</operator> <literal type="number">1e12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
