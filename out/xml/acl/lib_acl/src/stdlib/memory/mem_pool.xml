<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/memory/mem_pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_allocator.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allocator.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>mem_pool_create</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"8 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_8_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"16 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">16</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_16_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"32 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">32</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_32_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"64 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">64</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_64_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"128 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">128</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_128_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"256 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">256</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_256_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"512 Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">512</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_512_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"1K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">1024</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_1K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"2K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">2048</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_2K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"4K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">4096</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_4K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"8K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">8192</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_8K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"16K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">16384</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_16K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"32K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">32768</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_32K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"64K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">65536</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_64K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"128K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">131072</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_128K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"256K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">262144</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_256K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"512K Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">524288</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_512K_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><literal type="string">"1M Buffer"</literal></expr></argument>,  <argument><expr><literal type="number">1048576</literal></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_1M_BUF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mem_pool_status</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>ACL_MEM_TYPE_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"-----------------------------------------------------------------------------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%-20s%-26s%-25s%-15s%-10s"</literal></expr></argument>, <argument><expr><literal type="string">"Buffer type"</literal></expr></argument>, <argument><expr><literal type="string">"Allocated"</literal></expr></argument>,
		<argument><expr><literal type="string">"Freed"</literal></expr></argument>, <argument><expr><literal type="string">"Diff"</literal></expr></argument>, <argument><expr><literal type="string">"Buffered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"-----------------------------------------------------------------------------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ACL_MEM_TYPE_MAX</name></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pool</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%-20salloc=%-20ldfree=%-20lddiff=%-10ldbuff=%-10d"</literal></expr></argument>,
				<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>nalloc</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>nfree</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name><name>pool</name><operator>-&gt;</operator><name>nalloc</name></name> <operator>-</operator> <name><name>pool</name><operator>-&gt;</operator><name>nfree</name></name><operator>)</operator></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>acl_stack_size</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>pstack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"-----------------------------------------------------------------------------------------------\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
