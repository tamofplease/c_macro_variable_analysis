<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/memory/acl_slice.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;search.h&gt;</cpp:file></cpp:include>   <comment type="block">/* just for qsort */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_meter_time.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ring.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__slice_malloc_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>
	<init>= <expr><name>acl_default_malloc</name></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__slice_calloc_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>
	<init>= <expr><name>acl_default_calloc</name></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>__slice_realloc_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>
	<init>= <expr><name>acl_default_realloc</name></expr></init>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  (<modifier>*</modifier><name>__slice_free_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>
	<init>= <expr><name>acl_default_free</name></expr></init>;</function_decl>

<function><type><name>void</name></type> <name>acl_slice_mem_hook</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>malloc_hook</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>calloc_hook</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>realloc_hook</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>free_hook</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>malloc_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__slice_malloc_fn</name>  <operator>=</operator> <name>malloc_hook</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>calloc_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__slice_calloc_fn</name>  <operator>=</operator> <name>calloc_hook</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>realloc_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__slice_realloc_fn</name> <operator>=</operator> <name>realloc_hook</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>free_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>__slice_free_fn</name>    <operator>=</operator> <name>free_hook</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_mem_unhook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__slice_malloc_fn</name>  <operator>=</operator> <name>acl_default_malloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__slice_calloc_fn</name>  <operator>=</operator> <name>acl_default_calloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__slice_realloc_fn</name> <operator>=</operator> <name>acl_default_realloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__slice_free_fn</name>    <operator>=</operator> <name>acl_default_free</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************/</comment>

<typedef>typedef <type><struct>struct <name>MBUF_SLOTS</name> <block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>slots</name></decl>;</decl_stmt>		<comment type="block">/* in which free slice can use */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>islots</name></decl>;</decl_stmt>		<comment type="block">/* current position of free slots slice */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nslots</name></decl>;</decl_stmt>		<comment type="block">/* total slice count free in slots */</comment>
}</block></struct></type> <name>MBUF_SLOTS</name>;</typedef>

<struct>struct <name>ACL_SLICE</name> <block>{
	<decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* the app's name */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>page_nslots</name></decl>;</decl_stmt>	<comment type="block">/* count slice of each page */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>page_size</name></decl>;</decl_stmt>	<comment type="block">/* length of MBUF's buf */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>gap_size</name></decl>;</decl_stmt>		<comment type="block">/* gap_size = page_size - page_nslots * slice_size */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>slice_length</name></decl>;</decl_stmt>	<comment type="block">/* length of each slice from app */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>slice_size</name></decl>;</decl_stmt>	<comment type="block">/* the real size of each slice */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nbuf</name></decl>;</decl_stmt>		<comment type="block">/* count of MBUF allocated */</comment>
	<decl_stmt><decl><type><name>acl_uint64</name></type> <name>length</name></decl>;</decl_stmt>	<comment type="block">/* total size of all MBUF's buf */</comment>
	<decl_stmt><decl><type><name>acl_uint64</name></type> <name>used_length</name></decl>;</decl_stmt>	<comment type="block">/* total size of used */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nalloc</name></decl>;</decl_stmt>		<comment type="block">/* statistics: number of calling malloc */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nfree</name></decl>;</decl_stmt>		<comment type="block">/* statistics: number of calling free */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl>;</decl_stmt>	<comment type="block">/* as: ACL_SLICE_FLAG_XXX */</comment>

	<function_decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>slice_create</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_length</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>slice_destroy</name>)<parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>slice_alloc</name>)<parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>slice_free</name>)<parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>slice_gc</name>)<parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>;</function_decl>  <comment type="block">/* ·µ»Ø 1 ±íÊ¾ÒÑ¾­ÊÍ·ÅÍê±Ï */</comment>
	<function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>slice_used</name>)<parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>slice_stat</name>)<parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>ACL_SLICE_STAT</name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SLICE_OFF_SIZE</name></cpp:macro>		<cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* MBUF1, MBUF2, MBUF3 µÄ»ù´¡ÀàÐÍ */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNATURE</name></cpp:macro>		<cpp:value>0xdead</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MBUF</name> <block>{
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>signature</name></decl>;</decl_stmt>        <comment type="block">/* set when block is active */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>nused</name></decl>;</decl_stmt>		<comment type="block">/* number of using memory slice in payload */</comment>
}</block></struct></type> <name>MBUF</name>;</typedef>

<comment type="block" format="doxygen">/**
 * MBUF1: ±È½Ï½ÚÊ¡ÄÚ´æÄ£Ê½£¬µ«¸Ã·½Ê½ÔÚÀ¬»ø×Ô¶¯»ØÊÕÊ±±È½Ï·ÑÊ±£¬
 * ±È½ÏÊÊºÏÓÚ·ÖÅäµ«²»»ØÊÕµÄÇéÐÎ
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SLICE1_HEAD_SIZE</name></cpp:macro>	<cpp:value>SLICE_OFF_SIZE</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MBUF1</name> <block>{
	<decl_stmt><decl><type><name>MBUF</name></type>  <name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>  <name>entry</name></decl>;</decl_stmt>		<comment type="block">/* linked by SLICE1-&gt;mbuf_head */</comment>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* format: {off}{data}{off}{data}... */</comment>
}</block></struct></type> <name>MBUF1</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SLICE1</name> <block>{
	<decl_stmt><decl><type><name>ACL_SLICE</name></type> <name>slice</name></decl>;</decl_stmt>	<comment type="block">/* the bases class */</comment>
	<decl_stmt><decl><type><name>MBUF_SLOTS</name></type> <name>mslots</name></decl>;</decl_stmt>	<comment type="block">/* slice slots holding all slice of the mbuf */</comment>
	<decl_stmt><decl><type><name>RING</name></type>  <name>mbuf_head</name></decl>;</decl_stmt>	<comment type="block">/* link all mbuf's entry */</comment>
}</block></struct></type> <name>SLICE1</name>;</typedef>

<comment type="block" format="doxygen">/**
 * MBUF2: ÄÚ´æÉÔÎ¢´óµã£¬µ«ÊµÊ±À¬»øµÄ×Ô¶¯»ØÊÕÐÔÄÜ±È½ÏºÃ, µ«Èç¹ûÄ³
 * ¸ö MBUF2 Ö»ÒªÓÐÒ»¸ö½áµã±»ÒýÓÃ, Ôò¸ÃÄÚ´æ±ã²»ÄÜ±»ÊÍ·Å¸øÏµÍ³
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SLICE2_HEAD_SIZE</name></cpp:macro>	<cpp:value>(SLICE_OFF_SIZE + 4)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MBUF2</name> <block>{
	<decl_stmt><decl><type><name>MBUF</name></type>  <name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name></type>  <name>entry</name></decl>;</decl_stmt>		<comment type="block">/* be linked by SLICE2-&gt;mbuf_head */</comment>

	<comment type="block">/* in x64 CPU, sizeof before is 32 bytes */</comment>

	<decl_stmt><decl><type><name>char</name></type>  <name><name>payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* format: {off}{pos}{data}{off}{pos}{data}... */</comment>
}</block></struct></type> <name>MBUF2</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SLICE2</name> <block>{
	<decl_stmt><decl><type><name>ACL_SLICE</name></type> <name>slice</name></decl>;</decl_stmt>	<comment type="block">/* the base class */</comment>
	<decl_stmt><decl><type><name>MBUF_SLOTS</name></type> <name>mslots</name></decl>;</decl_stmt>	<comment type="block">/* slice slots holding all slice of the mbuf */</comment>
	<decl_stmt><decl><type><name>RING</name></type>  <name>mbuf_head</name></decl>;</decl_stmt>	<comment type="block">/* link all entry in MBUF2 */</comment>
}</block></struct></type> <name>SLICE2</name>;</typedef>

<comment type="block" format="doxygen">/**
 * MBUF3: ÄÚ´æ¸ü´ó£¬µ±Ë³Ðò·ÖÅäÍ¬Ê±Ë³ÐòÊÍ·ÅÊ±»ØÊÕÄÚ´æÐ§¹û¸üºÃ,
 * µ«Èç¹ûÊÇËæ»úÊÍ·ÅÔòÐ§ÂÊÏÂ½µ·Ç³£À÷º¦£¬ÓÈÆäµ±½áµã±È½Ï¶àÊ±
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SLICE3_HEAD_SIZE</name></cpp:macro>	<cpp:value>SLICE_OFF_SIZE</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MBUF3</name> <block>{
	<decl_stmt><decl><type><name>MBUF</name></type>  <name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF_SLOTS</name></type> <name>mslots</name></decl>;</decl_stmt>	<comment type="block">/* slice slots holding all slice of the mbuf */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>ibuf</name></decl>;</decl_stmt>		<comment type="block">/* position in SLICE3-&gt;mbufs array */</comment>

	<comment type="block">/* in x64 CPU, sizeof before is 36 bytes */</comment>

	<decl_stmt><decl><type><name>char</name></type>  <name><name>payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* format: {off}{data}{off}{data}... */</comment>
}</block></struct></type> <name>MBUF3</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SLICE3</name> <block>{
	<decl_stmt><decl><type><name>ACL_SLICE</name></type> <name>slice</name></decl>;</decl_stmt>	<comment type="block">/* the base class */</comment>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier><modifier>*</modifier></type><name>mbufs</name></decl>;</decl_stmt>		<comment type="block">/* all MBUF3's array */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>imbuf_avail</name></decl>;</decl_stmt>	<comment type="block">/* current available pos of MBUF3 in mbufs */</comment>
	<decl_stmt><decl><type><name>int</name></type>   <name>capacity</name></decl>;</decl_stmt>		<comment type="block">/* the mbufs array's size */</comment>
}</block></struct></type> <name>SLICE3</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>MBUF_SLOTS_SPACE</name><parameter_list>(<parameter><type><name>slice</name></type></parameter>, <parameter><type><name>mslots_in</name></type></parameter>, <parameter><type><name>incr</name></type></parameter>, <parameter><type><name>incr_real</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do  \
{ \
  MBUF_SLOTS *mslots = mslots_in;  \
  if (mslots-&gt;slots == NULL) {  \
    incr_real = incr &lt; slice-&gt;page_nslots ? slice-&gt;page_nslots : incr;  \
    mslots-&gt;slots = (void **) __slice_malloc_fn(__FILE__, __LINE__,  \
                                 sizeof(void*) * incr_real);  \
    mslots-&gt;nslots = incr_real;  \
    mslots-&gt;islots = 0;  \
  } else if (mslots-&gt;islots + incr &gt;= mslots-&gt;nslots) {  \
    incr_real = incr &lt; slice-&gt;page_nslots ? slice-&gt;page_nslots : incr;  \
    mslots-&gt;nslots += incr_real;  \
    mslots-&gt;slots = (void **) __slice_realloc_fn(__FILE__, __LINE__,  \
                      mslots-&gt;slots, sizeof(void*) * mslots-&gt;nslots);  \
  }  \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>SLICE_MBUF_SPACE</name><parameter_list>(<parameter><type><name>slice_in</name></type></parameter>, <parameter><type><name>incr</name></type></parameter>, <parameter><type><name>incr_real</name></type></parameter>, <parameter><type><name>mbuf_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do  \
{  \
  if (slice_in-&gt;mbufs == NULL) {  \
    incr_real = incr &gt; 16 ? incr : 16;  \
    slice_in-&gt;mbufs = (mbuf_type**) __slice_malloc_fn(__FILE__,  \
                        __LINE__, sizeof(mbuf_type*) * incr_real);  \
    slice_in-&gt;capacity = incr_real;  \
    slice_in-&gt;imbuf_avail = 0; \
  } else if (slice_in-&gt;slice.nbuf + incr &gt;= slice_in-&gt;capacity) {  \
    incr_real = incr &gt; 16 ? incr : 16;  \
    slice_in-&gt;capacity += incr_real;  \
    slice_in-&gt;mbufs = (mbuf_type**)  \
      __slice_realloc_fn(__FILE__, __LINE__, slice_in-&gt;mbufs,  \
          sizeof(mbuf_type*) * slice_in-&gt;capacity);  \
  }  \
} while (0)</cpp:value></cpp:define>

<comment type="block">/* forward declare */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>	<comment type="block">/* just for uintptr_t */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>slice_init</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*------------------------- just for time min3 ------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice3_mbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice3_mbuf_alloc"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>incr_real</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF3</name><operator>*</operator><operator>)</operator> <call><name>__slice_malloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name> <operator>=</operator> <name>SIGNATURE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nalloc</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MBUF_SLOTS_SPACE</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>SLICE3_HEAD_SIZE</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_LP64_ALIGN</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>  <comment type="block">/* just for AVL */</comment>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ptr(%lx) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>mbuf</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>incr_real</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>SLICE_MBUF_SPACE</name><argument_list>(<argument><expr><name>slice3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>, <argument><expr><name>MBUF3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice3</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>]</index></name> <operator>=</operator> <name>mbuf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>slice3_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>slice3_mbuf_alloc</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>mbuf</name> <operator>&amp;&amp;</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><operator>--</operator><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice3_mbuf_free</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>==</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>imbuf_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nfree</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>length</name></name> <operator>-=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice3_free</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier><name>slice_dummy</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice3_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF3</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name> <operator>!=</operator> <name>SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): off (%u), corrupt or unallocated "</literal>
			<literal type="string">"memory block(0x%x, 0x%x)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
			<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name></expr></argument>, <argument><expr><name>SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>slice</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>slice3</name> <operator>=</operator> <operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&lt;</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name><operator>--</operator></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name></expr>]</index></name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name></expr>]</index></name><operator>-&gt;</operator><name>ibuf</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>ibuf</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>slice3_mbuf_free</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>-=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice3_gc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>slice3_mbuf_free</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice3_used</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice3_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>slice3_mbuf_free</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>slice3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice3_stat</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,  <parameter><decl><type><name>ACL_SLICE_STAT</name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice3</name> <init>= <expr><operator>(</operator><name>SLICE3</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF3</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nslots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>islots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <name><name>slice3</name><operator>-&gt;</operator><name>mbufs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nslots</name></name> <operator>+=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>nslots</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>islots</name></name> <operator>+=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>page_nslots</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>slice_length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>used_length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice3_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>slice_length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE3</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>incr_real</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>(</operator><name>SLICE3</name> <operator>*</operator><operator>)</operator> <call><name>__slice_calloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLICE3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* call the base ACL_SLICE's init function */</comment>

	<expr_stmt><expr><call><name>slice_init</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* init the SLICE3's params */</comment>

	<expr_stmt><expr><call><name>SLICE_MBUF_SPACE</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><literal type="number">3202</literal></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>, <argument><expr><name>MBUF3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_LP64_ALIGN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slice_length</name> <operator>+</operator> <name>SLICE3_HEAD_SIZE</name><operator>)</operator>
			<operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>slice_length</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>slice_length</name> <operator>+</operator> <name>SLICE3_HEAD_SIZE</name><operator>)</operator>
				<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof>
				<operator>-</operator> <name>SLICE3_HEAD_SIZE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* reset the base ACL_SLICE's params */</comment>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_length</name></name> <operator>=</operator> <name>slice_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name> <operator>=</operator> <name>slice_length</name> <operator>+</operator> <name>SLICE3_HEAD_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <name>page_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name> <operator>=</operator> <operator>(</operator><name>page_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MBUF3</name></expr></argument>)</argument_list></sizeof><operator>)</operator>
		<operator>/</operator><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>gap_size</name></name> <operator>=</operator> <name>page_size</name> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name>
		<operator>*</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>

	<comment type="block">/* reset the base ACL_SLICE's callback */</comment>
	
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_destroy</name></name> <operator>=</operator> <name>slice3_destroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_alloc</name></name> <operator>=</operator> <name>slice3_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_free</name></name> <operator>=</operator> <name>slice3_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_gc</name></name> <operator>=</operator> <name>slice3_gc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_used</name></name> <operator>=</operator> <name>slice3_used</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_stat</name></name> <operator>=</operator> <name>slice3_stat</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*---------------------------- just for slice2 -------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice2_mbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice2_mbuf_alloc"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name> <init>= <expr><operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>incr_real</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF2</name><operator>*</operator><operator>)</operator> <call><name>__slice_malloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name> <operator>=</operator> <name>SIGNATURE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mbuf</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nalloc</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MBUF_SLOTS_SPACE</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>SLICE2_HEAD_SIZE</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_LP64_ALIGN</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>ptr</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>  <comment type="block">/* just for AVL */</comment>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ptr(%lx) invalid, "</literal>
				<literal type="string">"slice_length: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>mbuf</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>incr_real</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>slice2_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice2_alloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name> <init>= <expr><operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>off</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>slice2_mbuf_alloc</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><operator>--</operator><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): off(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pos(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF2</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name> <operator>!=</operator> <name>SIGNATURE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, off(%d), nused(%d), islots(%d)"</literal>
			<literal type="string">", used_length(%d), slice_size(%d), slice_length(%d)"</literal>
			<literal type="string">", page_nslots(%d), page_size(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name></expr></argument>,
			<argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr></argument>,
			<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, corrupt or unallocated "</literal>
			<literal type="string">"memory block(0x%x, 0x%x)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name></expr></argument>, <argument><expr><name>SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* reset the slice chunk's pos to -1 */</comment>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice2_mbuf_free</name><parameter_list>(<parameter><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name></decl></parameter>, <parameter><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice2_mbuf_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>pos</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ptr = mbuf-&gt;payload;
	for (i = 0; i &lt; slice2-&gt;slice.page_nslots; i++) {
		ptr += SLICE2_HEAD_SIZE;
		pos = *((int*) (ptr - SLICE2_HEAD_SIZE));
		if (pos &lt; 0 || pos &gt;= slice2-&gt;mslots.islots)
			acl_msg_fatal("%s(%d): %s, pos(%d) invalid, islots(%d), page_nslots(%d)",
				myname, __LINE__, ((ACL_SLICE*) slice2)-&gt;name,
				pos, slice2-&gt;mslots.islots, slice2-&gt;slice.page_nslots);

		if (slice2-&gt;mslots.slots[pos] != ptr)
			acl_msg_fatal("%s(%d): pos(%d)'s(%lld, %lld) invalid",
				myname, __LINE__, pos, slice2-&gt;mslots.slots[pos], ptr);

		if (pos + 1 &lt; slice2-&gt;mslots.islots) {
			slice2-&gt;mslots.slots[pos] = slice2-&gt;mslots.slots[slice2-&gt;mslots.islots -i - 1];

			<comment type="block">/* reset the slice chunk's pos */</comment>
			*((int*) ((char*) slice2-&gt;mslots.slots[pos] - SLICE2_HEAD_SIZE)) = pos;
		}
		ptr += slice2-&gt;slice.slice_length;
	}

	slice2-&gt;mslots.islots -= slice2-&gt;slice.page_nslots;
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:elif>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>SLICE2_HEAD_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, pos(%d) invalid, "</literal>
				<literal type="string">"islots(%d), page_nslots(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice2</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
				<argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr></argument>, <argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_length</name></name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_length</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pos(%d)'s(%lld, %lld) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
				<argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator>
			<name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><operator>--</operator><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* reset the slice chunk's pos */</comment>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name>
			<operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_length</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name> <operator>+</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name>
		<operator>*</operator> <operator>(</operator><name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, pos(%d) invalid, islots(%d),"</literal>
				<literal type="string">" page_nslots(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><operator>(</operator><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice2</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
				<argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr></argument>, <argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <name>ptr</name> <operator>+</operator> <name>SLICE2_HEAD_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pos(%d)'s(%p, %p) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
				<argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>,
				<argument><expr><operator>(</operator><name>ptr</name> <operator>+</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator>
			<name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><operator>--</operator><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* reset the slice chunk's pos */</comment>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>pos</name></expr>]</index></name>
			<operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mbuf</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>nbuf</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>nfree</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice2_free</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier><name>slice_dummy</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice2_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>incr_real</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): off(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF2</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name> <operator>!=</operator> <name>SIGNATURE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), (off %d): corrupt or unallocated "</literal>
			<literal type="string">"memory block(0x%x, 0x%x)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
			<argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name></expr></argument>, <argument><expr><name>SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>slice</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>slice2</name> <operator>=</operator> <operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>slice</name> <operator>!=</operator> <name>slice_dummy</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, nused(%d) &lt;= 0"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MBUF_SLOTS_SPACE</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

	<comment type="block">/* reset the slice chunk's pos */</comment>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>slice</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name> <operator>&gt;</operator> <name>ptr</name> <operator>-</operator> <name>SLICE2_HEAD_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ptr overflow"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>slice2_mbuf_free</name><argument_list>(<argument><expr><name>slice2</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>-=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice2_gc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name> <init>= <expr><operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>MBUF2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>slice2_mbuf_free</name><argument_list>(<argument><expr><name>slice2</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice2_used</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name> <init>= <expr><operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>MBUF2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice2_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name> <init>= <expr><operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF2</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>slice2</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>MBUF2</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>slice2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice2_stat</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,  <parameter><decl><type><name>ACL_SLICE_STAT</name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice2</name> <init>= <expr><operator>(</operator><name>SLICE2</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nslots</name></name> <operator>=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>islots</name></name> <operator>=</operator> <name><name>slice2</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>page_nslots</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>slice_length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>used_length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice2_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>slice_length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE2</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><operator>(</operator><name>SLICE2</name> <operator>*</operator><operator>)</operator> <call><name>__slice_calloc_fn</name><argument_list>(
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLICE2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* call the base ACL_SLICE's init function */</comment>
	
	<expr_stmt><expr><call><name>slice_init</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* init the SLICE2's params */</comment>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>nslots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_LP64_ALIGN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>slice_length</name> <operator>+</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>slice_length</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>slice_length</name> <operator>+</operator> <name>SLICE2_HEAD_SIZE</name><operator>)</operator>
				<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintptr_t</name></expr></argument>)</argument_list></sizeof>
				<operator>-</operator> <name>SLICE2_HEAD_SIZE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* reset the base ACL_SLICE's params */</comment>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_length</name></name> <operator>=</operator> <name>slice_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name> <operator>=</operator> <name>slice_length</name> <operator>+</operator> <name>SLICE2_HEAD_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <name>page_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name> <operator>=</operator> <operator>(</operator><name>page_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MBUF2</name></expr></argument>)</argument_list></sizeof><operator>)</operator>
		<operator>/</operator><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>gap_size</name></name> <operator>=</operator> <name>page_size</name> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name>
		<operator>*</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>

	<comment type="block">/* reset the base ACL_SLICE's callback */</comment>
	
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_destroy</name></name> <operator>=</operator> <name>slice2_destroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_alloc</name></name> <operator>=</operator> <name>slice2_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_free</name></name> <operator>=</operator> <name>slice2_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_gc</name></name> <operator>=</operator> <name>slice2_gc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_used</name></name> <operator>=</operator> <name>slice2_used</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_stat</name></name> <operator>=</operator> <name>slice2_stat</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*---------------------------- just for slice1 -------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice1_mbuf_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF1</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>incr_real</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF1</name><operator>*</operator><operator>)</operator> <call><name>__slice_malloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>slice</name></name> <operator>=</operator> <name>slice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>nused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mbuf</name><operator>-&gt;</operator><name>mbuf</name><operator>.</operator><name>signature</name></name> <operator>=</operator> <name>SIGNATURE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice1</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mbuf</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nalloc</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MBUF_SLOTS_SPACE</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>SLICE1_HEAD_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>mbuf</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>incr_real</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>slice1_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>slice1_mbuf_alloc</name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice1_free</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>incr_real</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MBUF_SLOTS_SPACE</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>incr_real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>-=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice1_mbuf_free</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice1_mbuf_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF1</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	FOREACH_RING_FORWARD(iter, &amp;slice-&gt;mbuf_head) {
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<macro><name>FOREACH_RING_BACKWARD</name><argument_list>(<argument>iter</argument>, <argument>&amp;slice1-&gt;mbuf_head</argument>)</argument_list></macro> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>MBUF1</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>payload</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mbuf</name><operator>-&gt;</operator><name>entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nfree</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: unknown buf addr: 0x%p"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><ternary><condition><expr><name>buf</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>p1</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>p2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice1_gc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice1_gc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name></expr></argument>, <argument><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr></argument>,
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>*</operator> <name>n</name><operator>++</operator> <operator>!=</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>length</name> <operator>+=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>length</name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>gap_size</name></name> <operator>==</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>slice1_mbuf_free</name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator>
				<name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name><index>[<expr><name>j</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: slots[%d] null"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice1_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF1</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice1</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>slice1</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>MBUF1</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>mbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>slice1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>slice1_used</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier><name>slice</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"slice1_used"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not implement yet!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice1_stat</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,  <parameter><decl><type><name>ACL_SLICE_STAT</name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice1</name> <init>= <expr><operator>(</operator><name>SLICE1</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nslots</name></name> <operator>=</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>islots</name></name> <operator>=</operator> <name><name>slice1</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>page_nslots</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_nslots</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>page_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>slice_length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>used_length</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sbuf</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice1_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slice_length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SLICE1</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>(</operator><name>SLICE1</name> <operator>*</operator><operator>)</operator> <call><name>__slice_calloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLICE1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* call the base ACL_SLICE's init function */</comment>
	
	<expr_stmt><expr><call><name>slice_init</name><argument_list>(<argument><expr><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* init the SLICE1's params */</comment>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>slots</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>nslots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>mslots</name><operator>.</operator><name>islots</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* reset the base ACL_SLICE's params */</comment>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_length</name></name> <operator>=</operator> <name>slice_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name> <operator>=</operator> <name>slice_length</name> <operator>+</operator> <name>SLICE1_HEAD_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_size</name></name> <operator>=</operator> <name>page_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name> <operator>=</operator> <operator>(</operator><name>page_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MBUF2</name></expr></argument>)</argument_list></sizeof><operator>)</operator>
		<operator>/</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>gap_size</name></name> <operator>=</operator> <name>page_size</name> <operator>-</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>page_nslots</name></name>
		<operator>*</operator> <name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_size</name></name></expr>;</expr_stmt>

	<comment type="block">/* set the base ACL_SLICE's callback */</comment>

	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_destroy</name></name> <operator>=</operator> <name>slice1_destroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_alloc</name></name> <operator>=</operator> <name>slice1_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_free</name></name> <operator>=</operator> <name>slice1_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_gc</name></name> <operator>=</operator> <name>slice1_gc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_used</name></name> <operator>=</operator> <name>slice1_used</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>slice</name><operator>.</operator><name>slice_stat</name></name> <operator>=</operator> <name>slice1_stat</name></expr>;</expr_stmt>

	<comment type="block">/* init the SLICE1's params */</comment>
	
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>slice</name><operator>-&gt;</operator><name>mbuf_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>)</operator> <name>slice</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*------------------------   public functions   -----------------------------*/</comment>

<function><type><name>void</name></type> <name>acl_slice_stat</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,  <parameter><decl><type><name>ACL_SLICE_STAT</name> <modifier>*</modifier></type><name>sbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_stat</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>slice_init</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nbuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>used_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nalloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>nfree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>acl_slice_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>slice_length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_slice_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>size</name></decl>, <decl><type ref="prev"/><name>sys_page_size</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name>sys_page_size</name> <operator>=</operator> <call><name>getpagesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYSTEM_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sys_page_size</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>dwPageSize</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sys_page_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sys_page_size</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>sys_page_size</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>page_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>sys_page_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sys_page_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>sys_page_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>/</operator> <name>slice_length</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: slice_length(%d). page_size(%d)"</literal>
			<literal type="string">" maybe too small, please increase it."</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>slice_length</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_GC1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>slice1_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>slice_length</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_GC2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>slice2_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>slice_length</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_SLICE_FLAG_GC3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>slice</name> <operator>=</operator> <call><name>slice3_create</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>slice_length</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: flag invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>slice</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>slice</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_destroy</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_slice_used</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_used</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_slice_alloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_alloc</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_slice_calloc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_alloc</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>slice_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_free2</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_free</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_slice_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MBUF</name> <modifier>*</modifier></type><name>mbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name> <operator>-</operator> <name>SLICE_OFF_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): off(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>mbuf</name> <operator>=</operator> <operator>(</operator><name>MBUF</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>ptr</name> <operator>-</operator> <name>off</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>slice</name> <operator>=</operator> <name><name>mbuf</name><operator>-&gt;</operator><name>slice</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_free</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_slice_gc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name><name>slice</name><operator>-&gt;</operator><name>slice_gc</name></name><argument_list>(<argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><name>void</name></type> <name>acl_slice_pool_init</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>   <name>elsize</name> <init>= <expr><name><name>asp</name><operator>-&gt;</operator><name>base</name></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>page_size</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"(memory SIZE: %d)"</literal></expr></argument>, <argument><expr><name>elsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">102400</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">81920</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">40960</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">20480</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">10240</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">8192</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">2048</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">512</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>elsize</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>page_size</name> <operator>=</operator> <name>elsize</name> <operator>*</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>,
					<argument><expr><name>elsize</name></expr></argument>, <argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slice_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>acl_slice_pool_create</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nslice</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>slice_flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name> <init>= <expr><operator>(</operator><name>ACL_SLICE_POOL</name><operator>*</operator><operator>)</operator>
		<call><name>__slice_calloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>asp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>asp</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name> <operator>=</operator> <name>nslice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>asp</name><operator>-&gt;</operator><name>slice_flag</name></name> <operator>=</operator> <name>slice_flag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <operator>(</operator><name>ACL_SLICE</name><operator>*</operator><operator>*</operator><operator>)</operator> <call><name>__slice_calloc_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>nslice</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_SLICE</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_slice_pool_init</name><argument_list>(<argument><expr><name>asp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>asp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_pool_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>asp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_slice_pool_used</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>acl_slice_used</name><argument_list>(<argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_pool_gc</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_slice_gc</name><argument_list>(<argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_pool_clean</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_pool_reset</name><parameter_list>(<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_slice_pool_clean</name><argument_list>(<argument><expr><name>asp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_slice_pool_init</name><argument_list>(<argument><expr><name>asp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_slice_pool_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>  <comment type="block">/* ÒÆÖÁÄÚ´æÍ·µÄ±êÖ¾Î» */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>__slice_free_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_slice_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_slice_pool_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>  <comment type="block">/* Í·²¿Áô³ö¿Õ¼ä×öÎª±êÖ¾Î» */</comment>
	<if_stmt><if>if <condition>(<expr><name>asp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name> <operator>&gt;=</operator> <name><name>asp</name><operator>-&gt;</operator><name>base</name></name> <operator>*</operator> <name><name>asp</name><operator>-&gt;</operator><name>nslice</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>__slice_malloc_fn</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>ptr</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name> <operator>/</operator> <name><name>asp</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <name><name>asp</name><operator>-&gt;</operator><name>base</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_alloc</name><argument_list>(<argument><expr><name><name>asp</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <name>size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_slice_pool_calloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nmemb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>asp</name></expr></argument>, <argument><expr><name>nmemb</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nmemb</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_slice_pool_realloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>asp</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>old_size</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>old_size</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>old_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_slice_pool_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_slice_pool_memdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>asp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_slice_pool_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>asp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>acl_slice_pool_strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_SLICE_POOL</name> <modifier>*</modifier></type><name>asp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_pool_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>asp</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>
</unit>
