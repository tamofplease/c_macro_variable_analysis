<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/memory/vstring_pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vbuf_print.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_allocator.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>label</name><index>[]</index></name> <init>= <expr><literal type="string">"vstring"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>__var_allocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__len</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void vstring_extend(ACL_VBUF *bp, int incr)
{
	unsigned used = (unsigned int) (bp-&gt;ptr - bp-&gt;data);
	long     new_len;

	<comment type="block">/*
	 * Note: vp-&gt;vbuf.len is the current buffer size (both on entry and on
	 * exit of this routine). We round up the increment size to the buffer
	 * size to avoid silly little buffer increments. With really large
	 * strings we might want to abandon the length doubling strategy,
	 * and go to fixed increments.
	 */</comment>
	new_len = (long) (bp-&gt;len + (bp-&gt;len &gt; incr ? bp-&gt;len : incr));
	<comment type="block">/*
	 * bp-&gt;data = (unsigned char *) acl_myrealloc((char *) bp-&gt;data,
	 * 	new_len);
	 */</comment>
	bp-&gt;data = acl_allocator_membuf_alloc(__FILE__, __LINE__,
		__var_allocator, new_len);
	bp-&gt;len = new_len;
	bp-&gt;ptr = bp-&gt;data + used;
	bp-&gt;cnt = bp-&gt;len - used;
}

static int vstring_buf_get_ready(ACL_VBUF *buf acl_unused)
{
	acl_msg_panic("vstring_buf_get: write-only buffer");
	return (0);
}

static int vstring_buf_put_ready(ACL_VBUF *bp)
{
	vstring_extend(bp, 0);
	return (0);
}

static int vstring_buf_space(ACL_VBUF *bp, ssize_t len)
{
	ssize_t need;

	if (len &lt; 0)
		acl_msg_panic("vstring_buf_space: bad length %ld", (long) len);
	if ((need = len - bp-&gt;cnt) &gt; 0)
		vstring_extend(bp, (int) need);
	return (0);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>after_alloc_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>pool_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>acl_allocator_membuf_alloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		<argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_glue</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>__len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	vp-&gt;vbuf.get_ready = vstring_buf_get_ready;
	vp-&gt;vbuf.put_ready = vstring_buf_put_ready;
	vp-&gt;vbuf.space = vstring_buf_space;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>before_free_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>pool_ctx</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>vp</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name> <operator>*</operator><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_allocator_membuf_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		<argument><expr><name>__var_allocator</name></expr></argument>, <argument><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vp</name><operator>-&gt;</operator><name>vbuf</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vstring_pool_create</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__var_allocator</name> <operator>=</operator> <name>allocator</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_allocator_pool_add</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>label</name></expr></argument>,  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTRING</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		<argument><expr><name>ACL_MEM_TYPE_VSTRING</name></expr></argument>, <argument><expr><name>after_alloc_fn</name></expr></argument>, <argument><expr><name>before_free_fn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
