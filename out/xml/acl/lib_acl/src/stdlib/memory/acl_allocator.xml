<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/memory/acl_allocator.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_malloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_allocator.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"squid_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"allocator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>__min_gross_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* 8 byte */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>__max_gross_size</name> <init>= <expr><literal type="number">1048576</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* 1MB */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_TYPE</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if (_type &gt;= ACL_MEM_TYPE_MAX) \
		acl_msg_fatal("%s: type(%d) &gt; ACL_MEM_TYPE_MAX(%d)", \
			myname, _type, ACL_MEM_TYPE_MAX); \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_create"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pool_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier> <name>pool</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_destroy"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pool_clean</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier><name>allocator</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_clean"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>mem_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier><name>allocator</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier> <name>pool</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mem_alloc"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported, %s(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>	, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mem_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier><name>allocator</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier><name>pool</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>obj</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mem_free"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported, %s(%d)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pool_ifused</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier><name>pool</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_ifused"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pool_inuse_count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier><name>pool</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_inuse_count"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>pool_inuse_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MEM_POOL</name> <modifier>*</modifier><name>pool</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_inuse_size"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>pool_total_allocated</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier><name>pool</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"pool_total_allocated"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: not supported!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>allocator</name> <operator>=</operator> <operator>(</operator><name>ACL_ALLOCATOR</name> <operator>*</operator><operator>)</operator> <call><name>acl_default_calloc</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pools</name></name> <operator>=</operator> <call><name>acl_stack_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_create_fn</name></name> <operator>=</operator> <name>pool_create</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_destroy_fn</name></name> <operator>=</operator> <name>pool_destroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_clean_fn</name></name> <operator>=</operator> <name>pool_clean</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_if_used</name></name> <operator>=</operator> <name>pool_ifused</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_inuse_count</name></name> <operator>=</operator> <name>pool_inuse_count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_inuse_size</name></name> <operator>=</operator> <name>pool_inuse_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_total_allocated</name></name> <operator>=</operator> <name>pool_total_allocated</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_alloc_fn</name></name> <operator>=</operator> <name>mem_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>mem_free_fn</name></name> <operator>=</operator> <name>mem_free</name></expr>;</expr_stmt>

	<return>return <expr><name>allocator</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>acl_allocator_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>mem_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>allocator</name> <operator>=</operator> <call><name>squid_allocator_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_config_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_config_fn</name></name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>mem_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ´´½¨Á½¸öÄ¬ÈÏµÄÄÚ´æ·ÖÅäÀàÐÍ³Ø */</comment>
	<expr_stmt><expr><call><name>mem_pool_create</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vstring_pool_create</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>allocator</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_allocator_ctl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_ctl"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>name</name> <operator>!=</operator> <name>ACL_ALLOCATOR_CTL_END</name></expr>;</condition> <incr><expr><name>name</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
		<switch>switch<condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_ALLOCATOR_CTL_MIN_SIZE</name></expr>:</case>
			<expr_stmt><expr><name>__min_gross_size</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_ALLOCATOR_CTL_MAX_SIZE</name></expr>:</case>
			<expr_stmt><expr><name>__max_gross_size</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: bad name %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_allocator_config</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mem_limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>allocator</name><operator>-&gt;</operator><name>pool_config_fn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_config_fn</name></name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>mem_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_allocator_free</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>acl_stack_pop</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>pools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_destroy_fn</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_stack_destroy</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>pools</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>acl_allocator_pool_add</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>obj_size</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>after_alloc_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pool_ctx</name></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>before_free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pool_ctx</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pool_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_pool_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name><name>allocator</name><operator>-&gt;</operator><name>pool_create_fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>obj_size</name></name> <operator>=</operator> <name>obj_size</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_MEMPOOL</name></expr></cpp:if>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>real_obj_size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>obj_size</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>obj_size</name> <operator>|</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>obj_size</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>after_alloc_fn</name></name> <operator>=</operator> <name>after_alloc_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>before_free_fn</name></name> <operator>=</operator> <name>before_free_fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>pool_ctx</name></name> <operator>=</operator> <name>pool_ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>pstack</name></name> <operator>=</operator> <call><name>acl_stack_create</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_stack_append</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>pools</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pool</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_allocator_pool_remove</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocatorr_pool_remove"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>allocator</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>allocator-&gt;pools</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>ACL_MEM_POOL</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>pool</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_destroy_fn</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_stack_delete</name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>pools</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_allocator_mem_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_mem_alloc"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nalloc</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><call><name><name>allocator</name><operator>-&gt;</operator><name>mem_alloc_fn</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_allocator_mem_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_mem_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MEM_POOL</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pool</name> <operator>=</operator> <name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>nfree</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>allocator</name><operator>-&gt;</operator><name>mem_free_fn</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Find the best fit ACL_MEM_TYPE_X_BUF type */</comment>

<function><type><specifier>static</specifier> <name>acl_mem_type</name></type> <name>memBufFindSizeType</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>net_size</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>gross_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>acl_mem_type</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>net_size</name> <argument_list type="generic">&lt; <argument><expr><name>__min_gross_size</name> <operator>||</operator> <name>net_size</name></expr></argument> &gt;</argument_list></name> <name>__max_gross_size</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gross_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>gross_size</name> <operator>=</operator> <name>net_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ACL_MEM_TYPE_NONE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_8_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_16_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_32_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_64_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_128_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_256_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_512_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_1K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else  if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_2K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_4K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">8192</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_8K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">8192</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">16384</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_16K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_32K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_64K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">131072</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_128K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">131072</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">262144</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_256K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">262144</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">524288</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_512K_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">524288</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>net_size</name> <operator>&lt;=</operator> <literal type="number">1048576</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_1M_BUF</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1048576</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ACL_MEM_TYPE_NONE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name>net_size</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>gross_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>gross_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_allocator_membuf_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>gross_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_mem_type</name></type> <name>type</name> <init>= <expr><call><name>memBufFindSizeType</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gross_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ACL_MEM_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>acl_allocator_mem_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>acl_default_malloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>acl_allocator_membuf_realloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>oldbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* XXX This can be optimized on very large buffers to use realloc() */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>newbuf</name> <init>= <expr><call><name>acl_allocator_membuf_alloc</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
			<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldbuf</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_default_memstat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>oldbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newbuf</name></expr></argument>, <argument><expr><name>oldbuf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>data_size</name> <operator>&gt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>data_size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_allocator_membuf_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>oldbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>newbuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_allocator_membuf_free</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
	<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>gross_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_mem_type</name></type> <name>type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_default_memstat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gross_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>memBufFindSizeType</name><argument_list>(<argument><expr><name>gross_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ACL_MEM_TYPE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_allocator_mem_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_default_free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_allocator_pool_ifused</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_pool_ifused"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_if_used</name></name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_allocator_pool_inuse_count</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_pool_inuse_count"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name><name>allocator</name><operator>-&gt;</operator><name>pool_inuse_count</name></name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_allocator_pool_inuse_size</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>, <parameter><decl><type><name>acl_mem_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_allocator_pool_inuse_size"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>allocator</name><operator>-&gt;</operator><name>pool_inuse_size</name></name><argument_list>(<argument><expr><name><name>allocator</name><operator>-&gt;</operator><name>MemPools</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_allocator_pool_total_allocated</name><parameter_list>(<parameter><decl><type><name>ACL_ALLOCATOR</name> <modifier>*</modifier></type><name>allocator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>allocator</name><operator>-&gt;</operator><name>pool_total_allocated</name></name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
