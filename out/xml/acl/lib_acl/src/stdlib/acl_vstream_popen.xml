<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/acl_vstream_popen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_argv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_set_ugid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_exec_command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream_popen.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Application-specific. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ACL_VSTREAM_WAITPID_FN</name>) <parameter_list>(<parameter><decl><type><name>pid_t</name></type></decl></parameter>, <parameter><decl><type><name>ACL_WAIT_STATUS_T</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>ACL_VSTREAM_POPEN_ARGS</name> <block>{
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>command</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>privileged</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>export</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>shell</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<decl_stmt><decl><type><name>uid_t</name></type>   <name>uid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gid_t</name></type>   <name>gid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM_WAITPID_FN</name></type> <name>waitpid_fn</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>ACL_VSTREAM_POPEN_ARGS</name>;</typedef>

<comment type="block">/* vstream_parse_args - get arguments from variadic list */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vstream_parse_args</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM_POPEN_ARGS</name> <modifier>*</modifier></type><name>args</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"vstream_parse_args"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>key</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * First, set the default values (on all non-zero entries)
	 */</comment>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name>       <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>privileged</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>env</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>export</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>shell</name></name>      <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>uid</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>gid</name></name>        <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>waitpid_fn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Then, override the defaults with user-supplied inputs.
	 */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ACL_VSTREAM_POPEN_END</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_VSTREAM_POPEN_ARGV</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: got ACL_VSTREAM_POPEN_ARGV"</literal>
					<literal type="string">" and ACL_VSTREAM_POPEN_COMMAND"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_POPEN_COMMAND</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: got ACL_VSTREAM_POPEN_ARGV"</literal>
					<literal type="string">" and ACL_VSTREAM_POPEN_COMMAND"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_POPEN_ENV</name></expr>:</case>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>env</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_POPEN_EXPORT</name></expr>:</case>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>export</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_POPEN_SHELL</name></expr>:</case>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>shell</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
		<case>case <expr><name>ACL_VSTREAM_POPEN_UID</name></expr>:</case>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>privileged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MINGW</name></cpp:ifdef>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>uid_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_POPEN_GID</name></expr>:</case>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>privileged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MINGW</name></cpp:ifdef>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>gid_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<case>case <expr><name>ACL_VSTREAM_POPEN_WAITPID_FN</name></expr>:</case>
			<expr_stmt><expr><name><name>args</name><operator>-&gt;</operator><name>waitpid_fn</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_VSTREAM_WAITPID_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown key: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: missing ACL_VSTREAM_POPEN_ARGV"</literal>
			<literal type="string">" or ACL_VSTREAM_POPEN_COMMAND"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>privileged</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: privileged uid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>privileged</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>gid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: privileged gid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ACL_UNIX</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dump_cmdline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_VSTREAM_POPEN_ARGS</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buff</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>argv</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>shell</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>args</name><operator>-&gt;</operator><name>shell</name></name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name><name>args</name><operator>-&gt;</operator><name>shell</name></name></expr></argument>, <argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>argv</argument>)</argument_list></macro> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>acl_vstring_export</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* acl_vstream_popen - open fp to child process */</comment>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_popen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstream_popen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM_POPEN_ARGS</name></type> <name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name><name>sockfd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vstream_parse_args</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>command</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>args</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_duplex_pipe</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>				<comment type="block">/* error */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	<case>case <expr><literal type="number">0</literal></expr>:</case>					<comment type="block">/* child */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"close: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>sockfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>fd</name> <operator>&amp;&amp;</operator> <call><name>DUP2</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"dup2: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>sockfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>close</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"close: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Don't try to become someone else unless the user specified it.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>privileged</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_set_ugid</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Environment plumbing. Always reset the command search path.
		 * That should probably be done by clean_env().
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>export</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_clean_env</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>export</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>, <argument><expr><name>ACL_PATH_DEFPATH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: setenv: %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>env</name></name></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><expr><name>cpp</name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>env</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cpp</name></expr>;</condition> <incr><expr><name>cpp</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>setenv</name><argument_list>(<argument><expr><name><name>cpp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cpp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"setenv: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Process plumbing. If possible, avoid running a shell.
		 */</comment>
		<expr_stmt><expr><call><name>acl_msg_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: execvp %s: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><operator>.</operator><name>shell</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>args</name><operator>.</operator><name>shell</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>acl_argv_split</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>shell</name></name></expr></argument>, <argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_argv_terminate</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: execvp %s: %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>argv</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>acl_exec_command</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* NOTREACHED */</comment>
		<return>return <expr><name>NULL</name></expr>;</return>
	<default>default:</default>					<comment type="block">/* parent */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"close: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name><name>sockfd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
			<argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * fp-&gt;waitpid_fn = args.waitpid_fn;
		 */</comment>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>dump_cmdline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>fp</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* acl_vstream_pclose - close fp to child process */</comment>

<function><type><name>int</name></type> <name>acl_vstream_pclose</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pid_t</name></type>   <name>saved_pid</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>pid</name></name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * ACL_VSTREAM_WAITPID_FN saved_waitpid_fn = fp-&gt;waitpid_fn;
	 */</comment>
	<decl_stmt><decl><type><name>ACL_VSTREAM_WAITPID_FN</name></type> <name>saved_waitpid_fn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pid_t</name></type>   <name>pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_WAIT_STATUS_T</name></type> <name>wait_status</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Close the pipe. Don't trigger an alarm in vstream_fclose().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>saved_pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"vstream_pclose: fp has no process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>errnum</name></name> <operator>==</operator> <name>ACL_ETIMEDOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): timeout, kill child(%d), cmdline='%s'"</literal></expr></argument>,
			<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>saved_pid</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr> </then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>saved_pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reap the child exit status.
	 */</comment>
	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>saved_waitpid_fn</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>saved_waitpid_fn</name><argument_list>(<argument><expr><name>saved_pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><name>saved_pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait_status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>

	<return>return <expr><ternary><condition><expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><call><name>WIFSIGNALED</name><argument_list>(<argument><expr><name>wait_status</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
		<expr><call><name>WTERMSIG</name><argument_list>(<argument><expr><name>wait_status</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>wait_status</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>

<comment type="block">/* acl_vstream_popen - open fp to child process */</comment>

<function><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>acl_vstream_popen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstream_popen"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM_POPEN_ARGS</name></type> <name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type>  <name><name>fds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>prochnd</name></decl>, <decl><type ref="prev"/><name>hInOut</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>STARTUPINFOA</name></type> <name>sinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>dwCreationFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>envbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmdline</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cpp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vstream_parse_args</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>command</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>args</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* ×é½¨Æô¶¯½ø³ÌÃüÁîÐÐ²ÎÊý±í */</comment>
		<comment type="block">/* ÎªÁË±ÜÃâ²ÎÊý´«µÝÊ±¿ÉÄÜÒòÆäÖÐ¼äº¬ÓÐ¿Õ¸ñ¶ø±»·Ö¸ô³É
		 * ¶à¸ö²ÎÊý£¬ËùÒÔÐèÒªÔÚ²ÎÊýÁ½±ß¼ÓÉÏÒýºÅ
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>args</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_duplex_pipe</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>prochnd</name> <operator>=</operator> <call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>prochnd</name></expr></argument>, <argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>prochnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hInOut</name></expr></argument>,
		<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): DuplicateHandle error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>env</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>envbuf</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>cpp</name> <operator>=</operator> <name><name>args</name><operator>.</operator><name>env</name></name></expr>;</init> <condition><expr><operator>*</operator><name>cpp</name></expr>;</condition> <incr><expr><name>cpp</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><name><name>cpp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cpp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><name><name>cpp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>cpp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><call><name>ACL_VSTRING_LEN</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name>envbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="block">/* sinfo.dwFlags = STARTF_USESHOWWINDOW;*/</comment>
	<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt>
	<comment type="block">/* sinfo.wShowWindow = SW_HIDE; */</comment>
	<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <name>hInOut</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <name>hInOut</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sinfo</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateProcessA</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="block">/* Command line */</comment>
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,  <comment type="block">/* Proc &amp; thread security attributes */</comment>
		<argument><expr><name>TRUE</name></expr></argument>,  <comment type="block">/* Inherit handles */</comment>
		<argument><expr><name>dwCreationFlags</name></expr></argument>,  <comment type="block">/* Creation flags */</comment>
		<argument><expr><ternary><condition><expr><name>envbuf</name></expr> ?</condition><then> <expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,  <comment type="block">/* Environment block */</comment>
		<argument><expr><name>NULL</name></expr></argument>,  <comment type="block">/* Current directory name */</comment>
		<argument><expr><operator>&amp;</operator><name>sinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s: CreateProcess(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>command</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>envbuf</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_file_close</name><argument_list>(<argument><expr><name>hInOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>acl_vstream_fhopen</name><argument_list>(<argument><expr><name><name>fds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>pinfo</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>hproc</name></name> <operator>=</operator> <name><name>pinfo</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>envbuf</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>envbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* wail_child -- wait the child exit status */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wait_child</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"wait_child"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>   <name>wait_status</name></decl>, <decl><type ref="prev"/><name>ntime</name> <init>= <expr><name>INFINITE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>hproc</name></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>wait_status</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>hproc</name></name></expr></argument>, <argument><expr><name>ntime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>wait_status</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>hproc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wait_status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>wait_status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): child exit code(%d)"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>wait_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wait_status</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): wait child timeout"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): wait child error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>hproc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>hproc</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* acl_vstream_pclose - close fp to child process */</comment>

<function><type><name>int</name></type> <name>acl_vstream_pclose</name><parameter_list>(<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_vstream_pclose"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Reap the monitor_child_thread exit status.
	 */</comment>
	<expr_stmt><expr><call><name>wait_child</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstream_fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_WINDOWS */</comment>
</unit>
