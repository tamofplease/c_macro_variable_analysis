<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/stdlib/getopt.c">
<comment type="block">/*
Newsgroups: mod.std.unix
Subject: public domain AT&amp;T getopt source
Date: 3 Nov 85 19:34:15 GMT

Here's something you've all been waiting for:  the AT&amp;T public domain
source for getopt(3).  It is the code which was given out at the 1985
UNIFORUM conference in Dallas.  I obtained it by electronic mail
directly from AT&amp;T.  The people there assure me that it is indeed
in the public domain.
*/</comment>

<comment type="block">/*LINTLIBRARY*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_getopt.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAVE_NO_GETOPT</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOF</name></cpp:macro>		<cpp:value>(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (opterr) { \
		char errbuf[2]; \
		errbuf[0] = c; errbuf[1] = '\n'; \
		(void) printf("%s", argv[0]); \
		(void) printf("%s", s); \
		(void) printf("%s", errbuf); \
	}</cpp:value></cpp:define>


<decl_stmt><decl><type><name>int</name></type>   <name>opterr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>optind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>optopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>getopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>call_first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>call_first</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>opterr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>call_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>sp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if<condition>(<expr><name>optind</name> <operator>&gt;=</operator> <name>argc</name> <operator>||</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return<expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
			<return>return<expr><operator>(</operator><name>EOF</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name></expr>]</index><index>[<expr><name>sp</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>(</operator><name>cp</name><operator>=</operator><call><name>strchr</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="string">": illegal option -- "</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index><index>[<expr><operator>++</operator><name>sp</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return<expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><operator>*</operator><operator>++</operator><name>cp</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index><index>[<expr><name>sp</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>optarg</name> <operator>=</operator> <operator>&amp;</operator><name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index><index>[<expr><name>sp</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if<condition>(<expr><operator>++</operator><name>optind</name> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><literal type="string">": option requires an argument -- "</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<return>return<expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index><index>[<expr><operator>++</operator><name>sp</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return<expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* HAVE_NO_GETOPT */</comment>
</unit>
