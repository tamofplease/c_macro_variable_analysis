<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/stdlib/acl_vbuf_print.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<comment type="block">/* System library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>			<comment type="block">/* 44BSD stdarg.h uses abort() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>			<comment type="block">/* 44bsd stdarg.h uses abort() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>			<comment type="block">/* sprintf() prototype */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>			<comment type="block">/* range of doubles */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>			<comment type="block">/* CHAR_BIT */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Application-specific. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vsprintf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vbuf_print.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 <comment type="block">/*
  * What we need here is a *sprintf() routine that can ask for more room (as
  * in 4.4 BSD). However, that functionality is not widely available, and I
  * have no plans to maintain a complete 4.4 BSD *sprintf() alternative.
  * 
  * This means we're stuck with plain old ugly sprintf() for all non-trivial
  * conversions. We cannot use snprintf() even if it is available, because
  * that routine truncates output, and we want everything. Therefore, it is
  * up to us to ensure that sprintf() output always stays within bounds.
  * 
  * Due to the complexity of *printf() format strings we cannot easily predict
  * how long results will be without actually doing the conversions. A trick
  * used by some people is to print to a temporary file and to read the
  * result back. In programs that do a lot of formatting, that might be too
  * expensive.
  * 
  * Guessing the output size of a string (%s) conversion is not hard. The
  * problem is with numerical results. Instead of making an accurate guess we
  * take a wide margin when reserving space.  The INT_SPACE margin should be
  * large enough to hold the result from any (octal, hex, decimal) integer
  * conversion that has no explicit width or precision specifiers. With
  * floating-point numbers, use a similar estimate, and add DBL_MAX_10_EXP
  * just to be sure.
  */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_SPACE</name></cpp:macro>	<cpp:value>((CHAR_BIT * sizeof(acl_int64)) / 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_SPACE</name></cpp:macro>	<cpp:value>((CHAR_BIT * sizeof(size_t)) / 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_SPACE</name></cpp:macro>	<cpp:value>((CHAR_BIT * sizeof(double)) / 2 + DBL_MAX_10_EXP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_SPACE</name></cpp:macro>	<cpp:value>((CHAR_BIT * sizeof(char *)) / 2)</cpp:value></cpp:define>

 <comment type="block">/*
  * Helper macros... Note that there is no need to check the result from
  * VSTRING_SPACE() because that always succeeds or never returns.
  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBUF_SKIP</name><parameter_list>(<parameter><type><name>bp</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ \
	while ((bp)-&gt;ptr &lt; (bp)-&gt;data + (bp)-&gt;len &amp;&amp; *(bp)-&gt;ptr) { \
		(bp)-&gt;ptr++; \
	} \
    }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VBUF_STRCAT</name><parameter_list>(<parameter><type><name>bp</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
	const unsigned char *_cp = (const unsigned char *) (s); \
	int _ch; \
	while ((_ch = *_cp++) != 0) { \
		ACL_VBUF_PUT((bp), _ch); \
	} \
    }</cpp:value></cpp:define>

<comment type="block">/* vbuf_print - format string, vsprintf-like interface */</comment>

<function><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>acl_vbuf_print</name><parameter_list>(<parameter><decl><type><name>ACL_VBUF</name> <modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>null</name> <init>= <expr><literal type="string">"(null)"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name></decl>;</decl_stmt>			<comment type="block">/* field width */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>prec</name></decl>;</decl_stmt>			<comment type="block">/* numerical precision */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>long_flag</name></decl>;</decl_stmt>		<comment type="block">/* long or plain integer */</comment>
	<decl_stmt><decl><type><name>int</name></type>     <name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEN</name></cpp:macro>	<cpp:value>128</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type> <name><name>fmt</name><index>[<expr><name>MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* format specifier */</comment>
	<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>CHECK_OVERFLOW</name><parameter_list>(<parameter><type><name>_i</name></type></parameter>, <parameter><type><name>_max</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (_i &gt;= _max)  \
		acl_msg_fatal("fmt overflow: i: %d MAX: %d", (_i), (_max));  \
} while (0)</cpp:value></cpp:define>

	<comment type="block">/*
	 * Iterate over characters in the format string, picking up arguments
	 * when format specifiers are found.
	 */</comment>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>format</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VBUF_PUT</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* ordinary character */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VBUF_PUT</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* %% becomes % */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Handle format specifiers one at a time, since we can only
		 * deal with arguments one at a time. Try to determine the end
		 * of the format specifier. We do not attempt to fully parse
		 * format strings, since we are ging to let sprintf() do the
		 * hard work.
		 * In regular expression notation, we recognize:
		 * 
		 * %-?0?([0-9]+|\*)?\.?([0-9]+|\*)?l?[a-zA-Z]
		 * 
		 * which includes some combinations that do not make sense.
		 * Garbage in, garbage out.
		 */</comment>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* clear format string */</comment>
		<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* left-adjusted field? */</comment>
			<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* signed field? */</comment>
			<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* zero-padded field? */</comment>
			<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* dynamic field width */</comment>
			<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* reset i to string length */</comment>
			<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>			<comment type="block">/* hard-coded field width */</comment>
			<for>for <control>(<init><expr><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ACL_ISDIGIT</name><argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>width</name> <operator>=</operator> <name>width</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt> 
				<expr_stmt><expr><call><name>CHECK_OVERFLOW</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* width/precision separator */</comment>
			<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* dynamic precision */</comment>
			<expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>fmt</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* reset i to string length */</comment>
			<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>			<comment type="block">/* hard-coded precision */</comment>
			<for>for <control>(<init><expr><name>prec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>ACL_ISDIGIT</name><argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name>prec</name> <operator>=</operator> <name>prec</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CHECK_OVERFLOW</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>MAX_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'6'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'4'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>		<comment type="block">/* long whatever */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>cp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>long_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* premature end, punt */</comment>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>			<comment type="block">/* type (checked below) */</comment>
		<expr_stmt><expr><name><name>fmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* null terminate */</comment>

		<comment type="block">/*
		 * Execute the format string - let sprintf() do the hard work
		 * for non-trivial cases only. For simple string conversions
		 * and for long string conversions, do a direct copy to the
		 * output buffer.
		 */</comment>
		<switch>switch <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>			<comment type="block">/* string-valued argument */</comment>
			<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<name>width</name> <operator>&gt;</operator> <operator>(</operator><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

				<if_stmt><if>if <condition>(<expr><call><name>ACL_VBUF_SPACE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>prec</name></expr>
					?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>prec</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>INT_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<return>return <expr><name>bp</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>null</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>VBUF_SKIP</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>VBUF_STRCAT</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>null</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>			<comment type="block">/* integral-valued argument */</comment>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
		<case>case <expr><literal type="char">'u'</literal></expr>:</case>
		<case>case <expr><literal type="char">'o'</literal></expr>:</case>
		<case>case <expr><literal type="char">'x'</literal></expr>:</case>
		<case>case <expr><literal type="char">'X'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>ACL_VBUF_SPACE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>prec</name></expr>
				?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>prec</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>INT_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

				<return>return <expr><name>bp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>long_flag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>long_flag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>long_flag</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>acl_int64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown format type: %c,"</literal>
					<literal type="string">" long_flag: %d"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>,
					<argument><expr><operator>*</operator><name>cp</name></expr></argument>, <argument><expr><name>long_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>VBUF_SKIP</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'e'</literal></expr>:</case>			<comment type="block">/* float-valued argument */</comment>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
		<case>case <expr><literal type="char">'g'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>ACL_VBUF_SPACE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>prec</name></expr>
				?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>prec</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>DBL_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

				<return>return <expr><name>bp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VBUF_SKIP</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'m'</literal></expr>:</case>
			<expr_stmt><expr><call><name>VBUF_STRCAT</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>ACL_VBUF_SPACE</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>width</name> <operator>&gt;</operator> <name>prec</name></expr>
				?</condition><then> <expr><name>width</name></expr> </then><else>: <expr><name>prec</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>PTR_SPACE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

				<return>return <expr><name>bp</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>VBUF_SKIP</name><argument_list>(<argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>			<comment type="block">/* anything else is bad */</comment>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown format type: %c"</literal></expr></argument>,
				<argument><expr><name>__FUNCTION__</name></expr></argument>, <argument><expr><operator>*</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* NOTREACHED */</comment>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<return>return <expr><name>bp</name></expr>;</return>
</block_content>}</block></function>
</unit>
