<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/stdlib/configure/acl_loadcfg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>ACL_WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sys_patch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_loadcfg.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>ACL_CFG_PARSER</name> <block>{
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>_cfg_array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>total_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>    <name>valid_line</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cfg_file_load</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>filefd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filefd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bsize</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bsize</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* make one byte room for '\0' */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_file_read</name><argument_list>(<argument><expr><name>filefd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* read error */</comment>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* read over */</comment>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bsize</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>bsize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* reach the end of memory area */</comment>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>_backup_junk_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"_backup_junk_line"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CFG_LINE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: calloc ACL_CFG_LINE, errmsg=%s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: strdup pdata, errmsg=%s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>cfg_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>_create_cfg_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ARRAY</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pdata</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pitem</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>ERETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ERETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                      \
	if (a)                                                               \
		acl_array_destroy(a, acl_myfree_fn);                         \
	if (cfg_line) {                                                      \
		if (cfg_line-&gt;value)                                         \
			acl_myfree(cfg_line);                                \
		acl_myfree(cfg_line);                                        \
	}                                                                    \
	return (x);                                                          \
} while (0);</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pdata</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CFG_LINE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_mystrtok</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pdata</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pitem</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pitem</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>pitem</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pitem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pitem</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* NOTICE: in acl_array_destroy, please don't input acl_myfree, but
	 * NULL as the second parameter, because the mystrup's result
	 * set are stored in cfg_line-&gt;value now:)
	 */</comment>
	<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>cfg_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>acl_cfg_parser_load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"acl_cfg_parse_load"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>buf_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>content_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pline_begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type>   <name>filefd</name> <init>= <expr><name>ACL_FILE_INVALID</name></expr></init></decl>;</decl_stmt>
	
<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>ERETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ERETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if (content_buf != NULL) \
		acl_myfree(content_buf); \
	if (filefd != ACL_FILE_INVALID) \
		acl_file_close(filefd); \
	if (parser != NULL) { \
		acl_array_destroy(parser-&gt;_cfg_array, NULL); \
		acl_myfree(parser); \
	} \
	return (x); \
} while (0);</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if (content_buf != NULL) \
		acl_myfree(content_buf); \
	if (filefd != ACL_FILE_INVALID) \
		acl_file_close(filefd); \
	return (x); \
} while (0);</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>pathname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pathname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: invalid pathname\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't stat, pathname=%s, errmsg=%s\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_PARSER</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>parser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't calloc ACL_CFG_PARSER, pathname=%s, errmsg=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't create array, pathname=%s, errmsg=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>valid_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>stat_buf</name><operator>.</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">256</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>content_buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>content_buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't calloc, pathname=%s, errmsg=%s\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>ACL_ANDROID</name></cpp:ifdef>
	<expr_stmt><expr><name>filefd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>filefd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>S_IREAD</name> <operator>|</operator> <name>S_IWRITE</name> <operator>|</operator> <name>S_IRGRP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>filefd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>S_IREAD</name> <operator>|</operator> <name>S_IWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>filefd</name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't open, pathname=%s, errmsg=%s\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>_cfg_file_load</name><argument_list>(<argument><expr><name>filefd</name></expr></argument>, <argument><expr><name>content_buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't read, pathname=%s, errmsg=%s\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>SKIP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>for (; *var &amp;&amp; (cond); var++) {}</cpp:value></cpp:define>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>content_buf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pline_begin</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>  <comment type="block">/* keep the line header */</comment>
		<comment type="block">/* first, skip all ' ' and '\t' */</comment>
		<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if  <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* the comment line */</comment>
			<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* find the line's end */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* this must be '\n' */</comment>
				<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* set '\0' and skip one byte */</comment>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <call><name>_backup_junk_line</name><argument_list>(<argument><expr><name>pline_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>,
					<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cfg_line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't add ACL_CFG_LINE to array, "</literal>
					<literal type="string">"errmsg=%s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* SKIP(ptr, (*ptr == '\r' || *ptr == '\n')); */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* set '\0' first and go on */</comment>
				<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* set '\0' first and go on */</comment>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <call><name>_backup_junk_line</name><argument_list>(<argument><expr><name>pline_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>,
					<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cfg_line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't add ACL_CFG_LINE to array, "</literal>
					<literal type="string">"errmsg=%s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pline_begin</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>  <comment type="block">/* reset the line header */</comment>

		<comment type="block">/* find the line's end */</comment>
		<expr_stmt><expr><call><name>SKIP</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\r'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* this must be '\r' or '\n' */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* set '\0' first and go on */</comment>
				<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* set '\0' first and go on */</comment>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* make ptr to the next line's beginning */</comment>
		<comment type="block">/* SKIP(ptr, (*ptr == '\r' || *ptr == '\n')); */</comment>

		<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <call><name>_create_cfg_line</name><argument_list>(<argument><expr><name>pline_begin</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cfg_line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't add ACL_CFG_LINE to array, errmsg=%s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>valid_line</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name> <operator>!=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: total_line=%d, acl_array_size=%d, errmsg=not equal\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name></expr></argument>,
			<argument><expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_cfg_line_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>cfg_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cfg_parser_free</name><parameter_list>(<parameter><decl><type><name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>parser</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>_cfg_line_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_cfg_parser_walk</name><parameter_list>(<parameter><decl><type><name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ACL_CFG_WALK_FN</name></type> <name>walk_fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parser</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator>
				<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>walk_fn</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cfg_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cfg_line_replace</name><parameter_list>(<parameter><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"acl_cfg_line_replace"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
	       <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>	

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>from</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>to</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>to</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;=</operator> <name>to</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>value</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't strdup, errmsg=%s\n"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>from</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>to</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>value</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't strdup, errmsg=%s\n"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>acl_cfg_parser_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>cfg_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cfg_parser_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_cfg_line_dump</name><parameter_list>(<parameter><decl><type><name>ACL_FILE_HANDLE</name></type> <name>filefd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"_cfg_line_dump"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>dlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>,  <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>delimiter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>   <comment type="block">/* for '\n' and '\0' */</comment>
		<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>pbuf</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"\n\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>acl_file_write</name><argument_list>(<argument><expr><name>filefd</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't write pbuf, error=%s\n"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>acl_file_write</name><argument_list>(<argument><expr><name>filefd</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cfg_parser_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,
			<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"acl_cfg_parser_dump"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_FILE_HANDLE</name></type> <name>filefd</name> <init>= <expr><name>ACL_FILE_INVALID</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if (filefd != ACL_FILE_INVALID) \
		acl_file_close(filefd); \
	return (x); \
} while (0);</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pathname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>pathname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>ACL_ANDROID</name></cpp:ifdef>
	<expr_stmt><expr><name>filefd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>,
			<argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator> <name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>filefd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>,
			<argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator> <name>O_WRONLY</name></expr></argument>,
			<argument><expr><name>S_IREAD</name> <operator>|</operator> <name>S_IWRITE</name> <operator>|</operator> <name>S_IRGRP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><name>filefd</name> <operator>=</operator> <call><name>acl_file_open</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>,
		<argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator> <name>O_WRONLY</name></expr></argument>,
		<argument><expr><name>S_IREAD</name> <operator>|</operator> <name>S_IWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"unknown OS"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>filefd</name> <operator>==</operator> <name>ACL_FILE_INVALID</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't open, pathname=%s, errmsg=%s\n"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator>
			<call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_cfg_line_dump</name><argument_list>(<argument><expr><name>filefd</name></expr></argument>, <argument><expr><name>cfg_line</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cfg_parser_append</name><parameter_list>(<parameter><decl><type><name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"acl_cfg_parser_append"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't create array, errmsg=%s"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>valid_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>cfg_line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: can't add ACL_CFG_LINE to array, errmsg=%s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>valid_line</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_cfg_parser_delete</name><parameter_list>(<parameter><decl><type><name>ACL_CFG_PARSER</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>myname</name><index>[]</index></name> <init>= <expr><literal type="string">"acl_cfg_parser_delete"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>parser</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: input error\n"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>valid_line</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>total_line</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_array_delete_idx</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>_cfg_line_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>parser</name><operator>-&gt;</operator><name>_cfg_array</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>acl_cfg_line_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ncount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_CFG_LINE</name> <modifier>*</modifier></type><name>cfg_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>ERETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>ERETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	if (cfg_line == NULL) \
		return (x); \
	if (cfg_line-&gt;value == NULL) { \
		acl_myfree(cfg_line); \
		return (x); \
	} \
	for (i = 0; i &lt; cfg_line-&gt;ncount; i++) { \
		if (cfg_line-&gt;value[i] == NULL) \
			break; \
		acl_myfree(cfg_line-&gt;value[i]); \
	} \
	acl_myfree(cfg_line-&gt;value); \
	acl_myfree(cfg_line); \
	return (x); \
} while (0);</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ncount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cfg_line</name> <operator>=</operator> <operator>(</operator><name>ACL_CFG_LINE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_CFG_LINE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfg_line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>ncount</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>pdata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cfg_line</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ERETURN</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>cfg_line</name><operator>-&gt;</operator><name>ncount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>cfg_line</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
