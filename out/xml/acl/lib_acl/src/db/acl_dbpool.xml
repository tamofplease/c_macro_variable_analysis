<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/db/acl_dbpool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/acl_dbpool.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mysql/acl_dbpool_mysql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"null/acl_dbpool_null.h"</cpp:file></cpp:include>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void __dbpool_debug_cfg(const ACL_DB_INFO *db_info)
{
	acl_msg_info("db_addr = %s\n", db_info-&gt;db_addr);
	acl_msg_info("db_user = %s\n", db_info-&gt;db_user);
	acl_msg_info("db_pass = %s\n", db_info-&gt;db_pass);
	acl_msg_info("db_name = %s\n", db_info-&gt;db_name);
	acl_msg_info("db_max  = %d\n", db_info-&gt;db_max);
	acl_msg_info("ping_inter = %d\n", db_info-&gt;ping_inter);
	acl_msg_info("timeout_inter = %d\n", db_info-&gt;timeout_inter);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>acl_dbpool_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ACL_DB_INFO</name> <modifier>*</modifier></type><name>db_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dbpool_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_DB_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>db_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_type</name> <operator>=</operator> <literal type="string">"mysql"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>db_type</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_pool</name> <operator>=</operator> <call><name>acl_dbpool_null_create</name><argument_list>(<argument><expr><name>db_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAS_MYSQL</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>db_type</name></expr></argument>, <argument><expr><literal type="string">"mysql"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>db_pool</name> <operator>=</operator> <call><name>acl_dbpool_mysql_create</name><argument_list>(<argument><expr><name>db_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): %s not supported yet"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>db_pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s, %s(%d): dbpool_%s_create error"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>db_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <operator>&amp;</operator><name><name>db_pool</name><operator>-&gt;</operator><name>db_info</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	ACL_SAFE_STRNCPY(info-&gt;db_addr, db_info-&gt;db_addr, sizeof(info-&gt;db_addr));
	ACL_SAFE_STRNCPY(info-&gt;db_name, db_info-&gt;db_name, sizeof(info-&gt;db_name));
	ACL_SAFE_STRNCPY(info-&gt;db_user, db_info-&gt;db_user, sizeof(info-&gt;db_user));
	ACL_SAFE_STRNCPY(info-&gt;db_pass, db_info-&gt;db_pass, sizeof(info-&gt;db_pass));

	info-&gt;db_max        = db_info-&gt;db_max;
	info-&gt;ping_inter    = db_info-&gt;ping_inter;
	info-&gt;timeout_inter = db_info-&gt;timeout_inter;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>db_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_DB_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>db_pool</name><operator>-&gt;</operator><name>db_max</name></name>   <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>db_max</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_pool</name><operator>-&gt;</operator><name>db_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db_pool</name><operator>-&gt;</operator><name>db_inuse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
	<return>return <expr><operator>(</operator><name>db_pool</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>acl_dbpool_destroy</name><parameter_list>(<parameter><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>db_pool</name><operator>-&gt;</operator><name>destroy</name></name><argument_list>(<argument><expr><name>db_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>acl_dbpool_peek</name><parameter_list>(<parameter><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>db_pool</name><operator>-&gt;</operator><name>dbh_peek</name></name><argument_list>(<argument><expr><name>db_pool</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>acl_dbpool_check</name><parameter_list>(<parameter><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>db_pool</name><operator>-&gt;</operator><name>dbh_check</name></name><argument_list>(<argument><expr><name>db_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>acl_dbpool_release</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>db_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_handle</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<comment type="block">/*	if ((db_pool-&gt;db_info.debug_flag &amp; ACL_DB_DEBUG_MEM))
		acl_memory_stat();
*/</comment>

	<expr_stmt><expr><call><name><name>db_pool</name><operator>-&gt;</operator><name>dbh_release</name></name><argument_list>(<argument><expr><name>db_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>acl_dbpool_export</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>db_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_handle</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name><name>db_pool</name><operator>-&gt;</operator><name>dbh_export</name></name><argument_list>(<argument><expr><name>db_handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>acl_dbpool_close</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>db_handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>db_pool</name> <operator>=</operator> <name><name>db_handle</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>db_pool</name><operator>-&gt;</operator><name>dbh_close</name></name><argument_list>(<argument><expr><name>db_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>acl_dbpool_set_ping</name><parameter_list>(<parameter><decl><type><name>ACL_DB_POOL</name> <modifier>*</modifier></type><name>db_pool</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ping_fn</name>)<parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>db_pool</name><operator>-&gt;</operator><name>dbh_ping</name></name> <operator>=</operator> <name>ping_fn</name></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*----------------------------------------------------------------------------*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
