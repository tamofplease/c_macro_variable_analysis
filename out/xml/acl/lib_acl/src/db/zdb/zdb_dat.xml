<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/db/zdb/zdb_dat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_meter_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_sane_basename.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/zdb.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zdb_private.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>dat_store_header_sync</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_store_header_sync"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write to %s error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÊÍ·Å ACL_VSTRING »Øµ÷º¯Êý
 * @param arg {void*} »Øµ÷²ÎÊý, ¿É×ª»»³É ACL_VSTRING ¶ÔÏó
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>free_vstring_fn</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * È·±£ ZDB.dat_ifiles µÄÊý×éÈÝÁ¿¹»ÓÃ
 * @param db {ZDB*}
 * @param size {int} Êý×éÈÝÁ¿µÄ´óÐ¡ÒªÇó
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dat_ifiles_space</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idisk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* xxx: Ö»ËùÒÔ¼Ó1ÊÇÒòÎªÏÂ±êÊÇ´Ó1¿ªÊ¼µÄ, ¶ø C ÓïÑÔÖÐµÄÊý×éÏÂÔØÊÇ´Ó 0 ¿ªÊ¼µÄ,
	 * ËùÒÔËµ db-&gt;dat_disks[0] ÊÇ¸øÀË·ÑµôÁË :( --- zsx
	 */</comment>
	<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator>
			<call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles_size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator>
		<call><name>acl_myrealloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles_size</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name><name>dat_ifiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>dat_ifiles_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ¼ÆËãÖµ´æ´¢µÄÏà¶ÔÂ·¾¶ºÅ
 * @param db {ZDB*}
 * @param len {int} Êý¾ÝµÄ³¤¶È
 * @return {int} &gt;= 0: ok; -1: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dat_inode</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_inode"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>inode</name></decl>;</decl_stmt>

	<comment type="block">/* Ëù¸øµÄ³¤¶È±ØÐëÎª»ù´¡¿éµÄÕûÊý±¶ */</comment>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <name><name>db</name><operator>-&gt;</operator><name>blk_dlen</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): len(%d) %% db-&gt;blk_dlen(%d) != 0, invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>blk_dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¸ù¾ÝÊý¾Ý¿é³¤¶È¼ÆËã³ö»ù´¡¿éµÄ¸öÊý, Í¬Ê±Ò²ÊÇ´æ´¢ÎÄ¼þËùÔÚÄ¿Â¼µÄ±êÊ¶ºÅ */</comment>

	<expr_stmt><expr><name>inode</name> <operator>=</operator> <name>len</name> <operator>/</operator> <name><name>db</name><operator>-&gt;</operator><name>blk_dlen</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>inode</name> <operator>&gt;</operator> <name>DIR_LIMIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): inode(%d) &gt; %u, too large"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>DIR_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>inode</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃÖµ´æ´¢µÄÎÄ¼þÈ«Â·¾¶
 * @param db {ZDB*}
 * @param buf {ACL_VSTRING*} ´æ´¢½á¹ûµÄ»º³åÇø
 * @param inode {int} Â·¾¶ºÅ
 * @param ifile {int} ÎÄ¼þºÅ
 * @return {ACL_VSTRING*} ½á¹û»º³åÇøµØÖ·
 **/</comment>
<function><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>dat_filepath</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idisk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>buf_key</name> <init>= <expr><operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf_safe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>__buf_unsafe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf_safe</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf_safe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>__buf_unsafe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__buf_unsafe</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>buf_safe</name> <operator>=</operator> <name>__buf_unsafe</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>buf_safe</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>buf_key</name></expr></argument>, <argument><expr><name>buf_safe</name></expr></argument>, <argument><expr><name>free_vstring_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_safe</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>INCLUDE_PATH</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%d/%s_%d_%d.dat"</literal></expr></argument>,
		<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%s_%d_%d.dat"</literal></expr></argument>,
		<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃÎÄ¼þµÄËùÔÚÂ·¾¶
 * @param db {ZDB*}
 * @param buf {ACL_VSTRING*} ´æ´¢½á¹ûµÄ»º³åÇø
 * @param inode {int} Â·¾¶ºÅ
 * @return {ACL_VSTRING*} ½á¹û»º³åÇøµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>dat_path</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idisk</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>inode</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type> <name>buf_key</name> <init>= <expr><operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf_safe</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>__buf_unsafe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf_safe</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTRING</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_tls_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf_safe</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>buf_key</name> <operator>==</operator> <operator>(</operator><name>acl_pthread_key_t</name><operator>)</operator> <name>ACL_TLS_OUT_OF_INDEXES</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>__buf_unsafe</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>__buf_unsafe</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>buf_safe</name> <operator>=</operator> <name>__buf_unsafe</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>buf_safe</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_pthread_tls_set</name><argument_list>(<argument><expr><name>buf_key</name></expr></argument>, <argument><expr><name>buf_safe</name></expr></argument>, <argument><expr><name>free_vstring_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf_safe</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>INCLUDE_PATH</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%d"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>

<comment type="block" format="doxygen">/**
 * ½«ÐÂµÄÕ¼ÓÃ¿éÁ´½Óµ½Õ¼ÓÃÁ´ÖÐ
 * @param store {ZDB_DAT_STORE*}
 * @param blk {ZDB_BLK*}
 * @parem ilnk {zdb_lnk_t}
 * @return {int} 0: ok; -1: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>busy_blk_link</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>zdb_lnk_t</name></type> <name>ilnk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"busy_blk_link"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>hdr_blk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>, <decl><type ref="prev"/><name>blk_len</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (hdr_blk)  \
		zdb_blk_free(hdr_blk);  \
	return (x);  \
} while (0)</cpp:value></cpp:define>
	
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ihead_busy(%d) != -1"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>=</operator> <name>ilnk</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>=</operator> <name>ilnk</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ihead_busy(%d) invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blk_len</name> <operator>=</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hdr_blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>blk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>hdr_blk</name></expr></argument>, <argument><expr><name>blk_len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hdr_blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_ilnk</name></name> <operator>!=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, blk_ilnk(%d) != ihead_busy(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>hdr_blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_ilnk</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>hdr_blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <name>ilnk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>=</operator> <name>ilnk</name></expr>;</expr_stmt>  <comment type="block">/* ¸üÐÂÕ¼ÓÃ¿éÁ´Í· */</comment>

	<comment type="block">/* ¸üÐÂÄ³Õ¼ÓÃ¿éµÄÍ·ÐÅÏ¢ */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>hdr_blk</name></expr></argument>, <argument><expr><name>blk_len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>busy_blk_unlink</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>zdb_lnk_t</name></type> <name>ilnk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"busy_blk_unlink"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>blk_hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (blk_hdr)  \
		acl_myfree(blk_hdr);  \
	return (x);  \
} while (0)</cpp:value></cpp:define>

	<if_stmt><if>if <condition>(<expr><name>ilnk</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ilnk(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): ihead_busy(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): itail_busy(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¸ÃÕ¼ÓÃ¿éÓ¦¸ÃÊÇÍ·²¿¿é */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>!=</operator> <name>ilnk</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ihead_busy(%d) != ilnk(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>==</operator> <name>ilnk</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ËµÃ÷¸Ã blk ÊÇ×îºóÒ»¸öÕ¼ÓÃ¿éÁË */</comment>

			<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, inext_busy(%d) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>blk_hdr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_HDR</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name> <operator>!=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_ilnk(%d) != inext_busy(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name></expr></argument>,
				<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>=</operator> <name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ËµÃ÷¸ÃÕ¼ÓÃ¿éÓ¦¸ÃÎªÎ²²¿¿é */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>!=</operator> <name>ilnk</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, itail_busy(%d) != ilnk(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* xxx: sanity check */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>==</operator> <name>ilnk</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ËµÃ÷¸Ã blk ÊÇ×îºóÒ»¸öÕ¼ÓÃ¿éÁË */</comment>

			<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, iprev_busy(%d) invalid"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>blk_hdr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_HDR</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name> <operator>!=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_ilnk(%d) != iprev_busy(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name></expr></argument>,
				<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>inext_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>=</operator> <name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ËµÃ÷¸ÃÕ¼ÓÃ¿éÓ¦¸ÃÎªÖÐ¼ä¿é */</comment>

	<comment type="block">/* ¸üÐÂºóÒ»¸öÕ¼ÓÃ¿éµÄÍ·ÐÅÏ¢ */</comment>

	<expr_stmt><expr><name>blk_hdr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_HDR</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name> <operator>!=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_ilnk(%d) != inext_busy(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name></expr></argument>,
			<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>iprev_busy</name></name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¸üÐÂÇ°Ò»¸öÕ¼ÓÃ¿éµÄÍ·ÐÅÏ¢ */</comment>

	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator><name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name> <operator>!=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_ilnk(%d) != iprev_busy(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>blk_ilnk</name></name></expr></argument>,
			<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>inext_busy</name></name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ZDB_LINK_BUSY */</comment>

<comment type="block" format="doxygen">/**
 * Ôö¼Ó²¢³õÊ¼»¯Öµ´æ´¢µÄÊý¾Ý¿é
 * @param store {ZDB_DAT_STORE*} Öµ´æ´¢¾ä±ú
 * @param count {acl_int64} Ôö¼ÓµÄÊý¾Ý¿é¸öÊý
 * @return {int} 0: ok; -1: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dat_store_blk_add</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>acl_int64</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_store_blk_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* ¼ì²éÊäÈëÊÇ·ñºÏ·¨ */</comment>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): count("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ì²éÊÇ·ñÒÑ¾­´ïµ½·ÖÅäÏÞÖÆ¸öÊý */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): store(%s)'s size("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") &gt;= limit("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>  <comment type="block">/* ½« count ÉèÎª×î´óÖµ */</comment>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="block">/* ±ØÐë±£Ö¤²»ÄÜ³¬¹ýÏÞÖÆ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ½«ÎÄ¼þÖ¸ÕëÖÃÎ² */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fseek %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËãÕæÊµµÄ ZDB_BLK µÄ¿Õ¼ä´óÐ¡²¢·ÖÅäÒ»¸öÐÂµÄ ZDB_BLK ¶ÔÏó */</comment>
	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Ë³Ðò³õÊ¼»¯Öµ´æ´¢ÖÐµÄ¸÷¸öÊý¾Ý¿é, ²¢ÐÎ³Éµ¥ÏòÁ´ */</comment>
	
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/* µ±´ïµ½×î´óÖµÊ±±íÊ¾ÏÂÒ»¸öÎ»ÖÃÎÞÐ§ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_ilnk</name></name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>  <comment type="block">/* ±êÊ¶×Ô¼ºµÄË÷ÒýÎ»ÖÃºÅ, Ð£ÑéÓÃ */</comment>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr>;</expr_stmt>  <comment type="block">/* ÓëÁ´Á¬½Ó */</comment>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* ËùÓÐµÄ³õÊ¼¼üÎª -1 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>  <comment type="block">/* ¸üÐÂÖµ´æ´¢Í·µÄÍ·¿ÕÏÐÖ¸Õë */</comment>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
					<argument><expr><name>blk</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write to %s error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
					<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/* µ±´ïµ½×î´óÖµÊ±±íÊ¾ÏÂÒ»¸öÎ»ÖÃÎÞÐ§ */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>==</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_ilnk</name></name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>  <comment type="block">/* ±êÊ¶×Ô¼ºµÄË÷ÒýÎ»ÖÃºÅ, Ð£ÑéÓÃ */</comment>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr>;</expr_stmt>  <comment type="block">/* ÓëÁ´Á¬½Ó */</comment>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* ËùÓÐµÄ³õÊ¼¼üÎª -1 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>iprev_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name>i</name></expr>;</expr_stmt>  <comment type="block">/* ¸üÐÂÖµ´æ´¢Í·µÄÍ·¿ÕÏÐÖ¸Õë */</comment>

			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Ö»Ðè³õÊ¼»¯¿éÍ·ÐÅÏ¢ */</comment>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write to %s error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
					<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ë¢ÐÂÐ´µÄ»º³åÇøÖÁ´ÅÅÌ */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator><name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fflush to %s error %s"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>  <comment type="block">/* ¸üÐÂÖµ´æ´¢×Ü·ÖÅäµÄÊý¾Ý¿é¸öÊý */</comment>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ³õÊ¼»¯Öµ´æ´¢
 * @param store {ZDB_DAT_STORE*} Öµ´æ´¢¾ä±ú
 * @param db {ZDB*} ZDB ¾ä±ú
 * @return {int} 0: ok; -1: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dat_store_init</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_store_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* ³õÊ¼»¯Öµ´æ´¢µÄÍ·ÐÅÏ¢ */</comment>

	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>nstep</name></name> <operator>=</operator> <ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>dat_nstep</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>db</name><operator>-&gt;</operator><name>dat_nstep</name></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_hdr_dlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_dlen</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>blk_dlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_count</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>blk_count_tmp</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* Ö¸ÏòÒ»¸ö¿ÕÎ»ÖÃ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* Ã»ÓÐÕ¼ÓÃÊý¾Ý¿é */</comment>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>itail_busy</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* Ã»ÓÐÕ¼ÓÃÊý¾Ý¿é */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write header to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
 
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´ò¿ªÖµ´æ´¢ÎÄ¼þ¾ä±úÊ±µÄ»Øµ÷º¯Êý
 * @param fh {ACL_FHANDLE*} ÎÄ¼þ¾ä±ú
 * @param arg {void*} ²ÎÊý
 * @return {int} 0: ok; -1: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dat_store_on_open</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_store_on_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>ZDB_DAT_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><name>ZDB</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_DAT_STORE</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fh-&gt;size(%d) != ZDB_DAT_STORE's size(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fh</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_DAT_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>db</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>=</operator> <name>STORE_FLAG_DAT</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_SLICE_DAT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>|=</operator> <name>STORE_FLAG_IO_SLICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Èç¹ûÊÇÐÂÎÄ¼þÔò³õÊ¼»¯ */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>fsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_DAT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: begin init %s ..."</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>dat_store_init</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, dat_store_init error"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_DAT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: init %s ok"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_cache_max</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_timeout</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_cache_timeout</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>wback_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_wback_max</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>zdb_io_cache_open</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ¿ªÊ¼Ìí¼Ó²¢³õÊ¼»¯Öµ´æ´¢ÖÐµÄÊý¾Ý¿é */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>dat_store_blk_add</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>nstep</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dat_store_blk_add error"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>zdb_dat_iter_set</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÊÇ¾ÉÎÄ¼þÔò¶ÁÈ¡ÎÄ¼þÍ·ÐÅÏ¢, ÇÒÓ¦½øÐÐ¼ìÑé */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_readn</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, read key header from %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_DAT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_cache_max</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_timeout</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_cache_timeout</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>wback_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_wback_max</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>zdb_io_cache_open</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>zdb_dat_iter_set</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ¹Ø±ÕÖµ´æ´¢ÎÄ¼þ¾ä±úÊ±µÄ»Øµ÷º¯Êý
 * @param fh {ACL_FHANDLE*} ÎÄ¼þ¾ä±ú
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dat_store_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_store_on_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>ZDB_DAT_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dat_store_header_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_io_cache_close</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_DAT</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): sync header ok, close %s now"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>zdb_dat_store_close</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>fhandle</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>zdb_dat_store_open</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_store_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name> <init>= <expr><name>ACL_FHANDLE_O_NOATIME</name></expr></init></decl> <comment type="block">/* | ACL_FHANDLE_O_DIRECT */</comment>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_OPEN_LOCK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>ACL_FHANDLE_O_MLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_vstring_strcpy</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>ZDB_DAT_STORE</name><operator>*</operator><operator>)</operator> <call><name>acl_fhandle_open</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_DAT_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>oflags</name></expr></argument>,
			<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>dat_store_on_open</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>dat_store_on_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open file(%s) error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>store</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>zdb_dat_get</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>blk_off</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>idisk</name></decl>, <decl><type ref="prev"/><name>inode</name></decl>, <decl><type ref="prev"/><name>ifile</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>blk_dlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_lnk_t</name></type> <name>blk_ilnk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>idisk</name> <operator>=</operator> <operator>(</operator><name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&gt;&gt;</operator> <name>DIR_BITS</name><operator>)</operator> <operator>&amp;</operator> <name>DISK_MASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>idisk</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>idisk</name></expr></argument> &gt;</argument_list></name> <name>DISK_LIMIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): idisk(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inode</name> <operator>=</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&amp;</operator> <name>DIR_MASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>inode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>inode</name></expr></argument> &gt;</argument_list></name> <name>DIR_LIMIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): inode(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÅÐ¶ÏÔÚÖµ´æ´¢ÖÐµÄÆ«ÒÆÖµ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_off_old("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ifile</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name></expr>;</expr_stmt>  <comment type="block">/* ÎÄ¼þ½áµãºÅ */</comment>

	<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>dat_filepath</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_dat_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËãÔÚÎÄ¼þÖÐµÄÕæÊµÎ»ÖÃ */</comment>

	<expr_stmt><expr><name>blk_ilnk</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name> <operator>*</operator> <name>ifile</name></expr>;</expr_stmt>  <comment type="block">/* ÎÄ¼þÎ»ÖÃË÷ÒýÖµ */</comment>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>blk_ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¼ÆËãÕæÊµµÄ ZDB_BLK µÄ¿Õ¼ä´óÐ¡ */</comment>

	<expr_stmt><expr><name>blk_dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ·ÖÅäÒ»¸ö ZDB_BLK ¶ÔÏó */</comment>

	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>blk_dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>blk_dlen</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_GETD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): %s, zdb_read(%d), blk_off: "</literal> <name>ACL_FMT_I64D</name>
		<literal type="string">", idisk: %d, inode: %d,"</literal>
		 <literal type="string">" ifile: %d, ilnk: %d, dat_limit: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", blk_dlen: %d"</literal></expr></argument>,
		 <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
		 <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><name>blk_ilnk</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name></expr></argument>, <argument><expr><name>blk_dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">"), blk_dlen(%d), idisk: %d, inode: %d, ifile: %d"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>blk_dlen</name></expr></argument>,
			<argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>zdb_blk_free</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>zdb_dat_store_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ¹Ø±ÕÖµ´æ´¢ */</comment>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>zdb_dat_store_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ¹Ø±ÕÖµ´æ´¢ */</comment>

	<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>blk</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_dat_add</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>store_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>blk_dlen</name></decl>, <decl><type ref="prev"/><name>idisk</name></decl>, <decl><type ref="prev"/><name>inode</name></decl>, <decl><type ref="prev"/><name>ifile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_OFF</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_lnk_t</name></type> <name>ilnk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
	return ((x)); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (store)  \
		zdb_dat_store_close(store);  \
	if (blk)  \
		zdb_blk_free(blk);  \
	return ((x));  \
} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><name>inode</name> <operator>=</operator> <call><name>dat_inode</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>inode</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): inode(%d) invalid, dat len(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* xxx: ÒòÎªÃ¿¸öÄ¿Â¼ºÅÖµÓë¸ÃÄ¿Â¼ÏÂÖµ´æ´¢µÄÊý¾ÝÖÐµÄÊý¾Ý¿é¸öÊýÏàµÈ */</comment>
	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>blk_count_tmp</name></name> <operator>=</operator> <name>inode</name></expr>;</expr_stmt>  <comment type="block">/* xxx: ÉèÖÃ´ËÁÙÊ±Á¿Ö÷ÒªÎªÁË²ÎÊý´«µÝ */</comment>

	<comment type="block">/* ³¢ÊÔ±éÀú¸Ã´æ´¢Ä¿Â¼ÏÂËùÓÐ¿ÉÓÃµÄ´æ´¢ÎÄ¼þ: ÓÐ¿ÉÄÜÊÇ¾ÉÎÄ¼þ, Ò²ÓÐ¿ÉÄÜÊÇÐÂÎÄ¼þ */</comment>
	
	<expr_stmt><expr><name>idisk</name> <operator>=</operator> <call><name>zdb_disk_select</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>idisk</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no disk available"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>dat_ifiles_space</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* È·±£ db-&gt;dat_ifiles Êý×é¿Õ¼ä¹»ÓÃ */</comment>
	<expr_stmt><expr><name>ifile</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name><name>dat_ifiles</name><index>[<expr><name>inode</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ifile</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Ñ¡Ôñ¿ÉÓÃµÄÖµ´æ´¢¾ä±ú */</comment>

	<for>for <control>(<init>;</init> <condition><expr><name>ifile</name> <operator>&lt;</operator> <name>ZDB_DAT_FILE_LIMIT</name></expr>;</condition> <incr><expr><name>ifile</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>dat_filepath</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_ADDD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): path(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>store_tmp</name> <operator>=</operator> <call><name>zdb_dat_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>store_tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_dat_store_open %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ÊÇ·ñÓÐ¿ÉÓÃ¿ÕÏÐ¿é? */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>store_tmp</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name> <operator>&lt;=</operator> <name><name>store_tmp</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ¹Ø±ÕÒÑÂúÁËµÄÖµ´æ´¢ */</comment>
			<expr_stmt><expr><call><name>zdb_dat_store_close</name><argument_list>(<argument><expr><name>store_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Èç¹ûÐèÒªÔö¼ÓÖµ´æ´¢¿Õ¼äÔòÔö¼Ó */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>store_tmp</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>&lt;=</operator> <name><name>store_tmp</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>dat_store_blk_add</name><argument_list>(<argument><expr><name>store_tmp</name></expr></argument>, <argument><expr><name><name>store_tmp</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>nstep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add blk to %s error"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store_tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>zdb_dat_store_close</name><argument_list>(<argument><expr><name>store_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>store</name> <operator>=</operator> <name>store_tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name><name>dat_ifiles</name><index>[<expr><name>inode</name></expr>]</index></name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>  <comment type="block">/* »º´æ¸ÃÎÄ¼þË÷ÒýºÅ */</comment>
		<break>break;</break>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): too many ifile(%d), ZDB_DAT_FILE_LIMIT(%d),"</literal>
			<literal type="string">" idisk(%d), inode(%d), path(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>,
			<argument><expr><name>ZDB_DAT_FILE_LIMIT</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>,
			<argument><expr><call><name>acl_sane_dirname</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><call><name>dat_path</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, ihead_idle(%d) invalid, limit("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">"), count("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ê¹ÓÃµÚÒ»¸ö¿ÕÏÐ¿é */</comment>
	<expr_stmt><expr><name>ilnk</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr>;</expr_stmt>

	<comment type="block">/* ¼ÆËãÕæÊµµÄ ZDB_BLK µÄ¿Õ¼ä´óÐ¡ */</comment>
	<expr_stmt><expr><name>blk_dlen</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¼ÆËãµÚÒ»¸ö¿ÕÏÐ¿éµÄÎïÀíÎ»ÖÃ */</comment>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_ADDD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): blk_count: %d, blk_dlen: %d, blk_off("</literal> <name>ACL_FMT_I64D</name>
		<literal type="string">"), blk_hdr_dlen: %d, len: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
		 <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_count</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_dlen</name></name></expr></argument>,
		<argument><expr><name>off</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_hdr_dlen</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ·ÖÅäÒ»¸ö ZDB_BLK ¶ÔÏó */</comment>
	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>blk_dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): calloc error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ¶ÁÈ¡¸Ã¿ÕÏÐÊý¾Ý¿éÍ·ÐÅÏ¢ */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), ihead_idle(%d),"</literal>
			<literal type="string">" blk_dlen(%d), blk_off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), blk_hdr_dlen(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>, <argument><expr><name>blk_dlen</name></expr></argument>, <argument><expr><name>off</name></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_hdr_dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* xxx: ¸Ã blk ÆäÊµ¾ÍÊÇµÚÒ»¸ö¿ÕÏÐ¿é, ²Î¼ûÉÏÃæ ilnk µÄÐÎ³É */</comment>

	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name></expr>;</expr_stmt>  <comment type="block">/* ¸üÐÂ¿ÕÏÐ¿éÁ´Í· */</comment>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* ´Ó¿ÕÏÐ¿éÁ´ÖÐ·ÖÀë */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_LINK_BUSY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>busy_blk_link</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_ADDD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): blk_off: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", inext: %d, key: "</literal>
		<name>ACL_FMT_I64D</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¸üÐÂµ±Ç°¿ÕÏÐÊý¾Ý¿éÐÅÏ¢ */</comment>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ¿½±´Ô´Êý¾ÝÄÚÈÝ */</comment>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>blk_dlen</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ¸üÐÂÊý¾Ý¿éÐÅÏ¢ */</comment>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¸üÐÂÖµ´æ´¢Í·ÐÅÏ¢ */</comment>

	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* ½« blk_off Ó³ÉäÎª¼ü´æ´¢ÖÐµÄÖµ */</comment>

	<expr_stmt><expr><name><name>blk_off</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>ilnk</name> <operator>+</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name> <operator>*</operator> <name>ifile</name></expr>;</expr_stmt>  <comment type="block">/* ÀÛ¼ÓÖ®Ç°ËùÓÐµÄÎÄ¼þÖÐ¼ÇÂ¼µÄÖµ¸öÊýÖ®ºÍ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>blk_off</name><operator>.</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_off.offset("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") too large"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_ADDD</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): blk_off: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", ihead_idle: %d, dat_limit: "</literal>
		<name>ACL_FMT_I64D</name> <literal type="string">", inode: %d, ifile: %d"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr></argument>,
		<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½« idisk Óë inode ×éºÏ´æ´¢ */</comment>
	<expr_stmt><expr><name><name>blk_off</name><operator>.</operator><name>inode</name></name> <operator>=</operator> <operator>(</operator><name>idisk</name> <operator>&lt;&lt;</operator> <name>DIR_BITS</name><operator>)</operator> <operator>+</operator> <name>inode</name></expr>;</expr_stmt>

	<comment type="block">/* ¸üÐÂ¼ü´æ´¢ÖÐÊý¾ÝË÷ÒýÖµ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>-&gt;</operator><name>key_set</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blk_off</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): set key store error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_dat_update</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>blk_off</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dat</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_update"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>idisk</name></decl>, <decl><type ref="prev"/><name>inode</name></decl>, <decl><type ref="prev"/><name>inode_new</name></decl>, <decl><type ref="prev"/><name>ifile</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_VSTRING</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_lnk_t</name></type>  <name>ilnk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type>  <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (store)  \
		zdb_dat_store_close(store);  \
	if (blk)  \
		zdb_blk_free(blk);  \
	return (x);  \
} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><name>idisk</name> <operator>=</operator> <operator>(</operator><name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&gt;&gt;</operator> <name>DIR_BITS</name><operator>)</operator> <operator>&amp;</operator> <name>DISK_MASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>idisk</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>idisk</name></expr></argument> &gt;</argument_list></name> <name>DISK_LIMIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): idisk(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inode</name> <operator>=</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&amp;</operator> <name>DIR_MASK</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>inode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>inode</name></expr></argument> &gt;</argument_list></name> <name>DIR_LIMIT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): inode(%d) invalid"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÅÐ¶ÏÔÚÖµ´æ´¢ÖÐµÄÆ«ÒÆÖµ */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): blk_off_old("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËãÐÂµÄ inode Ïà¶ÔÂ·¾¶ºÅ */</comment>
	<expr_stmt><expr><name>inode_new</name> <operator>=</operator> <call><name>dat_inode</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>inode_new</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): inode(%d) invalid, dat len(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>inode_new</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ifile</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name></expr>;</expr_stmt>  <comment type="block">/* ÎÄ¼þ½áµãºÅ */</comment>

	<comment type="block">/* ÎÄ¼þÎ»ÖÃË÷ÒýÖµ */</comment>
	<expr_stmt><expr><name>ilnk</name> <operator>=</operator> <operator>(</operator><name>zdb_lnk_t</name><operator>)</operator> <operator>(</operator><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_limit</name></name> <operator>*</operator> <name>ifile</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>dat_filepath</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_dat_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>inode_new</name> <operator>==</operator> <name>inode</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* ¸üÐÂ¾ÉÎ»ÖÃµÄÊý¾ÝÐÅÏ¢ */</comment>

		<comment type="block">/* ¼ÆËãÕæÊµµÄ´æ´¢Î»ÖÃÖÐÊý¾ÝÆðÊ¼Î»ÖÃÖµ */</comment>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_DAT_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Ð´ÈëÐÂÊý¾Ý */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write to %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÐèÒªÒÆ¶¯Êý¾Ý¿éÊý¾ÝÖÁÆäËüÖµ´æ´¢ÖÐ */</comment>

	<comment type="block">/* ¸ÃÖµ´æ´¢ÖÐ¿Ï¶¨¾ÍÓÐÕ¼ÓÃÊý¾Ý¿é */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, store-&gt;hdr.count("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") &lt;= 0, ihead_idle(%d), inode(%d, %d), inode_new(%d, %d),"</literal>
			<literal type="string">" key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), blk_off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr></argument>,
			<argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>inode_new</name> <operator>&gt;&gt;</operator> <name>DISK_BITS</name></expr></argument>,
			<argument><expr><name>inode_new</name> <operator>&amp;</operator> <name>DIR_MASK</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* xxx: reset to 0 */</comment>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËãÕæÊµµÄ´æ´¢Î»ÖÃÖÐÊý¾Ý¿éÍ·ÆðÊ¼Î»ÖÃÖµ */</comment>
	<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ÐèÒªÒÆ¶¯ÖµµÄÎ»ÖÃÇÒÊ¹¾ÉÎ»ÖÃ±äÎª¿ÕÏÐ¿é */</comment>

	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ·ÖÅäÊý¾Ý¿é */</comment>

	<comment type="block">/* ¶ÁÈ¡¸ÃÕ¼ÓÃÊý¾Ý¿éµÄÍ·²¿ÐÅÏ¢ */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s),"</literal>
			<literal type="string">" blk_hdr_dlen(%d), blk_off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr>;</expr_stmt>  <comment type="block">/* Óë¿ÕÏÐÊý¾Ý¿éÁ´Á¬½Ó */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_LINK_BUSY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>busy_blk_unlink</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, unlink busy blk error"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ¸üÐÂÖµ´æ´¢Í·ÐÅÏ¢ */</comment>

	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name> <operator>=</operator> <name>ilnk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

	<comment type="block">/* µ÷Õû»º´æµÄÎÄ¼þË÷ÒýºÅ */</comment>

	<expr_stmt><expr><call><name>dat_ifiles_space</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>idisk</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>inode</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name><name>dat_ifiles</name><index>[<expr><name>inode</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name><name>dat_ifiles</name><index>[<expr><name>inode</name></expr>]</index></name> <operator>=</operator> <name>inode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Ö»Ð´Êý¾Ý¿éµÄÍ·²¿ÐÅÏ¢, ½«¸ÃÊý¾Ý¿é±äÎª¿ÕÏÐ¿é */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): prwrite %s error(%s), blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">", "</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>count</name><operator>--</operator></expr>;</expr_stmt>  <comment type="block">/* ½«ËùÔÚ´ÅÅÌ·ÖÇøµÄ·ÖÅäÊýÁ¿¼õ 1 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): count(%lld) &lt; 0 in %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>,
			<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dat_disks</name><index>[<expr><name>idisk</name></expr>]</index></name><operator>.</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ÏòÁíÒ»¸öÖµ´æ´¢ÖÐÌí¼ÓÐÂ¼ÇÂ¼ */</comment>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zdb_dat_add</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_dat_stat</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ZDB_DAT_HDR</name> <modifier>*</modifier></type><name>dat_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_stat"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_dat_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dat_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_DAT_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_dat_store_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_dat_check</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ZDB_DAT_HDR</name> <modifier>*</modifier></type><name>dat_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_check"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>nidle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_lnk_t</name></type> <name>ilnk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>blk_len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>begin</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s: checking ......"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tHDR STATUS:"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tlimit: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", size: "</literal>
		<name>ACL_FMT_I64D</name> <literal type="string">", count: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>limit</name></name></expr></argument>,
		<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tnstep: %d, blk_hdr_dlen: %d, blk_dlen: %d,"</literal>
		<literal type="string">" blk_count: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>nstep</name></name></expr></argument>,
		<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_hdr_dlen</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_dlen</name></name></expr></argument>,
		<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>blk_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tihead_idle: %d, ihead_busy: %d"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dat_hdr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dat_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_DAT_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* É¨ÃèËùÓÐ±»Ê¹ÓÃµÄÊý¾Ý¿é½áµã */</comment>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tBegin check used blk ......"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½ö¼ì²éÊý¾Ý¿éµÄÍ· */</comment>
	<expr_stmt><expr><call><name>zdb_dat_iter_set</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>(ZDB_STORE*) store</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>nused</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nused</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nused</name> <operator>%</operator> <literal type="number">10000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>blk_hdr</name> <init>= <expr><operator>(</operator><name>ZDB_BLK_HDR</name><operator>*</operator><operator>)</operator> <name><name>iter</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tnused: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", key: "</literal>
				<name>ACL_FMT_I64D</name> <literal type="string">", dlen: %d, "</literal></expr></argument>,
				<argument><expr><name>nused</name></expr></argument>, <argument><expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ACL_METER_TIME</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>nused</name> <operator>!=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\terror, nused("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") != store-&gt;hdr.count("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") for %s, please repair it!, time: %ld"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>nused</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tOk, check used blk over, busy blk: "</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">", time: %ld"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* ÔÊÐí±éÀúÊý¾Ý¿éµÄÊý¾ÝÌå */</comment>
	<expr_stmt><expr><call><name>zdb_dat_iter_set</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ¿ªÊ¼É¨ÃèËùÓÐµÄ¿ÕÏÐÊý¾Ý¿é½áµã */</comment>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tBegin check idle blk ......"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>blk_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>blk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ilnk</name> <operator>=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_idle</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>ilnk</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>ilnk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>blk_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), blk_off("</literal>
				<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ilnk</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_idle</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nidle</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nidle</name> <operator>==</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tOk, check idle blk over , idle blk: "</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">", time: %ld"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>nidle</name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d):\tcheck idle blk error for %s, time: %ld"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): \tret: %d, idle blk: "</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">", store-&gt;hdr.size - store-&gt;hdr.count: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>nidle</name></expr></argument>,
			<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>zdb_blk_free</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_dat_check3</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ZDB_DAT_HDR</name> <modifier>*</modifier></type><name>dat_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_dat_check3"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_dat_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zdb_dat_check</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>dat_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_dat_store_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
