<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/db/zdb/zdb_dat_iter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"init/acl_init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/zdb.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zdb_private.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>blk_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>BLK_CTX_T</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dummy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ptr</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_tls</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BLK_CTX_T</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>BLK_CTX_T</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__tls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_free_tls</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__tls</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>BLK_CTX_T</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>BLK_CTX_T</name><operator>*</operator><operator>)</operator> <name>__tls</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__tls</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type>  <name>once_key</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>once_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_free_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key</name></expr></argument>, <argument><expr><name>free_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>BLK_CTX_T</name> <modifier>*</modifier></type><name>tls_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BLK_CTX_T</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>once_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>BLK_CTX_T</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>once_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BLK_CTX_T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>blk</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>blk_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>once_key</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__tls</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>ptr</name></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>blk_len</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ptr</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>blk</name></name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>blk_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dat_iter_get_next</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_iter_get_next"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>blk_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BLK_CTX_T</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>tls_alloc</name><argument_list>(<argument><expr><name>blk_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>blk</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>blk_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error, blk_off("</literal>
            <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>blk_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* ±£ÁôÏÂÒ»¸öË÷ÒýÎ»ÖÃ */</comment>
    <return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃµü´úÆ÷Í·²¿Êý¾Ý
 * @param iter {ACL_ITER*} µü´úÆ÷Ö¸Õë
 * @return {const void*} Êý¾ÝµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dat_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ZDB_DAT_STORE</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_iter_head"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>blk_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BLK_CTX_T</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>tls_alloc</name><argument_list>(<argument><expr><name>blk_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>blk</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_LINK_BUSY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>dat_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>__blk</name></expr></argument>, <argument><expr><name>blk_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>blk_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr>;</expr_stmt>  <comment type="block">/* ±£ÁôÏÂÒ»¸öË÷ÒýÎ»ÖÃ */</comment>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><call><name>dat_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃµü´úÆ÷µÄÄÇÒ»¸öÊý¾Ý
 * @param iter {ACL_ITER*} µü´úÆ÷Ö¸Õë
 * @return {const void*} Êý¾ÝµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dat_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ZDB_DAT_STORE</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"dat_iter_next"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>blk_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BLK_CTX_T</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>tls_alloc</name><argument_list>(<argument><expr><name>blk_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>blk</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_LINK_BUSY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>dat_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>__blk</name></expr></argument>, <argument><expr><name>blk_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>blk_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>inext_busy</name></name></expr>;</expr_stmt>  <comment type="block">/* ±£ÁôÏÂÒ»¸öË÷ÒýÎ»ÖÃ */</comment>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>dat_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dummy2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ptr</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_tls2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__tls2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_free_tls2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__tls2</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>__tls2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__tls2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type>  <name>once_key2</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>once_init2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key2</name></expr></argument>, <argument><expr><name>dummy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_free_tls2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key2</name></expr></argument>, <argument><expr><name>free_tls2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control2</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>get_blk_hdr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control2</name></expr></argument>, <argument><expr><name>once_init2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_HDR</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>once_key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_HDR</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>once_key2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__tls2</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hdr_iter_get_next</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"hdr_iter_get_next"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>hdr_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>blk_hdr</name> <init>= <expr><call><name>get_blk_hdr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error, blk_off("</literal>
            <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
            <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>blk_hdr</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk_hdr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>hdr_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* ±£ÁôÏÂÒ»¸öË÷ÒýÎ»ÖÃ */</comment>
    <return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃµü´úÆ÷Í·²¿Êý¾Ý
 * @param iter {ACL_ITER*} µü´úÆ÷Ö¸Õë
 * @return {const void*} Êý¾ÝµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hdr_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ZDB_DAT_STORE</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"hdr_iter_head"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>blk_hdr</name> <init>= <expr><call><name>get_blk_hdr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>hdr_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_LINK_BUSY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>hdr_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>ihead_busy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__blk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk_hdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>hdr_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk_hdr</name><operator>-&gt;</operator><name>inext_busy</name></name></expr>;</expr_stmt>  <comment type="block">/* ±£ÁôÏÂÒ»¸öË÷ÒýÎ»ÖÃ */</comment>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><call><name>hdr_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃµü´úÆ÷µÄÄÇÒ»¸öÊý¾Ý
 * @param iter {ACL_ITER*} µü´úÆ÷Ö¸Õë
 * @return {const void*} Êý¾ÝµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hdr_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ZDB_DAT_STORE</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"hdr_iter_next"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_HDR</name> <modifier>*</modifier></type><name>blk_hdr</name> <init>= <expr><call><name>get_blk_hdr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>hdr_len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>BLK_HDR_LEN</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_LINK_BUSY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>hdr_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>ZDB_LINK_BUSY</name></cpp:ifdef>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>blk_off</name> <operator>=</operator> <call><name>BLK_HDR_OFF</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>__blk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read %s error(%s), blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk_hdr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>hdr_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk_hdr</name><operator>-&gt;</operator><name>inext_busy</name></name></expr>;</expr_stmt>  <comment type="block">/* ±£ÁôÏÂÒ»¸öË÷ÒýÎ»ÖÃ */</comment>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>hdr_iter_get_next</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>zdb_dat_iter_set</name><parameter_list>(<parameter><decl><type><name>ZDB_DAT_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>read_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>read_data</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>iter_head</name> <operator>=</operator> <operator>(</operator><name>STORE_ITER</name><operator>)</operator> <name>dat_iter_head</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>iter_next</name> <operator>=</operator> <operator>(</operator><name>STORE_ITER</name><operator>)</operator> <name>dat_iter_next</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>iter_head</name> <operator>=</operator> <operator>(</operator><name>STORE_ITER</name><operator>)</operator> <name>hdr_iter_head</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>iter_next</name> <operator>=</operator> <operator>(</operator><name>STORE_ITER</name><operator>)</operator> <name>hdr_iter_next</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
