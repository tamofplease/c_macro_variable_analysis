<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/db/zdb/zdb_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_avl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_fhandle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/zdb.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACL_LINUX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MINGW</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr></cpp:if>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive>  <name>_GNU_SOURCE</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__USE_LARGEFILE64</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PWRITE</name></cpp:macro> <cpp:value>pwrite64</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PREAD</name></cpp:macro>  <cpp:value>pread64</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zdb_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>KEY_LEN</name></cpp:macro>	<cpp:value>21</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>ZDB_IO_BLK</name> <block>{
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>avl_node_t</name></type> <name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>BLK_F_DIRTY</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name></decl>;</decl_stmt>
}</block></struct></type> <name>ZDB_IO_BLK</name>;</typedef>

<struct>struct <name>ZDB_IO</name> <block>{
	<decl_stmt><decl><type><name>avl_tree_t</name></type> <name>blk_tree</name></decl>;</decl_stmt>	<comment type="block">/* ´æ´¢ËùÓÐÐèÒªÍ¬²½ÖÁ´ÅÅÌµÄ»º´æÊý¾Ý¿é */</comment>
	<decl_stmt><decl><type><name>ACL_CACHE</name> <modifier>*</modifier></type><name>blk_cache</name></decl>;</decl_stmt>	<comment type="block">/* ´æ´¢ËùÓÐ»º´æÊý¾Ý¿é */</comment>
	<decl_stmt><decl><type><name>size_t</name></type> <name>blk_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>blk_slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_SLICE</name> <modifier>*</modifier></type><name>dat_slice</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IO_STREAM</name><parameter_list>(<parameter><type><name>io</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((io)-&gt;store-&gt;fhandle.fp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IO_HANDLE</name><parameter_list>(<parameter><type><name>io</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(ACL_VSTREAM_FILE(IO_STREAM((io))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>IO_PATH</name><parameter_list>(<parameter><type><name>io</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(STORE_PATH((io)-&gt;store))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>io_blk_free</name><parameter_list>(<parameter><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"io_blk_free"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>blk</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BLK_F_DIRTY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name><name>blk</name><operator>-&gt;</operator><name>io</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>PWRITE</name></cpp:ifdef>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PWRITE</name><argument_list>(<argument><expr><call><name>IO_HANDLE</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pwrite to %s error(%s),"</literal>
				<literal type="string">" ret(%d) != len(%d), off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><call><name>IO_STREAM</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><call><name>IO_STREAM</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fseek %s error(%s), off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>IO_PATH</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><call><name>IO_STREAM</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call><operator>)</operator>
				<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): readn from %s, ret(%d) != size(%d),"</literal>
				<literal type="string">" off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>IO_PATH</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>,
				<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>off</name></name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>__n</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>io_blk_new</name><parameter_list>(<parameter><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_alloc</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_IO_BLK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_alloc</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>blk_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__n</name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>blk</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>n2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>off</name></name> <operator>&gt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>n1</name><operator>-&gt;</operator><name>off</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_blk_cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_CACHE_INFO</name> <modifier>*</modifier><name>info</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk</name> <init>= <expr><operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>io_blk_free</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>zdb_io_cache_open</name><parameter_list>(<parameter><decl><type><name>ZDB_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blk_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><operator>(</operator><name>ZDB_IO</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_IO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name> <init>= <expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name> <operator>|</operator> <name>ACL_SLICE_FLAG_LP64_ALIGN</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name> <init>= <expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>ACL_SLICE_FLAG_RTGC_OFF</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type>   <name>page_size</name> <init>= <expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>blk_len</name> <operator>&gt;=</operator> <name>page_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>page_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>blk_len</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>store</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>blk_len</name></name> <operator>=</operator> <name>blk_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>cmp_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_IO_BLK</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ZDB_IO_BLK</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>blk_cache</name></name> <operator>=</operator> <call><name>acl_cache_create</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>cache_max</name></name></expr></argument>,
		<argument><expr><name><name>store</name><operator>-&gt;</operator><name>cache_timeout</name></name></expr></argument>, <argument><expr><name>free_blk_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>store</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>STORE_FLAG_IO_SLICE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"blk_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_IO_BLK</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"dat_slice"</literal></expr></argument>,
			<argument><expr><name>page_size</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>blk_len</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>zdb_io_cache_close</name><parameter_list>(<parameter><decl><type><name>ZDB_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>store</name><operator>-&gt;</operator><name>io</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>zdb_io_cache_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_cache_free</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>blk_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>dat_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name><operator>-&gt;</operator><name>blk_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_io_cache_sync</name><parameter_list>(<parameter><decl><type><name>ZDB_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_io_cache_sync"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk_first</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>blk_next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>blk_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>dlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name> <init>= <expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>io</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>blk_first</name> <operator>=</operator> <operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>blk_first</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>blk_first</name><operator>-&gt;</operator><name>off</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>blk_iter</name> <operator>=</operator> <name>blk_first</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_memcpy</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>blk_iter</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name><name>blk_iter</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ¾¡Á¿½«Á¬ÐøÊý¾Ý×éºÏ³ÉÒ»¿éÊý¾ÝÐ´£¬¿ÉÒÔ¼õÉÙ IO ´ÎÊý */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>blk_next</name> <operator>=</operator> <operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <call><name>AVL_NEXT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>blk_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>blk_next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>blk_iter</name><operator>-&gt;</operator><name>off</name></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>blk_iter</name><operator>-&gt;</operator><name>dlen</name></name> <operator>!=</operator> <name><name>blk_next</name><operator>-&gt;</operator><name>off</name></name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>blk_iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ·ÀÖ¹ÔÚ io_blk_free ÔÙ´Îµ÷ÓÃ avl_remove */</comment>
			<expr_stmt><expr><name><name>blk_iter</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLK_F_DIRTY</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>blk_iter</name> <operator>=</operator> <name>blk_next</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>blk_iter</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name><name>blk_iter</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>PWRITE</name></cpp:ifdef>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PWRITE</name><argument_list>(<argument><expr><call><name>IO_HANDLE</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pwrite to %s error(%s),"</literal>
				<literal type="string">" ret(%d) != len(%d), off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>PATH</name><argument_list>(<argument><expr><call><name>IO_STREAM</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
				<argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><call><name>IO_STREAM</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fseek %s error(%s), off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>IO_PATH</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><call><name>IO_STREAM</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LEN</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): readn from %s, ret(%d) != size(%d),"</literal>
				<literal type="string">" off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>IO_PATH</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>dlen</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>LEN</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>blk_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* ·ÀÖ¹ÔÚ io_blk_free ÔÙ´Îµ÷ÓÃ avl_remove */</comment>
			<expr_stmt><expr><name><name>blk_first</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLK_F_DIRTY</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name>dlen</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zdb_io_cache_add</name><parameter_list>(<parameter><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>zdb_off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>blk_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_i64toa</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>io_blk_new</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dirty</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BLK_F_DIRTY</name></expr>;</expr_stmt>
		<comment type="block">/* Ìí¼Ó½øÐ´»º´æÖÐ */</comment>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Í¬²½Ð´»º´æÖÐµÄÊý¾Ý¿éÖÁ´ÅÅÌ */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>avl_numnodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>io</name><operator>-&gt;</operator><name>store</name><operator>-&gt;</operator><name>wback_max</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>zdb_io_cache_sync</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ìí¼Ó½ø×Ü»º´æÖÐ */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_cache_enter</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>blk_cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zdb_io_cache_write</name><parameter_list>(<parameter><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>zdb_off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>io</name><operator>-&gt;</operator><name>blk_len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ÏÈ²éÑ¯»º´æÖÐÊÇ·ñ´æÔÚ */</comment>

	<expr_stmt><expr><call><name>acl_i64toa</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_cache_find</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>blk_cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>blk</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* just override */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>blk</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BLK_F_DIRTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>  <comment type="block">/* ËµÃ÷ÒÑ¾­ÔÚÐ´»º´æÁË */</comment>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<comment type="block">/* ÐèÒªÌí¼Ó½øÐ´»º´æ */</comment>
		<expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BLK_F_DIRTY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>io</name><operator>-&gt;</operator><name>blk_tree</name></name></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ËµÃ÷ÊÇÐÂÊý¾Ý */</comment>

	<expr_stmt><expr><call><name>zdb_io_cache_add</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>len</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>zdb_io_cache_read</name><parameter_list>(<parameter><decl><type><name>ZDB_IO</name> <modifier>*</modifier></type><name>io</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
	<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>zdb_off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_IO_BLK</name> <modifier>*</modifier></type><name>blk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>key</name><index>[<expr><name>KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>io</name><operator>-&gt;</operator><name>blk_len</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_i64toa</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>ZDB_IO_BLK</name><operator>*</operator><operator>)</operator> <call><name>acl_cache_find</name><argument_list>(<argument><expr><name><name>io</name><operator>-&gt;</operator><name>blk_cache</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>blk</name><operator>-&gt;</operator><name>dlen</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dat</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>size</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_write</name><parameter_list>(<parameter><decl><type><name>ZDB_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>zdb_off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_write"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zdb_io_cache_write</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>PWRITE</name></cpp:ifdef>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PWRITE</name><argument_list>(<argument><expr><call><name>STORE_FILE</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pwrite to %s, ret(%d) != len(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><call><name>STORE_STREAM</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fseek %s error(%s), off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_writen</name><argument_list>(<argument><expr><call><name>STORE_STREAM</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): readn from %s, ret(%d) != size(%d),"</literal>
			<literal type="string">" off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_read</name><parameter_list>(<parameter><decl><type><name>ZDB_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>zdb_off_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_read"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zdb_io_cache_read</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>PREAD</name></cpp:ifdef>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PREAD</name><argument_list>(<argument><expr><call><name>STORE_FILE</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): pread from %s, ret(%d) != size(%d),"</literal>
			<literal type="string">" off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fseek</name><argument_list>(<argument><expr><call><name>STORE_STREAM</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fseek %s error(%s), off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_readn</name><argument_list>(<argument><expr><call><name>STORE_STREAM</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): readn from %s, ret(%d) != size(%d),"</literal>
			<literal type="string">" off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ACL_VSTREAM_EOF</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ìí¼Ó½ø»º´æÖÐ */</comment>
		<expr_stmt><expr><call><name>zdb_io_cache_add</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------------------*/</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
