<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/db/zdb/zdb_key.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"init/acl_init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_fhandle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/zdb.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zdb_private.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>key_store_header_sync</name><parameter_list>(<parameter><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"key_store_header_sync"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_write to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dummy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>ptr</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_tls</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>__tls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_free_tls</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__tls</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>__tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__tls</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_key_t</name></type>  <name>once_key</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>once_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
		<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>main_free_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_key</name></expr></argument>, <argument><expr><name>free_tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>once_control</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>get_tls</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>once_control</name></expr></argument>, <argument><expr><name>once_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_OFF</name><operator>*</operator><operator>)</operator> <call><name>acl_pthread_getspecific</name><argument_list>(<argument><expr><name>once_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ZDB_BLK_OFF</name> <operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_pthread_setspecific</name><argument_list>(<argument><expr><name>once_key</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>acl_pthread_self</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>acl_main_thread_self</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>__tls</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃµü´úÆ÷Í·²¿Êý¾Ý
 * @param iter {ACL_ITER*} µü´úÆ÷Ö¸Õë
 * @return {const void*} Êý¾ÝµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key_iter_head</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ZDB_KEY_STORE</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>key_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>blk_off</name> <init>= <expr><call><name>get_tls</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>key_off</name> <operator>=</operator> <call><name>KEY_OFF</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>db</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk_off</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* Ö¸ÏòÏÂÒ»¸öÎ»ÖÃ */</comment>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * »ñµÃµü´úÆ÷µÄÄÇÒ»¸öÊý¾Ý
 * @param iter {ACL_ITER*} µü´úÆ÷Ö¸Õë
 * @return {const void*} Êý¾ÝµØÖ·
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key_iter_next</name><parameter_list>(<parameter><decl><type><name>ACL_ITER</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ZDB_KEY_STORE</name></name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>key_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>blk_off</name><init>= <expr><call><name>get_tls</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name></expr>;</condition> <incr><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>key_off</name> <operator>=</operator> <call><name>KEY_OFF</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>db</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>blk_off</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* Ö¸ÏòÏÂÒ»¸öÎ»ÖÃ */</comment>
			<return>return <expr><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ³õÊ¼»¯¼ü´æ´¢
 * @param store {ZDB_KEY_STORE*}
 * @return {int} 0: ok; -1: error
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>key_store_init</name><parameter_list>(<parameter><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"key_store_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_key_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_OFF</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/* ³õÊ¼»¯¼ü´æ´¢µÄÍ·²¿ÐÅÏ¢ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_KEY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write header to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>blk_off</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk_off</name><operator>.</operator><name>inode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_KEY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>blk_off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blk_off</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write to %s error(%s)"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blk_off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blk_off</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					<argument><expr><operator>(</operator><name>zdb_off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
					<operator>(</operator><name>zdb_off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>blk_off</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write to %s error(%s)"</literal></expr></argument>,
					<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
					<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_KEY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Ë¢ÐÂÐ´µÄ»º³åÇøÖÁ´ÅÅÌ */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call>
				<operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fflush to %s error %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´ò¿ª¼ü´æ´¢Ê±µÄ»Øµ÷º¯Êý
 * @param fh {ACL_FHANDLE*} ÐÂ´ò¿ªµÄÎÄ¼þ¾ä±ú
 * @param arg {void*} ²ÎÊý
 * @return {int} 0: ok; -1: error, Èô·µ»Ø -1 ÔòÐÂ´ò¿ªµÄÎÄ¼þ¾ä±ú»á×Ô¶¯±»¹Ø±Õ
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>key_store_on_open</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"key_store_on_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><name>ZDB</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>ZDB_KEY_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_STORE</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fh-&gt;size(%d) != ZDB_KEY_STORE's size(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fh</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>db</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>=</operator> <name>STORE_FLAG_KEY</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_SLICE_KEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>|=</operator> <name>STORE_FLAG_IO_SLICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Èç¹ûÊÇÐÂÎÄ¼þÔò³õÊ¼»¯ */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>fsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_KEY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: begin init %s ..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_begin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_cache_max</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_timeout</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_cache_timeout</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>wback_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_wback_max</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>zdb_io_cache_open</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>key_store_init</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key_store_init error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,  <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_KEY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: init %s ok"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* Èç¹ûÊÇ¾ÉÎÄ¼þÔò¶ÁÈ¡ÎÄ¼þÍ·ÐÅÏ¢, ÇÒÓ¦½øÐÐ¼ìÑé */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_KEY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_readn</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
			       	<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): read key header from %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_CACHE_KEY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_cache_max</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>cache_timeout</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_cache_timeout</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>wback_max</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_wback_max</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>zdb_io_cache_open</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ¹Ø±Õ¼ü´æ´¢Ê±µÄ»Øµ÷º¯Êý
 * @param fh {ACL_FHANDLE*} ÎÄ¼þ¾ä±ú
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>key_store_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"key_store_on_close"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>ZDB_KEY_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>key_store_header_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_io_cache_close</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_KEY</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): sync header ok, close %s now, nrefer: %d"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>nrefer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>zdb_key_store_open2</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_store_open2"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>oflags</name> <init>= <expr><name>ACL_FHANDLE_O_NOATIME</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_OPEN_LOCK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>oflags</name> <operator>|=</operator> <name>ACL_FHANDLE_O_MLOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* ´ò¿ª»ò´´½¨Ò»¸öÎÄ¼þ¾ä±ú */</comment>
	<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>ZDB_KEY_STORE</name><operator>*</operator><operator>)</operator> <call><name>acl_fhandle_open</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>oflags</name></expr></argument>,
			<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>key_store_on_open</name></expr></argument>, <argument><expr><name>db</name></expr></argument>,
			<argument><expr><name>key_store_on_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): acl_fhandle_open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>iter_head</name> <operator>=</operator> <operator>(</operator><name>STORE_ITER</name><operator>)</operator> <name>key_iter_head</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>iter_next</name> <operator>=</operator> <operator>(</operator><name>STORE_ITER</name><operator>)</operator> <name>key_iter_next</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><name>store</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>zdb_key_store_open</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_store_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>inode</name></decl>;</decl_stmt>

	<comment type="block">/* ¼ÆËã³ö¸Ã key ËùÔÚµÄ´æ´¢ÎÄ¼þµÄ´æ´¢Ä¿Â¼µÄ±êÊ¶ºÅ */</comment>
	<expr_stmt><expr><name>inode</name> <operator>=</operator> <call><name>KEY_INODE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>inode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>inode</name></expr></argument> &gt;</argument_list></name> <literal type="number">65353</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): inode(%d) invalid, key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>INCLUDE_PATH</name></cpp:ifdef>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>, <argument><expr><literal type="string">"%s/%d/%s_%d.key"</literal></expr></argument>,
		<argument><expr><name><name>db</name><operator>-&gt;</operator><name>key_path</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>, <argument><expr><literal type="string">"%s/%s_%d.key"</literal></expr></argument>,
		<argument><expr><name><name>db</name><operator>-&gt;</operator><name>key_path</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><operator>(</operator><call><name>zdb_key_store_open2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>zdb_key_store_close</name><parameter_list>(<parameter><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>fhandle</name></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_key_set</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>blk_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_set"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>key_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>inode</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (store)  \
		zdb_key_store_close(store);  \
	return ((x));  \
} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_key_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") store error"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËã key ÔÚ¼ü´æ´¢ÖÐµÄÎ»ÖÃ */</comment>
	
	<expr_stmt><expr><name>inode</name> <operator>=</operator> <call><name>KEY_INODE</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>store</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>inode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>inode</name></expr></argument> &gt;</argument_list></name> <literal type="number">65353</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, inode(%d) invalid, key("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>key_off</name> <operator>=</operator> <call><name>KEY_OFF</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>store</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>key_off</name> <operator>&lt;</operator> <operator>(</operator><name>zdb_off_t</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_HDR</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, key_off("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") &lt; ZDB_KEY_HDR's size(%d), key("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">"), inode(%d), key_limit("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_off</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>store</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_WRITE</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write to %s error %s, blk_off("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">", %d), key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>,
			<argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Èç¹ûÎªÐÂÊý¾Ý²åÈëÔòÔö¼Ó¼ÆÊýÆ÷ */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>ZDB_STAT_KEY_NEW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_key_get</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>ZDB_BLK_OFF</name> <modifier>*</modifier></type><name>blk_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_off_t</name></type> <name>key_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>, <decl><type ref="prev"/><name>inode</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive>	<name>RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {  \
	if (store)  \
		zdb_key_store_close(store);  \
	return ((x));  \
} while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_key_store_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") store error"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ¼ÆËã key ÔÚ¼ü´æ´¢ÖÐµÄÎ»ÖÃ */</comment>

	<expr_stmt><expr><name>inode</name> <operator>=</operator> <call><name>KEY_INODE</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>store</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>inode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>inode</name></expr></argument> &gt;</argument_list></name> <literal type="number">65353</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, inode(%d) invalid, key("</literal>
			<name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>key_off</name> <operator>=</operator> <call><name>KEY_OFF</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>store</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>key_off</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_HDR</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, key_off("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") &lt; ZDB_KEY_HDR's size(%d), key("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">"), inode(%d), key_limit("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key_off</name></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>inode</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>store</name><operator>.</operator><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZDB_READ</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>, <argument><expr><name>blk_off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_BLK_OFF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_GETK</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
		<argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read ret: %d, blk_off: "</literal> <name>ACL_FMT_I64D</name>
		<literal type="string">", key_off: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): zdb_read from %s error %s,"</literal>
			<literal type="string">" key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), key_off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>blk_off</name><operator>-&gt;</operator><name>inode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_GETK</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
			<argument_list>(<argument><expr><literal type="string">"%s(%d): blk_off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">") from %s invalid for"</literal>
			 <literal type="string">" key("</literal> <name>ACL_FMT_I64D</name> <literal type="string">"), key_off("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>blk_off</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ö»ÓÐ blk_off-&gt;offset &gt;= 0 &amp;&amp; blk_off-&gt;inode &gt;= 0 Ê±²Å±íÃ÷ÕÒµ½ÖµÎ»ÖÃË÷Òý */</comment>
	<expr_stmt><expr><call><name>RETURN</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_key_status</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ZDB_KEY_HDR</name> <modifier>*</modifier></type><name>key_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_status"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_key_store_open2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_key_store_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_key_check</name><parameter_list>(<parameter><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl></parameter>, <parameter><decl><type><name>ZDB_KEY_HDR</name> <modifier>*</modifier></type><name>key_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_check"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>acl_int64</name></type> <name>nused</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_ITER</name></type> <name>iter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>key_hdr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*  É¨ÃèËùÓÐ±»Ê¹ÓÃµÄÊý¾Ý½áµã */</comment>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): begin check %s's used key"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>acl_foreach</name><argument_list>(<argument>iter</argument>, <argument>(ZDB_STORE*) store</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>nused</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>nused</name> <operator>!=</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_count</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): nused("</literal> <name>ACL_FMT_I64D</name>
			<literal type="string">") != store-&gt;hdr.key_count("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal>
			<literal type="string">" for %s, please repair it!"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><name>nused</name></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_count</name></name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): check used key ok for %s,"</literal>
			<literal type="string">" store-&gt;hdr.key_count("</literal> <name>ACL_FMT_I64D</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>store</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_key_check3</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ZDB_KEY_HDR</name> <modifier>*</modifier></type><name>key_hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_check3"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>store</name> <operator>=</operator> <call><name>zdb_key_store_open2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>zdb_key_check</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>key_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_key_store_close</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>store_init_on_open</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"store_init_on_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>ZDB_KEY_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>(</operator><name>ZDB</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_BLK_OFF</name></type> <name>blk_off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_key_t</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_STORE</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: fh-&gt;size(%d) != ZDB_KEY_STORE's size(%d)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>fh</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>db</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>=</operator> <name>STORE_FLAG_KEY</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>oflags</name></name> <operator>&amp;</operator> <name>ZDB_FLAG_SLICE_KEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>|=</operator> <name>STORE_FLAG_IO_SLICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_KEY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: begin init %s ..."</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_begin</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* ³õÊ¼»¯¼ü´æ´¢µÄÍ·²¿ÐÅÏ¢ */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write header to %s error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>blk_off</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>blk_off</name><operator>.</operator><name>inode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>key</name> <operator>&lt;</operator> <name><name>store</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>key_limit</name></name></expr>;</condition> <incr><expr><name>key</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>acl_vstream_buffed_writen</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>blk_off</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>blk_off</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): write to %s error(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
				<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>%</operator> <literal type="number">5000000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): %s, key: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", key_limit: "</literal>
				<name>ACL_FMT_I64D</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
				<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Ë¢ÐÂÐ´µÄ»º³åÇøÖÁ´ÅÅÌ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_vstream_fflush</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name><name>fhandle</name><operator>.</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ACL_VSTREAM_EOF</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): fflush to %s error %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
			<argument><expr><call><name>STORE_PATH</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>


	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ZDB_DBG_KEY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s: init %s ok"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_init_on_close</name><parameter_list>(<parameter><decl><type><name>ACL_FHANDLE</name> <modifier>*</modifier></type><name>fh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><operator>(</operator><name>ZDB_KEY_STORE</name><operator>*</operator><operator>)</operator> <name>fh</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>key_store_header_sync</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>zdb_io_cache_close</name><argument_list>(<argument><expr><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>zdb_key_init</name><parameter_list>(<parameter><decl><type><name>ZDB</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key_begin</name></decl></parameter>, <parameter><decl><type><name>zdb_key_t</name></type> <name>key_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"zdb_key_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ZDB_KEY_STORE</name> <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>zdb_key_t</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>inode</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key_begin: "</literal> <name>ACL_FMT_I64D</name> <literal type="string">", key_end: "</literal>
		<name>ACL_FMT_I64D</name> <literal type="string">", key_limit: "</literal> <name>ACL_FMT_I64D</name></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key_begin</name></expr></argument>, <argument><expr><name>key_end</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>key</name> <operator>=</operator> <name>key_begin</name></expr>;</init> <condition><expr><name>key</name> <operator>&lt;</operator> <name>key_end</name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>inode</name> <operator>=</operator> <call><name>KEY_INODE</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_sprintf</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>, <argument><expr><literal type="string">"%s/%s_%d.key"</literal></expr></argument>,
			<argument><expr><name><name>db</name><operator>-&gt;</operator><name>key_path</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>inode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ´ò¿ª»ò´´½¨Ò»¸öÎÄ¼þ¾ä±ú */</comment>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): open %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>store</name> <operator>=</operator> <operator>(</operator><name>ZDB_KEY_STORE</name><operator>*</operator><operator>)</operator> <call><name>acl_fhandle_open</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZDB_KEY_STORE</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store_init_on_open</name></expr></argument>,
				<argument><expr><name>db</name></expr></argument>, <argument><expr><name>store_init_on_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): acl_fhandle_open %s error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): close %s"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>path_tmp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_fhandle_close</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ZDB_STORE</name><operator>*</operator><operator>)</operator> <name>store</name><operator>)</operator><operator>-&gt;</operator><name>fhandle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>+=</operator> <name><name>db</name><operator>-&gt;</operator><name>key_limit</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
