<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/db/memdb/acl_mdt_binhash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdb_private.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * ´´½¨Ë÷Òý
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>mdt_idx_create</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>init_capacity</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_BHASH</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>init_capacity</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>init_capacity</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_IDX_BHASH</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_IDX_BHASH</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag2</name> <operator>|=</operator> <name>ACL_BINHASH_FLAG_SLICE1</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag2</name> <operator>|=</operator> <name>ACL_BINHASH_FLAG_SLICE2</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag2</name> <operator>|=</operator> <name>ACL_BINHASH_FLAG_SLICE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE_RTGC_OFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag2</name> <operator>|=</operator> <name>ACL_BINHASH_FLAG_SLICE_RTGC_OFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_KMR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flag2</name> <operator>|=</operator> <name>ACL_BINHASH_FLAG_KEY_REUSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>acl_binhash_create</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>init_capacity</name></expr></argument>, <argument><expr><name>flag2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ACL_MDT_IDX</name><operator>*</operator><operator>)</operator> <name>idx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_BHASH</name> <modifier>*</modifier></type><name>idx_bhash</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_BHASH</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_binhash_free</name><argument_list>(<argument><expr><name><name>idx_bhash</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>idx_bhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * ÏòÒ»¸ö±íË÷ÒýÖÐÌí¼ÓÐÂµÄ×Ö¶Î
 * @param idx {ACL_MDT_IDX*} ±íË÷Òý
 * @param key {const char*} Êý¾Ý±íË÷Òý×Ö¶ÎÖµ
 * @param rec {ACL_MDT_REC*}
 * @return {ACL_HTABLE_INFO*}
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_add</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_idx_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_BHASH</name> <modifier>*</modifier></type><name>idx_bhash</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_BHASH</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_BINHASH_INFO</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>acl_binhash_enter</name><argument_list>(<argument><expr><name><name>idx_bhash</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): binhash_enter error, value(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´ÓÊý¾Ý±íµÄË÷ÒýÖÐ²éÑ¯¶ÔÓ¦Ä³¸öË÷Òý¼üÖµµÄ½á¹û¼¯
 * @param idx {ACL_MDT_IDX*} ±íË÷Òý
 * @param key {const char*} Êý¾Ý±íË÷Òý×Ö¶ÎÖµ
 * @return {ACL_MDT_REC*} ¶ÔÓ¦Ä³¸öË÷Òý×Ö¶ÎÖµµÄ½á¹û¼¯ºÏ
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>mdt_idx_get</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_BHASH</name> <modifier>*</modifier></type><name>idx_bhash</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_BHASH</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_REC</name><operator>*</operator><operator>)</operator> <call><name>acl_binhash_find</name><argument_list>(<argument><expr><name><name>idx_bhash</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
		<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>rec</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´ÓÒ»¸ö±íË÷ÒýÖÐÉ¾³ý¸ÃË÷Òý
 * @param idx {ACL_MDT_IDX*} ±íË÷Òý
 * @param key_value {const char*} Êý¾Ý½áµãµÄÒýÓÃ½áµãµÄÒýÓÃ¼üÖµ
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_del</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_BHASH</name> <modifier>*</modifier></type><name>idx_bhash</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_BHASH</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* idx-&gt;table ¹þÏ£±íÀï´æ´¢µÄÊÇ: rec-&gt;key: rec ¶Ô£¬ËùÒÔ²»ÐèÒªÔÚ
	 * ¹þÏ£±íÄÚ²¿ÊÍ·Å rec ÄÚ´æ£¬ÒòÎª¿ÉÒÔÏÔÊ¾µØÊÍ·Å¸Ã×ÊÔ´
	 */</comment>
	<expr_stmt><expr><call><name>acl_binhash_delete</name><argument_list>(<argument><expr><name><name>idx_bhash</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÊÍ·Å¶þ½øÖÆ¹þÏ£Ä£Ê½µÄÊý¾Ý±í
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_binhash_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_BHASH</name> <modifier>*</modifier></type><name>mdt_bhash</name> <init>= <expr><operator>(</operator><name>ACL_MDT_BHASH</name><operator>*</operator><operator>)</operator> <name>mdt</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>mdt_bhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>acl_mdt_binhash_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_BHASH</name> <modifier>*</modifier></type><name>mdt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mdt</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_BHASH</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_BHASH</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>tbl_free</name></name> <operator>=</operator> <name>mdt_binhash_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_create</name></name> <operator>=</operator> <name>mdt_idx_create</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_free</name></name> <operator>=</operator> <name>mdt_idx_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_add</name></name> <operator>=</operator> <name>mdt_idx_add</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_get</name></name> <operator>=</operator> <name>mdt_idx_get</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_del</name></name> <operator>=</operator> <name>mdt_idx_del</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ACL_MDT</name><operator>*</operator><operator>)</operator> <name>mdt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
