<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/db/memdb/acl_mdt_avl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_avl.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdb_private.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>PACK_STRUCT</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>4</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
	<union>union <block>{
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_key</name></decl>;</decl_stmt>
	}</block> <decl><name>key</name></decl>;</union>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>avl_node_t</name></type> <name>node</name></decl>;</decl_stmt>
}</block></struct></type> <name>TREE_NODE</name>;</typedef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>PACK_STRUCT</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>0</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * AVL ÓÃµÄ±È½Ï»Øµ÷º¯Êý
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TREE_NODE</name> <modifier>*</modifier></type><name>n1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TREE_NODE</name><operator>*</operator><operator>)</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TREE_NODE</name> <modifier>*</modifier></type><name>n2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TREE_NODE</name><operator>*</operator><operator>)</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>ret</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>n1</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>, <argument><expr><name><name>n2</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´´½¨Ë÷Òý
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>mdt_idx_create</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>init_capacity</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_AVL</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>_LP64</name></cpp:ifdef>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slice_align</name> <init>= <expr><name>ACL_SLICE_FLAG_LP64_ALIGN</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slice_align</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rtgc_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_IDX_AVL</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_IDX_AVL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>cmp_fn</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE_RTGC_OFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rtgc_off</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"ACL_MDT_IDX_AVL-&gt;slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC1</name> <operator>|</operator> <name>slice_align</name> <operator>|</operator> <name>rtgc_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE2</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"ACL_MDT_IDX_AVL-&gt;slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>slice_align</name> <operator>|</operator> <name>rtgc_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"ACL_MDT_IDX_AVL-&gt;slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC3</name> <operator>|</operator> <name>slice_align</name> <operator>|</operator> <name>rtgc_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ACL_MDT_IDX</name><operator>*</operator><operator>)</operator> <name>idx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_AVL</name> <modifier>*</modifier></type><name>idx_avl</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_AVL</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name> <modifier>*</modifier></type><name>pnode</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pnode</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_first</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_KMR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>pnode</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>avl_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>idx_avl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÏòÒ»¸ö±íË÷ÒýÖÐÌí¼ÓÐÂµÄ×Ö¶Î
 * @param idx {ACL_MDT_IDX*} ±íË÷Òý
 * @param key {const char*} Êý¾Ý±íË÷Òý×Ö¶ÎÖµ
 * @param rec {ACL_MDT_REC*}
 * @return {ACL_HTABLE_INFO*}
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_add</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_AVL</name> <modifier>*</modifier></type><name>idx_avl</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_AVL</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name> <modifier>*</modifier></type><name>pnode</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pnode</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_alloc</name><argument_list>(<argument><expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pnode</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TREE_NODE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_KMR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pnode</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pnode</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>pnode</name><operator>-&gt;</operator><name>rec</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>avl_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>pnode</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>c_key</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´ÓÊý¾Ý±íµÄË÷ÒýÖÐ²éÑ¯¶ÔÓ¦Ä³¸öË÷Òý¼üÖµµÄ½á¹û¼¯
 * @param idx {ACL_MDT_IDX*} ±íË÷Òý
 * @param key {const char*} Êý¾Ý±íË÷Òý×Ö¶ÎÖµ
 * @return {ACL_MDT_REC*} ¶ÔÓ¦Ä³¸öË÷Òý×Ö¶ÎÖµµÄ½á¹û¼¯ºÏ
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>mdt_idx_get</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_AVL</name> <modifier>*</modifier></type><name>idx_avl</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_AVL</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name></type>  <name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pnode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name><operator>.</operator><name>c_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pnode</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>pnode</name></expr> ?</condition><then> <expr><name><name>pnode</name><operator>-&gt;</operator><name>rec</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´ÓÒ»¸ö±íË÷ÒýÖÐÉ¾³ý¸ÃË÷Òý
 * @param idx {ACL_MDT_IDX*} ±íË÷Òý
 * @param rec {ACL_MDT_REC*} Ë÷Òý±íÖÐ¶ÔÓ¦Ä³¸ö¼üµÄ½á¹û¼¯¶ÔÏó
 * @param key_value {const char*} Êý¾Ý½áµãµÄÒýÓÃ½áµãµÄÒýÓÃ¼üÖµ
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_del</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_idx_del"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX_AVL</name> <modifier>*</modifier></type><name>idx_avl</name> <init>= <expr><operator>(</operator><name>ACL_MDT_IDX_AVL</name><operator>*</operator><operator>)</operator> <name>idx</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TREE_NODE</name></type> <name>node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pnode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>node</name><operator>.</operator><name>key</name><operator>.</operator><name>c_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pnode</name> <operator>=</operator> <operator>(</operator><name>TREE_NODE</name><operator>*</operator><operator>)</operator> <call><name>avl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>pnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: key(%s) not exist"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>avl_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>idx_avl</name><operator>-&gt;</operator><name>avl</name></name></expr></argument>, <argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>idx</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_KMR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>pnode</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>idx_avl</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>, <argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>pnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÊÍ·ÅÆ½ºâ¶þ²æÊ÷Ä£Ê½µÄÊý¾Ý±í
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_avl_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_AVL</name> <modifier>*</modifier></type><name>mdt_avl</name> <init>= <expr><operator>(</operator><name>ACL_MDT_AVL</name><operator>*</operator><operator>)</operator> <name>mdt</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>mdt_avl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>acl_mdt_avl_create</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_AVL</name> <modifier>*</modifier></type><name>mdt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mdt</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_AVL</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_AVL</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>tbl_free</name></name> <operator>=</operator> <name>mdt_avl_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_create</name></name> <operator>=</operator> <name>mdt_idx_create</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_free</name></name> <operator>=</operator> <name>mdt_idx_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_add</name></name> <operator>=</operator> <name>mdt_idx_add</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_get</name></name> <operator>=</operator> <name>mdt_idx_get</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>mdt</name><operator>.</operator><name>idx_del</name></name> <operator>=</operator> <name>mdt_idx_del</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ACL_MDT</name><operator>*</operator><operator>)</operator> <name>mdt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
