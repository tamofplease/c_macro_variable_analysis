<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/db/memdb/acl_mdt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mystring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/acl_mdb.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"struct.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mdb_private.h"</cpp:file></cpp:include>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<comment type="block" format="doxygen">/**
 * ´ÓÊý¾Ý±íÖÐ²éÑ¯Ä³¸öË÷Òý±íÏî
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>mdt_idx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>

	<macro><name>FOREACH_RING_ENTRY</name><argument_list>(<argument>iter</argument>, <argument>&amp;mdt-&gt;idx_head</argument>)</argument_list></macro> <block>{<block_content>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_MDT_IDX</name></expr></argument>, <argument><expr><name>mdt_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>idx</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>idx</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ´´½¨¸ÃË÷Òý±íÀïµÄ¸÷¸öË÷Òý×Ö¶Î */</comment>

<function><type><specifier>static</specifier>  <name>void</name></type> <name>mdt_idx_create</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>init_capacity</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>key_labels</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name><name>idx_flags</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <name><name>key_labels</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name><name>mdt</name><operator>-&gt;</operator><name>idx_create</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>init_capacity</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>idx_flags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>idx</name><operator>-&gt;</operator><name>mdt</name></name> <operator>=</operator> <name>mdt</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>idx_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>idx</name><operator>-&gt;</operator><name>mdt_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Ïú»ÙËùÓÐµÄË÷Òý */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_idx_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>idx_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>idx_head</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>iter_tmp</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_MDT_IDX</name></expr></argument>, <argument><expr><name>mdt_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mdt</name><operator>-&gt;</operator><name>idx_free</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>iter_tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÊÍ·ÅÄ³¸öÊý¾Ý½áµã£¬Í¬Ê±¸ù¾ÝÓÃ»§µÄÊÍ·Å»Øµ÷À´ÊÍ·ÅÓÃ»§µÄÊý¾Ý
 * @param mdt {ACL_MDT*} Êý¾Ý±í¾ä±ú
 * @param node {ACL_MDT_NODE*} Ä³¸öÊý¾Ý½áµãÖ¸Õë
 * @param onfree_fn ÔÚÊÍ·ÅÄ³¸öÊý¾Ý½áµãÇ°µ÷ÓÃ¸Ãº¯Êý
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_node_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
	<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>onfree_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>onfree_fn</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>onfree_fn</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>mdt_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_DMR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ·ÖÅäÒ»¸öÐÂµÄÊý¾ÝÏî½áµã
 * @param data {void*} ÓÃ»§µÄ¶¯Ì¬Êý¾ÝÖ¸Õë
 * @return {ACL_MDT_NOD*} ²úÉúµÄÐÂµÄÊý¾Ý½áµã
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>mdt_node_new</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pdata</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_NOD</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_alloc</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_NOD</name><operator>*</operator><operator>)</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_NOD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_DMR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pdata</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pdata</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>dlen</name></name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«Êý¾Ý½áµãÖÃÈë±íµÄÊý¾Ý½áµãË«ÏòÁ´ÖÐ */</comment>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>nod_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>mdt_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>node</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ¸ù¾Ý¼ü key ´´½¨Ò»¸öÐÂµÄ½á¹û¼¯ºÏ¶ÔÏó
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>mdt_rec_new</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_REC</name><operator>*</operator><operator>)</operator> <call><name>acl_slice_calloc</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>rec</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_REC</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>rec</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÊÍ·ÅÒ»¸ö½á¹û¼¯¶ÔÏó
 * @param rec {ACL_MDT_REC*}
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_rec_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÊÍ·ÅÒ»¸öÒýÓÃ½áµã£¬µ±¸ÃÒýÓÃ½áµãËùÒýÓÃµÄÊý¾Ý½áµã»ò½á¹û¼¯ºÏµÄ¸÷×ÔÒýÓÃ
 * ¼ÆÊýÎª0Ê±±ã»á×Ô¶¯ÊÍ·ÅÊý¾Ý½áµã»ò½á¹û¼¯ºÏ
 * @param ref {ACL_MDT_REF*} Ä³¸öÊý¾Ý½áµãÖÐÓëÄ³Ë÷Òý¼üÏà¶ÔÓ¦µÄÒýÓÃ½áµã
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_ref_del</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_REF</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>nod_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>rec_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name><operator>--</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_free2</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´´½¨Ò»¸öÐÂµÄÒýÓÃ½áµã²¢½«Æä Óë node, rec ½øÐÐ¹ØÁª
 * @param ref {ACL_MDT_REF*}
 * @parma node {ACL_MDT_NOD*}
 * @param rec {ACL_MDT_REC*}
 */</comment> 
<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_ref_add</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_REF</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_REF</name> <operator>*</operator><operator>)</operator> <call><name>acl_slice_calloc</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_REF</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REF</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* ½«ÒýÓÃ½áµãÓëÊý¾Ý½áµã½øÐÐ¹ØÁª */</comment>
	<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>
	<comment type="block">/* ½«ÒýÓÃ½áµãÖÃÈëÊý¾Ý½áµãµÄÒýÓÃ½áµã¼¯ºÏÖÐ */</comment>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>nod_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ½«ÒýÓÃ½áµãÓë½á¹û¼¯½áµã½øÐÐ¹ØÁª */</comment>
	<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>rec</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name><operator>++</operator></expr>;</expr_stmt>  <comment type="block">/* ½«ÒýÓÃ¼ÆÊý¼Ó1 */</comment>
	<comment type="block">/* ½«ÒýÓÃ½áµãÖÃÈë½á¹û¼¯ºÏµÄÒýÓÃ½áµã¼¯ºÏÖÐ */</comment>
	<expr_stmt><expr><call><name>ring_prepend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>rec_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Ïò±íÖÐÌí¼ÓÊý¾Ý£¬Í¬Ê±Ìí¼ÓË÷ÒýÏî
 * @param mdt {ACL_MDT*} ±í
 * @param data {void*} Êý¾ÝÖ¸Õë
 * @param dlen {unsigned int} data Êý¾Ý´óÐ¡
 * @param key_lables {const char*[]} Ë÷Òý¹Ø¼ü×Ö¶Î±êÊ¶
 * @param keys {const char*[]} Ë÷Òý¹Ø¼ü×Ö
 * @return {ACL_MDT_NOD*} ÐÂ´´½¨µÄ±í½áµã
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>mdt_add</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dlen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>key_labels</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* ÏÈ½øÐÐ¸÷¸öË÷Òý×Ö¶ÎµÄÔ¼ÊøÐÔ¼ì²é */</comment>

	<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>mdt_node_new</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* ½¨Á¢Êý¾Ý½áµãÏî */</comment>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>key_labels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>mdt_idx</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name><name>key_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): key_label(%s) no exist in table(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>key_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* ´Ó±íË÷ÒýÖÐ»ñµÃ¶ÔÓ¦ÓÚ¼üµÄË÷Òý¼ÇÂ¼½á¹û¼¯ */</comment>
		<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name><name>mdt</name><operator>-&gt;</operator><name>idx_get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* ´´½¨ÐÂµÄ¼ÇÂ¼½á¹û¼¯ */</comment>
			<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name>mdt_rec_new</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* ÒýÓÃÆäËù¶ÔÓ¦µÄË÷Òý±í */</comment>
			<expr_stmt><expr><name><name>rec</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
			<comment type="block">/* ÔÚ±íË÷ÒýÖÐÔö¼ÓÐÂµÄË÷ÒýÊý¾ÝÏî */</comment>
			<expr_stmt><expr><call><name><name>mdt</name><operator>-&gt;</operator><name>idx_add</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>idx</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_UNI</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d): duplex key, key_label(%s), key(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>key_labels</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mdt_node_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* ´´½¨ÐÂµÄÒýÓÃ½áµã²¢½«ÓëÆäÊý¾Ý½áµã¼°½á¹û¼¯ºÏ¶ÔÏó½øÐÐ¹ØÁª */</comment>
		<expr_stmt><expr><call><name>mdt_ref_add</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>node</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Ì½²âÄ³¸ö¼üÔÚ±íË÷ÒýÖÐÊÇ·ñ´æÔÚ
 * @param mdt {ACL_MDT*}
 * @param key_label {const char*}
 * @param key {const char*}
 * @return {int} 0: ²»´æÔÚ; 1: ´æÔÚ
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mdt_probe</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_probe"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>mdt_idx</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: key_lable(%s) no exist in %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name><name>mdt</name><operator>-&gt;</operator><name>idx_get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ÔÚ±íË÷ÒýÖÐ¸ù¾ÝÄ³¸öË÷Òý¼üÖµ²éÑ¯½á¹û¼¯
 * @param mdt {ACL_MDT*}
 * @param key_label {const char*}
 * @param key {const char*}
 * @param from {int} ÆðÊ¼Î»ÖÃ
 * @param limit {int} ¸öÊýÏÞÖÆ
 * @return {ACL_MDT_RES*} ²éÑ¯½á¹û¼¯, NULL: ½á¹ûÎª¿Õ, != NULL: ½á¹û¼¯·Ç¿Õ
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>mdt_get</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_get"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REF</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>ref_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>mdt_idx</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: key_lable(%s) no exist in %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name><name>mdt</name><operator>-&gt;</operator><name>idx_get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_RES</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_RES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ipos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>FOREACH_RING_FORWARD</name><argument_list>(<argument>ref_iter</argument>, <argument>&amp;rec-&gt;ref_head</argument>)</argument_list></macro> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>ref_iter</name></expr></argument>, <argument><expr><name>ACL_MDT_REF</name></expr></argument>, <argument><expr><name>rec_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>node</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add array error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>n</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ¸ù¾ÝË÷ÒýÖµ´Ó±íÖÐÉ¾³ý¶ÔÓ¦ÓÚ¸ÃË÷ÒýÖµµÄ½á¹û¼¯
 * @param mdt {ACL_MDT*}
 * @param key_label {const char*}
 * @param key {const char*}
 * @param onfree_fn {void (*)(void*, unsigned int} »Øµ÷º¯Êý
 * @return {int} ±»É¾³ýµÄ½á¹û¼¯ÖÐ½áµãµÄ¸öÊý. -1: ³ö´í, &gt;= 0: ok
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mdt_del</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>onfree_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_del"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rec2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REF</name> <modifier>*</modifier></type><name>ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_IDX</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>mdt_idx</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s: key_label(%s) not exist in %s"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ²é³öÓë¸Ã×Ö¶ÎµÄ¼üÏà¹ØµÄ¼ÇÂ¼½á¹û¼¯ºÏ */</comment>
	<expr_stmt><expr><name>rec</name> <operator>=</operator> <call><name><name>mdt</name><operator>-&gt;</operator><name>idx_get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rec</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ±éÀú¸Ã½á¹û¼¯ºÏÖÐµÄËùÓÐÒýÓÃ½áµã£¬ÕÒ³öÆäËùÊôµÄÊý¾Ý½áµã */</comment>
	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>&amp;&amp;</operator> <name><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

		<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_MDT_REF</name></expr></argument>, <argument><expr><name>rec_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* ±éÀú¸ÃÊôÓÚ¸ÃÊý¾Ý½áµãµÄËùÓÐÒýÓÃ½áµã, ²¢É¾³ýÕâÐ©ÒýÓÃ½áµã */</comment>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>  <comment type="block">/* Êý¾Ý½áµã */</comment>

		<comment type="block">/* ±éÀú¸ÃÊý¾Ý½áµãµÄËùÓÐË÷ÒýÒýÓÃ½áµã */</comment>
		<for>for <control>(<init><expr><name>iter2</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>)</argument_list></call></expr>;</init>
			<condition><expr><name>iter2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

			<expr_stmt><expr><name>ref2</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter2</name></expr></argument>, <argument><expr><name>ACL_MDT_REF</name></expr></argument>, <argument><expr><name>nod_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rec2</name> <operator>=</operator> <name><name>ref2</name><operator>-&gt;</operator><name>rec</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter2</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>mdt_ref_del</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>ref2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* É¾³ýÒýÓÃ */</comment>

			<comment type="block">/* ÔÚ×îÍâ²ãÑ­»·Î´Íê³ÉÖ®Ç°£¬ÐèÒª·ÀÖ¹ rec ±»ÌáÇ°ÊÍ·Å! */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>rec2</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rec2</name> <operator>!=</operator> <name>rec</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>mdt</name><operator>-&gt;</operator><name>idx_del</name></name><argument_list>(<argument><expr><name><name>rec2</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name><name>rec2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>mdt_rec_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>rec2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): node-&gt;nrefer(%d) != 0,"</literal>
				<literal type="string">" tbl_name(%s), key_label(%s), key(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>,
				<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>mdt_node_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>onfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* É¾³ýÊý¾Ý½áµã */</comment>

		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): rec-&gt;nrefer(%d) != 0,"</literal>
			<literal type="string">" tbl_name(%s), key_label(%s), key(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name></expr></argument>,
			<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* ´Óµ±Ç°Ë÷ÒýÖÐÉ¾³ý */</comment>
	<expr_stmt><expr><call><name><name>mdt</name><operator>-&gt;</operator><name>idx_del</name></name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mdt_rec_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ·µ»ØËùÉ¾³ýµÄÒýÓÃ½áµãÊý */</comment>
	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ´Ó±íÖÐÁÐ³öÒ»Ð©½á¹û¼¯
 * @param mdt {ACL_MDT*}
 * @param from {int} ÆðÊ¼Î»ÖÃ
 * @param limit {int} ¸öÊýÏÞÖÆ
 * @return {ACL_MDT_RES*} ½á¹û¼¯, NULL: ¿Õ, != NULL: ·Ç¿Õ
 */</comment>
<function><type><specifier>static</specifier> <name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>mdt_list</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"mdt_list"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>nod_iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mdt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>ACL_MDT_RES</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_RES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><ternary><condition><expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>limit</name></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>ipos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<macro><name>FOREACH_RING_FORWARD</name><argument_list>(<argument>nod_iter</argument>, <argument>&amp;mdt-&gt;nod_head</argument>)</argument_list></macro> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>nod_iter</name></expr></argument>, <argument><expr><name>ACL_MDT_NOD</name></expr></argument>, <argument><expr><name>mdt_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>acl_mymalloc</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add array"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><operator>(</operator><name>res</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * ±éÀú±íÖÐµÄÊý¾Ý¶ÔÏó
 * @param mdt {ACL_MDT*} ±í
 * @param walk_fn {int (*)(const void*, unsigned int)} ±éÀú±í¶ÔÏóµÄ»Øµ÷º¯Êý
 * @param from {int} ¿ªÊ¼±éÀú±íµÄÆðÊ¼Î»ÖÃ
 * @param limit {int} ±éÀú±í¶ÔÏóµÄ×î´ó¸öÊý
 * @return {int} ÒÑ¾­±éÀú¹ýµÄ±í¶ÔÏóµÄ¾ßÊý
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mdt_walk</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>walk_fn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mdt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<macro><name>FOREACH_RING_ENTRY</name><argument_list>(<argument>iter</argument>, <argument>&amp;mdt-&gt;nod_head</argument>)</argument_list></macro> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name>from</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_MDT_NOD</name></expr></argument>, <argument><expr><name>mdt_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>walk_fn</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>dlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* É¾³ýËùÓÐÊý¾Ý½áµã */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mdt_nodes_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REC</name> <modifier>*</modifier></type><name>rec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT_REF</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RING</name> <modifier>*</modifier></type><name>iter</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter2</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>nod_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>nod_head</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>ACL_MDT_NOD</name></expr></argument>, <argument><expr><name>mdt_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>iter2</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ref_head</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>iter2</name> <operator>!=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ref_head</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>RING_TO_APPL</name><argument_list>(<argument><expr><name>iter2</name></expr></argument>, <argument><expr><name>ACL_MDT_REF</name></expr></argument>, <argument><expr><name>nod_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rec</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>rec</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>iter2</name> <operator>=</operator> <call><name>ring_succ</name><argument_list>(<argument><expr><name>iter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mdt_ref_del</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>nrefer</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>mdt_rec_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>mdt_node_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>

<function><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>acl_mdt_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbl_name</name></decl></parameter>,
	<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tbl_flag</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>init_capacity</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>key_labels</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name><name>idx_flags</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_mdt_create"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rtgc_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>dbtype</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mdt</name> <operator>=</operator> <call><name>acl_mdt_hash_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>dbtype</name></expr></argument>, <argument><expr><literal type="string">"binhash"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mdt</name> <operator>=</operator> <call><name>acl_mdt_binhash_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>dbtype</name></expr></argument>, <argument><expr><literal type="string">"avl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>mdt</name> <operator>=</operator> <call><name>acl_mdt_avl_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): dbtype(%s)"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>dbtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>tbl_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>node_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>tbl_flag</name></name> <operator>=</operator> <name>tbl_flag</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>nod_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ring_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mdt</name><operator>-&gt;</operator><name>idx_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mdt_idx_create</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>init_capacity</name></expr></argument>, <argument><expr><name>key_labels</name></expr></argument>, <argument><expr><name>idx_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>mdt_add</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>get</name></name> <operator>=</operator> <name>mdt_get</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>del</name></name> <operator>=</operator> <name>mdt_del</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>probe</name></name> <operator>=</operator> <name>mdt_probe</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <name>mdt_list</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>walk</name></name> <operator>=</operator> <name>mdt_walk</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tbl_flag</name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE_RTGC_OFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>rtgc_flag</name> <operator>=</operator> <name>ACL_MDT_FLAG_SLICE_RTGC_OFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tbl_flag</name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE1</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"nod_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_NOD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC1</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"rec_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REC</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC1</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"ref_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC1</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else 	if <condition>(<expr><operator>(</operator><name>tbl_flag</name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"nod_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_NOD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"rec_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REC</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"ref_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC2</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else 	if <condition>(<expr><operator>(</operator><name>tbl_flag</name> <operator>&amp;</operator> <name>ACL_MDT_FLAG_SLICE3</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"nod_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_NOD</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC3</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"rec_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REC</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC3</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name> <operator>=</operator> <call><name>acl_slice_create</name><argument_list>(<argument><expr><literal type="string">"ref_slice"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_MDT_REF</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ACL_SLICE_FLAG_GC3</name> <operator>|</operator> <name>rtgc_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>mdt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_mdt_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mdt_idx_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>mdt_nodes_free</name><argument_list>(<argument><expr><name>mdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>nod_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>rec_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_slice_destroy</name><argument_list>(<argument><expr><name><name>mdt</name><operator>-&gt;</operator><name>ref_slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><name>mdt</name><operator>-&gt;</operator><name>tbl_free</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ACL_MDT_NOD</name> <modifier>*</modifier></type><name>acl_mdt_add</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>dlen</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>key_labels</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keys</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>mdt</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>key_labels</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>acl_mdt_find</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>mdt</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_mdt_probe</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>mdt</name><operator>-&gt;</operator><name>probe</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>acl_mdt_list</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>mdt</name><operator>-&gt;</operator><name>list</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_mdt_delete</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_label</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>onfree_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>mdt</name><operator>-&gt;</operator><name>del</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>key_label</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>onfree_fn</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_mdt_walk</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list></function_decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name><name>mdt</name><operator>-&gt;</operator><name>walk</name></name><argument_list>(<argument><expr><name>mdt</name></expr></argument>, <argument><expr><name>walk_fn</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>acl_mdt_fetch_row</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_mdt_fetch_row"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>a</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>ipos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>ipos</name></name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>ipos</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>ptr</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_mdt_row_count</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>a</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>ipos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><call><name>acl_array_size</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_mdt_res_free</name><parameter_list>(<parameter><decl><type><name>ACL_MDT_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_array_destroy</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>acl_myfree_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_mdt_cnt</name><parameter_list>(<parameter><decl><type><name>ACL_MDT</name> <modifier>*</modifier></type><name>mdt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>mdt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name><name>mdt</name><operator>-&gt;</operator><name>node_cnt</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
