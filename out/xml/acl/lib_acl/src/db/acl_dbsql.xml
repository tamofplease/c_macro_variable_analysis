<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/db/acl_dbsql.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/acl_dbsql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/acl_dbsql.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<function><type><name>ACL_SQL_RES</name> <modifier>*</modifier></type><name>acl_dbsql_select</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dbsql_select"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sql</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sql</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>sql_select</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sql_select null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><call><name><name>handle</name><operator>-&gt;</operator><name>sql_select</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_dbsql_free_result</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>ACL_SQL_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dbsql_free_result"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>free_result</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): free_result null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name><name>handle</name><operator>-&gt;</operator><name>free_result</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÓÃÓÚÓÐ·µ»Ø½á¹û¼¯µÄ²éÑ¯ */</comment>

<function><type><name>int</name></type> <name>acl_dbsql_results</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name>  <modifier>*</modifier></type><name>error</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>result_row</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>       
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dbsql_results"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sql</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sql</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>walk_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>sql_results</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sql_results null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>sql_results</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>walk_fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÓÃÓÚ½ö²éÑ¯Ò»¸ö½á¹ûµÄÇé¿ö */</comment>

<function><type><name>int</name></type> <name>acl_dbsql_result</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name>  <modifier>*</modifier></type><name>error</name></decl></parameter>,
	<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>walk_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>result_row</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dbsql_result"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sql</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sql</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>walk_fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>sql_results</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sql_result null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>sql_result</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>walk_fn</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_dbsql_update</name><parameter_list>(<parameter><decl><type><name>ACL_DB_HANDLE</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name>  <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_dbsql_update"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sql</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sql</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): input invalid"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>sql_update</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): sql_update null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>handle</name><operator>-&gt;</operator><name>sql_update</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>error</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
