<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/proctl/proctl_service.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ACL_PREPARE_COMPILE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_WINDOWS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_thread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proctl_internal.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_ARRAY</name> <modifier>*</modifier></type><name>__services</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* µ±Ç°ÕýÔÚÔËÐÐµÄ·þÎñ¶ÔÏó¶ÓÁÐ */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__mutex_running_service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name> <modifier>*</modifier></type><name>__handles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>__sem_handle</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__max_handle</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>   <name>__cur_handle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_FIFO</name> <modifier>*</modifier></type><name>__services_wait</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* µ±Ç°ÕýÔÚ´ýÆô¶¯µÄ·þÎñ¶ÔÏó¶ÓÁÐ */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_mutex_t</name></type> <name>__mutex_waiting_service</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_RUNNING_SERVICE</name></cpp:macro> <cpp:value>do \
{ \
	acl_pthread_mutex_lock(&amp;__mutex_running_service); \
} while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK_RUNNING_SERVICE</name></cpp:macro> <cpp:value>do \
{ \
	acl_pthread_mutex_unlock(&amp;__mutex_running_service); \
} while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_WAITING_SERVICE</name></cpp:macro> <cpp:value>do \
{ \
	acl_pthread_mutex_lock(&amp;__mutex_waiting_service); \
} while(0);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLOCK_WAITING_SERVICE</name></cpp:macro> <cpp:value>do \
{ \
	acl_pthread_mutex_unlock(&amp;__mutex_waiting_service); \
} while(0);</cpp:value></cpp:define>

<comment type="block">/* ³õÊ¼»¯½ø³Ì¾ä±úÊý×é */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handles_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handles_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__handles</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><name>__max_handle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>__handles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__cur_handle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__max_handle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>__handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Ïò½ø³Ì¾ä±úÊý×éÖÐÌí¼ÓÐÂµÄ½ø³Ì¾ä±ú */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handles_add</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handles_add"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__cur_handle</name> <operator>&gt;=</operator> <name>__max_handle</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): too many handle"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__max_handle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>__handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>__cur_handle</name><operator>++</operator></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no position for new handle"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ´Ó½ø³Ì¾ä±úÊý×éÖÐÉ¾³ý¾ä±ú */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handles_del</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"handles_del"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__cur_handle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>__cur_handle</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>__cur_handle</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>__handles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>__handles</name><index>[<expr><name>__cur_handle</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>__handles</name><index>[<expr><name>__cur_handle</name></expr>]</index></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not found the handle"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ½ø³Ì¹ÜÀí·þÎñ¿â³õÊ¼»¯ */</comment>

<function><type><name>void</name></type> <name>proctl_service_init</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__services</name> <operator>=</operator> <call><name>acl_array_create</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>__services_wait</name> <operator>=</operator> <call><name>acl_fifo_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__mutex_running_service</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__mutex_waiting_service</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>handles_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__sem_handle</name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__sem_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): CreateSemaphore error(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>handles_add</name><argument_list>(<argument><expr><name>__sem_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ´´½¨Ò»¸öÐÂµÄ·þÎñ¶ÔÏó */</comment>

<function><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>proctl_service_alloc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>cmdline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>PROCTL_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PROCTL_SERVICE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>filepath</name></name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>cmdline</name></name> <operator>=</operator> <name>cmdline</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>service</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proctl_service_add</name><parameter_list>(<parameter><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_add"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ïò·þÎñ¶ÔÏóÊý¾Ý×éÖÐÌí¼ÓÐÂµÄ·þÎñ¶ÔÏó */</comment>

	<expr_stmt><expr><name>LOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_array_append</name><argument_list>(<argument><expr><name>__services</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): add service to array error"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>UNLOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>proctl_service_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_new"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>cmdline</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ×é½¨Æô¶¯½ø³ÌÃüÁîÐÐ²ÎÊý±í */</comment>

	<comment type="block">/* ÎªÁË±ÜÃâ²ÎÊý´«µÝÊ±¿ÉÄÜÒòÆäÖÐ¼äº¬ÓÐ¿Õ¸ñ¶ø±»·Ö¸ô³É
	 * ¶à¸ö²ÎÊý£¬ËùÒÔÐèÒªÔÚ²ÎÊýÁ½±ß¼ÓÉÏÒýºÅ
	 */</comment>

	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"\" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): filepath=%s, cmdline=%s"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>proctl_service_alloc</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>proctl_service_add</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>service</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÒ»¸ö·þÎñ¶ÔÏó */</comment>

<function><type><name>void</name></type> <name>proctl_service_free</name><parameter_list>(<parameter><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>filepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>LOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_array_delete_obj</name><argument_list>(<argument><expr><name>__services</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>UNLOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ¸ù¾Ý½ø³Ì¾ä±ú²éÑ¯·þÎñ¶ÔÏó */</comment>

<function><type><specifier>static</specifier> <name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>proctl_service_find</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_find"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>LOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>__services</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>PROCTL_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>__services</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>==</operator> <name>handle</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>UNLOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>service</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>UNLOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* »ñµÃËùÓÐµÄ·þÎñ¶ÔÏóµÄ³ÌÐòÃû³Æ£¬²¢½«½á¹û´æ´¢ÔÚÒ»¸öÊý×éÖÐ */</comment>

<function><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>proctl_serivce_get_all</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name> <init>= <expr><call><name>acl_argv_alloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>LOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>__services</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>PROCTL_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>__services</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_argv_add</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>filepath</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>UNLOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>argv</name><operator>-&gt;</operator><name>argc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><operator>(</operator><name>argv</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÓÉ proctl_service_get_all ²úÉúµÄ¶ÔÏóÊý×é */</comment>

<function><type><name>void</name></type> <name>proctl_service_free_all</name><parameter_list>(<parameter><decl><type><name>ACL_ARGV</name> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>argv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_argv_free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ¸ù¾Ý³ÌÐòÈ«Â·¾¶Ãû²é¿´Ä³¸ö½ø³ÌÊÇ·ñÔÚÔËÐÐÖÐ */</comment>

<function><type><name>int</name></type> <name>proctl_service_exist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>LOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>acl_array_size</name><argument_list>(<argument><expr><name>__services</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>service</name> <operator>=</operator> <operator>(</operator><name>PROCTL_SERVICE</name><operator>*</operator><operator>)</operator> <call><name>acl_array_index</name><argument_list>(<argument><expr><name>__services</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>filepath</name></name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>UNLOCK_RUNNING_SERVICE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÊÍ·ÅÄ³¸ö·þÎñ¶ÔÏó¼°ÆäËù°ó¶¨µÄ½ø³Ì¾ä±ú */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>proctl_service_stopped</name><parameter_list>(<parameter><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>handles_del</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>proctl_service_free</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ¿ªÊ¼Æô¶¯Ä³¸ö·þÎñ½ø³Ì */</comment>

<function><type><name>int</name></type> <name>proctl_service_start</name><parameter_list>(<parameter><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_start"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>	<name>hThread</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CreateProcess</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>filepath</name></name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>cmdline</name></name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DETACHED_PROCESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>start_info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>service</name><operator>-&gt;</operator><name>process_info</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): CreateProcess error(%s), file(%s)"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>service</name><operator>-&gt;</operator><name>filepath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>process_info</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hThread</name> <operator>=</operator> <name><name>service</name><operator>-&gt;</operator><name>process_info</name><operator>.</operator><name>hThread</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>handles_add</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ÖØÐÂÆô¶¯Ä³¸ö·þÎñ½ø³Ì */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proctl_service_restart</name><parameter_list>(<parameter><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>handles_del</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>service</name><operator>-&gt;</operator><name>hProcess</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><call><name>proctl_service_start</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>PROCTL_MSG</name> <modifier>*</modifier></type><name>proctl_msg_new</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>msg_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PROCTL_MSG</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>PROCTL_MSG</name> <operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PROCTL_MSG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_type</name></name> <operator>=</operator> <name>msg_type</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>msg</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>proctl_msg_free</name><parameter_list>(<parameter><decl><type><name>PROCTL_MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>&amp;&amp;</operator> <name><name>msg</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>msg</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ÍùÏûÏ¢¶ÓÁÐÖÐÌí¼ÓÒ»¸öÏûÏ¢£¬²¢ÏòÖ÷Ïß³Ì·¢ËÍÍ¨Öª */</comment>
<function><type><name>void</name></type> <name>proctl_msg_push</name><parameter_list>(<parameter><decl><type><name>PROCTL_MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>LOCK_WAITING_SERVICE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_fifo_push</name><argument_list>(<argument><expr><name>__services_wait</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>UNLOCK_WAITING_SERVICE</name></expr>;</expr_stmt>

	<comment type="block">/* ÏòÖ÷Ïß³Ì·¢ËÍÏûÏ¢ */</comment>
	<expr_stmt><expr><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name>__sem_handle</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Æô¶¯ÏûÏ¢£ºÆô¶¯Ò»¸ö·þÎñ×Ó½ø³Ì */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>proctl_msg_start</name><parameter_list>(<parameter><decl><type><name>PROCTL_MSG</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>service</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>proctl_service_add</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>proctl_service_start</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ´¦ÀíÀ´×ÔÓÚ¼àÌýÏß³ÌµÄÏûÏ¢ÃüÁîµÄÖ÷Èë¿Ú */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>proctl_msg_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_msg_main"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROCTL_MSG</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>LOCK_WAITING_SERVICE</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>acl_fifo_pop</name><argument_list>(<argument><expr><name>__services_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<switch>switch <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>msg_type</name></name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>PROCTL_MSG_START</name></expr>:</case>
			<expr_stmt><expr><call><name>proctl_msg_start</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): unknown msg type(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>msg_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>proctl_msg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	
	<expr_stmt><expr><name>UNLOCK_WAITING_SERVICE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* µÈ´ýËùÓÐµÄ·þÎñ½ø³ÌµÄ×´Ì¬ */</comment>

<function><type><name>int</name></type> <name>proctl_service_wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_wait"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>timeout</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle_sem</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__cur_handle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Create the semaphore, with max value 32K */</comment>
	<expr_stmt><expr><name>handle_sem</name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><name>__cur_handle</name></expr></argument>, <argument><expr><name>__handles</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>proctl_msg_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_FAILED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): wait child object error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><call><name>acl_debug</name><argument_list>(<argument><expr><name>ACL_DEBUG_PROCTL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><literal type="string">"%s(%d): __cur_handle=%d"</literal></expr></argument>,
		<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__cur_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* »ØÊÕÒ»Ð©ÍË³öµÄ½ø³Ì£¬²¢¸ù¾ÝÌõ¼þÖØÆôÒì³£ÍË³öµÄ½ø³Ì */</comment>

<function><type><name>int</name></type> <name>proctl_service_join</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"proctl_service_join"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PROCTL_SERVICE</name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>hProcess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>ebuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>__cur_handle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>hProcess</name> <operator>=</operator> <name><name>__handles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>hProcess</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): invalid handle in array, i(%d)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>proctl_service_find</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>service</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>hProcess</name> <operator>==</operator> <name>__sem_handle</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): not found hProcess"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name>hProcess</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): get child exit error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>proctl_service_restart</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>proctl_service_stopped</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): child exit status 0, error(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ÒòÎª½ø³ÌÊÇÕý³£ÍË³ö£¬ËùÒÔ²»ÐèÒªÖØÆô¶¯ */</comment>
			<expr_stmt><expr><call><name>proctl_service_stopped</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>STILL_ACTIVE</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* child has exited abnormaly */</comment>
			<expr_stmt><expr><call><name>acl_msg_error</name><argument_list>(<argument><expr><literal type="string">"%s(%d): child exit status %d, child exit(%s)"</literal></expr></argument>,
				<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>status</name></expr></argument>,
				<argument><expr><call><name>acl_last_strerror</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* ÒòÎª½ø³ÌÊÇÒì³£ÍË³ö£¬ËùÒÔÐèÒªÖØÆô¶¯ */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>proctl_service_restart</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>proctl_service_stopped</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* else: STILL_ACTIVE */</comment>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*ACL_WINDOWS */</comment>
</unit>
