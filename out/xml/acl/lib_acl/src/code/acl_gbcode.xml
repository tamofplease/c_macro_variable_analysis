<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/acl/lib_acl/src/code/acl_gbcode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code/acl_gbcode.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_jt2ft.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_ft2jt.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gbtransfer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>short</name></type> <name><name>chartab</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr_jt</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr_ft</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>n</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>dlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr_jt</name> <operator>&gt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>chartab</name><index>[<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator> <name>ptr_jt</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr_ft</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr_jt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>dlen</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>ptr_ft</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr_jt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>dlen</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>ptr_ft</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr_jt</name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name><operator>*</operator><operator>)</operator> <name>ptr_ft</name><operator>)</operator> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr_ft</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr_jt</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>dlen</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr_ft</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr_jt</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>dlen</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_gbjt2ft</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gbtransfer</name><argument_list>(<argument><expr><name>__jt2ft_tab</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>acl_gbft2jt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gbtransfer</name><argument_list>(<argument><expr><name>__ft2jt_tab</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
