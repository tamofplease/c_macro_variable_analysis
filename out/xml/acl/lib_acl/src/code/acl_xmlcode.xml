<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/code/acl_xmlcode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_token_tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread/acl_pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"code/acl_xmlcode.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uni2utf8.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>__charmap</name><index>[]</index></name> <init>= <expr><block>{
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"&amp;quot;"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"&amp;amp;"</literal></expr>, <expr><literal type="string">"&amp;apos;"</literal></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"&amp;lt;"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"&amp;gt;"</literal></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>acl_xml_encode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>in</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>__charmap</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>__charmap</name><index>[<expr><operator>*</operator><name>ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>  <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>XML_SPEC</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>XML_SPEC</name></type> <name><name>__tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"&lt;"</literal></expr>, <expr><literal type="string">"&amp;lt;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;lt;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"&gt;"</literal></expr>, <expr><literal type="string">"&amp;gt;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;gt;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"&amp;"</literal></expr>, <expr><literal type="string">"&amp;amp;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;amp;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"\'"</literal></expr>, <expr><literal type="string">"&amp;apos;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;apos;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"\""</literal></expr>, <expr><literal type="string">"&amp;quot;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;quot;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"\302\251"</literal></expr>, <expr><literal type="string">"&amp;copy;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;copy;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"\302\256"</literal></expr>, <expr><literal type="string">"&amp;reg;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;reg;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">" "</literal></expr>, <expr><literal type="string">"&amp;nbsp;"</literal></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"&amp;nbsp;"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>__token_tree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_decode_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>__token_tree</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_token_tree_destroy</name><argument_list>(<argument><expr><name>__token_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>__token_tree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xml_decode_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>__token_tree</name> <operator>=</operator> <call><name>acl_token_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>__tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_token_tree_add</name><argument_list>(<argument><expr><name>__token_tree</name></expr></argument>, <argument><expr><name><name>__tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>txt</name></expr></argument>,
			<argument><expr><name>ACL_TOKEN_F_STOP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>__tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_NO_ATEXIT</name></cpp:ifndef>
	<comment type="block">/* ½ø³ÌÍË³öÊ±µ÷ÓÃ html_decode_free ÊÍ·ÅÄÚ´æ×ÊÔ´ */</comment>
	<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>xml_decode_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>acl_pthread_once_t</name></type> <name>__token_once</name> <init>= <expr><name>ACL_PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>markup_unescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name><modifier>*</modifier></type> <name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>in</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'#'</literal>
			<operator>&amp;&amp;</operator> <operator>(</operator><call><name>sscanf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"&amp;#%u%1[;]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal>
			    <operator>||</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"&amp;#x%x%1[;]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>
			<operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><call><name>uni2utf8</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>(</operator><name>in</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
			<if_stmt><if>if<condition>(<expr><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>ACL_VSTRING_ADDCH</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>in</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>in</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_xml_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>in</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pre</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>XML_SPEC</name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ACL_VSTRING_SPACE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__token_once</name></expr></argument>, <argument><expr><name>xml_decode_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__token_tree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"__token_tree null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pre</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_tree_match</name><argument_list>(<argument><expr><name>__token_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pre</name> <operator>=</operator> <call><name>markup_unescape</name><argument_list>(<argument><expr><name>pre</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>pre</name><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>spec</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>XML_SPEC</name><operator>*</operator><operator>)</operator> <name><name>token</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>spec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ptr</name> <operator>-</operator> <name>pre</name> <operator>-</operator> <name><name>spec</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_vstring_memcat</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>acl_vstring_strcat</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ACL_VSTRING_TERMINATE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*--------------------------------------------------------------------------*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<function><type><name>size_t</name></type> <name>acl_xml_encode2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>olen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>olen_saved</name> <init>= <expr><name>olen</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>olen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>*</operator><name>in</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>__charmap</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>__charmap</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>olen</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>__charmap</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>olen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>out</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>olen</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>in</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ilen</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>olen_saved</name> <operator>-</operator> <name>olen</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
const char *acl_xml_encode2(const char *in, size_t ilen,
	char **out, size_t *olen)
{
	const unsigned char *ptr = (const unsigned char*) in;
	const char *s;

	if (*olen == 0)
		return in;

	*olen -= 1;  <comment type="block">/* reserve space for '\0' */</comment>

	while (ilen &gt; 0 &amp;&amp; *olen &gt; 0) {
		if ((s = __charmap[*ptr]) != NULL) {
			size_t n = strlen(s);
			if (*olen &lt; n)
				break;
			memcpy(*out, s, n);
			*out += n;
			*olen -= n;
		} else if (*olen &gt; 0) {
			**out = *ptr;
			*out += 1;
			*olen -= 1;
		} else
			break;
		ptr++;
		ilen--;
	}

	**out = '\0';
	return (const char*) ptr;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* return the left char of in, &gt; 0 when the out buf is not enough */</comment>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>copy_buf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>olen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ilen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>ilen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>olen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ilen</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>olen</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>ilen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>markup_unescape2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>   <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>  <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>in</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>in</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'#'</literal>
			<operator>&amp;&amp;</operator> <operator>(</operator><call><name>sscanf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"&amp;#%u%1[;]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal>
			<operator>||</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="string">"&amp;#x%x%1[;]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator>
			<operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>buflen</name> <init>= <expr><call><name>uni2utf8</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>copy_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><operator>(</operator><name>in</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>in</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

			<if_stmt><if>if<condition>(<expr><name><name>in</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_xml_decode2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>in</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pre</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ACL_TOKEN</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>XML_SPEC</name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>in</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* reserve space for '\0' */</comment>

	<expr_stmt><expr><call><name>acl_pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__token_once</name></expr></argument>, <argument><expr><name>xml_decode_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__token_tree</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"__token_tree null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>pre</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>acl_token_tree_match</name><argument_list>(<argument><expr><name>__token_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pre</name> <operator>=</operator> <call><name>markup_unescape2</name><argument_list>(<argument><expr><name>pre</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;</operator> <name>pre</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>copy_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>spec</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>XML_SPEC</name><operator>*</operator><operator>)</operator> <name><name>token</name><operator>-&gt;</operator><name>ctx</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_assert</name><argument_list>(<argument><expr><name>spec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>pre</name> <operator>-</operator> <name><name>spec</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>copy_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>copy_buf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>spec</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>out</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
