<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/master/acl_master_proto.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>

<comment type="block">/* Global library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_proto.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>acl_master_notify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>generation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"acl_master_notify"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_STATUS</name></type> <name>stat_buf</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We use a simple binary protocol to minimize security risks.
	 * Since this is local IPC, there are no byte order or word
	 * length issues. The server treats this information as gossip,
	 * so sending a bad PID or a bad status code will only have
	 * amusement value.
	 */</comment>
	<expr_stmt><expr><name><name>stat_buf</name><operator>.</operator><name>pid</name></name>    <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stat_buf</name><operator>.</operator><name>gen</name></name>    <operator>=</operator> <name>generation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stat_buf</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>stat_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stat_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>
	    <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stat_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_warn</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: status %d, error %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: OK, status %d, pid = %d"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
