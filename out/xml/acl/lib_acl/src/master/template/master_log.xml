<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/acl/lib_acl/src/master/template/master_log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master_log.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__master_log_enable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>acl_master_log_enable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>yes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>__master_log_enable</name> <operator>=</operator> <name>yes</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>acl_master_log_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__master_log_enable</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>var_master_log_opened</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>master_log_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"master_log_open"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>master_log</name></decl>;</decl_stmt>

	<comment type="block">/* use master's log before chroot */</comment>
	<expr_stmt><expr><name>master_log</name> <operator>=</operator> <call><name>acl_getenv</name><argument_list>(<argument><expr><literal type="string">"MASTER_LOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>master_log</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): no MASTER_LOG's env value"</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_open</name><argument_list>(<argument><expr><name>master_log</name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var_master_log_opened</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d): service: %s, log opened now."</literal></expr></argument>,
			<argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>master_log_close</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>var_master_log_opened</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var_master_log_opened</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
