<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/acl/lib_acl/src/master/template/acl_trigger_server.c"><comment type="block">/* System library. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"StdAfx.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_PREPARE_COMPILE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_define.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_BCB_COMPILER</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>hdrstop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ACL_CLIENT_ONLY</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STRCASECMP_IN_STRINGS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Utility library. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_msg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_chroot_uid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_core_limit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstring.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_vstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_mymalloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_iostuff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_stringops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_myflock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_safe_open.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/unix/acl_watchdog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib/acl_split_at.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"net/acl_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"event/acl_events.h"</cpp:file></cpp:include>

<comment type="block">/* Application-specific */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_flow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_proto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_trigger_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_server_api.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master/acl_master_conf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"master_log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_trigger_procname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_trigger_log_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_rw_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_in_flow_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_idle_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_delay_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_delay_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_daemon_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_use_limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_enable_core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_disable_core_onexit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>   <name>acl_var_trigger_max_debug</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT_TABLE</name></type> <name><name>__conf_int_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"trigger_buf_size"</literal></expr>, <expr><literal type="number">81920</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_buf_size</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_rw_timeout"</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_rw_timeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_in_flow_delay"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_in_flow_delay</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_idle_limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_idle_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_delay_sec"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_delay_sec</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_delay_usec"</literal></expr>, <expr><literal type="number">5000</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_delay_usec</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_daemon_timeout"</literal></expr>, <expr><literal type="number">1800</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_daemon_timeout</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_use_limit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_use_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_enable_core"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_enable_core</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_disable_core_onexit"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_disable_core_onexit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_debug_max"</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_max_debug</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>acl_var_trigger_core_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_INT64_TABLE</name></type> <name><name>__conf_int64_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"trigger_core_limit"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_core_limit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_trigger_queue_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_trigger_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_trigger_pid_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>acl_var_trigger_log_debug</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_CONFIG_STR_TABLE</name></type> <name><name>__conf_str_tab</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"trigger_queue_dir"</literal></expr>, <expr><literal type="string">"/opt/acl_master/var/queue"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_queue_dir</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_owner"</literal></expr>, <expr><literal type="string">"root"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_owner</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"trigger_pid_dir"</literal></expr>, <expr><literal type="string">"/opt/acl_master/var/pid"</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_pid_dir</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"master_debug"</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><operator>&amp;</operator><name>acl_var_trigger_log_debug</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

 <comment type="block">/*
  * Global state.
  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_TRIGGER_SERVER_FN</name></type>       <name>__service_main</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_EXIT_FN</name></type>   <name>__service_exit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_MASTER_SERVER_SIGHUP_FN</name></type> <name>__sighup_handler</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>__service_accept</name>) <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>           <name>use_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_EVENT</name>    <modifier>*</modifier></type><name>__eventp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier><modifier>*</modifier></type><name>__stream_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>         <modifier>*</modifier></type><name>__service_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>        <modifier>*</modifier><modifier>*</modifier></type><name>__service_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name>         <modifier>*</modifier></type><name>__service_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>__service_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>         <name><name>__conf_file</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>      <name>trigger_server_in_flow_delay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>trigger_server_generation</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acl_trigger_server_conf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__conf_file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>acl_trigger_server_event</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>__eventp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* trigger_server_exit - normal termination */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_server_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_disable_core_onexit</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_set_core_limit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>__service_exit</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__service_exit</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* trigger_server_abort - terminate after abnormal master exit */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_server_abort</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier><name>stream</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"master disconnect -- exiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>trigger_server_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* trigger_server_timeout - idle time exceeded */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_server_timeout</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>,
	<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier><name>event</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"idle timeout -- exiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>trigger_server_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* trigger_server_wakeup - wake up application */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_server_wakeup</name><parameter_list>(<parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><name>ACL_TRIGGER_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Commit suicide when the master process disconnected from us.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_trigger_pid</name></expr></argument>, <argument><expr><name>trigger_server_generation</name></expr></argument>,
		<argument><expr><name>ACL_MASTER_STAT_TAKEN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>trigger_server_abort</name><argument_list>(<argument><expr><name>ACL_EVENT_NULL_TYPE</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACL_EVENT_NULL_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>trigger_server_in_flow_delay</name> <operator>&amp;&amp;</operator> <call><name>acl_master_flow_get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_doze</name><argument_list>(<argument><expr><name>acl_var_trigger_in_flow_delay</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>__service_main</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_trigger_pid</name></expr></argument>, <argument><expr><name>trigger_server_generation</name></expr></argument>,
		<argument><expr><name>ACL_MASTER_STAT_AVAIL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>trigger_server_abort</name><argument_list>(<argument><expr><name>ACL_EVENT_NULL_TYPE</name></expr></argument>, <argument><expr><name>event</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACL_EVENT_NULL_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>trigger_server_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>acl_var_trigger_idle_limit</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>use_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* __service_accept_fifo - accept fifo client request */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service_accept_fifo</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__service_accept_fifo"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>listen_fd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>__service_lock</name> <operator>!=</operator> <literal type="number">0</literal>
	    <operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>__service_lock</name></expr></argument>)</argument_list></call></expr></argument>,
		    	<argument><expr><name>ACL_INTERNAL_LOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"select unlock: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: trigger arrived"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Read whatever the other side wrote into the FIFO. The FIFO read end
	 * is non-blocking so we won't get stuck when multiple processes wake up.
	 */</comment>
	<expr_stmt><expr><call><name>trigger_server_wakeup</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>listen_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* __service_accept_local - accept socket client request */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service_accept_local</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__service_accept_local"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>listen_fd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>time_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: trigger arrived"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Read a message from a socket. Be prepared for accept() to fail
	 * because some other process already got the connection. The socket is
	 * non-blocking so we won't get stuck when multiple processes wake up.
	 * Don't get stuck when the client connects but sends no data. Restart
	 * the idle timer if this was a false alarm.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>,
			<argument><expr><name>trigger_server_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">999999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>acl_unix_accept</name><argument_list>(<argument><expr><name>listen_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__service_lock</name> <operator>!=</operator> <literal type="number">0</literal>
	    <operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>__service_lock</name></expr></argument>)</argument_list></call></expr></argument>,
	    	<argument><expr><name>ACL_INTERNAL_LOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"select unlock: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"accept error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>time_left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>trigger_server_timeout</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>time_left</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_read_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>trigger_server_wakeup</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>time_left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>trigger_server_timeout</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>time_left</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MASTER_XPORT_NAME_PASS</name></cpp:ifdef>

<comment type="block">/* __service_accept_pass - accept descriptor */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>__service_accept_pass</name><parameter_list>(<parameter><decl><type><name>int</name> <name>type</name></type> <name>acl_unused</name></decl></parameter>, <parameter><decl><type><name>ACL_EVENT</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
	<parameter><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>context</name></type> <name>acl_unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"__service_accept_pass"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>listen_fd</name> <init>= <expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>time_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s: trigger arrived"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Read a message from a socket. Be prepared for accept() to fail
	 * because some other process already got the connection. The socket is
	 * non-blocking so we won't get stuck when multiple processes wake up.
	 * Don't get stuck when the client connects but sends no data. Restart
	 * the idle timer if this was a false alarm.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>time_left</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>acl_event_cancel_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>,
			<argument><expr><name>trigger_server_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">999999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>PASS_ACCEPT</name><argument_list>(<argument><expr><name>listen_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__service_lock</name> <operator>!=</operator> <literal type="number">0</literal>
	    <operator>&amp;&amp;</operator> <call><name>acl_myflock</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>__service_lock</name></expr></argument>)</argument_list></call></expr></argument>,
		    	<argument><expr><name>ACL_INTERNAL_LOCK</name></expr></argument>,
			<argument><expr><name>ACL_FLOCK_OP_NONE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"select unlock: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"accept error: %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>time_left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>trigger_server_timeout</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>time_left</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>acl_read_wait</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>trigger_server_wakeup</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>time_left</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>trigger_server_timeout</name></expr></argument>,
			<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>time_left</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_server_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>procname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"trigger_server_init"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>inited</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>inited</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>procname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>procname</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d); procname null"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Don't die when a process goes away unexpectedly.
	 */</comment>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Don't die for frivolous reasons.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGXFSZ</name></cpp:ifdef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * May need this every now and then.
	 */</comment>

	<expr_stmt><expr><name>acl_var_trigger_pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>acl_var_trigger_procname</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>acl_safe_basename</name><argument_list>(<argument><expr><name>procname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>acl_var_trigger_log_file</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SERVICE_LOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_log_file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>acl_var_trigger_log_file</name> <operator>=</operator> <call><name>acl_mystrdup</name><argument_list>(<argument><expr><literal type="string">"acl_master.log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: can't get MASTER_LOG's env value,"</literal>
			<literal type="string">" use %s log"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>,
			<argument><expr><name>acl_var_trigger_log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(<argument><expr><name>__conf_int_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_get_app_conf_int64_table</name><argument_list>(<argument><expr><name>__conf_int64_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(<argument><expr><name>__conf_str_tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trigger_server_open_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* first, close the master's log */</comment>
	<expr_stmt><expr><call><name>master_log_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* second, open the service's log */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>acl_master_log_enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_msg_open</name><argument_list>(<argument><expr><name>acl_var_trigger_log_file</name></expr></argument>, <argument><expr><name>acl_var_trigger_procname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_log_debug</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>acl_var_trigger_log_debug</name>
		<operator>&amp;&amp;</operator> <name>acl_var_trigger_max_debug</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

		<expr_stmt><expr><call><name>acl_debug_init2</name><argument_list>(<argument><expr><name>acl_var_trigger_log_debug</name></expr></argument>,
			<argument><expr><name>acl_var_trigger_max_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d): argc: %d"</literal></expr></argument>, <argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"usage: %s -H[help]"</literal>
		<literal type="string">" -c [use chroot]"</literal>
		<literal type="string">" -n service_name"</literal>
		<literal type="string">" -s socket_count"</literal>
		<literal type="string">" -t transport"</literal>
		<literal type="string">" -u [use setgid initgroups setuid]"</literal>
		<literal type="string">" -f conf_file"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* trigger_server_main - the real main program */</comment>

<function><type><name>void</name></type> <name>acl_trigger_server_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>ACL_TRIGGER_SERVER_FN</name></type> <name>service</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>myname</name> <init>= <expr><literal type="string">"trigger_server_main"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_INIT_FN</name></type> <name>pre_init</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_INIT_FN</name></type> <name>post_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_MASTER_SERVER_LOOP_FN</name></type> <name>loop</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>service_name</name> <init>= <expr><call><name>acl_mystrdup</name><argument_list>(<argument><expr><call><name>acl_safe_basename</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>     <name>c</name></decl>, <decl><type ref="prev"/><name>socket_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>key</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>fdtype</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>lock_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root_dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>user_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>transport</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTREAM</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_VSTRING</name> <modifier>*</modifier></type><name>why</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ACL_WATCHDOG</name> <modifier>*</modifier></type><name>watchdog</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>generation</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

	<comment type="block">/* ÌáÇ°½øÐÐÄ£°å³õÊ¼»¯£¬ÒÔÊ¹ÈÕÖ¾¾¡ÔçµØ´ò¿ª, ¿ªÊ¼ÏÈÊ¹ÓÃ acl_master µÄÈÕÖ¾ÎÄ¼þ */</comment>
	<expr_stmt><expr><call><name>master_log_open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Pick up policy settings from master process. Shut up error messages to
	 * stderr, because no-one is going to see them.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_LINUX</name></cpp:ifdef>
	<expr_stmt><expr><name>opterr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>optarg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>__conf_file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"HcDl:n:s:t:uf:"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><literal type="char">'H'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><call><name>acl_app_conf_load</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>__conf_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>__conf_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name>root_dir</name> <operator>=</operator> <literal type="string">"setme"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'n'</literal></expr>:</case>
			<expr_stmt><expr><name>service_name</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>socket_count</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"invalid socket_count: %s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* NOT REACHED */</comment>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name>transport</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'u'</literal></expr>:</case>
			<expr_stmt><expr><name>user_name</name> <operator>=</operator> <literal type="string">"setme"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>trigger_server_init</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>__conf_file</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: need \"-f pathname\""</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"%s(%d), %s: configure file = %s"</literal></expr></argument>,
			<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>__conf_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Application-specific initialization.
	 */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>ACL_MASTER_SERVER_INT_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_int_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_INT64_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_int64_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_INT64_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_STR_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_str_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_STR_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_BOOL_TABLE</name></expr>:</case>
			<expr_stmt><expr><call><name>acl_get_app_conf_bool_table</name><argument_list>(
				<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_CONFIG_BOOL_TABLE</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ACL_MASTER_SERVER_CTX</name></expr>:</case>
			<expr_stmt><expr><name>__service_ctx</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_PRE_INIT</name></expr>:</case>
			<expr_stmt><expr><name>pre_init</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_POST_INIT</name></expr>:</case>
			<expr_stmt><expr><name>post_init</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_INIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_LOOP</name></expr>:</case>
			<expr_stmt><expr><name>loop</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_LOOP_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_EXIT</name></expr>:</case>
			<expr_stmt><expr><name>__service_exit</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_EXIT_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_IN_FLOW_DELAY</name></expr>:</case>
			<expr_stmt><expr><name>trigger_server_in_flow_delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACL_MASTER_SERVER_SIGHUP</name></expr>:</case>
			<expr_stmt><expr><name>__sighup_handler</name> <operator>=</operator>
				<call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ACL_MASTER_SERVER_SIGHUP_FN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>acl_msg_panic</name><argument_list>(<argument><expr><literal type="string">"%s: unknown argument: %d"</literal></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>root_dir</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>root_dir</name> <operator>=</operator> <name>acl_var_trigger_queue_dir</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>user_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>user_name</name> <operator>=</operator> <name>acl_var_trigger_owner</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If not connected to stdin, stdin must not be a terminal.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"do not run this command by hand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Can options be required?
	 * 
	 * XXX Initially this code was implemented with UNIX-domain sockets,
	 * but Solaris &lt;= 2.5 UNIX-domain sockets misbehave hopelessly when the
	 * client disconnects before the server has accepted the connection.
	 * Symptom: the server accept() fails with EPIPE or EPROTO, but the
	 * socket stays readable, so that the program goes into a wasteful loop.
	 * 
	 * The initial fix was to use FIFOs, but those turn out to have their
	 * own problems, witness the workarounds in the fifo_listen() routine.
	 * Therefore we support both FIFOs and UNIX-domain sockets, so that the
	 * user can choose whatever works best.
	 * 
	 * Well, I give up. Solaris UNIX-domain sockets still don't work properly,
	 * so it will have to limp along with a streams-specific alternative.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>transport</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"no transport type specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>ACL_MASTER_XPORT_NAME_UNIX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__service_accept</name> <operator>=</operator> <name>__service_accept_local</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fdtype</name> <operator>=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name> <operator>|</operator> <name>ACL_VSTREAM_TYPE_LISTEN_INET</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>ACL_MASTER_XPORT_NAME_FIFO</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__service_accept</name> <operator>=</operator> <name>__service_accept_fifo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fdtype</name> <operator>=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name> <operator>|</operator> <name>ACL_VSTREAM_TYPE_LISTEN_UNIX</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_MASTER_XPORT_NAME_PASS</name></cpp:ifdef>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>ACL_MASTER_XPORT_NAME_PASS</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>__service_accept</name> <operator>=</operator> <name>__service_accept_pass</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fdtype</name> <operator>=</operator> <name>ACL_VSTREAM_TYPE_LISTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"unsupported transport type: %s"</literal></expr></argument>, <argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Retrieve process generation from environment.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>generation</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>ACL_MASTER_GEN_NAME</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>acl_alldig</name><argument_list>(<argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"bad generation: %s"</literal></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>generation</name></expr></argument>, <argument><expr><literal type="string">"%o"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>trigger_server_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>acl_msg_verbose</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_info</name><argument_list>(<argument><expr><literal type="string">"process generation: %s (%o)"</literal></expr></argument>,
				<argument><expr><name>generation</name></expr></argument>, <argument><expr><name>trigger_server_generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Traditionally, BSD select() can't handle multiple processes
	 * selecting on the same socket, and wakes up every process in
	 * select(). See TCP/IP Illustrated volume 2 page 532. We avoid
	 * select() collisions with an external lock file.
	 */</comment>

	<expr_stmt><expr><name>lock_path</name> <operator>=</operator> <call><name>acl_concatenate</name><argument_list>(<argument><expr><name>acl_var_trigger_pid_dir</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
			<argument><expr><name>transport</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>service_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>why</name> <operator>=</operator> <call><name>acl_vstring_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>__service_lock</name> <operator>=</operator> <call><name>acl_safe_open</name><argument_list>(<argument><expr><name>lock_path</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>,
		<argument><expr><operator>(</operator>struct <name>stat</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uid_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>uid_t</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>__service_lock</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"open lock file %s: %s"</literal></expr></argument>,
			<argument><expr><name>lock_path</name></expr></argument>, <argument><expr><call><name>acl_vstring_str</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>__service_lock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_myfree</name><argument_list>(<argument><expr><name>lock_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set up call-back info.
	 */</comment>
	<expr_stmt><expr><name>__service_main</name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__service_name</name> <operator>=</operator> <name>service_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>__service_argv</name> <operator>=</operator> <name>argv</name> <operator>+</operator> <name>optind</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>__eventp</name> <operator>=</operator> <call><name>acl_event_new_select</name><argument_list>(<argument><expr><name>acl_var_trigger_delay_sec</name></expr></argument>,
		<argument><expr><name>acl_var_trigger_delay_usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Run pre-jail initialization.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name>acl_var_trigger_queue_dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"chdir(\"%s\"): %s"</literal></expr></argument>,
			<argument><expr><name>acl_var_trigger_queue_dir</name></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pre_init</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pre_init</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPSHOT</name></cpp:ifdef>
	<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>acl_chroot_uid</name><argument_list>(<argument><expr><name>root_dir</name></expr></argument>, <argument><expr><name>user_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>trigger_server_open_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_UNIX</name></cpp:ifdef>
	<comment type="block">/* ÉèÖÃ×Ó½ø³ÌÔËÐÐ»·¾³£¬ÔÊÐí²úÉú core ÎÄ¼þ */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_enable_core</name> <operator>&amp;&amp;</operator> <name>acl_var_trigger_core_limit</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>acl_set_core_limit</name><argument_list>(<argument><expr><name>acl_var_trigger_core_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Run post-jail initialization.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>post_init</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>post_init</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACL_LINUX</name></cpp:ifdef>
	<comment type="block">/* notify master that child started ok */</comment>
	<if_stmt><if>if <condition>(<expr><name>trigger_server_generation</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_trigger_pid</name></expr></argument>,
			<argument><expr><name>trigger_server_generation</name></expr></argument>, <argument><expr><name>ACL_MASTER_STAT_START_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Running as a semi-resident server. Service connection requests.
	 * Terminate when we have serviced a sufficient number of clients,
	 * when no-one has been talking to us for a configurable amount of
	 * time, or when the master process terminated abnormally.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>acl_var_trigger_idle_limit</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>acl_event_request_timer</name><argument_list>(<argument><expr><name>__eventp</name></expr></argument>, <argument><expr><name>trigger_server_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			<argument><expr><operator>(</operator><name>acl_int64</name><operator>)</operator> <name>acl_var_trigger_idle_limit</name> <operator>*</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<comment type="block">/* socket count is same as the listen_fd_count in parent's process */</comment>

	<expr_stmt><expr><name>__stream_array</name> <operator>=</operator> <operator>(</operator><name>ACL_VSTREAM</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>acl_mycalloc</name><argument_list>(
		<argument><expr><name>ACL_MASTER_LISTEN_FD</name> <operator>+</operator> <name>socket_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ACL_VSTREAM</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>ACL_MASTER_LISTEN_FD</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <name>ACL_MASTER_LISTEN_FD</name> <operator>+</operator> <name>socket_count</name></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><name>acl_var_trigger_buf_size</name></expr></argument>,
				<argument><expr><name>acl_var_trigger_rw_timeout</name></expr></argument>, <argument><expr><name>fdtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>stream</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s(%d)-&gt;%s: stream null, fd = %d"</literal></expr></argument>,
				<argument><expr><name>__FILE__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>myname</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_event_enable_listen</name><argument_list>(<argument><expr><name>__eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			<argument><expr><name>__service_accept</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_SOCK</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>acl_vstream_fdopen</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>,
		<argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACL_VSTREAM_TYPE_SOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_event_enable_read</name><argument_list>(<argument><expr><name>__eventp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trigger_server_abort</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_STATUS_FD</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_FLOW_READ</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_close_on_exec</name><argument_list>(<argument><expr><name>ACL_MASTER_FLOW_WRITE</name></expr></argument>, <argument><expr><name>ACL_CLOSE_ON_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>watchdog</name> <operator>=</operator> <call><name>acl_watchdog_create</name><argument_list>(<argument><expr><name>acl_var_trigger_daemon_timeout</name></expr></argument>,
		<argument><expr><operator>(</operator><name>ACL_WATCHDOG_FN</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>acl_server_sighup_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>acl_server_sigterm_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The event loop, at last.
	 */</comment>
	<while>while <condition>(<expr><name>acl_var_trigger_use_limit</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<name>use_count</name> <operator>&lt;</operator> <name>acl_var_trigger_use_limit</name></expr>)</condition> <block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name>__service_lock</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>acl_watchdog_stop</name><argument_list>(<argument><expr><name>watchdog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>acl_myflock</name><argument_list>(<argument><expr><call><name>ACL_VSTREAM_FILE</name><argument_list>(<argument><expr><name>__service_lock</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>ACL_INTERNAL_LOCK</name></expr></argument>, <argument><expr><name>ACL_FLOCK_OP_EXCLUSIVE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

				<expr_stmt><expr><call><name>acl_msg_fatal</name><argument_list>(<argument><expr><literal type="string">"lock error %s"</literal></expr></argument>, <argument><expr><call><name>acl_last_serror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_watchdog_start</name><argument_list>(<argument><expr><name>watchdog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>loop</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><ternary><condition><expr><name>loop</name></expr> ?</condition><then> <expr><call><name>loop</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>acl_event_set_delay_sec</name><argument_list>(<argument><expr><name>__eventp</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>acl_event_loop</name><argument_list>(<argument><expr><name>__eventp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>acl_var_server_gotsighup</name> <operator>&amp;&amp;</operator> <name>__sighup_handler</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>acl_var_server_gotsighup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>__sighup_handler</name><argument_list>(<argument><expr><name>__service_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_trigger_pid</name></expr></argument>,
					<argument><expr><name>trigger_server_generation</name></expr></argument>,
					<argument><expr><name>ACL_MASTER_STAT_SIGHUP_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>acl_master_notify</name><argument_list>(<argument><expr><name>acl_var_trigger_pid</name></expr></argument>,
					<argument><expr><name>trigger_server_generation</name></expr></argument>,
					<argument><expr><name>ACL_MASTER_STAT_SIGHUP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>acl_vstring_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>trigger_server_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_UNIX */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ACL_CLIENT_ONLY */</comment>
</unit>
